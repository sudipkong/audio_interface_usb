
Audio_interface_usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004de0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  08004f78  08004f78  00014f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005368  08005368  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005368  08005368  00015368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005370  08005370  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005370  08005370  00015370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005374  08005374  00015374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005378  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  2000000c  08005384  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000254  08005384  00020254  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a97e  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ef2  00000000  00000000  0002a9fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009a8  00000000  00000000  0002c8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000076a  00000000  00000000  0002d298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016089  00000000  00000000  0002da02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000daad  00000000  00000000  00043a8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087dc3  00000000  00000000  00051538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002884  00000000  00000000  000d92fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  000dbb80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004f60 	.word	0x08004f60

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08004f60 	.word	0x08004f60

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <write_register>:

//(1): Functions definitions
//-------------- Static Functions ---------------//
// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af02      	add	r7, sp, #8
 80004da:	4603      	mov	r3, r0
 80004dc:	6039      	str	r1, [r7, #0]
 80004de:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 80004e0:	4a09      	ldr	r2, [pc, #36]	; (8000508 <write_register+0x34>)
 80004e2:	79fb      	ldrb	r3, [r7, #7]
 80004e4:	7013      	strb	r3, [r2, #0]
	iData[1] = data[0];
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	781a      	ldrb	r2, [r3, #0]
 80004ea:	4b07      	ldr	r3, [pc, #28]	; (8000508 <write_register+0x34>)
 80004ec:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 80004ee:	2364      	movs	r3, #100	; 0x64
 80004f0:	9300      	str	r3, [sp, #0]
 80004f2:	2302      	movs	r3, #2
 80004f4:	4a04      	ldr	r2, [pc, #16]	; (8000508 <write_register+0x34>)
 80004f6:	2194      	movs	r1, #148	; 0x94
 80004f8:	4804      	ldr	r0, [pc, #16]	; (800050c <write_register+0x38>)
 80004fa:	f001 fd7f 	bl	8001ffc <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 80004fe:	bf00      	nop
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	20000028 	.word	0x20000028
 800050c:	2000002c 	.word	0x2000002c

08000510 <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af02      	add	r7, sp, #8
 8000516:	4603      	mov	r3, r0
 8000518:	6039      	str	r1, [r7, #0]
 800051a:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 800051c:	4a0b      	ldr	r2, [pc, #44]	; (800054c <read_register+0x3c>)
 800051e:	79fb      	ldrb	r3, [r7, #7]
 8000520:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 8000522:	2364      	movs	r3, #100	; 0x64
 8000524:	9300      	str	r3, [sp, #0]
 8000526:	2301      	movs	r3, #1
 8000528:	4a08      	ldr	r2, [pc, #32]	; (800054c <read_register+0x3c>)
 800052a:	2194      	movs	r1, #148	; 0x94
 800052c:	4808      	ldr	r0, [pc, #32]	; (8000550 <read_register+0x40>)
 800052e:	f001 fd65 	bl	8001ffc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 8000532:	2364      	movs	r3, #100	; 0x64
 8000534:	9300      	str	r3, [sp, #0]
 8000536:	2301      	movs	r3, #1
 8000538:	683a      	ldr	r2, [r7, #0]
 800053a:	2194      	movs	r1, #148	; 0x94
 800053c:	4804      	ldr	r0, [pc, #16]	; (8000550 <read_register+0x40>)
 800053e:	f001 fe5b 	bl	80021f8 <HAL_I2C_Master_Receive>
}
 8000542:	bf00      	nop
 8000544:	3708      	adds	r7, #8
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	20000028 	.word	0x20000028
 8000550:	2000002c 	.word	0x2000002c

08000554 <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 8000554:	b084      	sub	sp, #16
 8000556:	b580      	push	{r7, lr}
 8000558:	af00      	add	r7, sp, #0
 800055a:	f107 0c08 	add.w	ip, r7, #8
 800055e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000562:	4b81      	ldr	r3, [pc, #516]	; (8000768 <CS43_Init+0x214>)
 8000564:	2200      	movs	r2, #0
 8000566:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 800056a:	4b7f      	ldr	r3, [pc, #508]	; (8000768 <CS43_Init+0x214>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	69da      	ldr	r2, [r3, #28]
 8000570:	4b7d      	ldr	r3, [pc, #500]	; (8000768 <CS43_Init+0x214>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000578:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 800057a:	2201      	movs	r2, #1
 800057c:	2110      	movs	r1, #16
 800057e:	487b      	ldr	r0, [pc, #492]	; (800076c <CS43_Init+0x218>)
 8000580:	f001 fbde 	bl	8001d40 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 8000584:	4b7a      	ldr	r3, [pc, #488]	; (8000770 <CS43_Init+0x21c>)
 8000586:	4618      	mov	r0, r3
 8000588:	f107 0308 	add.w	r3, r7, #8
 800058c:	2254      	movs	r2, #84	; 0x54
 800058e:	4619      	mov	r1, r3
 8000590:	f003 ff9e 	bl	80044d0 <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 8000594:	4b77      	ldr	r3, [pc, #476]	; (8000774 <CS43_Init+0x220>)
 8000596:	2201      	movs	r2, #1
 8000598:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,iData);
 800059a:	4976      	ldr	r1, [pc, #472]	; (8000774 <CS43_Init+0x220>)
 800059c:	2002      	movs	r0, #2
 800059e:	f7ff ff99 	bl	80004d4 <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80005a2:	4b74      	ldr	r3, [pc, #464]	; (8000774 <CS43_Init+0x220>)
 80005a4:	2280      	movs	r2, #128	; 0x80
 80005a6:	705a      	strb	r2, [r3, #1]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80005a8:	4b72      	ldr	r3, [pc, #456]	; (8000774 <CS43_Init+0x220>)
 80005aa:	785b      	ldrb	r3, [r3, #1]
 80005ac:	f043 0320 	orr.w	r3, r3, #32
 80005b0:	b2da      	uxtb	r2, r3
 80005b2:	4b70      	ldr	r3, [pc, #448]	; (8000774 <CS43_Init+0x220>)
 80005b4:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80005b6:	4b6f      	ldr	r3, [pc, #444]	; (8000774 <CS43_Init+0x220>)
 80005b8:	785b      	ldrb	r3, [r3, #1]
 80005ba:	f043 030c 	orr.w	r3, r3, #12
 80005be:	b2da      	uxtb	r2, r3
 80005c0:	4b6c      	ldr	r3, [pc, #432]	; (8000774 <CS43_Init+0x220>)
 80005c2:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80005c4:	4b6b      	ldr	r3, [pc, #428]	; (8000774 <CS43_Init+0x220>)
 80005c6:	785b      	ldrb	r3, [r3, #1]
 80005c8:	f043 0303 	orr.w	r3, r3, #3
 80005cc:	b2da      	uxtb	r2, r3
 80005ce:	4b69      	ldr	r3, [pc, #420]	; (8000774 <CS43_Init+0x220>)
 80005d0:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 80005d2:	4969      	ldr	r1, [pc, #420]	; (8000778 <CS43_Init+0x224>)
 80005d4:	2004      	movs	r0, #4
 80005d6:	f7ff ff7d 	bl	80004d4 <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 80005da:	4b66      	ldr	r3, [pc, #408]	; (8000774 <CS43_Init+0x220>)
 80005dc:	2280      	movs	r2, #128	; 0x80
 80005de:	705a      	strb	r2, [r3, #1]
	write_register(CLOCKING_CONTROL,&iData[1]);
 80005e0:	4965      	ldr	r1, [pc, #404]	; (8000778 <CS43_Init+0x224>)
 80005e2:	2005      	movs	r0, #5
 80005e4:	f7ff ff76 	bl	80004d4 <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 80005e8:	4962      	ldr	r1, [pc, #392]	; (8000774 <CS43_Init+0x220>)
 80005ea:	2006      	movs	r0, #6
 80005ec:	f7ff ff90 	bl	8000510 <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 80005f0:	4b60      	ldr	r3, [pc, #384]	; (8000774 <CS43_Init+0x220>)
 80005f2:	785b      	ldrb	r3, [r3, #1]
 80005f4:	f003 0320 	and.w	r3, r3, #32
 80005f8:	b2da      	uxtb	r2, r3
 80005fa:	4b5e      	ldr	r3, [pc, #376]	; (8000774 <CS43_Init+0x220>)
 80005fc:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 7);  // Slave
 80005fe:	4b5d      	ldr	r3, [pc, #372]	; (8000774 <CS43_Init+0x220>)
 8000600:	785b      	ldrb	r3, [r3, #1]
 8000602:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000606:	b2da      	uxtb	r2, r3
 8000608:	4b5a      	ldr	r3, [pc, #360]	; (8000774 <CS43_Init+0x220>)
 800060a:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 800060c:	4b59      	ldr	r3, [pc, #356]	; (8000774 <CS43_Init+0x220>)
 800060e:	785b      	ldrb	r3, [r3, #1]
 8000610:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000614:	b2da      	uxtb	r2, r3
 8000616:	4b57      	ldr	r3, [pc, #348]	; (8000774 <CS43_Init+0x220>)
 8000618:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 4);  // No DSP mode
 800061a:	4b56      	ldr	r3, [pc, #344]	; (8000774 <CS43_Init+0x220>)
 800061c:	785b      	ldrb	r3, [r3, #1]
 800061e:	f023 0310 	bic.w	r3, r3, #16
 8000622:	b2da      	uxtb	r2, r3
 8000624:	4b53      	ldr	r3, [pc, #332]	; (8000774 <CS43_Init+0x220>)
 8000626:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 8000628:	4b52      	ldr	r3, [pc, #328]	; (8000774 <CS43_Init+0x220>)
 800062a:	785b      	ldrb	r3, [r3, #1]
 800062c:	f023 0304 	bic.w	r3, r3, #4
 8000630:	b2da      	uxtb	r2, r3
 8000632:	4b50      	ldr	r3, [pc, #320]	; (8000774 <CS43_Init+0x220>)
 8000634:	705a      	strb	r2, [r3, #1]
	iData[1] |= (1 << 2);
 8000636:	4b4f      	ldr	r3, [pc, #316]	; (8000774 <CS43_Init+0x220>)
 8000638:	785b      	ldrb	r3, [r3, #1]
 800063a:	f043 0304 	orr.w	r3, r3, #4
 800063e:	b2da      	uxtb	r2, r3
 8000640:	4b4c      	ldr	r3, [pc, #304]	; (8000774 <CS43_Init+0x220>)
 8000642:	705a      	strb	r2, [r3, #1]
	
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 8000644:	4b4b      	ldr	r3, [pc, #300]	; (8000774 <CS43_Init+0x220>)
 8000646:	785b      	ldrb	r3, [r3, #1]
 8000648:	f043 0303 	orr.w	r3, r3, #3
 800064c:	b2da      	uxtb	r2, r3
 800064e:	4b49      	ldr	r3, [pc, #292]	; (8000774 <CS43_Init+0x220>)
 8000650:	705a      	strb	r2, [r3, #1]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 8000652:	4949      	ldr	r1, [pc, #292]	; (8000778 <CS43_Init+0x224>)
 8000654:	2006      	movs	r0, #6
 8000656:	f7ff ff3d 	bl	80004d4 <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 800065a:	4947      	ldr	r1, [pc, #284]	; (8000778 <CS43_Init+0x224>)
 800065c:	2008      	movs	r0, #8
 800065e:	f7ff ff57 	bl	8000510 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8000662:	4b44      	ldr	r3, [pc, #272]	; (8000774 <CS43_Init+0x220>)
 8000664:	785b      	ldrb	r3, [r3, #1]
 8000666:	f023 030f 	bic.w	r3, r3, #15
 800066a:	b2da      	uxtb	r2, r3
 800066c:	4b41      	ldr	r3, [pc, #260]	; (8000774 <CS43_Init+0x220>)
 800066e:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 8000670:	4b40      	ldr	r3, [pc, #256]	; (8000774 <CS43_Init+0x220>)
 8000672:	785b      	ldrb	r3, [r3, #1]
 8000674:	f043 0301 	orr.w	r3, r3, #1
 8000678:	b2da      	uxtb	r2, r3
 800067a:	4b3e      	ldr	r3, [pc, #248]	; (8000774 <CS43_Init+0x220>)
 800067c:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_A,&iData[1]);
 800067e:	493e      	ldr	r1, [pc, #248]	; (8000778 <CS43_Init+0x224>)
 8000680:	2008      	movs	r0, #8
 8000682:	f7ff ff27 	bl	80004d4 <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 8000686:	493c      	ldr	r1, [pc, #240]	; (8000778 <CS43_Init+0x224>)
 8000688:	2009      	movs	r0, #9
 800068a:	f7ff ff41 	bl	8000510 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 800068e:	4b39      	ldr	r3, [pc, #228]	; (8000774 <CS43_Init+0x220>)
 8000690:	785b      	ldrb	r3, [r3, #1]
 8000692:	f023 030f 	bic.w	r3, r3, #15
 8000696:	b2da      	uxtb	r2, r3
 8000698:	4b36      	ldr	r3, [pc, #216]	; (8000774 <CS43_Init+0x220>)
 800069a:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 800069c:	4b35      	ldr	r3, [pc, #212]	; (8000774 <CS43_Init+0x220>)
 800069e:	785b      	ldrb	r3, [r3, #1]
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	4b33      	ldr	r3, [pc, #204]	; (8000774 <CS43_Init+0x220>)
 80006a8:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_B,&iData[1]);
 80006aa:	4933      	ldr	r1, [pc, #204]	; (8000778 <CS43_Init+0x224>)
 80006ac:	2009      	movs	r0, #9
 80006ae:	f7ff ff11 	bl	80004d4 <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 80006b2:	4931      	ldr	r1, [pc, #196]	; (8000778 <CS43_Init+0x224>)
 80006b4:	200e      	movs	r0, #14
 80006b6:	f7ff ff2b 	bl	8000510 <read_register>
	if(outputMode == MODE_ANALOG)
 80006ba:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80006be:	2b03      	cmp	r3, #3
 80006c0:	d123      	bne.n	800070a <CS43_Init+0x1b6>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 80006c2:	4b2c      	ldr	r3, [pc, #176]	; (8000774 <CS43_Init+0x220>)
 80006c4:	785b      	ldrb	r3, [r3, #1]
 80006c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	4b29      	ldr	r3, [pc, #164]	; (8000774 <CS43_Init+0x220>)
 80006ce:	705a      	strb	r2, [r3, #1]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 80006d0:	4b28      	ldr	r3, [pc, #160]	; (8000774 <CS43_Init+0x220>)
 80006d2:	785b      	ldrb	r3, [r3, #1]
 80006d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006d8:	b2da      	uxtb	r2, r3
 80006da:	4b26      	ldr	r3, [pc, #152]	; (8000774 <CS43_Init+0x220>)
 80006dc:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 80006de:	4b25      	ldr	r3, [pc, #148]	; (8000774 <CS43_Init+0x220>)
 80006e0:	785b      	ldrb	r3, [r3, #1]
 80006e2:	f023 0320 	bic.w	r3, r3, #32
 80006e6:	b2da      	uxtb	r2, r3
 80006e8:	4b22      	ldr	r3, [pc, #136]	; (8000774 <CS43_Init+0x220>)
 80006ea:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 80006ec:	4b21      	ldr	r3, [pc, #132]	; (8000774 <CS43_Init+0x220>)
 80006ee:	785b      	ldrb	r3, [r3, #1]
 80006f0:	f023 0310 	bic.w	r3, r3, #16
 80006f4:	b2da      	uxtb	r2, r3
 80006f6:	4b1f      	ldr	r3, [pc, #124]	; (8000774 <CS43_Init+0x220>)
 80006f8:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 80006fa:	4b1e      	ldr	r3, [pc, #120]	; (8000774 <CS43_Init+0x220>)
 80006fc:	785b      	ldrb	r3, [r3, #1]
 80006fe:	f023 0308 	bic.w	r3, r3, #8
 8000702:	b2da      	uxtb	r2, r3
 8000704:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <CS43_Init+0x220>)
 8000706:	705a      	strb	r2, [r3, #1]
 8000708:	e006      	b.n	8000718 <CS43_Init+0x1c4>
	}
	else if(outputMode == MODE_I2S)
 800070a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800070e:	2b00      	cmp	r3, #0
 8000710:	d102      	bne.n	8000718 <CS43_Init+0x1c4>
	{
		iData[1] = 0x02;
 8000712:	4b18      	ldr	r3, [pc, #96]	; (8000774 <CS43_Init+0x220>)
 8000714:	2202      	movs	r2, #2
 8000716:	705a      	strb	r2, [r3, #1]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 8000718:	4917      	ldr	r1, [pc, #92]	; (8000778 <CS43_Init+0x224>)
 800071a:	200e      	movs	r0, #14
 800071c:	f7ff feda 	bl	80004d4 <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 8000720:	4915      	ldr	r1, [pc, #84]	; (8000778 <CS43_Init+0x224>)
 8000722:	200f      	movs	r0, #15
 8000724:	f7ff fef4 	bl	8000510 <read_register>
	iData[1] = 0x00;
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <CS43_Init+0x220>)
 800072a:	2200      	movs	r2, #0
 800072c:	705a      	strb	r2, [r3, #1]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 800072e:	4912      	ldr	r1, [pc, #72]	; (8000778 <CS43_Init+0x224>)
 8000730:	200f      	movs	r0, #15
 8000732:	f7ff fecf 	bl	80004d4 <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0x00;
 8000736:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <CS43_Init+0x220>)
 8000738:	2200      	movs	r2, #0
 800073a:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 800073c:	490e      	ldr	r1, [pc, #56]	; (8000778 <CS43_Init+0x224>)
 800073e:	2014      	movs	r0, #20
 8000740:	f7ff fec8 	bl	80004d4 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8000744:	490c      	ldr	r1, [pc, #48]	; (8000778 <CS43_Init+0x224>)
 8000746:	2015      	movs	r0, #21
 8000748:	f7ff fec4 	bl	80004d4 <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 800074c:	490a      	ldr	r1, [pc, #40]	; (8000778 <CS43_Init+0x224>)
 800074e:	201a      	movs	r0, #26
 8000750:	f7ff fec0 	bl	80004d4 <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 8000754:	4908      	ldr	r1, [pc, #32]	; (8000778 <CS43_Init+0x224>)
 8000756:	201b      	movs	r0, #27
 8000758:	f7ff febc 	bl	80004d4 <write_register>
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr
 8000768:	200000d4 	.word	0x200000d4
 800076c:	40020c00 	.word	0x40020c00
 8000770:	2000002c 	.word	0x2000002c
 8000774:	20000028 	.word	0x20000028
 8000778:	20000029 	.word	0x20000029

0800077c <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]
	switch (side)
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	2b03      	cmp	r3, #3
 800078a:	d837      	bhi.n	80007fc <CS43_Enable_RightLeft+0x80>
 800078c:	a201      	add	r2, pc, #4	; (adr r2, 8000794 <CS43_Enable_RightLeft+0x18>)
 800078e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000792:	bf00      	nop
 8000794:	080007a5 	.word	0x080007a5
 8000798:	080007bb 	.word	0x080007bb
 800079c:	080007d1 	.word	0x080007d1
 80007a0:	080007e7 	.word	0x080007e7
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007a4:	4b21      	ldr	r3, [pc, #132]	; (800082c <CS43_Enable_RightLeft+0xb0>)
 80007a6:	22c0      	movs	r2, #192	; 0xc0
 80007a8:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007aa:	4b20      	ldr	r3, [pc, #128]	; (800082c <CS43_Enable_RightLeft+0xb0>)
 80007ac:	785b      	ldrb	r3, [r3, #1]
 80007ae:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80007b2:	b2da      	uxtb	r2, r3
 80007b4:	4b1d      	ldr	r3, [pc, #116]	; (800082c <CS43_Enable_RightLeft+0xb0>)
 80007b6:	705a      	strb	r2, [r3, #1]
			break;
 80007b8:	e021      	b.n	80007fe <CS43_Enable_RightLeft+0x82>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007ba:	4b1c      	ldr	r3, [pc, #112]	; (800082c <CS43_Enable_RightLeft+0xb0>)
 80007bc:	2280      	movs	r2, #128	; 0x80
 80007be:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007c0:	4b1a      	ldr	r3, [pc, #104]	; (800082c <CS43_Enable_RightLeft+0xb0>)
 80007c2:	785b      	ldrb	r3, [r3, #1]
 80007c4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80007c8:	b2da      	uxtb	r2, r3
 80007ca:	4b18      	ldr	r3, [pc, #96]	; (800082c <CS43_Enable_RightLeft+0xb0>)
 80007cc:	705a      	strb	r2, [r3, #1]
			break;
 80007ce:	e016      	b.n	80007fe <CS43_Enable_RightLeft+0x82>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007d0:	4b16      	ldr	r3, [pc, #88]	; (800082c <CS43_Enable_RightLeft+0xb0>)
 80007d2:	22c0      	movs	r2, #192	; 0xc0
 80007d4:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007d6:	4b15      	ldr	r3, [pc, #84]	; (800082c <CS43_Enable_RightLeft+0xb0>)
 80007d8:	785b      	ldrb	r3, [r3, #1]
 80007da:	f043 0320 	orr.w	r3, r3, #32
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	4b12      	ldr	r3, [pc, #72]	; (800082c <CS43_Enable_RightLeft+0xb0>)
 80007e2:	705a      	strb	r2, [r3, #1]
			break;
 80007e4:	e00b      	b.n	80007fe <CS43_Enable_RightLeft+0x82>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007e6:	4b11      	ldr	r3, [pc, #68]	; (800082c <CS43_Enable_RightLeft+0xb0>)
 80007e8:	2280      	movs	r2, #128	; 0x80
 80007ea:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007ec:	4b0f      	ldr	r3, [pc, #60]	; (800082c <CS43_Enable_RightLeft+0xb0>)
 80007ee:	785b      	ldrb	r3, [r3, #1]
 80007f0:	f043 0320 	orr.w	r3, r3, #32
 80007f4:	b2da      	uxtb	r2, r3
 80007f6:	4b0d      	ldr	r3, [pc, #52]	; (800082c <CS43_Enable_RightLeft+0xb0>)
 80007f8:	705a      	strb	r2, [r3, #1]
			break;
 80007fa:	e000      	b.n	80007fe <CS43_Enable_RightLeft+0x82>
		default:
			break;
 80007fc:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80007fe:	4b0b      	ldr	r3, [pc, #44]	; (800082c <CS43_Enable_RightLeft+0xb0>)
 8000800:	785b      	ldrb	r3, [r3, #1]
 8000802:	f043 030c 	orr.w	r3, r3, #12
 8000806:	b2da      	uxtb	r2, r3
 8000808:	4b08      	ldr	r3, [pc, #32]	; (800082c <CS43_Enable_RightLeft+0xb0>)
 800080a:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 800080c:	4b07      	ldr	r3, [pc, #28]	; (800082c <CS43_Enable_RightLeft+0xb0>)
 800080e:	785b      	ldrb	r3, [r3, #1]
 8000810:	f043 0303 	orr.w	r3, r3, #3
 8000814:	b2da      	uxtb	r2, r3
 8000816:	4b05      	ldr	r3, [pc, #20]	; (800082c <CS43_Enable_RightLeft+0xb0>)
 8000818:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 800081a:	4905      	ldr	r1, [pc, #20]	; (8000830 <CS43_Enable_RightLeft+0xb4>)
 800081c:	2004      	movs	r0, #4
 800081e:	f7ff fe59 	bl	80004d4 <write_register>
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000028 	.word	0x20000028
 8000830:	20000029 	.word	0x20000029

08000834 <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	71fb      	strb	r3, [r7, #7]
	int8_t tempVol = volume - 50;
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	3b32      	subs	r3, #50	; 0x32
 8000842:	b2db      	uxtb	r3, r3
 8000844:	73fb      	strb	r3, [r7, #15]
	tempVol = tempVol*(127/50);
 8000846:	7bfb      	ldrb	r3, [r7, #15]
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	b2db      	uxtb	r3, r3
 800084c:	73fb      	strb	r3, [r7, #15]
	uint8_t myVolume =  (uint8_t )tempVol;
 800084e:	7bfb      	ldrb	r3, [r7, #15]
 8000850:	73bb      	strb	r3, [r7, #14]
	iData[1] = myVolume;
 8000852:	4a16      	ldr	r2, [pc, #88]	; (80008ac <CS43_SetVolume+0x78>)
 8000854:	7bbb      	ldrb	r3, [r7, #14]
 8000856:	7053      	strb	r3, [r2, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8000858:	4915      	ldr	r1, [pc, #84]	; (80008b0 <CS43_SetVolume+0x7c>)
 800085a:	2014      	movs	r0, #20
 800085c:	f7ff fe3a 	bl	80004d4 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8000860:	4913      	ldr	r1, [pc, #76]	; (80008b0 <CS43_SetVolume+0x7c>)
 8000862:	2015      	movs	r0, #21
 8000864:	f7ff fe36 	bl	80004d4 <write_register>
	
	iData[1] = VOLUME_CONVERT_D(volume);
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	2b64      	cmp	r3, #100	; 0x64
 800086c:	d80e      	bhi.n	800088c <CS43_SetVolume+0x58>
 800086e:	79fa      	ldrb	r2, [r7, #7]
 8000870:	4613      	mov	r3, r2
 8000872:	005b      	lsls	r3, r3, #1
 8000874:	4413      	add	r3, r2
 8000876:	011b      	lsls	r3, r3, #4
 8000878:	4a0e      	ldr	r2, [pc, #56]	; (80008b4 <CS43_SetVolume+0x80>)
 800087a:	fb82 1203 	smull	r1, r2, r2, r3
 800087e:	1152      	asrs	r2, r2, #5
 8000880:	17db      	asrs	r3, r3, #31
 8000882:	1ad3      	subs	r3, r2, r3
 8000884:	b2db      	uxtb	r3, r3
 8000886:	3b18      	subs	r3, #24
 8000888:	b2db      	uxtb	r3, r3
 800088a:	e000      	b.n	800088e <CS43_SetVolume+0x5a>
 800088c:	2318      	movs	r3, #24
 800088e:	4a07      	ldr	r2, [pc, #28]	; (80008ac <CS43_SetVolume+0x78>)
 8000890:	7053      	strb	r3, [r2, #1]
	
	/* Set the Master volume */ 
	write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 8000892:	4907      	ldr	r1, [pc, #28]	; (80008b0 <CS43_SetVolume+0x7c>)
 8000894:	2020      	movs	r0, #32
 8000896:	f7ff fe1d 	bl	80004d4 <write_register>
	write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 800089a:	4905      	ldr	r1, [pc, #20]	; (80008b0 <CS43_SetVolume+0x7c>)
 800089c:	2021      	movs	r0, #33	; 0x21
 800089e:	f7ff fe19 	bl	80004d4 <write_register>
}
 80008a2:	bf00      	nop
 80008a4:	3710      	adds	r7, #16
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000028 	.word	0x20000028
 80008b0:	20000029 	.word	0x20000029
 80008b4:	51eb851f 	.word	0x51eb851f

080008b8 <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 80008bc:	4b1d      	ldr	r3, [pc, #116]	; (8000934 <CS43_Start+0x7c>)
 80008be:	2299      	movs	r2, #153	; 0x99
 80008c0:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 80008c2:	491d      	ldr	r1, [pc, #116]	; (8000938 <CS43_Start+0x80>)
 80008c4:	2000      	movs	r0, #0
 80008c6:	f7ff fe05 	bl	80004d4 <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 80008ca:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <CS43_Start+0x7c>)
 80008cc:	2280      	movs	r2, #128	; 0x80
 80008ce:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_47,&iData[1]);
 80008d0:	4919      	ldr	r1, [pc, #100]	; (8000938 <CS43_Start+0x80>)
 80008d2:	2047      	movs	r0, #71	; 0x47
 80008d4:	f7ff fdfe 	bl	80004d4 <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008d8:	4917      	ldr	r1, [pc, #92]	; (8000938 <CS43_Start+0x80>)
 80008da:	2032      	movs	r0, #50	; 0x32
 80008dc:	f7ff fe18 	bl	8000510 <read_register>
	iData[1] |= 0x80;
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <CS43_Start+0x7c>)
 80008e2:	785b      	ldrb	r3, [r3, #1]
 80008e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008e8:	b2da      	uxtb	r2, r3
 80008ea:	4b12      	ldr	r3, [pc, #72]	; (8000934 <CS43_Start+0x7c>)
 80008ec:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 80008ee:	4912      	ldr	r1, [pc, #72]	; (8000938 <CS43_Start+0x80>)
 80008f0:	2032      	movs	r0, #50	; 0x32
 80008f2:	f7ff fdef 	bl	80004d4 <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008f6:	4910      	ldr	r1, [pc, #64]	; (8000938 <CS43_Start+0x80>)
 80008f8:	2032      	movs	r0, #50	; 0x32
 80008fa:	f7ff fe09 	bl	8000510 <read_register>
	iData[1] &= ~(0x80);
 80008fe:	4b0d      	ldr	r3, [pc, #52]	; (8000934 <CS43_Start+0x7c>)
 8000900:	785b      	ldrb	r3, [r3, #1]
 8000902:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000906:	b2da      	uxtb	r2, r3
 8000908:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <CS43_Start+0x7c>)
 800090a:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 800090c:	490a      	ldr	r1, [pc, #40]	; (8000938 <CS43_Start+0x80>)
 800090e:	2032      	movs	r0, #50	; 0x32
 8000910:	f7ff fde0 	bl	80004d4 <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 8000914:	4b07      	ldr	r3, [pc, #28]	; (8000934 <CS43_Start+0x7c>)
 8000916:	2200      	movs	r2, #0
 8000918:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 800091a:	4907      	ldr	r1, [pc, #28]	; (8000938 <CS43_Start+0x80>)
 800091c:	2000      	movs	r0, #0
 800091e:	f7ff fdd9 	bl	80004d4 <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 8000922:	4b04      	ldr	r3, [pc, #16]	; (8000934 <CS43_Start+0x7c>)
 8000924:	229e      	movs	r2, #158	; 0x9e
 8000926:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,&iData[1]);
 8000928:	4903      	ldr	r1, [pc, #12]	; (8000938 <CS43_Start+0x80>)
 800092a:	2002      	movs	r0, #2
 800092c:	f7ff fdd2 	bl	80004d4 <write_register>
}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20000028 	.word	0x20000028
 8000938:	20000029 	.word	0x20000029

0800093c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800093c:	b590      	push	{r4, r7, lr}
 800093e:	b095      	sub	sp, #84	; 0x54
 8000940:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE BEGIN 1 */
	sample_dt = F_OUT/F_SAMPLE;
 8000942:	4b3c      	ldr	r3, [pc, #240]	; (8000a34 <main+0xf8>)
 8000944:	f04f 5274 	mov.w	r2, #1023410176	; 0x3d000000
 8000948:	601a      	str	r2, [r3, #0]
	sample_N = F_SAMPLE/F_OUT;
 800094a:	4b3b      	ldr	r3, [pc, #236]	; (8000a38 <main+0xfc>)
 800094c:	2220      	movs	r2, #32
 800094e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000950:	f000 fb7e 	bl	8001050 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000954:	f000 f87e 	bl	8000a54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000958:	f000 f960 	bl	8000c1c <MX_GPIO_Init>
  MX_DMA_Init();
 800095c:	f000 f93e 	bl	8000bdc <MX_DMA_Init>
  MX_I2C1_Init();
 8000960:	f000 f8e0 	bl	8000b24 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000964:	f000 f90c 	bl	8000b80 <MX_I2S3_Init>
  /* USER CODE BEGIN 2 */
	CS43_Init(hi2c1, MODE_I2S);
 8000968:	4c34      	ldr	r4, [pc, #208]	; (8000a3c <main+0x100>)
 800096a:	2300      	movs	r3, #0
 800096c:	9311      	str	r3, [sp, #68]	; 0x44
 800096e:	4668      	mov	r0, sp
 8000970:	f104 0310 	add.w	r3, r4, #16
 8000974:	2244      	movs	r2, #68	; 0x44
 8000976:	4619      	mov	r1, r3
 8000978:	f003 fdaa 	bl	80044d0 <memcpy>
 800097c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000980:	f7ff fde8 	bl	8000554 <CS43_Init>
	CS43_SetVolume(20); //0 - 100,, 40
 8000984:	2014      	movs	r0, #20
 8000986:	f7ff ff55 	bl	8000834 <CS43_SetVolume>
	CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 800098a:	2003      	movs	r0, #3
 800098c:	f7ff fef6 	bl	800077c <CS43_Enable_RightLeft>
	CS43_Start();
 8000990:	f7ff ff92 	bl	80008b8 <CS43_Start>
//Build Sine wave
	for(uint16_t i=0; i<sample_N; i++)
 8000994:	2300      	movs	r3, #0
 8000996:	80fb      	strh	r3, [r7, #6]
 8000998:	e03d      	b.n	8000a16 <main+0xda>
	{
		mySinVal = sinf(i*2*PI*sample_dt);
 800099a:	88fb      	ldrh	r3, [r7, #6]
 800099c:	005b      	lsls	r3, r3, #1
 800099e:	ee07 3a90 	vmov	s15, r3
 80009a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009a6:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8000a40 <main+0x104>
 80009aa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80009ae:	4b21      	ldr	r3, [pc, #132]	; (8000a34 <main+0xf8>)
 80009b0:	edd3 7a00 	vldr	s15, [r3]
 80009b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009b8:	eeb0 0a67 	vmov.f32	s0, s15
 80009bc:	f003 fd96 	bl	80044ec <sinf>
 80009c0:	eef0 7a40 	vmov.f32	s15, s0
 80009c4:	4b1f      	ldr	r3, [pc, #124]	; (8000a44 <main+0x108>)
 80009c6:	edc3 7a00 	vstr	s15, [r3]
		dataI2S[i*2] = (mySinVal )*8000;    //Right data (0 2 4 6 8 10 12)
 80009ca:	4b1e      	ldr	r3, [pc, #120]	; (8000a44 <main+0x108>)
 80009cc:	edd3 7a00 	vldr	s15, [r3]
 80009d0:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8000a48 <main+0x10c>
 80009d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009d8:	88fb      	ldrh	r3, [r7, #6]
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009e0:	ee17 2a90 	vmov	r2, s15
 80009e4:	b211      	sxth	r1, r2
 80009e6:	4a19      	ldr	r2, [pc, #100]	; (8000a4c <main+0x110>)
 80009e8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		dataI2S[i*2 + 1] =(mySinVal )*8000; //Left data  (1 3 5 7 9 11 13)
 80009ec:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <main+0x108>)
 80009ee:	edd3 7a00 	vldr	s15, [r3]
 80009f2:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000a48 <main+0x10c>
 80009f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009fa:	88fb      	ldrh	r3, [r7, #6]
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	3301      	adds	r3, #1
 8000a00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a04:	ee17 2a90 	vmov	r2, s15
 8000a08:	b211      	sxth	r1, r2
 8000a0a:	4a10      	ldr	r2, [pc, #64]	; (8000a4c <main+0x110>)
 8000a0c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint16_t i=0; i<sample_N; i++)
 8000a10:	88fb      	ldrh	r3, [r7, #6]
 8000a12:	3301      	adds	r3, #1
 8000a14:	80fb      	strh	r3, [r7, #6]
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <main+0xfc>)
 8000a18:	881b      	ldrh	r3, [r3, #0]
 8000a1a:	88fa      	ldrh	r2, [r7, #6]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d3bc      	bcc.n	800099a <main+0x5e>
	}
	
	HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)dataI2S, sample_N*2);
 8000a20:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <main+0xfc>)
 8000a22:	881b      	ldrh	r3, [r3, #0]
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	b29b      	uxth	r3, r3
 8000a28:	461a      	mov	r2, r3
 8000a2a:	4908      	ldr	r1, [pc, #32]	; (8000a4c <main+0x110>)
 8000a2c:	4808      	ldr	r0, [pc, #32]	; (8000a50 <main+0x114>)
 8000a2e:	f002 fadb 	bl	8002fe8 <HAL_I2S_Transmit_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a32:	e7fe      	b.n	8000a32 <main+0xf6>
 8000a34:	20000180 	.word	0x20000180
 8000a38:	20000184 	.word	0x20000184
 8000a3c:	20000080 	.word	0x20000080
 8000a40:	40490fd0 	.word	0x40490fd0
 8000a44:	2000017c 	.word	0x2000017c
 8000a48:	45fa0000 	.word	0x45fa0000
 8000a4c:	20000188 	.word	0x20000188
 8000a50:	200000d4 	.word	0x200000d4

08000a54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b094      	sub	sp, #80	; 0x50
 8000a58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a5a:	f107 0320 	add.w	r3, r7, #32
 8000a5e:	2230      	movs	r2, #48	; 0x30
 8000a60:	2100      	movs	r1, #0
 8000a62:	4618      	mov	r0, r3
 8000a64:	f003 fd08 	bl	8004478 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a68:	f107 030c 	add.w	r3, r7, #12
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60bb      	str	r3, [r7, #8]
 8000a7c:	4b27      	ldr	r3, [pc, #156]	; (8000b1c <SystemClock_Config+0xc8>)
 8000a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a80:	4a26      	ldr	r2, [pc, #152]	; (8000b1c <SystemClock_Config+0xc8>)
 8000a82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a86:	6413      	str	r3, [r2, #64]	; 0x40
 8000a88:	4b24      	ldr	r3, [pc, #144]	; (8000b1c <SystemClock_Config+0xc8>)
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a94:	2300      	movs	r3, #0
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	4b21      	ldr	r3, [pc, #132]	; (8000b20 <SystemClock_Config+0xcc>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a20      	ldr	r2, [pc, #128]	; (8000b20 <SystemClock_Config+0xcc>)
 8000a9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000aa2:	6013      	str	r3, [r2, #0]
 8000aa4:	4b1e      	ldr	r3, [pc, #120]	; (8000b20 <SystemClock_Config+0xcc>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ab8:	2310      	movs	r3, #16
 8000aba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000abc:	2302      	movs	r3, #2
 8000abe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ac4:	2308      	movs	r3, #8
 8000ac6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000ac8:	2364      	movs	r3, #100	; 0x64
 8000aca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000acc:	2302      	movs	r3, #2
 8000ace:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000ad0:	2308      	movs	r3, #8
 8000ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad4:	f107 0320 	add.w	r3, r7, #32
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f002 fef7 	bl	80038cc <HAL_RCC_OscConfig>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ae4:	f000 f8fa 	bl	8000cdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae8:	230f      	movs	r3, #15
 8000aea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aec:	2302      	movs	r3, #2
 8000aee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af0:	2300      	movs	r3, #0
 8000af2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000af4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000afe:	f107 030c 	add.w	r3, r7, #12
 8000b02:	2103      	movs	r1, #3
 8000b04:	4618      	mov	r0, r3
 8000b06:	f003 f959 	bl	8003dbc <HAL_RCC_ClockConfig>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b10:	f000 f8e4 	bl	8000cdc <Error_Handler>
  }
}
 8000b14:	bf00      	nop
 8000b16:	3750      	adds	r7, #80	; 0x50
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40007000 	.word	0x40007000

08000b24 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b28:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <MX_I2C1_Init+0x50>)
 8000b2a:	4a13      	ldr	r2, [pc, #76]	; (8000b78 <MX_I2C1_Init+0x54>)
 8000b2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b2e:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <MX_I2C1_Init+0x50>)
 8000b30:	4a12      	ldr	r2, [pc, #72]	; (8000b7c <MX_I2C1_Init+0x58>)
 8000b32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b34:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <MX_I2C1_Init+0x50>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <MX_I2C1_Init+0x50>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b40:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <MX_I2C1_Init+0x50>)
 8000b42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b46:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b48:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <MX_I2C1_Init+0x50>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b4e:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <MX_I2C1_Init+0x50>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b54:	4b07      	ldr	r3, [pc, #28]	; (8000b74 <MX_I2C1_Init+0x50>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b5a:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <MX_I2C1_Init+0x50>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b60:	4804      	ldr	r0, [pc, #16]	; (8000b74 <MX_I2C1_Init+0x50>)
 8000b62:	f001 f907 	bl	8001d74 <HAL_I2C_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b6c:	f000 f8b6 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000080 	.word	0x20000080
 8000b78:	40005400 	.word	0x40005400
 8000b7c:	000186a0 	.word	0x000186a0

08000b80 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000b84:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <MX_I2S3_Init+0x54>)
 8000b86:	4a14      	ldr	r2, [pc, #80]	; (8000bd8 <MX_I2S3_Init+0x58>)
 8000b88:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000b8a:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <MX_I2S3_Init+0x54>)
 8000b8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b90:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <MX_I2S3_Init+0x54>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000b98:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <MX_I2S3_Init+0x54>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000b9e:	4b0d      	ldr	r3, [pc, #52]	; (8000bd4 <MX_I2S3_Init+0x54>)
 8000ba0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ba4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <MX_I2S3_Init+0x54>)
 8000ba8:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000bac:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <MX_I2S3_Init+0x54>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000bb4:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <MX_I2S3_Init+0x54>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <MX_I2S3_Init+0x54>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000bc0:	4804      	ldr	r0, [pc, #16]	; (8000bd4 <MX_I2S3_Init+0x54>)
 8000bc2:	f002 f8d1 	bl	8002d68 <HAL_I2S_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8000bcc:	f000 f886 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	200000d4 	.word	0x200000d4
 8000bd8:	40003c00 	.word	0x40003c00

08000bdc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	607b      	str	r3, [r7, #4]
 8000be6:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <MX_DMA_Init+0x3c>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4a0b      	ldr	r2, [pc, #44]	; (8000c18 <MX_DMA_Init+0x3c>)
 8000bec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <MX_DMA_Init+0x3c>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2100      	movs	r1, #0
 8000c02:	2010      	movs	r0, #16
 8000c04:	f000 fb71 	bl	80012ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000c08:	2010      	movs	r0, #16
 8000c0a:	f000 fb8a 	bl	8001322 <HAL_NVIC_EnableIRQ>

}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40023800 	.word	0x40023800

08000c1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08a      	sub	sp, #40	; 0x28
 8000c20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	60da      	str	r2, [r3, #12]
 8000c30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	613b      	str	r3, [r7, #16]
 8000c36:	4b27      	ldr	r3, [pc, #156]	; (8000cd4 <MX_GPIO_Init+0xb8>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a26      	ldr	r2, [pc, #152]	; (8000cd4 <MX_GPIO_Init+0xb8>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b24      	ldr	r3, [pc, #144]	; (8000cd4 <MX_GPIO_Init+0xb8>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	4b20      	ldr	r3, [pc, #128]	; (8000cd4 <MX_GPIO_Init+0xb8>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a1f      	ldr	r2, [pc, #124]	; (8000cd4 <MX_GPIO_Init+0xb8>)
 8000c58:	f043 0308 	orr.w	r3, r3, #8
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b1d      	ldr	r3, [pc, #116]	; (8000cd4 <MX_GPIO_Init+0xb8>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0308 	and.w	r3, r3, #8
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60bb      	str	r3, [r7, #8]
 8000c6e:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <MX_GPIO_Init+0xb8>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a18      	ldr	r2, [pc, #96]	; (8000cd4 <MX_GPIO_Init+0xb8>)
 8000c74:	f043 0304 	orr.w	r3, r3, #4
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b16      	ldr	r3, [pc, #88]	; (8000cd4 <MX_GPIO_Init+0xb8>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0304 	and.w	r3, r3, #4
 8000c82:	60bb      	str	r3, [r7, #8]
 8000c84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <MX_GPIO_Init+0xb8>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a11      	ldr	r2, [pc, #68]	; (8000cd4 <MX_GPIO_Init+0xb8>)
 8000c90:	f043 0302 	orr.w	r3, r3, #2
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <MX_GPIO_Init+0xb8>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0302 	and.w	r3, r3, #2
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000ca8:	480b      	ldr	r0, [pc, #44]	; (8000cd8 <MX_GPIO_Init+0xbc>)
 8000caa:	f001 f849 	bl	8001d40 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000cae:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000cb2:	617b      	str	r3, [r7, #20]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4804      	ldr	r0, [pc, #16]	; (8000cd8 <MX_GPIO_Init+0xbc>)
 8000cc8:	f000 feb6 	bl	8001a38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ccc:	bf00      	nop
 8000cce:	3728      	adds	r7, #40	; 0x28
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	40020c00 	.word	0x40020c00

08000cdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce0:	b672      	cpsid	i
}
 8000ce2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <Error_Handler+0x8>
	...

08000ce8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	607b      	str	r3, [r7, #4]
 8000cf2:	4b10      	ldr	r3, [pc, #64]	; (8000d34 <HAL_MspInit+0x4c>)
 8000cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf6:	4a0f      	ldr	r2, [pc, #60]	; (8000d34 <HAL_MspInit+0x4c>)
 8000cf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cfc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cfe:	4b0d      	ldr	r3, [pc, #52]	; (8000d34 <HAL_MspInit+0x4c>)
 8000d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	603b      	str	r3, [r7, #0]
 8000d0e:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <HAL_MspInit+0x4c>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	4a08      	ldr	r2, [pc, #32]	; (8000d34 <HAL_MspInit+0x4c>)
 8000d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d18:	6413      	str	r3, [r2, #64]	; 0x40
 8000d1a:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <HAL_MspInit+0x4c>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d22:	603b      	str	r3, [r7, #0]
 8000d24:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d26:	2007      	movs	r0, #7
 8000d28:	f000 fad4 	bl	80012d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d2c:	bf00      	nop
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40023800 	.word	0x40023800

08000d38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08a      	sub	sp, #40	; 0x28
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a19      	ldr	r2, [pc, #100]	; (8000dbc <HAL_I2C_MspInit+0x84>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d12c      	bne.n	8000db4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	613b      	str	r3, [r7, #16]
 8000d5e:	4b18      	ldr	r3, [pc, #96]	; (8000dc0 <HAL_I2C_MspInit+0x88>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	4a17      	ldr	r2, [pc, #92]	; (8000dc0 <HAL_I2C_MspInit+0x88>)
 8000d64:	f043 0302 	orr.w	r3, r3, #2
 8000d68:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6a:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <HAL_I2C_MspInit+0x88>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	f003 0302 	and.w	r3, r3, #2
 8000d72:	613b      	str	r3, [r7, #16]
 8000d74:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000d76:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d7c:	2312      	movs	r3, #18
 8000d7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d80:	2301      	movs	r3, #1
 8000d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d84:	2300      	movs	r3, #0
 8000d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d88:	2304      	movs	r3, #4
 8000d8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	4619      	mov	r1, r3
 8000d92:	480c      	ldr	r0, [pc, #48]	; (8000dc4 <HAL_I2C_MspInit+0x8c>)
 8000d94:	f000 fe50 	bl	8001a38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <HAL_I2C_MspInit+0x88>)
 8000d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da0:	4a07      	ldr	r2, [pc, #28]	; (8000dc0 <HAL_I2C_MspInit+0x88>)
 8000da2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000da6:	6413      	str	r3, [r2, #64]	; 0x40
 8000da8:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <HAL_I2C_MspInit+0x88>)
 8000daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000db4:	bf00      	nop
 8000db6:	3728      	adds	r7, #40	; 0x28
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40005400 	.word	0x40005400
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40020400 	.word	0x40020400

08000dc8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b090      	sub	sp, #64	; 0x40
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
 8000df0:	615a      	str	r2, [r3, #20]
  if(hi2s->Instance==SPI3)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a53      	ldr	r2, [pc, #332]	; (8000f44 <HAL_I2S_MspInit+0x17c>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	f040 809e 	bne.w	8000f3a <HAL_I2S_MspInit+0x172>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8000e02:	2364      	movs	r3, #100	; 0x64
 8000e04:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 8000e06:	2308      	movs	r3, #8
 8000e08:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e0e:	f107 0314 	add.w	r3, r7, #20
 8000e12:	4618      	mov	r0, r3
 8000e14:	f003 f9de 	bl	80041d4 <HAL_RCCEx_PeriphCLKConfig>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <HAL_I2S_MspInit+0x5a>
    {
      Error_Handler();
 8000e1e:	f7ff ff5d 	bl	8000cdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	613b      	str	r3, [r7, #16]
 8000e26:	4b48      	ldr	r3, [pc, #288]	; (8000f48 <HAL_I2S_MspInit+0x180>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	4a47      	ldr	r2, [pc, #284]	; (8000f48 <HAL_I2S_MspInit+0x180>)
 8000e2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e30:	6413      	str	r3, [r2, #64]	; 0x40
 8000e32:	4b45      	ldr	r3, [pc, #276]	; (8000f48 <HAL_I2S_MspInit+0x180>)
 8000e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	4b41      	ldr	r3, [pc, #260]	; (8000f48 <HAL_I2S_MspInit+0x180>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a40      	ldr	r2, [pc, #256]	; (8000f48 <HAL_I2S_MspInit+0x180>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4b3e      	ldr	r3, [pc, #248]	; (8000f48 <HAL_I2S_MspInit+0x180>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	4b3a      	ldr	r3, [pc, #232]	; (8000f48 <HAL_I2S_MspInit+0x180>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	4a39      	ldr	r2, [pc, #228]	; (8000f48 <HAL_I2S_MspInit+0x180>)
 8000e64:	f043 0304 	orr.w	r3, r3, #4
 8000e68:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6a:	4b37      	ldr	r3, [pc, #220]	; (8000f48 <HAL_I2S_MspInit+0x180>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	f003 0304 	and.w	r3, r3, #4
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000e76:	2310      	movs	r3, #16
 8000e78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e82:	2300      	movs	r3, #0
 8000e84:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e86:	2306      	movs	r3, #6
 8000e88:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000e8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e8e:	4619      	mov	r1, r3
 8000e90:	482e      	ldr	r0, [pc, #184]	; (8000f4c <HAL_I2S_MspInit+0x184>)
 8000e92:	f000 fdd1 	bl	8001a38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000e96:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ea8:	2306      	movs	r3, #6
 8000eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4827      	ldr	r0, [pc, #156]	; (8000f50 <HAL_I2S_MspInit+0x188>)
 8000eb4:	f000 fdc0 	bl	8001a38 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8000eb8:	4b26      	ldr	r3, [pc, #152]	; (8000f54 <HAL_I2S_MspInit+0x18c>)
 8000eba:	4a27      	ldr	r2, [pc, #156]	; (8000f58 <HAL_I2S_MspInit+0x190>)
 8000ebc:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8000ebe:	4b25      	ldr	r3, [pc, #148]	; (8000f54 <HAL_I2S_MspInit+0x18c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ec4:	4b23      	ldr	r3, [pc, #140]	; (8000f54 <HAL_I2S_MspInit+0x18c>)
 8000ec6:	2240      	movs	r2, #64	; 0x40
 8000ec8:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eca:	4b22      	ldr	r3, [pc, #136]	; (8000f54 <HAL_I2S_MspInit+0x18c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ed0:	4b20      	ldr	r3, [pc, #128]	; (8000f54 <HAL_I2S_MspInit+0x18c>)
 8000ed2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ed6:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ed8:	4b1e      	ldr	r3, [pc, #120]	; (8000f54 <HAL_I2S_MspInit+0x18c>)
 8000eda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ede:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ee0:	4b1c      	ldr	r3, [pc, #112]	; (8000f54 <HAL_I2S_MspInit+0x18c>)
 8000ee2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ee6:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8000ee8:	4b1a      	ldr	r3, [pc, #104]	; (8000f54 <HAL_I2S_MspInit+0x18c>)
 8000eea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eee:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ef0:	4b18      	ldr	r3, [pc, #96]	; (8000f54 <HAL_I2S_MspInit+0x18c>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000ef6:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <HAL_I2S_MspInit+0x18c>)
 8000ef8:	2204      	movs	r2, #4
 8000efa:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000efc:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <HAL_I2S_MspInit+0x18c>)
 8000efe:	2203      	movs	r2, #3
 8000f00:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000f02:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <HAL_I2S_MspInit+0x18c>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000f08:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <HAL_I2S_MspInit+0x18c>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000f0e:	4811      	ldr	r0, [pc, #68]	; (8000f54 <HAL_I2S_MspInit+0x18c>)
 8000f10:	f000 fa22 	bl	8001358 <HAL_DMA_Init>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <HAL_I2S_MspInit+0x156>
    {
      Error_Handler();
 8000f1a:	f7ff fedf 	bl	8000cdc <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a0c      	ldr	r2, [pc, #48]	; (8000f54 <HAL_I2S_MspInit+0x18c>)
 8000f22:	639a      	str	r2, [r3, #56]	; 0x38
 8000f24:	4a0b      	ldr	r2, [pc, #44]	; (8000f54 <HAL_I2S_MspInit+0x18c>)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	2033      	movs	r0, #51	; 0x33
 8000f30:	f000 f9db 	bl	80012ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000f34:	2033      	movs	r0, #51	; 0x33
 8000f36:	f000 f9f4 	bl	8001322 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000f3a:	bf00      	nop
 8000f3c:	3740      	adds	r7, #64	; 0x40
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40003c00 	.word	0x40003c00
 8000f48:	40023800 	.word	0x40023800
 8000f4c:	40020000 	.word	0x40020000
 8000f50:	40020800 	.word	0x40020800
 8000f54:	2000011c 	.word	0x2000011c
 8000f58:	40026088 	.word	0x40026088

08000f5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f60:	e7fe      	b.n	8000f60 <NMI_Handler+0x4>

08000f62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f66:	e7fe      	b.n	8000f66 <HardFault_Handler+0x4>

08000f68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <MemManage_Handler+0x4>

08000f6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f72:	e7fe      	b.n	8000f72 <BusFault_Handler+0x4>

08000f74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <UsageFault_Handler+0x4>

08000f7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa8:	f000 f8a4 	bl	80010f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8000fb4:	4802      	ldr	r0, [pc, #8]	; (8000fc0 <DMA1_Stream5_IRQHandler+0x10>)
 8000fb6:	f000 fad5 	bl	8001564 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	2000011c 	.word	0x2000011c

08000fc4 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 8000fc8:	4802      	ldr	r0, [pc, #8]	; (8000fd4 <SPI3_IRQHandler+0x10>)
 8000fca:	f002 f8b5 	bl	8003138 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	200000d4 	.word	0x200000d4

08000fd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <SystemInit+0x20>)
 8000fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fe2:	4a05      	ldr	r2, [pc, #20]	; (8000ff8 <SystemInit+0x20>)
 8000fe4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fe8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <Reset_Handler>:
 8000ffc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001034 <LoopFillZerobss+0xe>
 8001000:	f7ff ffea 	bl	8000fd8 <SystemInit>
 8001004:	480c      	ldr	r0, [pc, #48]	; (8001038 <LoopFillZerobss+0x12>)
 8001006:	490d      	ldr	r1, [pc, #52]	; (800103c <LoopFillZerobss+0x16>)
 8001008:	4a0d      	ldr	r2, [pc, #52]	; (8001040 <LoopFillZerobss+0x1a>)
 800100a:	2300      	movs	r3, #0
 800100c:	e002      	b.n	8001014 <LoopCopyDataInit>

0800100e <CopyDataInit>:
 800100e:	58d4      	ldr	r4, [r2, r3]
 8001010:	50c4      	str	r4, [r0, r3]
 8001012:	3304      	adds	r3, #4

08001014 <LoopCopyDataInit>:
 8001014:	18c4      	adds	r4, r0, r3
 8001016:	428c      	cmp	r4, r1
 8001018:	d3f9      	bcc.n	800100e <CopyDataInit>
 800101a:	4a0a      	ldr	r2, [pc, #40]	; (8001044 <LoopFillZerobss+0x1e>)
 800101c:	4c0a      	ldr	r4, [pc, #40]	; (8001048 <LoopFillZerobss+0x22>)
 800101e:	2300      	movs	r3, #0
 8001020:	e001      	b.n	8001026 <LoopFillZerobss>

08001022 <FillZerobss>:
 8001022:	6013      	str	r3, [r2, #0]
 8001024:	3204      	adds	r2, #4

08001026 <LoopFillZerobss>:
 8001026:	42a2      	cmp	r2, r4
 8001028:	d3fb      	bcc.n	8001022 <FillZerobss>
 800102a:	f003 fa2d 	bl	8004488 <__libc_init_array>
 800102e:	f7ff fc85 	bl	800093c <main>
 8001032:	4770      	bx	lr
 8001034:	20020000 	.word	0x20020000
 8001038:	20000000 	.word	0x20000000
 800103c:	2000000c 	.word	0x2000000c
 8001040:	08005378 	.word	0x08005378
 8001044:	2000000c 	.word	0x2000000c
 8001048:	20000254 	.word	0x20000254

0800104c <ADC_IRQHandler>:
 800104c:	e7fe      	b.n	800104c <ADC_IRQHandler>
	...

08001050 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001054:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <HAL_Init+0x40>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a0d      	ldr	r2, [pc, #52]	; (8001090 <HAL_Init+0x40>)
 800105a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800105e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001060:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <HAL_Init+0x40>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <HAL_Init+0x40>)
 8001066:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800106a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <HAL_Init+0x40>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a07      	ldr	r2, [pc, #28]	; (8001090 <HAL_Init+0x40>)
 8001072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001076:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001078:	2003      	movs	r0, #3
 800107a:	f000 f92b 	bl	80012d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800107e:	2000      	movs	r0, #0
 8001080:	f000 f808 	bl	8001094 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001084:	f7ff fe30 	bl	8000ce8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40023c00 	.word	0x40023c00

08001094 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <HAL_InitTick+0x54>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <HAL_InitTick+0x58>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	4619      	mov	r1, r3
 80010a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 f943 	bl	800133e <HAL_SYSTICK_Config>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e00e      	b.n	80010e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2b0f      	cmp	r3, #15
 80010c6:	d80a      	bhi.n	80010de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c8:	2200      	movs	r2, #0
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	f04f 30ff 	mov.w	r0, #4294967295
 80010d0:	f000 f90b 	bl	80012ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010d4:	4a06      	ldr	r2, [pc, #24]	; (80010f0 <HAL_InitTick+0x5c>)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010da:	2300      	movs	r3, #0
 80010dc:	e000      	b.n	80010e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000000 	.word	0x20000000
 80010ec:	20000008 	.word	0x20000008
 80010f0:	20000004 	.word	0x20000004

080010f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <HAL_IncTick+0x20>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_IncTick+0x24>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4413      	add	r3, r2
 8001104:	4a04      	ldr	r2, [pc, #16]	; (8001118 <HAL_IncTick+0x24>)
 8001106:	6013      	str	r3, [r2, #0]
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	20000008 	.word	0x20000008
 8001118:	20000250 	.word	0x20000250

0800111c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return uwTick;
 8001120:	4b03      	ldr	r3, [pc, #12]	; (8001130 <HAL_GetTick+0x14>)
 8001122:	681b      	ldr	r3, [r3, #0]
}
 8001124:	4618      	mov	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	20000250 	.word	0x20000250

08001134 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001144:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <__NVIC_SetPriorityGrouping+0x44>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800114a:	68ba      	ldr	r2, [r7, #8]
 800114c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001150:	4013      	ands	r3, r2
 8001152:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800115c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001164:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001166:	4a04      	ldr	r2, [pc, #16]	; (8001178 <__NVIC_SetPriorityGrouping+0x44>)
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	60d3      	str	r3, [r2, #12]
}
 800116c:	bf00      	nop
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001180:	4b04      	ldr	r3, [pc, #16]	; (8001194 <__NVIC_GetPriorityGrouping+0x18>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	0a1b      	lsrs	r3, r3, #8
 8001186:	f003 0307 	and.w	r3, r3, #7
}
 800118a:	4618      	mov	r0, r3
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	db0b      	blt.n	80011c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	f003 021f 	and.w	r2, r3, #31
 80011b0:	4907      	ldr	r1, [pc, #28]	; (80011d0 <__NVIC_EnableIRQ+0x38>)
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	095b      	lsrs	r3, r3, #5
 80011b8:	2001      	movs	r0, #1
 80011ba:	fa00 f202 	lsl.w	r2, r0, r2
 80011be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000e100 	.word	0xe000e100

080011d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	6039      	str	r1, [r7, #0]
 80011de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	db0a      	blt.n	80011fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	490c      	ldr	r1, [pc, #48]	; (8001220 <__NVIC_SetPriority+0x4c>)
 80011ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f2:	0112      	lsls	r2, r2, #4
 80011f4:	b2d2      	uxtb	r2, r2
 80011f6:	440b      	add	r3, r1
 80011f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011fc:	e00a      	b.n	8001214 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	b2da      	uxtb	r2, r3
 8001202:	4908      	ldr	r1, [pc, #32]	; (8001224 <__NVIC_SetPriority+0x50>)
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	f003 030f 	and.w	r3, r3, #15
 800120a:	3b04      	subs	r3, #4
 800120c:	0112      	lsls	r2, r2, #4
 800120e:	b2d2      	uxtb	r2, r2
 8001210:	440b      	add	r3, r1
 8001212:	761a      	strb	r2, [r3, #24]
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	e000e100 	.word	0xe000e100
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001228:	b480      	push	{r7}
 800122a:	b089      	sub	sp, #36	; 0x24
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	f1c3 0307 	rsb	r3, r3, #7
 8001242:	2b04      	cmp	r3, #4
 8001244:	bf28      	it	cs
 8001246:	2304      	movcs	r3, #4
 8001248:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	3304      	adds	r3, #4
 800124e:	2b06      	cmp	r3, #6
 8001250:	d902      	bls.n	8001258 <NVIC_EncodePriority+0x30>
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3b03      	subs	r3, #3
 8001256:	e000      	b.n	800125a <NVIC_EncodePriority+0x32>
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800125c:	f04f 32ff 	mov.w	r2, #4294967295
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43da      	mvns	r2, r3
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	401a      	ands	r2, r3
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001270:	f04f 31ff 	mov.w	r1, #4294967295
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	fa01 f303 	lsl.w	r3, r1, r3
 800127a:	43d9      	mvns	r1, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001280:	4313      	orrs	r3, r2
         );
}
 8001282:	4618      	mov	r0, r3
 8001284:	3724      	adds	r7, #36	; 0x24
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
	...

08001290 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3b01      	subs	r3, #1
 800129c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012a0:	d301      	bcc.n	80012a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012a2:	2301      	movs	r3, #1
 80012a4:	e00f      	b.n	80012c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012a6:	4a0a      	ldr	r2, [pc, #40]	; (80012d0 <SysTick_Config+0x40>)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ae:	210f      	movs	r1, #15
 80012b0:	f04f 30ff 	mov.w	r0, #4294967295
 80012b4:	f7ff ff8e 	bl	80011d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012b8:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <SysTick_Config+0x40>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012be:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <SysTick_Config+0x40>)
 80012c0:	2207      	movs	r2, #7
 80012c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	e000e010 	.word	0xe000e010

080012d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff ff29 	bl	8001134 <__NVIC_SetPriorityGrouping>
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b086      	sub	sp, #24
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	4603      	mov	r3, r0
 80012f2:	60b9      	str	r1, [r7, #8]
 80012f4:	607a      	str	r2, [r7, #4]
 80012f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012fc:	f7ff ff3e 	bl	800117c <__NVIC_GetPriorityGrouping>
 8001300:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	68b9      	ldr	r1, [r7, #8]
 8001306:	6978      	ldr	r0, [r7, #20]
 8001308:	f7ff ff8e 	bl	8001228 <NVIC_EncodePriority>
 800130c:	4602      	mov	r2, r0
 800130e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001312:	4611      	mov	r1, r2
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff ff5d 	bl	80011d4 <__NVIC_SetPriority>
}
 800131a:	bf00      	nop
 800131c:	3718      	adds	r7, #24
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b082      	sub	sp, #8
 8001326:	af00      	add	r7, sp, #0
 8001328:	4603      	mov	r3, r0
 800132a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800132c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff ff31 	bl	8001198 <__NVIC_EnableIRQ>
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff ffa2 	bl	8001290 <SysTick_Config>
 800134c:	4603      	mov	r3, r0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
	...

08001358 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001364:	f7ff feda 	bl	800111c <HAL_GetTick>
 8001368:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d101      	bne.n	8001374 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e099      	b.n	80014a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2202      	movs	r2, #2
 8001378:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2200      	movs	r2, #0
 8001380:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f022 0201 	bic.w	r2, r2, #1
 8001392:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001394:	e00f      	b.n	80013b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001396:	f7ff fec1 	bl	800111c <HAL_GetTick>
 800139a:	4602      	mov	r2, r0
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	2b05      	cmp	r3, #5
 80013a2:	d908      	bls.n	80013b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2220      	movs	r2, #32
 80013a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2203      	movs	r2, #3
 80013ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e078      	b.n	80014a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d1e8      	bne.n	8001396 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80013cc:	697a      	ldr	r2, [r7, #20]
 80013ce:	4b38      	ldr	r3, [pc, #224]	; (80014b0 <HAL_DMA_Init+0x158>)
 80013d0:	4013      	ands	r3, r2
 80013d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	691b      	ldr	r3, [r3, #16]
 80013e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a1b      	ldr	r3, [r3, #32]
 8001400:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001402:	697a      	ldr	r2, [r7, #20]
 8001404:	4313      	orrs	r3, r2
 8001406:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140c:	2b04      	cmp	r3, #4
 800140e:	d107      	bne.n	8001420 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001418:	4313      	orrs	r3, r2
 800141a:	697a      	ldr	r2, [r7, #20]
 800141c:	4313      	orrs	r3, r2
 800141e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	697a      	ldr	r2, [r7, #20]
 8001426:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	f023 0307 	bic.w	r3, r3, #7
 8001436:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143c:	697a      	ldr	r2, [r7, #20]
 800143e:	4313      	orrs	r3, r2
 8001440:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001446:	2b04      	cmp	r3, #4
 8001448:	d117      	bne.n	800147a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144e:	697a      	ldr	r2, [r7, #20]
 8001450:	4313      	orrs	r3, r2
 8001452:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001458:	2b00      	cmp	r3, #0
 800145a:	d00e      	beq.n	800147a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f000 fa6f 	bl	8001940 <DMA_CheckFifoParam>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d008      	beq.n	800147a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2240      	movs	r2, #64	; 0x40
 800146c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2201      	movs	r2, #1
 8001472:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001476:	2301      	movs	r3, #1
 8001478:	e016      	b.n	80014a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	697a      	ldr	r2, [r7, #20]
 8001480:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f000 fa26 	bl	80018d4 <DMA_CalcBaseAndBitshift>
 8001488:	4603      	mov	r3, r0
 800148a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001490:	223f      	movs	r2, #63	; 0x3f
 8001492:	409a      	lsls	r2, r3
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2201      	movs	r2, #1
 80014a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80014a6:	2300      	movs	r3, #0
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	f010803f 	.word	0xf010803f

080014b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
 80014c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014c2:	2300      	movs	r3, #0
 80014c4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d101      	bne.n	80014da <HAL_DMA_Start_IT+0x26>
 80014d6:	2302      	movs	r3, #2
 80014d8:	e040      	b.n	800155c <HAL_DMA_Start_IT+0xa8>
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2201      	movs	r2, #1
 80014de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d12f      	bne.n	800154e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	2202      	movs	r2, #2
 80014f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2200      	movs	r2, #0
 80014fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	68b9      	ldr	r1, [r7, #8]
 8001502:	68f8      	ldr	r0, [r7, #12]
 8001504:	f000 f9b8 	bl	8001878 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800150c:	223f      	movs	r2, #63	; 0x3f
 800150e:	409a      	lsls	r2, r3
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f042 0216 	orr.w	r2, r2, #22
 8001522:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	2b00      	cmp	r3, #0
 800152a:	d007      	beq.n	800153c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f042 0208 	orr.w	r2, r2, #8
 800153a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f042 0201 	orr.w	r2, r2, #1
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	e005      	b.n	800155a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2200      	movs	r2, #0
 8001552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001556:	2302      	movs	r3, #2
 8001558:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800155a:	7dfb      	ldrb	r3, [r7, #23]
}
 800155c:	4618      	mov	r0, r3
 800155e:	3718      	adds	r7, #24
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800156c:	2300      	movs	r3, #0
 800156e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001570:	4b8e      	ldr	r3, [pc, #568]	; (80017ac <HAL_DMA_IRQHandler+0x248>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a8e      	ldr	r2, [pc, #568]	; (80017b0 <HAL_DMA_IRQHandler+0x24c>)
 8001576:	fba2 2303 	umull	r2, r3, r2, r3
 800157a:	0a9b      	lsrs	r3, r3, #10
 800157c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001582:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800158e:	2208      	movs	r2, #8
 8001590:	409a      	lsls	r2, r3
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	4013      	ands	r3, r2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d01a      	beq.n	80015d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0304 	and.w	r3, r3, #4
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d013      	beq.n	80015d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f022 0204 	bic.w	r2, r2, #4
 80015b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015bc:	2208      	movs	r2, #8
 80015be:	409a      	lsls	r2, r3
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015c8:	f043 0201 	orr.w	r2, r3, #1
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d4:	2201      	movs	r2, #1
 80015d6:	409a      	lsls	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	4013      	ands	r3, r2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d012      	beq.n	8001606 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	695b      	ldr	r3, [r3, #20]
 80015e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d00b      	beq.n	8001606 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015f2:	2201      	movs	r2, #1
 80015f4:	409a      	lsls	r2, r3
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015fe:	f043 0202 	orr.w	r2, r3, #2
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800160a:	2204      	movs	r2, #4
 800160c:	409a      	lsls	r2, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	4013      	ands	r3, r2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d012      	beq.n	800163c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0302 	and.w	r3, r3, #2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d00b      	beq.n	800163c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001628:	2204      	movs	r2, #4
 800162a:	409a      	lsls	r2, r3
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001634:	f043 0204 	orr.w	r2, r3, #4
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001640:	2210      	movs	r2, #16
 8001642:	409a      	lsls	r2, r3
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	4013      	ands	r3, r2
 8001648:	2b00      	cmp	r3, #0
 800164a:	d043      	beq.n	80016d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0308 	and.w	r3, r3, #8
 8001656:	2b00      	cmp	r3, #0
 8001658:	d03c      	beq.n	80016d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800165e:	2210      	movs	r2, #16
 8001660:	409a      	lsls	r2, r3
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d018      	beq.n	80016a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d108      	bne.n	8001694 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	2b00      	cmp	r3, #0
 8001688:	d024      	beq.n	80016d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	4798      	blx	r3
 8001692:	e01f      	b.n	80016d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001698:	2b00      	cmp	r3, #0
 800169a:	d01b      	beq.n	80016d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	4798      	blx	r3
 80016a4:	e016      	b.n	80016d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d107      	bne.n	80016c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f022 0208 	bic.w	r2, r2, #8
 80016c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d003      	beq.n	80016d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d8:	2220      	movs	r2, #32
 80016da:	409a      	lsls	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	4013      	ands	r3, r2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	f000 808f 	beq.w	8001804 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0310 	and.w	r3, r3, #16
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f000 8087 	beq.w	8001804 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016fa:	2220      	movs	r2, #32
 80016fc:	409a      	lsls	r2, r3
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b05      	cmp	r3, #5
 800170c:	d136      	bne.n	800177c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f022 0216 	bic.w	r2, r2, #22
 800171c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	695a      	ldr	r2, [r3, #20]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800172c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	2b00      	cmp	r3, #0
 8001734:	d103      	bne.n	800173e <HAL_DMA_IRQHandler+0x1da>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800173a:	2b00      	cmp	r3, #0
 800173c:	d007      	beq.n	800174e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f022 0208 	bic.w	r2, r2, #8
 800174c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001752:	223f      	movs	r2, #63	; 0x3f
 8001754:	409a      	lsls	r2, r3
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2201      	movs	r2, #1
 800175e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800176e:	2b00      	cmp	r3, #0
 8001770:	d07e      	beq.n	8001870 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	4798      	blx	r3
        }
        return;
 800177a:	e079      	b.n	8001870 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d01d      	beq.n	80017c6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d10d      	bne.n	80017b4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179c:	2b00      	cmp	r3, #0
 800179e:	d031      	beq.n	8001804 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	4798      	blx	r3
 80017a8:	e02c      	b.n	8001804 <HAL_DMA_IRQHandler+0x2a0>
 80017aa:	bf00      	nop
 80017ac:	20000000 	.word	0x20000000
 80017b0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d023      	beq.n	8001804 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	4798      	blx	r3
 80017c4:	e01e      	b.n	8001804 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d10f      	bne.n	80017f4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f022 0210 	bic.w	r2, r2, #16
 80017e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2201      	movs	r2, #1
 80017e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d003      	beq.n	8001804 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001808:	2b00      	cmp	r3, #0
 800180a:	d032      	beq.n	8001872 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	2b00      	cmp	r3, #0
 8001816:	d022      	beq.n	800185e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2205      	movs	r2, #5
 800181c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f022 0201 	bic.w	r2, r2, #1
 800182e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	3301      	adds	r3, #1
 8001834:	60bb      	str	r3, [r7, #8]
 8001836:	697a      	ldr	r2, [r7, #20]
 8001838:	429a      	cmp	r2, r3
 800183a:	d307      	bcc.n	800184c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1f2      	bne.n	8001830 <HAL_DMA_IRQHandler+0x2cc>
 800184a:	e000      	b.n	800184e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800184c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2201      	movs	r2, #1
 8001852:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001862:	2b00      	cmp	r3, #0
 8001864:	d005      	beq.n	8001872 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	4798      	blx	r3
 800186e:	e000      	b.n	8001872 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001870:	bf00      	nop
    }
  }
}
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
 8001884:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001894:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	2b40      	cmp	r3, #64	; 0x40
 80018a4:	d108      	bne.n	80018b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	68ba      	ldr	r2, [r7, #8]
 80018b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80018b6:	e007      	b.n	80018c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	68ba      	ldr	r2, [r7, #8]
 80018be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	60da      	str	r2, [r3, #12]
}
 80018c8:	bf00      	nop
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	3b10      	subs	r3, #16
 80018e4:	4a14      	ldr	r2, [pc, #80]	; (8001938 <DMA_CalcBaseAndBitshift+0x64>)
 80018e6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ea:	091b      	lsrs	r3, r3, #4
 80018ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80018ee:	4a13      	ldr	r2, [pc, #76]	; (800193c <DMA_CalcBaseAndBitshift+0x68>)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	4413      	add	r3, r2
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	461a      	mov	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2b03      	cmp	r3, #3
 8001900:	d909      	bls.n	8001916 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800190a:	f023 0303 	bic.w	r3, r3, #3
 800190e:	1d1a      	adds	r2, r3, #4
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	659a      	str	r2, [r3, #88]	; 0x58
 8001914:	e007      	b.n	8001926 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800191e:	f023 0303 	bic.w	r3, r3, #3
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800192a:	4618      	mov	r0, r3
 800192c:	3714      	adds	r7, #20
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	aaaaaaab 	.word	0xaaaaaaab
 800193c:	08004f90 	.word	0x08004f90

08001940 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001948:	2300      	movs	r3, #0
 800194a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001950:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d11f      	bne.n	800199a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	2b03      	cmp	r3, #3
 800195e:	d856      	bhi.n	8001a0e <DMA_CheckFifoParam+0xce>
 8001960:	a201      	add	r2, pc, #4	; (adr r2, 8001968 <DMA_CheckFifoParam+0x28>)
 8001962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001966:	bf00      	nop
 8001968:	08001979 	.word	0x08001979
 800196c:	0800198b 	.word	0x0800198b
 8001970:	08001979 	.word	0x08001979
 8001974:	08001a0f 	.word	0x08001a0f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d046      	beq.n	8001a12 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001988:	e043      	b.n	8001a12 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001992:	d140      	bne.n	8001a16 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001998:	e03d      	b.n	8001a16 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019a2:	d121      	bne.n	80019e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	2b03      	cmp	r3, #3
 80019a8:	d837      	bhi.n	8001a1a <DMA_CheckFifoParam+0xda>
 80019aa:	a201      	add	r2, pc, #4	; (adr r2, 80019b0 <DMA_CheckFifoParam+0x70>)
 80019ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b0:	080019c1 	.word	0x080019c1
 80019b4:	080019c7 	.word	0x080019c7
 80019b8:	080019c1 	.word	0x080019c1
 80019bc:	080019d9 	.word	0x080019d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	73fb      	strb	r3, [r7, #15]
      break;
 80019c4:	e030      	b.n	8001a28 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d025      	beq.n	8001a1e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019d6:	e022      	b.n	8001a1e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019e0:	d11f      	bne.n	8001a22 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80019e6:	e01c      	b.n	8001a22 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d903      	bls.n	80019f6 <DMA_CheckFifoParam+0xb6>
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	2b03      	cmp	r3, #3
 80019f2:	d003      	beq.n	80019fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80019f4:	e018      	b.n	8001a28 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	73fb      	strb	r3, [r7, #15]
      break;
 80019fa:	e015      	b.n	8001a28 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d00e      	beq.n	8001a26 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	73fb      	strb	r3, [r7, #15]
      break;
 8001a0c:	e00b      	b.n	8001a26 <DMA_CheckFifoParam+0xe6>
      break;
 8001a0e:	bf00      	nop
 8001a10:	e00a      	b.n	8001a28 <DMA_CheckFifoParam+0xe8>
      break;
 8001a12:	bf00      	nop
 8001a14:	e008      	b.n	8001a28 <DMA_CheckFifoParam+0xe8>
      break;
 8001a16:	bf00      	nop
 8001a18:	e006      	b.n	8001a28 <DMA_CheckFifoParam+0xe8>
      break;
 8001a1a:	bf00      	nop
 8001a1c:	e004      	b.n	8001a28 <DMA_CheckFifoParam+0xe8>
      break;
 8001a1e:	bf00      	nop
 8001a20:	e002      	b.n	8001a28 <DMA_CheckFifoParam+0xe8>
      break;   
 8001a22:	bf00      	nop
 8001a24:	e000      	b.n	8001a28 <DMA_CheckFifoParam+0xe8>
      break;
 8001a26:	bf00      	nop
    }
  } 
  
  return status; 
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3714      	adds	r7, #20
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop

08001a38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b089      	sub	sp, #36	; 0x24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a42:	2300      	movs	r3, #0
 8001a44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a46:	2300      	movs	r3, #0
 8001a48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61fb      	str	r3, [r7, #28]
 8001a52:	e159      	b.n	8001d08 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a54:	2201      	movs	r2, #1
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	697a      	ldr	r2, [r7, #20]
 8001a64:	4013      	ands	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	f040 8148 	bne.w	8001d02 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f003 0303 	and.w	r3, r3, #3
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d005      	beq.n	8001a8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d130      	bne.n	8001aec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	2203      	movs	r2, #3
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	68da      	ldr	r2, [r3, #12]
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4013      	ands	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	091b      	lsrs	r3, r3, #4
 8001ad6:	f003 0201 	and.w	r2, r3, #1
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f003 0303 	and.w	r3, r3, #3
 8001af4:	2b03      	cmp	r3, #3
 8001af6:	d017      	beq.n	8001b28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	2203      	movs	r2, #3
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	689a      	ldr	r2, [r3, #8]
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f003 0303 	and.w	r3, r3, #3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d123      	bne.n	8001b7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	08da      	lsrs	r2, r3, #3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3208      	adds	r2, #8
 8001b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	f003 0307 	and.w	r3, r3, #7
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	220f      	movs	r2, #15
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	43db      	mvns	r3, r3
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4013      	ands	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	691a      	ldr	r2, [r3, #16]
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	08da      	lsrs	r2, r3, #3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	3208      	adds	r2, #8
 8001b76:	69b9      	ldr	r1, [r7, #24]
 8001b78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	2203      	movs	r2, #3
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4013      	ands	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 0203 	and.w	r2, r3, #3
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f000 80a2 	beq.w	8001d02 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	4b57      	ldr	r3, [pc, #348]	; (8001d20 <HAL_GPIO_Init+0x2e8>)
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc6:	4a56      	ldr	r2, [pc, #344]	; (8001d20 <HAL_GPIO_Init+0x2e8>)
 8001bc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bce:	4b54      	ldr	r3, [pc, #336]	; (8001d20 <HAL_GPIO_Init+0x2e8>)
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bda:	4a52      	ldr	r2, [pc, #328]	; (8001d24 <HAL_GPIO_Init+0x2ec>)
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	089b      	lsrs	r3, r3, #2
 8001be0:	3302      	adds	r3, #2
 8001be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	f003 0303 	and.w	r3, r3, #3
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	220f      	movs	r2, #15
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a49      	ldr	r2, [pc, #292]	; (8001d28 <HAL_GPIO_Init+0x2f0>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d019      	beq.n	8001c3a <HAL_GPIO_Init+0x202>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a48      	ldr	r2, [pc, #288]	; (8001d2c <HAL_GPIO_Init+0x2f4>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d013      	beq.n	8001c36 <HAL_GPIO_Init+0x1fe>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a47      	ldr	r2, [pc, #284]	; (8001d30 <HAL_GPIO_Init+0x2f8>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d00d      	beq.n	8001c32 <HAL_GPIO_Init+0x1fa>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a46      	ldr	r2, [pc, #280]	; (8001d34 <HAL_GPIO_Init+0x2fc>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d007      	beq.n	8001c2e <HAL_GPIO_Init+0x1f6>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a45      	ldr	r2, [pc, #276]	; (8001d38 <HAL_GPIO_Init+0x300>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d101      	bne.n	8001c2a <HAL_GPIO_Init+0x1f2>
 8001c26:	2304      	movs	r3, #4
 8001c28:	e008      	b.n	8001c3c <HAL_GPIO_Init+0x204>
 8001c2a:	2307      	movs	r3, #7
 8001c2c:	e006      	b.n	8001c3c <HAL_GPIO_Init+0x204>
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e004      	b.n	8001c3c <HAL_GPIO_Init+0x204>
 8001c32:	2302      	movs	r3, #2
 8001c34:	e002      	b.n	8001c3c <HAL_GPIO_Init+0x204>
 8001c36:	2301      	movs	r3, #1
 8001c38:	e000      	b.n	8001c3c <HAL_GPIO_Init+0x204>
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	69fa      	ldr	r2, [r7, #28]
 8001c3e:	f002 0203 	and.w	r2, r2, #3
 8001c42:	0092      	lsls	r2, r2, #2
 8001c44:	4093      	lsls	r3, r2
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c4c:	4935      	ldr	r1, [pc, #212]	; (8001d24 <HAL_GPIO_Init+0x2ec>)
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	089b      	lsrs	r3, r3, #2
 8001c52:	3302      	adds	r3, #2
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c5a:	4b38      	ldr	r3, [pc, #224]	; (8001d3c <HAL_GPIO_Init+0x304>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	43db      	mvns	r3, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4013      	ands	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d003      	beq.n	8001c7e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c7e:	4a2f      	ldr	r2, [pc, #188]	; (8001d3c <HAL_GPIO_Init+0x304>)
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c84:	4b2d      	ldr	r3, [pc, #180]	; (8001d3c <HAL_GPIO_Init+0x304>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4013      	ands	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d003      	beq.n	8001ca8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ca8:	4a24      	ldr	r2, [pc, #144]	; (8001d3c <HAL_GPIO_Init+0x304>)
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cae:	4b23      	ldr	r3, [pc, #140]	; (8001d3c <HAL_GPIO_Init+0x304>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cd2:	4a1a      	ldr	r2, [pc, #104]	; (8001d3c <HAL_GPIO_Init+0x304>)
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cd8:	4b18      	ldr	r3, [pc, #96]	; (8001d3c <HAL_GPIO_Init+0x304>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d003      	beq.n	8001cfc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cfc:	4a0f      	ldr	r2, [pc, #60]	; (8001d3c <HAL_GPIO_Init+0x304>)
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	3301      	adds	r3, #1
 8001d06:	61fb      	str	r3, [r7, #28]
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	2b0f      	cmp	r3, #15
 8001d0c:	f67f aea2 	bls.w	8001a54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d10:	bf00      	nop
 8001d12:	bf00      	nop
 8001d14:	3724      	adds	r7, #36	; 0x24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	40023800 	.word	0x40023800
 8001d24:	40013800 	.word	0x40013800
 8001d28:	40020000 	.word	0x40020000
 8001d2c:	40020400 	.word	0x40020400
 8001d30:	40020800 	.word	0x40020800
 8001d34:	40020c00 	.word	0x40020c00
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	40013c00 	.word	0x40013c00

08001d40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	807b      	strh	r3, [r7, #2]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d50:	787b      	ldrb	r3, [r7, #1]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d56:	887a      	ldrh	r2, [r7, #2]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d5c:	e003      	b.n	8001d66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d5e:	887b      	ldrh	r3, [r7, #2]
 8001d60:	041a      	lsls	r2, r3, #16
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	619a      	str	r2, [r3, #24]
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
	...

08001d74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e12b      	b.n	8001fde <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d106      	bne.n	8001da0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7fe ffcc 	bl	8000d38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2224      	movs	r2, #36	; 0x24
 8001da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f022 0201 	bic.w	r2, r2, #1
 8001db6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dc6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dd6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001dd8:	f002 f9e8 	bl	80041ac <HAL_RCC_GetPCLK1Freq>
 8001ddc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	4a81      	ldr	r2, [pc, #516]	; (8001fe8 <HAL_I2C_Init+0x274>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d807      	bhi.n	8001df8 <HAL_I2C_Init+0x84>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	4a80      	ldr	r2, [pc, #512]	; (8001fec <HAL_I2C_Init+0x278>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	bf94      	ite	ls
 8001df0:	2301      	movls	r3, #1
 8001df2:	2300      	movhi	r3, #0
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	e006      	b.n	8001e06 <HAL_I2C_Init+0x92>
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	4a7d      	ldr	r2, [pc, #500]	; (8001ff0 <HAL_I2C_Init+0x27c>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	bf94      	ite	ls
 8001e00:	2301      	movls	r3, #1
 8001e02:	2300      	movhi	r3, #0
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e0e7      	b.n	8001fde <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	4a78      	ldr	r2, [pc, #480]	; (8001ff4 <HAL_I2C_Init+0x280>)
 8001e12:	fba2 2303 	umull	r2, r3, r2, r3
 8001e16:	0c9b      	lsrs	r3, r3, #18
 8001e18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68ba      	ldr	r2, [r7, #8]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	4a6a      	ldr	r2, [pc, #424]	; (8001fe8 <HAL_I2C_Init+0x274>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d802      	bhi.n	8001e48 <HAL_I2C_Init+0xd4>
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	3301      	adds	r3, #1
 8001e46:	e009      	b.n	8001e5c <HAL_I2C_Init+0xe8>
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e4e:	fb02 f303 	mul.w	r3, r2, r3
 8001e52:	4a69      	ldr	r2, [pc, #420]	; (8001ff8 <HAL_I2C_Init+0x284>)
 8001e54:	fba2 2303 	umull	r2, r3, r2, r3
 8001e58:	099b      	lsrs	r3, r3, #6
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	6812      	ldr	r2, [r2, #0]
 8001e60:	430b      	orrs	r3, r1
 8001e62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	495c      	ldr	r1, [pc, #368]	; (8001fe8 <HAL_I2C_Init+0x274>)
 8001e78:	428b      	cmp	r3, r1
 8001e7a:	d819      	bhi.n	8001eb0 <HAL_I2C_Init+0x13c>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	1e59      	subs	r1, r3, #1
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e8a:	1c59      	adds	r1, r3, #1
 8001e8c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e90:	400b      	ands	r3, r1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00a      	beq.n	8001eac <HAL_I2C_Init+0x138>
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	1e59      	subs	r1, r3, #1
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eaa:	e051      	b.n	8001f50 <HAL_I2C_Init+0x1dc>
 8001eac:	2304      	movs	r3, #4
 8001eae:	e04f      	b.n	8001f50 <HAL_I2C_Init+0x1dc>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d111      	bne.n	8001edc <HAL_I2C_Init+0x168>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	1e58      	subs	r0, r3, #1
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6859      	ldr	r1, [r3, #4]
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	440b      	add	r3, r1
 8001ec6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eca:	3301      	adds	r3, #1
 8001ecc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	bf0c      	ite	eq
 8001ed4:	2301      	moveq	r3, #1
 8001ed6:	2300      	movne	r3, #0
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	e012      	b.n	8001f02 <HAL_I2C_Init+0x18e>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	1e58      	subs	r0, r3, #1
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6859      	ldr	r1, [r3, #4]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	440b      	add	r3, r1
 8001eea:	0099      	lsls	r1, r3, #2
 8001eec:	440b      	add	r3, r1
 8001eee:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	bf0c      	ite	eq
 8001efc:	2301      	moveq	r3, #1
 8001efe:	2300      	movne	r3, #0
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <HAL_I2C_Init+0x196>
 8001f06:	2301      	movs	r3, #1
 8001f08:	e022      	b.n	8001f50 <HAL_I2C_Init+0x1dc>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d10e      	bne.n	8001f30 <HAL_I2C_Init+0x1bc>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	1e58      	subs	r0, r3, #1
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6859      	ldr	r1, [r3, #4]
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	440b      	add	r3, r1
 8001f20:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f24:	3301      	adds	r3, #1
 8001f26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f2e:	e00f      	b.n	8001f50 <HAL_I2C_Init+0x1dc>
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	1e58      	subs	r0, r3, #1
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6859      	ldr	r1, [r3, #4]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	440b      	add	r3, r1
 8001f3e:	0099      	lsls	r1, r3, #2
 8001f40:	440b      	add	r3, r1
 8001f42:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f46:	3301      	adds	r3, #1
 8001f48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f50:	6879      	ldr	r1, [r7, #4]
 8001f52:	6809      	ldr	r1, [r1, #0]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69da      	ldr	r2, [r3, #28]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	6911      	ldr	r1, [r2, #16]
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	68d2      	ldr	r2, [r2, #12]
 8001f8a:	4311      	orrs	r1, r2
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	6812      	ldr	r2, [r2, #0]
 8001f90:	430b      	orrs	r3, r1
 8001f92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	695a      	ldr	r2, [r3, #20]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	430a      	orrs	r2, r1
 8001fae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f042 0201 	orr.w	r2, r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2220      	movs	r2, #32
 8001fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	000186a0 	.word	0x000186a0
 8001fec:	001e847f 	.word	0x001e847f
 8001ff0:	003d08ff 	.word	0x003d08ff
 8001ff4:	431bde83 	.word	0x431bde83
 8001ff8:	10624dd3 	.word	0x10624dd3

08001ffc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b088      	sub	sp, #32
 8002000:	af02      	add	r7, sp, #8
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	607a      	str	r2, [r7, #4]
 8002006:	461a      	mov	r2, r3
 8002008:	460b      	mov	r3, r1
 800200a:	817b      	strh	r3, [r7, #10]
 800200c:	4613      	mov	r3, r2
 800200e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002010:	f7ff f884 	bl	800111c <HAL_GetTick>
 8002014:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b20      	cmp	r3, #32
 8002020:	f040 80e0 	bne.w	80021e4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	2319      	movs	r3, #25
 800202a:	2201      	movs	r2, #1
 800202c:	4970      	ldr	r1, [pc, #448]	; (80021f0 <HAL_I2C_Master_Transmit+0x1f4>)
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f000 fc64 	bl	80028fc <I2C_WaitOnFlagUntilTimeout>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800203a:	2302      	movs	r3, #2
 800203c:	e0d3      	b.n	80021e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002044:	2b01      	cmp	r3, #1
 8002046:	d101      	bne.n	800204c <HAL_I2C_Master_Transmit+0x50>
 8002048:	2302      	movs	r3, #2
 800204a:	e0cc      	b.n	80021e6 <HAL_I2C_Master_Transmit+0x1ea>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b01      	cmp	r3, #1
 8002060:	d007      	beq.n	8002072 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f042 0201 	orr.w	r2, r2, #1
 8002070:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002080:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2221      	movs	r2, #33	; 0x21
 8002086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2210      	movs	r2, #16
 800208e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2200      	movs	r2, #0
 8002096:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	893a      	ldrh	r2, [r7, #8]
 80020a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	4a50      	ldr	r2, [pc, #320]	; (80021f4 <HAL_I2C_Master_Transmit+0x1f8>)
 80020b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80020b4:	8979      	ldrh	r1, [r7, #10]
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	6a3a      	ldr	r2, [r7, #32]
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f000 face 	bl	800265c <I2C_MasterRequestWrite>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e08d      	b.n	80021e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020ca:	2300      	movs	r3, #0
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	695b      	ldr	r3, [r3, #20]
 80020d4:	613b      	str	r3, [r7, #16]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	613b      	str	r3, [r7, #16]
 80020de:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80020e0:	e066      	b.n	80021b0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	6a39      	ldr	r1, [r7, #32]
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f000 fd22 	bl	8002b30 <I2C_WaitOnTXEFlagUntilTimeout>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00d      	beq.n	800210e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	d107      	bne.n	800210a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002108:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e06b      	b.n	80021e6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002112:	781a      	ldrb	r2, [r3, #0]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211e:	1c5a      	adds	r2, r3, #1
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002128:	b29b      	uxth	r3, r3
 800212a:	3b01      	subs	r3, #1
 800212c:	b29a      	uxth	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002136:	3b01      	subs	r3, #1
 8002138:	b29a      	uxth	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	695b      	ldr	r3, [r3, #20]
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	2b04      	cmp	r3, #4
 800214a:	d11b      	bne.n	8002184 <HAL_I2C_Master_Transmit+0x188>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002150:	2b00      	cmp	r3, #0
 8002152:	d017      	beq.n	8002184 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002158:	781a      	ldrb	r2, [r3, #0]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002164:	1c5a      	adds	r2, r3, #1
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800216e:	b29b      	uxth	r3, r3
 8002170:	3b01      	subs	r3, #1
 8002172:	b29a      	uxth	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800217c:	3b01      	subs	r3, #1
 800217e:	b29a      	uxth	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	6a39      	ldr	r1, [r7, #32]
 8002188:	68f8      	ldr	r0, [r7, #12]
 800218a:	f000 fd19 	bl	8002bc0 <I2C_WaitOnBTFFlagUntilTimeout>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00d      	beq.n	80021b0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002198:	2b04      	cmp	r3, #4
 800219a:	d107      	bne.n	80021ac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021aa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e01a      	b.n	80021e6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d194      	bne.n	80020e2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2220      	movs	r2, #32
 80021cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021e0:	2300      	movs	r3, #0
 80021e2:	e000      	b.n	80021e6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80021e4:	2302      	movs	r3, #2
  }
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3718      	adds	r7, #24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	00100002 	.word	0x00100002
 80021f4:	ffff0000 	.word	0xffff0000

080021f8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b08c      	sub	sp, #48	; 0x30
 80021fc:	af02      	add	r7, sp, #8
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	607a      	str	r2, [r7, #4]
 8002202:	461a      	mov	r2, r3
 8002204:	460b      	mov	r3, r1
 8002206:	817b      	strh	r3, [r7, #10]
 8002208:	4613      	mov	r3, r2
 800220a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800220c:	f7fe ff86 	bl	800111c <HAL_GetTick>
 8002210:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b20      	cmp	r3, #32
 800221c:	f040 8217 	bne.w	800264e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002222:	9300      	str	r3, [sp, #0]
 8002224:	2319      	movs	r3, #25
 8002226:	2201      	movs	r2, #1
 8002228:	497c      	ldr	r1, [pc, #496]	; (800241c <HAL_I2C_Master_Receive+0x224>)
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f000 fb66 	bl	80028fc <I2C_WaitOnFlagUntilTimeout>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002236:	2302      	movs	r3, #2
 8002238:	e20a      	b.n	8002650 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002240:	2b01      	cmp	r3, #1
 8002242:	d101      	bne.n	8002248 <HAL_I2C_Master_Receive+0x50>
 8002244:	2302      	movs	r3, #2
 8002246:	e203      	b.n	8002650 <HAL_I2C_Master_Receive+0x458>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b01      	cmp	r3, #1
 800225c:	d007      	beq.n	800226e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f042 0201 	orr.w	r2, r2, #1
 800226c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800227c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2222      	movs	r2, #34	; 0x22
 8002282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2210      	movs	r2, #16
 800228a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	893a      	ldrh	r2, [r7, #8]
 800229e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	4a5c      	ldr	r2, [pc, #368]	; (8002420 <HAL_I2C_Master_Receive+0x228>)
 80022ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80022b0:	8979      	ldrh	r1, [r7, #10]
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	f000 fa52 	bl	8002760 <I2C_MasterRequestRead>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e1c4      	b.n	8002650 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d113      	bne.n	80022f6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ce:	2300      	movs	r3, #0
 80022d0:	623b      	str	r3, [r7, #32]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	623b      	str	r3, [r7, #32]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	623b      	str	r3, [r7, #32]
 80022e2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	e198      	b.n	8002628 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d11b      	bne.n	8002336 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800230c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800230e:	2300      	movs	r3, #0
 8002310:	61fb      	str	r3, [r7, #28]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	61fb      	str	r3, [r7, #28]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	61fb      	str	r3, [r7, #28]
 8002322:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	e178      	b.n	8002628 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800233a:	2b02      	cmp	r3, #2
 800233c:	d11b      	bne.n	8002376 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800234c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800235c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800235e:	2300      	movs	r3, #0
 8002360:	61bb      	str	r3, [r7, #24]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	695b      	ldr	r3, [r3, #20]
 8002368:	61bb      	str	r3, [r7, #24]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	61bb      	str	r3, [r7, #24]
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	e158      	b.n	8002628 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002384:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002386:	2300      	movs	r3, #0
 8002388:	617b      	str	r3, [r7, #20]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	695b      	ldr	r3, [r3, #20]
 8002390:	617b      	str	r3, [r7, #20]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	617b      	str	r3, [r7, #20]
 800239a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800239c:	e144      	b.n	8002628 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a2:	2b03      	cmp	r3, #3
 80023a4:	f200 80f1 	bhi.w	800258a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d123      	bne.n	80023f8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f000 fc4b 	bl	8002c50 <I2C_WaitOnRXNEFlagUntilTimeout>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e145      	b.n	8002650 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	691a      	ldr	r2, [r3, #16]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d6:	1c5a      	adds	r2, r3, #1
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e0:	3b01      	subs	r3, #1
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	3b01      	subs	r3, #1
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023f6:	e117      	b.n	8002628 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d14e      	bne.n	800249e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002402:	9300      	str	r3, [sp, #0]
 8002404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002406:	2200      	movs	r2, #0
 8002408:	4906      	ldr	r1, [pc, #24]	; (8002424 <HAL_I2C_Master_Receive+0x22c>)
 800240a:	68f8      	ldr	r0, [r7, #12]
 800240c:	f000 fa76 	bl	80028fc <I2C_WaitOnFlagUntilTimeout>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d008      	beq.n	8002428 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e11a      	b.n	8002650 <HAL_I2C_Master_Receive+0x458>
 800241a:	bf00      	nop
 800241c:	00100002 	.word	0x00100002
 8002420:	ffff0000 	.word	0xffff0000
 8002424:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002436:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	691a      	ldr	r2, [r3, #16]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002442:	b2d2      	uxtb	r2, r2
 8002444:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244a:	1c5a      	adds	r2, r3, #1
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002454:	3b01      	subs	r3, #1
 8002456:	b29a      	uxth	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002460:	b29b      	uxth	r3, r3
 8002462:	3b01      	subs	r3, #1
 8002464:	b29a      	uxth	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	691a      	ldr	r2, [r3, #16]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002474:	b2d2      	uxtb	r2, r2
 8002476:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247c:	1c5a      	adds	r2, r3, #1
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002486:	3b01      	subs	r3, #1
 8002488:	b29a      	uxth	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002492:	b29b      	uxth	r3, r3
 8002494:	3b01      	subs	r3, #1
 8002496:	b29a      	uxth	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800249c:	e0c4      	b.n	8002628 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800249e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a0:	9300      	str	r3, [sp, #0]
 80024a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a4:	2200      	movs	r2, #0
 80024a6:	496c      	ldr	r1, [pc, #432]	; (8002658 <HAL_I2C_Master_Receive+0x460>)
 80024a8:	68f8      	ldr	r0, [r7, #12]
 80024aa:	f000 fa27 	bl	80028fc <I2C_WaitOnFlagUntilTimeout>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e0cb      	b.n	8002650 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	691a      	ldr	r2, [r3, #16]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d2:	b2d2      	uxtb	r2, r2
 80024d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	1c5a      	adds	r2, r3, #1
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e4:	3b01      	subs	r3, #1
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	3b01      	subs	r3, #1
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002500:	2200      	movs	r2, #0
 8002502:	4955      	ldr	r1, [pc, #340]	; (8002658 <HAL_I2C_Master_Receive+0x460>)
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f000 f9f9 	bl	80028fc <I2C_WaitOnFlagUntilTimeout>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e09d      	b.n	8002650 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002522:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	691a      	ldr	r2, [r3, #16]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252e:	b2d2      	uxtb	r2, r2
 8002530:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002536:	1c5a      	adds	r2, r3, #1
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002540:	3b01      	subs	r3, #1
 8002542:	b29a      	uxth	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800254c:	b29b      	uxth	r3, r3
 800254e:	3b01      	subs	r3, #1
 8002550:	b29a      	uxth	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	691a      	ldr	r2, [r3, #16]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002560:	b2d2      	uxtb	r2, r2
 8002562:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002568:	1c5a      	adds	r2, r3, #1
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002572:	3b01      	subs	r3, #1
 8002574:	b29a      	uxth	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800257e:	b29b      	uxth	r3, r3
 8002580:	3b01      	subs	r3, #1
 8002582:	b29a      	uxth	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002588:	e04e      	b.n	8002628 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800258a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800258c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800258e:	68f8      	ldr	r0, [r7, #12]
 8002590:	f000 fb5e 	bl	8002c50 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e058      	b.n	8002650 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	691a      	ldr	r2, [r3, #16]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a8:	b2d2      	uxtb	r2, r2
 80025aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b0:	1c5a      	adds	r2, r3, #1
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ba:	3b01      	subs	r3, #1
 80025bc:	b29a      	uxth	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	3b01      	subs	r3, #1
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	f003 0304 	and.w	r3, r3, #4
 80025da:	2b04      	cmp	r3, #4
 80025dc:	d124      	bne.n	8002628 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e2:	2b03      	cmp	r3, #3
 80025e4:	d107      	bne.n	80025f6 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025f4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	691a      	ldr	r2, [r3, #16]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002600:	b2d2      	uxtb	r2, r2
 8002602:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002608:	1c5a      	adds	r2, r3, #1
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002612:	3b01      	subs	r3, #1
 8002614:	b29a      	uxth	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800261e:	b29b      	uxth	r3, r3
 8002620:	3b01      	subs	r3, #1
 8002622:	b29a      	uxth	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262c:	2b00      	cmp	r3, #0
 800262e:	f47f aeb6 	bne.w	800239e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2220      	movs	r2, #32
 8002636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800264a:	2300      	movs	r3, #0
 800264c:	e000      	b.n	8002650 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800264e:	2302      	movs	r3, #2
  }
}
 8002650:	4618      	mov	r0, r3
 8002652:	3728      	adds	r7, #40	; 0x28
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	00010004 	.word	0x00010004

0800265c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b088      	sub	sp, #32
 8002660:	af02      	add	r7, sp, #8
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	607a      	str	r2, [r7, #4]
 8002666:	603b      	str	r3, [r7, #0]
 8002668:	460b      	mov	r3, r1
 800266a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002670:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	2b08      	cmp	r3, #8
 8002676:	d006      	beq.n	8002686 <I2C_MasterRequestWrite+0x2a>
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d003      	beq.n	8002686 <I2C_MasterRequestWrite+0x2a>
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002684:	d108      	bne.n	8002698 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	e00b      	b.n	80026b0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269c:	2b12      	cmp	r3, #18
 800269e:	d107      	bne.n	80026b0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	9300      	str	r3, [sp, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026bc:	68f8      	ldr	r0, [r7, #12]
 80026be:	f000 f91d 	bl	80028fc <I2C_WaitOnFlagUntilTimeout>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00d      	beq.n	80026e4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026d6:	d103      	bne.n	80026e0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e035      	b.n	8002750 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026ec:	d108      	bne.n	8002700 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026ee:	897b      	ldrh	r3, [r7, #10]
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	461a      	mov	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80026fc:	611a      	str	r2, [r3, #16]
 80026fe:	e01b      	b.n	8002738 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002700:	897b      	ldrh	r3, [r7, #10]
 8002702:	11db      	asrs	r3, r3, #7
 8002704:	b2db      	uxtb	r3, r3
 8002706:	f003 0306 	and.w	r3, r3, #6
 800270a:	b2db      	uxtb	r3, r3
 800270c:	f063 030f 	orn	r3, r3, #15
 8002710:	b2da      	uxtb	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	490e      	ldr	r1, [pc, #56]	; (8002758 <I2C_MasterRequestWrite+0xfc>)
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	f000 f966 	bl	80029f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e010      	b.n	8002750 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800272e:	897b      	ldrh	r3, [r7, #10]
 8002730:	b2da      	uxtb	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	4907      	ldr	r1, [pc, #28]	; (800275c <I2C_MasterRequestWrite+0x100>)
 800273e:	68f8      	ldr	r0, [r7, #12]
 8002740:	f000 f956 	bl	80029f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e000      	b.n	8002750 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3718      	adds	r7, #24
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	00010008 	.word	0x00010008
 800275c:	00010002 	.word	0x00010002

08002760 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b088      	sub	sp, #32
 8002764:	af02      	add	r7, sp, #8
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	607a      	str	r2, [r7, #4]
 800276a:	603b      	str	r3, [r7, #0]
 800276c:	460b      	mov	r3, r1
 800276e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002774:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002784:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	2b08      	cmp	r3, #8
 800278a:	d006      	beq.n	800279a <I2C_MasterRequestRead+0x3a>
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d003      	beq.n	800279a <I2C_MasterRequestRead+0x3a>
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002798:	d108      	bne.n	80027ac <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	e00b      	b.n	80027c4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b0:	2b11      	cmp	r3, #17
 80027b2:	d107      	bne.n	80027c4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	9300      	str	r3, [sp, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027d0:	68f8      	ldr	r0, [r7, #12]
 80027d2:	f000 f893 	bl	80028fc <I2C_WaitOnFlagUntilTimeout>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00d      	beq.n	80027f8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027ea:	d103      	bne.n	80027f4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e079      	b.n	80028ec <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002800:	d108      	bne.n	8002814 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002802:	897b      	ldrh	r3, [r7, #10]
 8002804:	b2db      	uxtb	r3, r3
 8002806:	f043 0301 	orr.w	r3, r3, #1
 800280a:	b2da      	uxtb	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	611a      	str	r2, [r3, #16]
 8002812:	e05f      	b.n	80028d4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002814:	897b      	ldrh	r3, [r7, #10]
 8002816:	11db      	asrs	r3, r3, #7
 8002818:	b2db      	uxtb	r3, r3
 800281a:	f003 0306 	and.w	r3, r3, #6
 800281e:	b2db      	uxtb	r3, r3
 8002820:	f063 030f 	orn	r3, r3, #15
 8002824:	b2da      	uxtb	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	4930      	ldr	r1, [pc, #192]	; (80028f4 <I2C_MasterRequestRead+0x194>)
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f000 f8dc 	bl	80029f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e054      	b.n	80028ec <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002842:	897b      	ldrh	r3, [r7, #10]
 8002844:	b2da      	uxtb	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	4929      	ldr	r1, [pc, #164]	; (80028f8 <I2C_MasterRequestRead+0x198>)
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 f8cc 	bl	80029f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e044      	b.n	80028ec <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002862:	2300      	movs	r3, #0
 8002864:	613b      	str	r3, [r7, #16]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	613b      	str	r3, [r7, #16]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	613b      	str	r3, [r7, #16]
 8002876:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002886:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	9300      	str	r3, [sp, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f000 f831 	bl	80028fc <I2C_WaitOnFlagUntilTimeout>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00d      	beq.n	80028bc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028ae:	d103      	bne.n	80028b8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028b6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e017      	b.n	80028ec <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80028bc:	897b      	ldrh	r3, [r7, #10]
 80028be:	11db      	asrs	r3, r3, #7
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	f003 0306 	and.w	r3, r3, #6
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	f063 030e 	orn	r3, r3, #14
 80028cc:	b2da      	uxtb	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	4907      	ldr	r1, [pc, #28]	; (80028f8 <I2C_MasterRequestRead+0x198>)
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f000 f888 	bl	80029f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e000      	b.n	80028ec <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3718      	adds	r7, #24
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	00010008 	.word	0x00010008
 80028f8:	00010002 	.word	0x00010002

080028fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	603b      	str	r3, [r7, #0]
 8002908:	4613      	mov	r3, r2
 800290a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800290c:	e048      	b.n	80029a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002914:	d044      	beq.n	80029a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002916:	f7fe fc01 	bl	800111c <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	429a      	cmp	r2, r3
 8002924:	d302      	bcc.n	800292c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d139      	bne.n	80029a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	0c1b      	lsrs	r3, r3, #16
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b01      	cmp	r3, #1
 8002934:	d10d      	bne.n	8002952 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	43da      	mvns	r2, r3
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	4013      	ands	r3, r2
 8002942:	b29b      	uxth	r3, r3
 8002944:	2b00      	cmp	r3, #0
 8002946:	bf0c      	ite	eq
 8002948:	2301      	moveq	r3, #1
 800294a:	2300      	movne	r3, #0
 800294c:	b2db      	uxtb	r3, r3
 800294e:	461a      	mov	r2, r3
 8002950:	e00c      	b.n	800296c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	43da      	mvns	r2, r3
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	4013      	ands	r3, r2
 800295e:	b29b      	uxth	r3, r3
 8002960:	2b00      	cmp	r3, #0
 8002962:	bf0c      	ite	eq
 8002964:	2301      	moveq	r3, #1
 8002966:	2300      	movne	r3, #0
 8002968:	b2db      	uxtb	r3, r3
 800296a:	461a      	mov	r2, r3
 800296c:	79fb      	ldrb	r3, [r7, #7]
 800296e:	429a      	cmp	r2, r3
 8002970:	d116      	bne.n	80029a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2220      	movs	r2, #32
 800297c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298c:	f043 0220 	orr.w	r2, r3, #32
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e023      	b.n	80029e8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	0c1b      	lsrs	r3, r3, #16
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d10d      	bne.n	80029c6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	695b      	ldr	r3, [r3, #20]
 80029b0:	43da      	mvns	r2, r3
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	4013      	ands	r3, r2
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	bf0c      	ite	eq
 80029bc:	2301      	moveq	r3, #1
 80029be:	2300      	movne	r3, #0
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	461a      	mov	r2, r3
 80029c4:	e00c      	b.n	80029e0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	43da      	mvns	r2, r3
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	4013      	ands	r3, r2
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	bf0c      	ite	eq
 80029d8:	2301      	moveq	r3, #1
 80029da:	2300      	movne	r3, #0
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	461a      	mov	r2, r3
 80029e0:	79fb      	ldrb	r3, [r7, #7]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d093      	beq.n	800290e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
 80029fc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029fe:	e071      	b.n	8002ae4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a0e:	d123      	bne.n	8002a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a1e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a28:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2220      	movs	r2, #32
 8002a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a44:	f043 0204 	orr.w	r2, r3, #4
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e067      	b.n	8002b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a5e:	d041      	beq.n	8002ae4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a60:	f7fe fb5c 	bl	800111c <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d302      	bcc.n	8002a76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d136      	bne.n	8002ae4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	0c1b      	lsrs	r3, r3, #16
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d10c      	bne.n	8002a9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	43da      	mvns	r2, r3
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	bf14      	ite	ne
 8002a92:	2301      	movne	r3, #1
 8002a94:	2300      	moveq	r3, #0
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	e00b      	b.n	8002ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	43da      	mvns	r2, r3
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	bf14      	ite	ne
 8002aac:	2301      	movne	r3, #1
 8002aae:	2300      	moveq	r3, #0
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d016      	beq.n	8002ae4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad0:	f043 0220 	orr.w	r2, r3, #32
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e021      	b.n	8002b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	0c1b      	lsrs	r3, r3, #16
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d10c      	bne.n	8002b08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	43da      	mvns	r2, r3
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	4013      	ands	r3, r2
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	bf14      	ite	ne
 8002b00:	2301      	movne	r3, #1
 8002b02:	2300      	moveq	r3, #0
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	e00b      	b.n	8002b20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	43da      	mvns	r2, r3
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	4013      	ands	r3, r2
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	bf14      	ite	ne
 8002b1a:	2301      	movne	r3, #1
 8002b1c:	2300      	moveq	r3, #0
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f47f af6d 	bne.w	8002a00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b3c:	e034      	b.n	8002ba8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b3e:	68f8      	ldr	r0, [r7, #12]
 8002b40:	f000 f8e3 	bl	8002d0a <I2C_IsAcknowledgeFailed>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e034      	b.n	8002bb8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b54:	d028      	beq.n	8002ba8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b56:	f7fe fae1 	bl	800111c <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	68ba      	ldr	r2, [r7, #8]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d302      	bcc.n	8002b6c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d11d      	bne.n	8002ba8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b76:	2b80      	cmp	r3, #128	; 0x80
 8002b78:	d016      	beq.n	8002ba8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2220      	movs	r2, #32
 8002b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b94:	f043 0220 	orr.w	r2, r3, #32
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e007      	b.n	8002bb8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb2:	2b80      	cmp	r3, #128	; 0x80
 8002bb4:	d1c3      	bne.n	8002b3e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bcc:	e034      	b.n	8002c38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f000 f89b 	bl	8002d0a <I2C_IsAcknowledgeFailed>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e034      	b.n	8002c48 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be4:	d028      	beq.n	8002c38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002be6:	f7fe fa99 	bl	800111c <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	68ba      	ldr	r2, [r7, #8]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d302      	bcc.n	8002bfc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d11d      	bne.n	8002c38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	f003 0304 	and.w	r3, r3, #4
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	d016      	beq.n	8002c38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2220      	movs	r2, #32
 8002c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c24:	f043 0220 	orr.w	r2, r3, #32
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e007      	b.n	8002c48 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	f003 0304 	and.w	r3, r3, #4
 8002c42:	2b04      	cmp	r3, #4
 8002c44:	d1c3      	bne.n	8002bce <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c5c:	e049      	b.n	8002cf2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	695b      	ldr	r3, [r3, #20]
 8002c64:	f003 0310 	and.w	r3, r3, #16
 8002c68:	2b10      	cmp	r3, #16
 8002c6a:	d119      	bne.n	8002ca0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f06f 0210 	mvn.w	r2, #16
 8002c74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2220      	movs	r2, #32
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e030      	b.n	8002d02 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ca0:	f7fe fa3c 	bl	800111c <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	68ba      	ldr	r2, [r7, #8]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d302      	bcc.n	8002cb6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d11d      	bne.n	8002cf2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc0:	2b40      	cmp	r3, #64	; 0x40
 8002cc2:	d016      	beq.n	8002cf2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2220      	movs	r2, #32
 8002cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	f043 0220 	orr.w	r2, r3, #32
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e007      	b.n	8002d02 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfc:	2b40      	cmp	r3, #64	; 0x40
 8002cfe:	d1ae      	bne.n	8002c5e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b083      	sub	sp, #12
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	695b      	ldr	r3, [r3, #20]
 8002d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d20:	d11b      	bne.n	8002d5a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d2a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2220      	movs	r2, #32
 8002d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	f043 0204 	orr.w	r2, r3, #4
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e000      	b.n	8002d5c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b088      	sub	sp, #32
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e128      	b.n	8002fcc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d109      	bne.n	8002d9a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a90      	ldr	r2, [pc, #576]	; (8002fd4 <HAL_I2S_Init+0x26c>)
 8002d92:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f7fe f817 	bl	8000dc8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2202      	movs	r2, #2
 8002d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	69db      	ldr	r3, [r3, #28]
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	6812      	ldr	r2, [r2, #0]
 8002dac:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002db0:	f023 030f 	bic.w	r3, r3, #15
 8002db4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2202      	movs	r2, #2
 8002dbc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d060      	beq.n	8002e88 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d102      	bne.n	8002dd4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002dce:	2310      	movs	r3, #16
 8002dd0:	617b      	str	r3, [r7, #20]
 8002dd2:	e001      	b.n	8002dd8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002dd4:	2320      	movs	r3, #32
 8002dd6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	2b20      	cmp	r3, #32
 8002dde:	d802      	bhi.n	8002de6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002de6:	2001      	movs	r0, #1
 8002de8:	f001 fae4 	bl	80043b4 <HAL_RCCEx_GetPeriphCLKFreq>
 8002dec:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002df6:	d125      	bne.n	8002e44 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d010      	beq.n	8002e22 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	4413      	add	r3, r2
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	461a      	mov	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	695b      	ldr	r3, [r3, #20]
 8002e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e1c:	3305      	adds	r3, #5
 8002e1e:	613b      	str	r3, [r7, #16]
 8002e20:	e01f      	b.n	8002e62 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	00db      	lsls	r3, r3, #3
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	461a      	mov	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e3e:	3305      	adds	r3, #5
 8002e40:	613b      	str	r3, [r7, #16]
 8002e42:	e00e      	b.n	8002e62 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	4413      	add	r3, r2
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	461a      	mov	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e5e:	3305      	adds	r3, #5
 8002e60:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	4a5c      	ldr	r2, [pc, #368]	; (8002fd8 <HAL_I2S_Init+0x270>)
 8002e66:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6a:	08db      	lsrs	r3, r3, #3
 8002e6c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	085b      	lsrs	r3, r3, #1
 8002e7e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	021b      	lsls	r3, r3, #8
 8002e84:	61bb      	str	r3, [r7, #24]
 8002e86:	e003      	b.n	8002e90 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002e88:	2302      	movs	r3, #2
 8002e8a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d902      	bls.n	8002e9c <HAL_I2S_Init+0x134>
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	2bff      	cmp	r3, #255	; 0xff
 8002e9a:	d907      	bls.n	8002eac <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea0:	f043 0210 	orr.w	r2, r3, #16
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e08f      	b.n	8002fcc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	691a      	ldr	r2, [r3, #16]
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	ea42 0103 	orr.w	r1, r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	69fa      	ldr	r2, [r7, #28]
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	69db      	ldr	r3, [r3, #28]
 8002ec6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002eca:	f023 030f 	bic.w	r3, r3, #15
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	6851      	ldr	r1, [r2, #4]
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	6892      	ldr	r2, [r2, #8]
 8002ed6:	4311      	orrs	r1, r2
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	68d2      	ldr	r2, [r2, #12]
 8002edc:	4311      	orrs	r1, r2
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	6992      	ldr	r2, [r2, #24]
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002eee:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d161      	bne.n	8002fbc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a38      	ldr	r2, [pc, #224]	; (8002fdc <HAL_I2S_Init+0x274>)
 8002efc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a37      	ldr	r2, [pc, #220]	; (8002fe0 <HAL_I2S_Init+0x278>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d101      	bne.n	8002f0c <HAL_I2S_Init+0x1a4>
 8002f08:	4b36      	ldr	r3, [pc, #216]	; (8002fe4 <HAL_I2S_Init+0x27c>)
 8002f0a:	e001      	b.n	8002f10 <HAL_I2S_Init+0x1a8>
 8002f0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f10:	69db      	ldr	r3, [r3, #28]
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	6812      	ldr	r2, [r2, #0]
 8002f16:	4932      	ldr	r1, [pc, #200]	; (8002fe0 <HAL_I2S_Init+0x278>)
 8002f18:	428a      	cmp	r2, r1
 8002f1a:	d101      	bne.n	8002f20 <HAL_I2S_Init+0x1b8>
 8002f1c:	4a31      	ldr	r2, [pc, #196]	; (8002fe4 <HAL_I2S_Init+0x27c>)
 8002f1e:	e001      	b.n	8002f24 <HAL_I2S_Init+0x1bc>
 8002f20:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002f24:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002f28:	f023 030f 	bic.w	r3, r3, #15
 8002f2c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a2b      	ldr	r2, [pc, #172]	; (8002fe0 <HAL_I2S_Init+0x278>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d101      	bne.n	8002f3c <HAL_I2S_Init+0x1d4>
 8002f38:	4b2a      	ldr	r3, [pc, #168]	; (8002fe4 <HAL_I2S_Init+0x27c>)
 8002f3a:	e001      	b.n	8002f40 <HAL_I2S_Init+0x1d8>
 8002f3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f40:	2202      	movs	r2, #2
 8002f42:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a25      	ldr	r2, [pc, #148]	; (8002fe0 <HAL_I2S_Init+0x278>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d101      	bne.n	8002f52 <HAL_I2S_Init+0x1ea>
 8002f4e:	4b25      	ldr	r3, [pc, #148]	; (8002fe4 <HAL_I2S_Init+0x27c>)
 8002f50:	e001      	b.n	8002f56 <HAL_I2S_Init+0x1ee>
 8002f52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f56:	69db      	ldr	r3, [r3, #28]
 8002f58:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f62:	d003      	beq.n	8002f6c <HAL_I2S_Init+0x204>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d103      	bne.n	8002f74 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002f6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f70:	613b      	str	r3, [r7, #16]
 8002f72:	e001      	b.n	8002f78 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002f74:	2300      	movs	r3, #0
 8002f76:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002f82:	4313      	orrs	r3, r2
 8002f84:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002f96:	4313      	orrs	r3, r2
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	897b      	ldrh	r3, [r7, #10]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002fa4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a0d      	ldr	r2, [pc, #52]	; (8002fe0 <HAL_I2S_Init+0x278>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d101      	bne.n	8002fb4 <HAL_I2S_Init+0x24c>
 8002fb0:	4b0c      	ldr	r3, [pc, #48]	; (8002fe4 <HAL_I2S_Init+0x27c>)
 8002fb2:	e001      	b.n	8002fb8 <HAL_I2S_Init+0x250>
 8002fb4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fb8:	897a      	ldrh	r2, [r7, #10]
 8002fba:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3720      	adds	r7, #32
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	08003305 	.word	0x08003305
 8002fd8:	cccccccd 	.word	0xcccccccd
 8002fdc:	08003419 	.word	0x08003419
 8002fe0:	40003800 	.word	0x40003800
 8002fe4:	40003400 	.word	0x40003400

08002fe8 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d002      	beq.n	8003002 <HAL_I2S_Transmit_DMA+0x1a>
 8002ffc:	88fb      	ldrh	r3, [r7, #6]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e08e      	b.n	8003124 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b01      	cmp	r3, #1
 8003010:	d101      	bne.n	8003016 <HAL_I2S_Transmit_DMA+0x2e>
 8003012:	2302      	movs	r3, #2
 8003014:	e086      	b.n	8003124 <HAL_I2S_Transmit_DMA+0x13c>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b01      	cmp	r3, #1
 8003028:	d005      	beq.n	8003036 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8003032:	2302      	movs	r3, #2
 8003034:	e076      	b.n	8003124 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2203      	movs	r2, #3
 800303a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	68ba      	ldr	r2, [r7, #8]
 8003048:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	69db      	ldr	r3, [r3, #28]
 8003050:	f003 0307 	and.w	r3, r3, #7
 8003054:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	2b03      	cmp	r3, #3
 800305a:	d002      	beq.n	8003062 <HAL_I2S_Transmit_DMA+0x7a>
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	2b05      	cmp	r3, #5
 8003060:	d10a      	bne.n	8003078 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8003062:	88fb      	ldrh	r3, [r7, #6]
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	b29a      	uxth	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 800306c:	88fb      	ldrh	r3, [r7, #6]
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	b29a      	uxth	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003076:	e005      	b.n	8003084 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	88fa      	ldrh	r2, [r7, #6]
 800307c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	88fa      	ldrh	r2, [r7, #6]
 8003082:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003088:	4a28      	ldr	r2, [pc, #160]	; (800312c <HAL_I2S_Transmit_DMA+0x144>)
 800308a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003090:	4a27      	ldr	r2, [pc, #156]	; (8003130 <HAL_I2S_Transmit_DMA+0x148>)
 8003092:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003098:	4a26      	ldr	r2, [pc, #152]	; (8003134 <HAL_I2S_Transmit_DMA+0x14c>)
 800309a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80030a4:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80030ac:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80030b4:	f7fe f9fe 	bl	80014b4 <HAL_DMA_Start_IT>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00f      	beq.n	80030de <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c2:	f043 0208 	orr.w	r2, r3, #8
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e022      	b.n	8003124 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	69db      	ldr	r3, [r3, #28]
 80030e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d107      	bne.n	80030fc <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	69da      	ldr	r2, [r3, #28]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030fa:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d107      	bne.n	800311a <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f042 0202 	orr.w	r2, r2, #2
 8003118:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3718      	adds	r7, #24
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	080031e3 	.word	0x080031e3
 8003130:	080031a1 	.word	0x080031a1
 8003134:	080031ff 	.word	0x080031ff

08003138 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	4798      	blx	r3
}
 8003148:	bf00      	nop
 800314a:	3708      	adds	r7, #8
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ac:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10e      	bne.n	80031d4 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	685a      	ldr	r2, [r3, #4]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 0202 	bic.w	r2, r2, #2
 80031c4:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f7ff ffc5 	bl	8003164 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80031da:	bf00      	nop
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b084      	sub	sp, #16
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ee:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f7ff ffad 	bl	8003150 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80031f6:	bf00      	nop
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b084      	sub	sp, #16
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320a:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f022 0203 	bic.w	r2, r2, #3
 800321a:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003234:	f043 0208 	orr.w	r2, r3, #8
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f7ff ffa5 	bl	800318c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003242:	bf00      	nop
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b082      	sub	sp, #8
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003256:	881a      	ldrh	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003262:	1c9a      	adds	r2, r3, #2
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800326c:	b29b      	uxth	r3, r3
 800326e:	3b01      	subs	r3, #1
 8003270:	b29a      	uxth	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800327a:	b29b      	uxth	r3, r3
 800327c:	2b00      	cmp	r3, #0
 800327e:	d10e      	bne.n	800329e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	685a      	ldr	r2, [r3, #4]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800328e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f7ff ff63 	bl	8003164 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800329e:	bf00      	nop
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b082      	sub	sp, #8
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68da      	ldr	r2, [r3, #12]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b8:	b292      	uxth	r2, r2
 80032ba:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c0:	1c9a      	adds	r2, r3, #2
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	3b01      	subs	r3, #1
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80032d8:	b29b      	uxth	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d10e      	bne.n	80032fc <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	685a      	ldr	r2, [r3, #4]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80032ec:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f7ff ff3e 	bl	8003178 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80032fc:	bf00      	nop
 80032fe:	3708      	adds	r7, #8
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800331a:	b2db      	uxtb	r3, r3
 800331c:	2b04      	cmp	r3, #4
 800331e:	d13a      	bne.n	8003396 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b01      	cmp	r3, #1
 8003328:	d109      	bne.n	800333e <I2S_IRQHandler+0x3a>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003334:	2b40      	cmp	r3, #64	; 0x40
 8003336:	d102      	bne.n	800333e <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f7ff ffb4 	bl	80032a6 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003344:	2b40      	cmp	r3, #64	; 0x40
 8003346:	d126      	bne.n	8003396 <I2S_IRQHandler+0x92>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f003 0320 	and.w	r3, r3, #32
 8003352:	2b20      	cmp	r3, #32
 8003354:	d11f      	bne.n	8003396 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	685a      	ldr	r2, [r3, #4]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003364:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003366:	2300      	movs	r3, #0
 8003368:	613b      	str	r3, [r7, #16]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	613b      	str	r3, [r7, #16]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	613b      	str	r3, [r7, #16]
 800337a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003388:	f043 0202 	orr.w	r2, r3, #2
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f7ff fefb 	bl	800318c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b03      	cmp	r3, #3
 80033a0:	d136      	bne.n	8003410 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	f003 0302 	and.w	r3, r3, #2
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d109      	bne.n	80033c0 <I2S_IRQHandler+0xbc>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b6:	2b80      	cmp	r3, #128	; 0x80
 80033b8:	d102      	bne.n	80033c0 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7ff ff45 	bl	800324a <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	f003 0308 	and.w	r3, r3, #8
 80033c6:	2b08      	cmp	r3, #8
 80033c8:	d122      	bne.n	8003410 <I2S_IRQHandler+0x10c>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f003 0320 	and.w	r3, r3, #32
 80033d4:	2b20      	cmp	r3, #32
 80033d6:	d11b      	bne.n	8003410 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80033e6:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80033e8:	2300      	movs	r3, #0
 80033ea:	60fb      	str	r3, [r7, #12]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	60fb      	str	r3, [r7, #12]
 80033f4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003402:	f043 0204 	orr.w	r2, r3, #4
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f7ff febe 	bl	800318c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003410:	bf00      	nop
 8003412:	3718      	adds	r7, #24
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b088      	sub	sp, #32
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a92      	ldr	r2, [pc, #584]	; (8003678 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d101      	bne.n	8003436 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003432:	4b92      	ldr	r3, [pc, #584]	; (800367c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003434:	e001      	b.n	800343a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003436:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a8b      	ldr	r2, [pc, #556]	; (8003678 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d101      	bne.n	8003454 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003450:	4b8a      	ldr	r3, [pc, #552]	; (800367c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003452:	e001      	b.n	8003458 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003454:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003464:	d004      	beq.n	8003470 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	2b00      	cmp	r3, #0
 800346c:	f040 8099 	bne.w	80035a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b02      	cmp	r3, #2
 8003478:	d107      	bne.n	800348a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003480:	2b00      	cmp	r3, #0
 8003482:	d002      	beq.n	800348a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 f925 	bl	80036d4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b01      	cmp	r3, #1
 8003492:	d107      	bne.n	80034a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349a:	2b00      	cmp	r3, #0
 800349c:	d002      	beq.n	80034a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f9c8 	bl	8003834 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034aa:	2b40      	cmp	r3, #64	; 0x40
 80034ac:	d13a      	bne.n	8003524 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	f003 0320 	and.w	r3, r3, #32
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d035      	beq.n	8003524 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a6e      	ldr	r2, [pc, #440]	; (8003678 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d101      	bne.n	80034c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80034c2:	4b6e      	ldr	r3, [pc, #440]	; (800367c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034c4:	e001      	b.n	80034ca <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80034c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4969      	ldr	r1, [pc, #420]	; (8003678 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80034d2:	428b      	cmp	r3, r1
 80034d4:	d101      	bne.n	80034da <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80034d6:	4b69      	ldr	r3, [pc, #420]	; (800367c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034d8:	e001      	b.n	80034de <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80034da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034de:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034e2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034f2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80034f4:	2300      	movs	r3, #0
 80034f6:	60fb      	str	r3, [r7, #12]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	60fb      	str	r3, [r7, #12]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	60fb      	str	r3, [r7, #12]
 8003508:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003516:	f043 0202 	orr.w	r2, r3, #2
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7ff fe34 	bl	800318c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	f003 0308 	and.w	r3, r3, #8
 800352a:	2b08      	cmp	r3, #8
 800352c:	f040 80c3 	bne.w	80036b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	f003 0320 	and.w	r3, r3, #32
 8003536:	2b00      	cmp	r3, #0
 8003538:	f000 80bd 	beq.w	80036b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800354a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a49      	ldr	r2, [pc, #292]	; (8003678 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d101      	bne.n	800355a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003556:	4b49      	ldr	r3, [pc, #292]	; (800367c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003558:	e001      	b.n	800355e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800355a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800355e:	685a      	ldr	r2, [r3, #4]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4944      	ldr	r1, [pc, #272]	; (8003678 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003566:	428b      	cmp	r3, r1
 8003568:	d101      	bne.n	800356e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800356a:	4b44      	ldr	r3, [pc, #272]	; (800367c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800356c:	e001      	b.n	8003572 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800356e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003572:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003576:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003578:	2300      	movs	r3, #0
 800357a:	60bb      	str	r3, [r7, #8]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	60bb      	str	r3, [r7, #8]
 8003584:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003592:	f043 0204 	orr.w	r2, r3, #4
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7ff fdf6 	bl	800318c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035a0:	e089      	b.n	80036b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d107      	bne.n	80035bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d002      	beq.n	80035bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 f8be 	bl	8003738 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d107      	bne.n	80035d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d002      	beq.n	80035d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 f8fd 	bl	80037d0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035dc:	2b40      	cmp	r3, #64	; 0x40
 80035de:	d12f      	bne.n	8003640 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	f003 0320 	and.w	r3, r3, #32
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d02a      	beq.n	8003640 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035f8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a1e      	ldr	r2, [pc, #120]	; (8003678 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d101      	bne.n	8003608 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003604:	4b1d      	ldr	r3, [pc, #116]	; (800367c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003606:	e001      	b.n	800360c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003608:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800360c:	685a      	ldr	r2, [r3, #4]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4919      	ldr	r1, [pc, #100]	; (8003678 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003614:	428b      	cmp	r3, r1
 8003616:	d101      	bne.n	800361c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003618:	4b18      	ldr	r3, [pc, #96]	; (800367c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800361a:	e001      	b.n	8003620 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800361c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003620:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003624:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003632:	f043 0202 	orr.w	r2, r3, #2
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7ff fda6 	bl	800318c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	f003 0308 	and.w	r3, r3, #8
 8003646:	2b08      	cmp	r3, #8
 8003648:	d136      	bne.n	80036b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	f003 0320 	and.w	r3, r3, #32
 8003650:	2b00      	cmp	r3, #0
 8003652:	d031      	beq.n	80036b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a07      	ldr	r2, [pc, #28]	; (8003678 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d101      	bne.n	8003662 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800365e:	4b07      	ldr	r3, [pc, #28]	; (800367c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003660:	e001      	b.n	8003666 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003662:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4902      	ldr	r1, [pc, #8]	; (8003678 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800366e:	428b      	cmp	r3, r1
 8003670:	d106      	bne.n	8003680 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003672:	4b02      	ldr	r3, [pc, #8]	; (800367c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003674:	e006      	b.n	8003684 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003676:	bf00      	nop
 8003678:	40003800 	.word	0x40003800
 800367c:	40003400 	.word	0x40003400
 8003680:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003684:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003688:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003698:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a6:	f043 0204 	orr.w	r2, r3, #4
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f7ff fd6c 	bl	800318c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036b4:	e000      	b.n	80036b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036b6:	bf00      	nop
}
 80036b8:	bf00      	nop
 80036ba:	3720      	adds	r7, #32
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e0:	1c99      	adds	r1, r3, #2
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	6251      	str	r1, [r2, #36]	; 0x24
 80036e6:	881a      	ldrh	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	3b01      	subs	r3, #1
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003700:	b29b      	uxth	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d113      	bne.n	800372e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003714:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800371a:	b29b      	uxth	r3, r3
 800371c:	2b00      	cmp	r3, #0
 800371e:	d106      	bne.n	800372e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f7ff ffc9 	bl	80036c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800372e:	bf00      	nop
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
	...

08003738 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	1c99      	adds	r1, r3, #2
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6251      	str	r1, [r2, #36]	; 0x24
 800374a:	8819      	ldrh	r1, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a1d      	ldr	r2, [pc, #116]	; (80037c8 <I2SEx_TxISR_I2SExt+0x90>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d101      	bne.n	800375a <I2SEx_TxISR_I2SExt+0x22>
 8003756:	4b1d      	ldr	r3, [pc, #116]	; (80037cc <I2SEx_TxISR_I2SExt+0x94>)
 8003758:	e001      	b.n	800375e <I2SEx_TxISR_I2SExt+0x26>
 800375a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800375e:	460a      	mov	r2, r1
 8003760:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003766:	b29b      	uxth	r3, r3
 8003768:	3b01      	subs	r3, #1
 800376a:	b29a      	uxth	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003774:	b29b      	uxth	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d121      	bne.n	80037be <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a12      	ldr	r2, [pc, #72]	; (80037c8 <I2SEx_TxISR_I2SExt+0x90>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d101      	bne.n	8003788 <I2SEx_TxISR_I2SExt+0x50>
 8003784:	4b11      	ldr	r3, [pc, #68]	; (80037cc <I2SEx_TxISR_I2SExt+0x94>)
 8003786:	e001      	b.n	800378c <I2SEx_TxISR_I2SExt+0x54>
 8003788:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	490d      	ldr	r1, [pc, #52]	; (80037c8 <I2SEx_TxISR_I2SExt+0x90>)
 8003794:	428b      	cmp	r3, r1
 8003796:	d101      	bne.n	800379c <I2SEx_TxISR_I2SExt+0x64>
 8003798:	4b0c      	ldr	r3, [pc, #48]	; (80037cc <I2SEx_TxISR_I2SExt+0x94>)
 800379a:	e001      	b.n	80037a0 <I2SEx_TxISR_I2SExt+0x68>
 800379c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037a4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d106      	bne.n	80037be <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f7ff ff81 	bl	80036c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037be:	bf00      	nop
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	40003800 	.word	0x40003800
 80037cc:	40003400 	.word	0x40003400

080037d0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68d8      	ldr	r0, [r3, #12]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e2:	1c99      	adds	r1, r3, #2
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80037e8:	b282      	uxth	r2, r0
 80037ea:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	3b01      	subs	r3, #1
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037fe:	b29b      	uxth	r3, r3
 8003800:	2b00      	cmp	r3, #0
 8003802:	d113      	bne.n	800382c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003812:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003818:	b29b      	uxth	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d106      	bne.n	800382c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f7ff ff4a 	bl	80036c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800382c:	bf00      	nop
 800382e:	3708      	adds	r7, #8
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a20      	ldr	r2, [pc, #128]	; (80038c4 <I2SEx_RxISR_I2SExt+0x90>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d101      	bne.n	800384a <I2SEx_RxISR_I2SExt+0x16>
 8003846:	4b20      	ldr	r3, [pc, #128]	; (80038c8 <I2SEx_RxISR_I2SExt+0x94>)
 8003848:	e001      	b.n	800384e <I2SEx_RxISR_I2SExt+0x1a>
 800384a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800384e:	68d8      	ldr	r0, [r3, #12]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003854:	1c99      	adds	r1, r3, #2
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	62d1      	str	r1, [r2, #44]	; 0x2c
 800385a:	b282      	uxth	r2, r0
 800385c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003862:	b29b      	uxth	r3, r3
 8003864:	3b01      	subs	r3, #1
 8003866:	b29a      	uxth	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003870:	b29b      	uxth	r3, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d121      	bne.n	80038ba <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a12      	ldr	r2, [pc, #72]	; (80038c4 <I2SEx_RxISR_I2SExt+0x90>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d101      	bne.n	8003884 <I2SEx_RxISR_I2SExt+0x50>
 8003880:	4b11      	ldr	r3, [pc, #68]	; (80038c8 <I2SEx_RxISR_I2SExt+0x94>)
 8003882:	e001      	b.n	8003888 <I2SEx_RxISR_I2SExt+0x54>
 8003884:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003888:	685a      	ldr	r2, [r3, #4]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	490d      	ldr	r1, [pc, #52]	; (80038c4 <I2SEx_RxISR_I2SExt+0x90>)
 8003890:	428b      	cmp	r3, r1
 8003892:	d101      	bne.n	8003898 <I2SEx_RxISR_I2SExt+0x64>
 8003894:	4b0c      	ldr	r3, [pc, #48]	; (80038c8 <I2SEx_RxISR_I2SExt+0x94>)
 8003896:	e001      	b.n	800389c <I2SEx_RxISR_I2SExt+0x68>
 8003898:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800389c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038a0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d106      	bne.n	80038ba <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f7ff ff03 	bl	80036c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038ba:	bf00      	nop
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	40003800 	.word	0x40003800
 80038c8:	40003400 	.word	0x40003400

080038cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e267      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d075      	beq.n	80039d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038ea:	4b88      	ldr	r3, [pc, #544]	; (8003b0c <HAL_RCC_OscConfig+0x240>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f003 030c 	and.w	r3, r3, #12
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	d00c      	beq.n	8003910 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038f6:	4b85      	ldr	r3, [pc, #532]	; (8003b0c <HAL_RCC_OscConfig+0x240>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038fe:	2b08      	cmp	r3, #8
 8003900:	d112      	bne.n	8003928 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003902:	4b82      	ldr	r3, [pc, #520]	; (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800390a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800390e:	d10b      	bne.n	8003928 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003910:	4b7e      	ldr	r3, [pc, #504]	; (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d05b      	beq.n	80039d4 <HAL_RCC_OscConfig+0x108>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d157      	bne.n	80039d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e242      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003930:	d106      	bne.n	8003940 <HAL_RCC_OscConfig+0x74>
 8003932:	4b76      	ldr	r3, [pc, #472]	; (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a75      	ldr	r2, [pc, #468]	; (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800393c:	6013      	str	r3, [r2, #0]
 800393e:	e01d      	b.n	800397c <HAL_RCC_OscConfig+0xb0>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003948:	d10c      	bne.n	8003964 <HAL_RCC_OscConfig+0x98>
 800394a:	4b70      	ldr	r3, [pc, #448]	; (8003b0c <HAL_RCC_OscConfig+0x240>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a6f      	ldr	r2, [pc, #444]	; (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003950:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003954:	6013      	str	r3, [r2, #0]
 8003956:	4b6d      	ldr	r3, [pc, #436]	; (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a6c      	ldr	r2, [pc, #432]	; (8003b0c <HAL_RCC_OscConfig+0x240>)
 800395c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003960:	6013      	str	r3, [r2, #0]
 8003962:	e00b      	b.n	800397c <HAL_RCC_OscConfig+0xb0>
 8003964:	4b69      	ldr	r3, [pc, #420]	; (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a68      	ldr	r2, [pc, #416]	; (8003b0c <HAL_RCC_OscConfig+0x240>)
 800396a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800396e:	6013      	str	r3, [r2, #0]
 8003970:	4b66      	ldr	r3, [pc, #408]	; (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a65      	ldr	r2, [pc, #404]	; (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003976:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800397a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d013      	beq.n	80039ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003984:	f7fd fbca 	bl	800111c <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800398c:	f7fd fbc6 	bl	800111c <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b64      	cmp	r3, #100	; 0x64
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e207      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800399e:	4b5b      	ldr	r3, [pc, #364]	; (8003b0c <HAL_RCC_OscConfig+0x240>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d0f0      	beq.n	800398c <HAL_RCC_OscConfig+0xc0>
 80039aa:	e014      	b.n	80039d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ac:	f7fd fbb6 	bl	800111c <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039b4:	f7fd fbb2 	bl	800111c <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b64      	cmp	r3, #100	; 0x64
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e1f3      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039c6:	4b51      	ldr	r3, [pc, #324]	; (8003b0c <HAL_RCC_OscConfig+0x240>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1f0      	bne.n	80039b4 <HAL_RCC_OscConfig+0xe8>
 80039d2:	e000      	b.n	80039d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d063      	beq.n	8003aaa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039e2:	4b4a      	ldr	r3, [pc, #296]	; (8003b0c <HAL_RCC_OscConfig+0x240>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f003 030c 	and.w	r3, r3, #12
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00b      	beq.n	8003a06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039ee:	4b47      	ldr	r3, [pc, #284]	; (8003b0c <HAL_RCC_OscConfig+0x240>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039f6:	2b08      	cmp	r3, #8
 80039f8:	d11c      	bne.n	8003a34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039fa:	4b44      	ldr	r3, [pc, #272]	; (8003b0c <HAL_RCC_OscConfig+0x240>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d116      	bne.n	8003a34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a06:	4b41      	ldr	r3, [pc, #260]	; (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d005      	beq.n	8003a1e <HAL_RCC_OscConfig+0x152>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d001      	beq.n	8003a1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e1c7      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a1e:	4b3b      	ldr	r3, [pc, #236]	; (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	4937      	ldr	r1, [pc, #220]	; (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a32:	e03a      	b.n	8003aaa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d020      	beq.n	8003a7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a3c:	4b34      	ldr	r3, [pc, #208]	; (8003b10 <HAL_RCC_OscConfig+0x244>)
 8003a3e:	2201      	movs	r2, #1
 8003a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a42:	f7fd fb6b 	bl	800111c <HAL_GetTick>
 8003a46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a48:	e008      	b.n	8003a5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a4a:	f7fd fb67 	bl	800111c <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d901      	bls.n	8003a5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e1a8      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a5c:	4b2b      	ldr	r3, [pc, #172]	; (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d0f0      	beq.n	8003a4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a68:	4b28      	ldr	r3, [pc, #160]	; (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	00db      	lsls	r3, r3, #3
 8003a76:	4925      	ldr	r1, [pc, #148]	; (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	600b      	str	r3, [r1, #0]
 8003a7c:	e015      	b.n	8003aaa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a7e:	4b24      	ldr	r3, [pc, #144]	; (8003b10 <HAL_RCC_OscConfig+0x244>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a84:	f7fd fb4a 	bl	800111c <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a8c:	f7fd fb46 	bl	800111c <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e187      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a9e:	4b1b      	ldr	r3, [pc, #108]	; (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1f0      	bne.n	8003a8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0308 	and.w	r3, r3, #8
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d036      	beq.n	8003b24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d016      	beq.n	8003aec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003abe:	4b15      	ldr	r3, [pc, #84]	; (8003b14 <HAL_RCC_OscConfig+0x248>)
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac4:	f7fd fb2a 	bl	800111c <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003acc:	f7fd fb26 	bl	800111c <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e167      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ade:	4b0b      	ldr	r3, [pc, #44]	; (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003ae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0f0      	beq.n	8003acc <HAL_RCC_OscConfig+0x200>
 8003aea:	e01b      	b.n	8003b24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003aec:	4b09      	ldr	r3, [pc, #36]	; (8003b14 <HAL_RCC_OscConfig+0x248>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003af2:	f7fd fb13 	bl	800111c <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003af8:	e00e      	b.n	8003b18 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003afa:	f7fd fb0f 	bl	800111c <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d907      	bls.n	8003b18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e150      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
 8003b0c:	40023800 	.word	0x40023800
 8003b10:	42470000 	.word	0x42470000
 8003b14:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b18:	4b88      	ldr	r3, [pc, #544]	; (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003b1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1ea      	bne.n	8003afa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f000 8097 	beq.w	8003c60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b32:	2300      	movs	r3, #0
 8003b34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b36:	4b81      	ldr	r3, [pc, #516]	; (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10f      	bne.n	8003b62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b42:	2300      	movs	r3, #0
 8003b44:	60bb      	str	r3, [r7, #8]
 8003b46:	4b7d      	ldr	r3, [pc, #500]	; (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4a:	4a7c      	ldr	r2, [pc, #496]	; (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b50:	6413      	str	r3, [r2, #64]	; 0x40
 8003b52:	4b7a      	ldr	r3, [pc, #488]	; (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b5a:	60bb      	str	r3, [r7, #8]
 8003b5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b62:	4b77      	ldr	r3, [pc, #476]	; (8003d40 <HAL_RCC_OscConfig+0x474>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d118      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b6e:	4b74      	ldr	r3, [pc, #464]	; (8003d40 <HAL_RCC_OscConfig+0x474>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a73      	ldr	r2, [pc, #460]	; (8003d40 <HAL_RCC_OscConfig+0x474>)
 8003b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b7a:	f7fd facf 	bl	800111c <HAL_GetTick>
 8003b7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b80:	e008      	b.n	8003b94 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b82:	f7fd facb 	bl	800111c <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e10c      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b94:	4b6a      	ldr	r3, [pc, #424]	; (8003d40 <HAL_RCC_OscConfig+0x474>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d0f0      	beq.n	8003b82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d106      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x2ea>
 8003ba8:	4b64      	ldr	r3, [pc, #400]	; (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bac:	4a63      	ldr	r2, [pc, #396]	; (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003bae:	f043 0301 	orr.w	r3, r3, #1
 8003bb2:	6713      	str	r3, [r2, #112]	; 0x70
 8003bb4:	e01c      	b.n	8003bf0 <HAL_RCC_OscConfig+0x324>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	2b05      	cmp	r3, #5
 8003bbc:	d10c      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x30c>
 8003bbe:	4b5f      	ldr	r3, [pc, #380]	; (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc2:	4a5e      	ldr	r2, [pc, #376]	; (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003bc4:	f043 0304 	orr.w	r3, r3, #4
 8003bc8:	6713      	str	r3, [r2, #112]	; 0x70
 8003bca:	4b5c      	ldr	r3, [pc, #368]	; (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bce:	4a5b      	ldr	r2, [pc, #364]	; (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003bd0:	f043 0301 	orr.w	r3, r3, #1
 8003bd4:	6713      	str	r3, [r2, #112]	; 0x70
 8003bd6:	e00b      	b.n	8003bf0 <HAL_RCC_OscConfig+0x324>
 8003bd8:	4b58      	ldr	r3, [pc, #352]	; (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bdc:	4a57      	ldr	r2, [pc, #348]	; (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003bde:	f023 0301 	bic.w	r3, r3, #1
 8003be2:	6713      	str	r3, [r2, #112]	; 0x70
 8003be4:	4b55      	ldr	r3, [pc, #340]	; (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be8:	4a54      	ldr	r2, [pc, #336]	; (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003bea:	f023 0304 	bic.w	r3, r3, #4
 8003bee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d015      	beq.n	8003c24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf8:	f7fd fa90 	bl	800111c <HAL_GetTick>
 8003bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bfe:	e00a      	b.n	8003c16 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c00:	f7fd fa8c 	bl	800111c <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e0cb      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c16:	4b49      	ldr	r3, [pc, #292]	; (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d0ee      	beq.n	8003c00 <HAL_RCC_OscConfig+0x334>
 8003c22:	e014      	b.n	8003c4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c24:	f7fd fa7a 	bl	800111c <HAL_GetTick>
 8003c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c2a:	e00a      	b.n	8003c42 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c2c:	f7fd fa76 	bl	800111c <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e0b5      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c42:	4b3e      	ldr	r3, [pc, #248]	; (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1ee      	bne.n	8003c2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c4e:	7dfb      	ldrb	r3, [r7, #23]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d105      	bne.n	8003c60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c54:	4b39      	ldr	r3, [pc, #228]	; (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c58:	4a38      	ldr	r2, [pc, #224]	; (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003c5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c5e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f000 80a1 	beq.w	8003dac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c6a:	4b34      	ldr	r3, [pc, #208]	; (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f003 030c 	and.w	r3, r3, #12
 8003c72:	2b08      	cmp	r3, #8
 8003c74:	d05c      	beq.n	8003d30 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d141      	bne.n	8003d02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c7e:	4b31      	ldr	r3, [pc, #196]	; (8003d44 <HAL_RCC_OscConfig+0x478>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c84:	f7fd fa4a 	bl	800111c <HAL_GetTick>
 8003c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c8a:	e008      	b.n	8003c9e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c8c:	f7fd fa46 	bl	800111c <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e087      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c9e:	4b27      	ldr	r3, [pc, #156]	; (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1f0      	bne.n	8003c8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	69da      	ldr	r2, [r3, #28]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb8:	019b      	lsls	r3, r3, #6
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc0:	085b      	lsrs	r3, r3, #1
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	041b      	lsls	r3, r3, #16
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ccc:	061b      	lsls	r3, r3, #24
 8003cce:	491b      	ldr	r1, [pc, #108]	; (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cd4:	4b1b      	ldr	r3, [pc, #108]	; (8003d44 <HAL_RCC_OscConfig+0x478>)
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cda:	f7fd fa1f 	bl	800111c <HAL_GetTick>
 8003cde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ce0:	e008      	b.n	8003cf4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ce2:	f7fd fa1b 	bl	800111c <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d901      	bls.n	8003cf4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e05c      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cf4:	4b11      	ldr	r3, [pc, #68]	; (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d0f0      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x416>
 8003d00:	e054      	b.n	8003dac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d02:	4b10      	ldr	r3, [pc, #64]	; (8003d44 <HAL_RCC_OscConfig+0x478>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d08:	f7fd fa08 	bl	800111c <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d0e:	e008      	b.n	8003d22 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d10:	f7fd fa04 	bl	800111c <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e045      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d22:	4b06      	ldr	r3, [pc, #24]	; (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1f0      	bne.n	8003d10 <HAL_RCC_OscConfig+0x444>
 8003d2e:	e03d      	b.n	8003dac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d107      	bne.n	8003d48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e038      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
 8003d3c:	40023800 	.word	0x40023800
 8003d40:	40007000 	.word	0x40007000
 8003d44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d48:	4b1b      	ldr	r3, [pc, #108]	; (8003db8 <HAL_RCC_OscConfig+0x4ec>)
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d028      	beq.n	8003da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d121      	bne.n	8003da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d11a      	bne.n	8003da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d78:	4013      	ands	r3, r2
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d111      	bne.n	8003da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8e:	085b      	lsrs	r3, r3, #1
 8003d90:	3b01      	subs	r3, #1
 8003d92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d107      	bne.n	8003da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d001      	beq.n	8003dac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e000      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3718      	adds	r7, #24
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	40023800 	.word	0x40023800

08003dbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d101      	bne.n	8003dd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e0cc      	b.n	8003f6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dd0:	4b68      	ldr	r3, [pc, #416]	; (8003f74 <HAL_RCC_ClockConfig+0x1b8>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d90c      	bls.n	8003df8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dde:	4b65      	ldr	r3, [pc, #404]	; (8003f74 <HAL_RCC_ClockConfig+0x1b8>)
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	b2d2      	uxtb	r2, r2
 8003de4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003de6:	4b63      	ldr	r3, [pc, #396]	; (8003f74 <HAL_RCC_ClockConfig+0x1b8>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0307 	and.w	r3, r3, #7
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d001      	beq.n	8003df8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e0b8      	b.n	8003f6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d020      	beq.n	8003e46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0304 	and.w	r3, r3, #4
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d005      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e10:	4b59      	ldr	r3, [pc, #356]	; (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	4a58      	ldr	r2, [pc, #352]	; (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003e16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0308 	and.w	r3, r3, #8
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d005      	beq.n	8003e34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e28:	4b53      	ldr	r3, [pc, #332]	; (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	4a52      	ldr	r2, [pc, #328]	; (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e34:	4b50      	ldr	r3, [pc, #320]	; (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	494d      	ldr	r1, [pc, #308]	; (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d044      	beq.n	8003edc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d107      	bne.n	8003e6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e5a:	4b47      	ldr	r3, [pc, #284]	; (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d119      	bne.n	8003e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e07f      	b.n	8003f6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d003      	beq.n	8003e7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e76:	2b03      	cmp	r3, #3
 8003e78:	d107      	bne.n	8003e8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e7a:	4b3f      	ldr	r3, [pc, #252]	; (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d109      	bne.n	8003e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e06f      	b.n	8003f6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e8a:	4b3b      	ldr	r3, [pc, #236]	; (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e067      	b.n	8003f6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e9a:	4b37      	ldr	r3, [pc, #220]	; (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f023 0203 	bic.w	r2, r3, #3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	4934      	ldr	r1, [pc, #208]	; (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003eac:	f7fd f936 	bl	800111c <HAL_GetTick>
 8003eb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eb2:	e00a      	b.n	8003eca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eb4:	f7fd f932 	bl	800111c <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e04f      	b.n	8003f6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eca:	4b2b      	ldr	r3, [pc, #172]	; (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f003 020c 	and.w	r2, r3, #12
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d1eb      	bne.n	8003eb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003edc:	4b25      	ldr	r3, [pc, #148]	; (8003f74 <HAL_RCC_ClockConfig+0x1b8>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0307 	and.w	r3, r3, #7
 8003ee4:	683a      	ldr	r2, [r7, #0]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d20c      	bcs.n	8003f04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eea:	4b22      	ldr	r3, [pc, #136]	; (8003f74 <HAL_RCC_ClockConfig+0x1b8>)
 8003eec:	683a      	ldr	r2, [r7, #0]
 8003eee:	b2d2      	uxtb	r2, r2
 8003ef0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ef2:	4b20      	ldr	r3, [pc, #128]	; (8003f74 <HAL_RCC_ClockConfig+0x1b8>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0307 	and.w	r3, r3, #7
 8003efa:	683a      	ldr	r2, [r7, #0]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d001      	beq.n	8003f04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e032      	b.n	8003f6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0304 	and.w	r3, r3, #4
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d008      	beq.n	8003f22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f10:	4b19      	ldr	r3, [pc, #100]	; (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	4916      	ldr	r1, [pc, #88]	; (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0308 	and.w	r3, r3, #8
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d009      	beq.n	8003f42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f2e:	4b12      	ldr	r3, [pc, #72]	; (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	00db      	lsls	r3, r3, #3
 8003f3c:	490e      	ldr	r1, [pc, #56]	; (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f42:	f000 f821 	bl	8003f88 <HAL_RCC_GetSysClockFreq>
 8003f46:	4602      	mov	r2, r0
 8003f48:	4b0b      	ldr	r3, [pc, #44]	; (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	091b      	lsrs	r3, r3, #4
 8003f4e:	f003 030f 	and.w	r3, r3, #15
 8003f52:	490a      	ldr	r1, [pc, #40]	; (8003f7c <HAL_RCC_ClockConfig+0x1c0>)
 8003f54:	5ccb      	ldrb	r3, [r1, r3]
 8003f56:	fa22 f303 	lsr.w	r3, r2, r3
 8003f5a:	4a09      	ldr	r2, [pc, #36]	; (8003f80 <HAL_RCC_ClockConfig+0x1c4>)
 8003f5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f5e:	4b09      	ldr	r3, [pc, #36]	; (8003f84 <HAL_RCC_ClockConfig+0x1c8>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7fd f896 	bl	8001094 <HAL_InitTick>

  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	40023c00 	.word	0x40023c00
 8003f78:	40023800 	.word	0x40023800
 8003f7c:	08004f78 	.word	0x08004f78
 8003f80:	20000000 	.word	0x20000000
 8003f84:	20000004 	.word	0x20000004

08003f88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f8c:	b094      	sub	sp, #80	; 0x50
 8003f8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f90:	2300      	movs	r3, #0
 8003f92:	647b      	str	r3, [r7, #68]	; 0x44
 8003f94:	2300      	movs	r3, #0
 8003f96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f98:	2300      	movs	r3, #0
 8003f9a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fa0:	4b79      	ldr	r3, [pc, #484]	; (8004188 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	f003 030c 	and.w	r3, r3, #12
 8003fa8:	2b08      	cmp	r3, #8
 8003faa:	d00d      	beq.n	8003fc8 <HAL_RCC_GetSysClockFreq+0x40>
 8003fac:	2b08      	cmp	r3, #8
 8003fae:	f200 80e1 	bhi.w	8004174 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d002      	beq.n	8003fbc <HAL_RCC_GetSysClockFreq+0x34>
 8003fb6:	2b04      	cmp	r3, #4
 8003fb8:	d003      	beq.n	8003fc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003fba:	e0db      	b.n	8004174 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fbc:	4b73      	ldr	r3, [pc, #460]	; (800418c <HAL_RCC_GetSysClockFreq+0x204>)
 8003fbe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003fc0:	e0db      	b.n	800417a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fc2:	4b73      	ldr	r3, [pc, #460]	; (8004190 <HAL_RCC_GetSysClockFreq+0x208>)
 8003fc4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fc6:	e0d8      	b.n	800417a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fc8:	4b6f      	ldr	r3, [pc, #444]	; (8004188 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fd0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fd2:	4b6d      	ldr	r3, [pc, #436]	; (8004188 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d063      	beq.n	80040a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fde:	4b6a      	ldr	r3, [pc, #424]	; (8004188 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	099b      	lsrs	r3, r3, #6
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fe8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ff0:	633b      	str	r3, [r7, #48]	; 0x30
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	637b      	str	r3, [r7, #52]	; 0x34
 8003ff6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003ffa:	4622      	mov	r2, r4
 8003ffc:	462b      	mov	r3, r5
 8003ffe:	f04f 0000 	mov.w	r0, #0
 8004002:	f04f 0100 	mov.w	r1, #0
 8004006:	0159      	lsls	r1, r3, #5
 8004008:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800400c:	0150      	lsls	r0, r2, #5
 800400e:	4602      	mov	r2, r0
 8004010:	460b      	mov	r3, r1
 8004012:	4621      	mov	r1, r4
 8004014:	1a51      	subs	r1, r2, r1
 8004016:	6139      	str	r1, [r7, #16]
 8004018:	4629      	mov	r1, r5
 800401a:	eb63 0301 	sbc.w	r3, r3, r1
 800401e:	617b      	str	r3, [r7, #20]
 8004020:	f04f 0200 	mov.w	r2, #0
 8004024:	f04f 0300 	mov.w	r3, #0
 8004028:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800402c:	4659      	mov	r1, fp
 800402e:	018b      	lsls	r3, r1, #6
 8004030:	4651      	mov	r1, sl
 8004032:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004036:	4651      	mov	r1, sl
 8004038:	018a      	lsls	r2, r1, #6
 800403a:	4651      	mov	r1, sl
 800403c:	ebb2 0801 	subs.w	r8, r2, r1
 8004040:	4659      	mov	r1, fp
 8004042:	eb63 0901 	sbc.w	r9, r3, r1
 8004046:	f04f 0200 	mov.w	r2, #0
 800404a:	f04f 0300 	mov.w	r3, #0
 800404e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004052:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004056:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800405a:	4690      	mov	r8, r2
 800405c:	4699      	mov	r9, r3
 800405e:	4623      	mov	r3, r4
 8004060:	eb18 0303 	adds.w	r3, r8, r3
 8004064:	60bb      	str	r3, [r7, #8]
 8004066:	462b      	mov	r3, r5
 8004068:	eb49 0303 	adc.w	r3, r9, r3
 800406c:	60fb      	str	r3, [r7, #12]
 800406e:	f04f 0200 	mov.w	r2, #0
 8004072:	f04f 0300 	mov.w	r3, #0
 8004076:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800407a:	4629      	mov	r1, r5
 800407c:	024b      	lsls	r3, r1, #9
 800407e:	4621      	mov	r1, r4
 8004080:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004084:	4621      	mov	r1, r4
 8004086:	024a      	lsls	r2, r1, #9
 8004088:	4610      	mov	r0, r2
 800408a:	4619      	mov	r1, r3
 800408c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800408e:	2200      	movs	r2, #0
 8004090:	62bb      	str	r3, [r7, #40]	; 0x28
 8004092:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004094:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004098:	f7fc f89e 	bl	80001d8 <__aeabi_uldivmod>
 800409c:	4602      	mov	r2, r0
 800409e:	460b      	mov	r3, r1
 80040a0:	4613      	mov	r3, r2
 80040a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040a4:	e058      	b.n	8004158 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040a6:	4b38      	ldr	r3, [pc, #224]	; (8004188 <HAL_RCC_GetSysClockFreq+0x200>)
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	099b      	lsrs	r3, r3, #6
 80040ac:	2200      	movs	r2, #0
 80040ae:	4618      	mov	r0, r3
 80040b0:	4611      	mov	r1, r2
 80040b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80040b6:	623b      	str	r3, [r7, #32]
 80040b8:	2300      	movs	r3, #0
 80040ba:	627b      	str	r3, [r7, #36]	; 0x24
 80040bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80040c0:	4642      	mov	r2, r8
 80040c2:	464b      	mov	r3, r9
 80040c4:	f04f 0000 	mov.w	r0, #0
 80040c8:	f04f 0100 	mov.w	r1, #0
 80040cc:	0159      	lsls	r1, r3, #5
 80040ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040d2:	0150      	lsls	r0, r2, #5
 80040d4:	4602      	mov	r2, r0
 80040d6:	460b      	mov	r3, r1
 80040d8:	4641      	mov	r1, r8
 80040da:	ebb2 0a01 	subs.w	sl, r2, r1
 80040de:	4649      	mov	r1, r9
 80040e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80040e4:	f04f 0200 	mov.w	r2, #0
 80040e8:	f04f 0300 	mov.w	r3, #0
 80040ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80040f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80040f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80040f8:	ebb2 040a 	subs.w	r4, r2, sl
 80040fc:	eb63 050b 	sbc.w	r5, r3, fp
 8004100:	f04f 0200 	mov.w	r2, #0
 8004104:	f04f 0300 	mov.w	r3, #0
 8004108:	00eb      	lsls	r3, r5, #3
 800410a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800410e:	00e2      	lsls	r2, r4, #3
 8004110:	4614      	mov	r4, r2
 8004112:	461d      	mov	r5, r3
 8004114:	4643      	mov	r3, r8
 8004116:	18e3      	adds	r3, r4, r3
 8004118:	603b      	str	r3, [r7, #0]
 800411a:	464b      	mov	r3, r9
 800411c:	eb45 0303 	adc.w	r3, r5, r3
 8004120:	607b      	str	r3, [r7, #4]
 8004122:	f04f 0200 	mov.w	r2, #0
 8004126:	f04f 0300 	mov.w	r3, #0
 800412a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800412e:	4629      	mov	r1, r5
 8004130:	028b      	lsls	r3, r1, #10
 8004132:	4621      	mov	r1, r4
 8004134:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004138:	4621      	mov	r1, r4
 800413a:	028a      	lsls	r2, r1, #10
 800413c:	4610      	mov	r0, r2
 800413e:	4619      	mov	r1, r3
 8004140:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004142:	2200      	movs	r2, #0
 8004144:	61bb      	str	r3, [r7, #24]
 8004146:	61fa      	str	r2, [r7, #28]
 8004148:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800414c:	f7fc f844 	bl	80001d8 <__aeabi_uldivmod>
 8004150:	4602      	mov	r2, r0
 8004152:	460b      	mov	r3, r1
 8004154:	4613      	mov	r3, r2
 8004156:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004158:	4b0b      	ldr	r3, [pc, #44]	; (8004188 <HAL_RCC_GetSysClockFreq+0x200>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	0c1b      	lsrs	r3, r3, #16
 800415e:	f003 0303 	and.w	r3, r3, #3
 8004162:	3301      	adds	r3, #1
 8004164:	005b      	lsls	r3, r3, #1
 8004166:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004168:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800416a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800416c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004170:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004172:	e002      	b.n	800417a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004174:	4b05      	ldr	r3, [pc, #20]	; (800418c <HAL_RCC_GetSysClockFreq+0x204>)
 8004176:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004178:	bf00      	nop
    }
  }
  return sysclockfreq;
 800417a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800417c:	4618      	mov	r0, r3
 800417e:	3750      	adds	r7, #80	; 0x50
 8004180:	46bd      	mov	sp, r7
 8004182:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004186:	bf00      	nop
 8004188:	40023800 	.word	0x40023800
 800418c:	00f42400 	.word	0x00f42400
 8004190:	007a1200 	.word	0x007a1200

08004194 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004194:	b480      	push	{r7}
 8004196:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004198:	4b03      	ldr	r3, [pc, #12]	; (80041a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800419a:	681b      	ldr	r3, [r3, #0]
}
 800419c:	4618      	mov	r0, r3
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	20000000 	.word	0x20000000

080041ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041b0:	f7ff fff0 	bl	8004194 <HAL_RCC_GetHCLKFreq>
 80041b4:	4602      	mov	r2, r0
 80041b6:	4b05      	ldr	r3, [pc, #20]	; (80041cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	0a9b      	lsrs	r3, r3, #10
 80041bc:	f003 0307 	and.w	r3, r3, #7
 80041c0:	4903      	ldr	r1, [pc, #12]	; (80041d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041c2:	5ccb      	ldrb	r3, [r1, r3]
 80041c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	40023800 	.word	0x40023800
 80041d0:	08004f88 	.word	0x08004f88

080041d4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b086      	sub	sp, #24
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041dc:	2300      	movs	r3, #0
 80041de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80041e0:	2300      	movs	r3, #0
 80041e2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0301 	and.w	r3, r3, #1
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d105      	bne.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d038      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80041fc:	4b68      	ldr	r3, [pc, #416]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80041fe:	2200      	movs	r2, #0
 8004200:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004202:	f7fc ff8b 	bl	800111c <HAL_GetTick>
 8004206:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004208:	e008      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800420a:	f7fc ff87 	bl	800111c <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	2b02      	cmp	r3, #2
 8004216:	d901      	bls.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e0bd      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800421c:	4b61      	ldr	r3, [pc, #388]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d1f0      	bne.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	019b      	lsls	r3, r3, #6
 8004232:	431a      	orrs	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	071b      	lsls	r3, r3, #28
 800423a:	495a      	ldr	r1, [pc, #360]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800423c:	4313      	orrs	r3, r2
 800423e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004242:	4b57      	ldr	r3, [pc, #348]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004244:	2201      	movs	r2, #1
 8004246:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004248:	f7fc ff68 	bl	800111c <HAL_GetTick>
 800424c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800424e:	e008      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004250:	f7fc ff64 	bl	800111c <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	2b02      	cmp	r3, #2
 800425c:	d901      	bls.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e09a      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004262:	4b50      	ldr	r3, [pc, #320]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d0f0      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b00      	cmp	r3, #0
 8004278:	f000 8083 	beq.w	8004382 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800427c:	2300      	movs	r3, #0
 800427e:	60fb      	str	r3, [r7, #12]
 8004280:	4b48      	ldr	r3, [pc, #288]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004284:	4a47      	ldr	r2, [pc, #284]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004286:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800428a:	6413      	str	r3, [r2, #64]	; 0x40
 800428c:	4b45      	ldr	r3, [pc, #276]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800428e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004294:	60fb      	str	r3, [r7, #12]
 8004296:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004298:	4b43      	ldr	r3, [pc, #268]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a42      	ldr	r2, [pc, #264]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800429e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042a2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80042a4:	f7fc ff3a 	bl	800111c <HAL_GetTick>
 80042a8:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80042aa:	e008      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80042ac:	f7fc ff36 	bl	800111c <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d901      	bls.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e06c      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80042be:	4b3a      	ldr	r3, [pc, #232]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d0f0      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80042ca:	4b36      	ldr	r3, [pc, #216]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042d2:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d02f      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x166>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d028      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042e8:	4b2e      	ldr	r3, [pc, #184]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042f0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042f2:	4b2e      	ldr	r3, [pc, #184]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80042f4:	2201      	movs	r2, #1
 80042f6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042f8:	4b2c      	ldr	r3, [pc, #176]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80042fe:	4a29      	ldr	r2, [pc, #164]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004304:	4b27      	ldr	r3, [pc, #156]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004308:	f003 0301 	and.w	r3, r3, #1
 800430c:	2b01      	cmp	r3, #1
 800430e:	d114      	bne.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004310:	f7fc ff04 	bl	800111c <HAL_GetTick>
 8004314:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004316:	e00a      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004318:	f7fc ff00 	bl	800111c <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	f241 3288 	movw	r2, #5000	; 0x1388
 8004326:	4293      	cmp	r3, r2
 8004328:	d901      	bls.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e034      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800432e:	4b1d      	ldr	r3, [pc, #116]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d0ee      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004342:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004346:	d10d      	bne.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004348:	4b16      	ldr	r3, [pc, #88]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004358:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800435c:	4911      	ldr	r1, [pc, #68]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800435e:	4313      	orrs	r3, r2
 8004360:	608b      	str	r3, [r1, #8]
 8004362:	e005      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004364:	4b0f      	ldr	r3, [pc, #60]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	4a0e      	ldr	r2, [pc, #56]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800436a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800436e:	6093      	str	r3, [r2, #8]
 8004370:	4b0c      	ldr	r3, [pc, #48]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004372:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800437c:	4909      	ldr	r1, [pc, #36]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800437e:	4313      	orrs	r3, r2
 8004380:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0308 	and.w	r3, r3, #8
 800438a:	2b00      	cmp	r3, #0
 800438c:	d003      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	7d1a      	ldrb	r2, [r3, #20]
 8004392:	4b07      	ldr	r3, [pc, #28]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004394:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3718      	adds	r7, #24
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	42470068 	.word	0x42470068
 80043a4:	40023800 	.word	0x40023800
 80043a8:	40007000 	.word	0x40007000
 80043ac:	42470e40 	.word	0x42470e40
 80043b0:	424711e0 	.word	0x424711e0

080043b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b087      	sub	sp, #28
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80043bc:	2300      	movs	r3, #0
 80043be:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80043c0:	2300      	movs	r3, #0
 80043c2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80043c4:	2300      	movs	r3, #0
 80043c6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80043c8:	2300      	movs	r3, #0
 80043ca:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d141      	bne.n	8004456 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80043d2:	4b25      	ldr	r3, [pc, #148]	; (8004468 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043da:	60fb      	str	r3, [r7, #12]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d006      	beq.n	80043f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043e8:	d131      	bne.n	800444e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80043ea:	4b20      	ldr	r3, [pc, #128]	; (800446c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80043ec:	617b      	str	r3, [r7, #20]
          break;
 80043ee:	e031      	b.n	8004454 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80043f0:	4b1d      	ldr	r3, [pc, #116]	; (8004468 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043fc:	d109      	bne.n	8004412 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80043fe:	4b1a      	ldr	r3, [pc, #104]	; (8004468 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004400:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004404:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004408:	4a19      	ldr	r2, [pc, #100]	; (8004470 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800440a:	fbb2 f3f3 	udiv	r3, r2, r3
 800440e:	613b      	str	r3, [r7, #16]
 8004410:	e008      	b.n	8004424 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004412:	4b15      	ldr	r3, [pc, #84]	; (8004468 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004414:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004418:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800441c:	4a15      	ldr	r2, [pc, #84]	; (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800441e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004422:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004424:	4b10      	ldr	r3, [pc, #64]	; (8004468 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004426:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800442a:	099b      	lsrs	r3, r3, #6
 800442c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	fb02 f303 	mul.w	r3, r2, r3
 8004436:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004438:	4b0b      	ldr	r3, [pc, #44]	; (8004468 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800443a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800443e:	0f1b      	lsrs	r3, r3, #28
 8004440:	f003 0307 	and.w	r3, r3, #7
 8004444:	68ba      	ldr	r2, [r7, #8]
 8004446:	fbb2 f3f3 	udiv	r3, r2, r3
 800444a:	617b      	str	r3, [r7, #20]
          break;
 800444c:	e002      	b.n	8004454 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800444e:	2300      	movs	r3, #0
 8004450:	617b      	str	r3, [r7, #20]
          break;
 8004452:	bf00      	nop
        }
      }
      break;
 8004454:	e000      	b.n	8004458 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
  default:
    {
       break;
 8004456:	bf00      	nop
    }
  }
  return frequency;
 8004458:	697b      	ldr	r3, [r7, #20]
}
 800445a:	4618      	mov	r0, r3
 800445c:	371c      	adds	r7, #28
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	40023800 	.word	0x40023800
 800446c:	00bb8000 	.word	0x00bb8000
 8004470:	007a1200 	.word	0x007a1200
 8004474:	00f42400 	.word	0x00f42400

08004478 <memset>:
 8004478:	4402      	add	r2, r0
 800447a:	4603      	mov	r3, r0
 800447c:	4293      	cmp	r3, r2
 800447e:	d100      	bne.n	8004482 <memset+0xa>
 8004480:	4770      	bx	lr
 8004482:	f803 1b01 	strb.w	r1, [r3], #1
 8004486:	e7f9      	b.n	800447c <memset+0x4>

08004488 <__libc_init_array>:
 8004488:	b570      	push	{r4, r5, r6, lr}
 800448a:	4d0d      	ldr	r5, [pc, #52]	; (80044c0 <__libc_init_array+0x38>)
 800448c:	4c0d      	ldr	r4, [pc, #52]	; (80044c4 <__libc_init_array+0x3c>)
 800448e:	1b64      	subs	r4, r4, r5
 8004490:	10a4      	asrs	r4, r4, #2
 8004492:	2600      	movs	r6, #0
 8004494:	42a6      	cmp	r6, r4
 8004496:	d109      	bne.n	80044ac <__libc_init_array+0x24>
 8004498:	4d0b      	ldr	r5, [pc, #44]	; (80044c8 <__libc_init_array+0x40>)
 800449a:	4c0c      	ldr	r4, [pc, #48]	; (80044cc <__libc_init_array+0x44>)
 800449c:	f000 fd60 	bl	8004f60 <_init>
 80044a0:	1b64      	subs	r4, r4, r5
 80044a2:	10a4      	asrs	r4, r4, #2
 80044a4:	2600      	movs	r6, #0
 80044a6:	42a6      	cmp	r6, r4
 80044a8:	d105      	bne.n	80044b6 <__libc_init_array+0x2e>
 80044aa:	bd70      	pop	{r4, r5, r6, pc}
 80044ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80044b0:	4798      	blx	r3
 80044b2:	3601      	adds	r6, #1
 80044b4:	e7ee      	b.n	8004494 <__libc_init_array+0xc>
 80044b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80044ba:	4798      	blx	r3
 80044bc:	3601      	adds	r6, #1
 80044be:	e7f2      	b.n	80044a6 <__libc_init_array+0x1e>
 80044c0:	08005370 	.word	0x08005370
 80044c4:	08005370 	.word	0x08005370
 80044c8:	08005370 	.word	0x08005370
 80044cc:	08005374 	.word	0x08005374

080044d0 <memcpy>:
 80044d0:	440a      	add	r2, r1
 80044d2:	4291      	cmp	r1, r2
 80044d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80044d8:	d100      	bne.n	80044dc <memcpy+0xc>
 80044da:	4770      	bx	lr
 80044dc:	b510      	push	{r4, lr}
 80044de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044e6:	4291      	cmp	r1, r2
 80044e8:	d1f9      	bne.n	80044de <memcpy+0xe>
 80044ea:	bd10      	pop	{r4, pc}

080044ec <sinf>:
 80044ec:	ee10 3a10 	vmov	r3, s0
 80044f0:	b507      	push	{r0, r1, r2, lr}
 80044f2:	4a1f      	ldr	r2, [pc, #124]	; (8004570 <sinf+0x84>)
 80044f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80044f8:	4293      	cmp	r3, r2
 80044fa:	dc07      	bgt.n	800450c <sinf+0x20>
 80044fc:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8004574 <sinf+0x88>
 8004500:	2000      	movs	r0, #0
 8004502:	b003      	add	sp, #12
 8004504:	f85d eb04 	ldr.w	lr, [sp], #4
 8004508:	f000 b894 	b.w	8004634 <__kernel_sinf>
 800450c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004510:	db04      	blt.n	800451c <sinf+0x30>
 8004512:	ee30 0a40 	vsub.f32	s0, s0, s0
 8004516:	b003      	add	sp, #12
 8004518:	f85d fb04 	ldr.w	pc, [sp], #4
 800451c:	4668      	mov	r0, sp
 800451e:	f000 f8d1 	bl	80046c4 <__ieee754_rem_pio2f>
 8004522:	f000 0003 	and.w	r0, r0, #3
 8004526:	2801      	cmp	r0, #1
 8004528:	d00a      	beq.n	8004540 <sinf+0x54>
 800452a:	2802      	cmp	r0, #2
 800452c:	d00f      	beq.n	800454e <sinf+0x62>
 800452e:	b9c0      	cbnz	r0, 8004562 <sinf+0x76>
 8004530:	eddd 0a01 	vldr	s1, [sp, #4]
 8004534:	ed9d 0a00 	vldr	s0, [sp]
 8004538:	2001      	movs	r0, #1
 800453a:	f000 f87b 	bl	8004634 <__kernel_sinf>
 800453e:	e7ea      	b.n	8004516 <sinf+0x2a>
 8004540:	eddd 0a01 	vldr	s1, [sp, #4]
 8004544:	ed9d 0a00 	vldr	s0, [sp]
 8004548:	f000 f816 	bl	8004578 <__kernel_cosf>
 800454c:	e7e3      	b.n	8004516 <sinf+0x2a>
 800454e:	eddd 0a01 	vldr	s1, [sp, #4]
 8004552:	ed9d 0a00 	vldr	s0, [sp]
 8004556:	2001      	movs	r0, #1
 8004558:	f000 f86c 	bl	8004634 <__kernel_sinf>
 800455c:	eeb1 0a40 	vneg.f32	s0, s0
 8004560:	e7d9      	b.n	8004516 <sinf+0x2a>
 8004562:	eddd 0a01 	vldr	s1, [sp, #4]
 8004566:	ed9d 0a00 	vldr	s0, [sp]
 800456a:	f000 f805 	bl	8004578 <__kernel_cosf>
 800456e:	e7f5      	b.n	800455c <sinf+0x70>
 8004570:	3f490fd8 	.word	0x3f490fd8
 8004574:	00000000 	.word	0x00000000

08004578 <__kernel_cosf>:
 8004578:	ee10 3a10 	vmov	r3, s0
 800457c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004580:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8004584:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004588:	da05      	bge.n	8004596 <__kernel_cosf+0x1e>
 800458a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800458e:	ee17 2a90 	vmov	r2, s15
 8004592:	2a00      	cmp	r2, #0
 8004594:	d03b      	beq.n	800460e <__kernel_cosf+0x96>
 8004596:	ee20 7a00 	vmul.f32	s14, s0, s0
 800459a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8004614 <__kernel_cosf+0x9c>
 800459e:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8004618 <__kernel_cosf+0xa0>
 80045a2:	4a1e      	ldr	r2, [pc, #120]	; (800461c <__kernel_cosf+0xa4>)
 80045a4:	eea7 6a27 	vfma.f32	s12, s14, s15
 80045a8:	4293      	cmp	r3, r2
 80045aa:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8004620 <__kernel_cosf+0xa8>
 80045ae:	eee6 7a07 	vfma.f32	s15, s12, s14
 80045b2:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8004624 <__kernel_cosf+0xac>
 80045b6:	eea7 6a87 	vfma.f32	s12, s15, s14
 80045ba:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8004628 <__kernel_cosf+0xb0>
 80045be:	eee6 7a07 	vfma.f32	s15, s12, s14
 80045c2:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 800462c <__kernel_cosf+0xb4>
 80045c6:	eea7 6a87 	vfma.f32	s12, s15, s14
 80045ca:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 80045ce:	ee26 6a07 	vmul.f32	s12, s12, s14
 80045d2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80045d6:	eee7 0a06 	vfma.f32	s1, s14, s12
 80045da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045de:	dc04      	bgt.n	80045ea <__kernel_cosf+0x72>
 80045e0:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80045e4:	ee36 0ae7 	vsub.f32	s0, s13, s15
 80045e8:	4770      	bx	lr
 80045ea:	4a11      	ldr	r2, [pc, #68]	; (8004630 <__kernel_cosf+0xb8>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	bfda      	itte	le
 80045f0:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80045f4:	ee07 3a10 	vmovle	s14, r3
 80045f8:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 80045fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004600:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8004604:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8004608:	ee30 0a67 	vsub.f32	s0, s0, s15
 800460c:	4770      	bx	lr
 800460e:	eeb0 0a66 	vmov.f32	s0, s13
 8004612:	4770      	bx	lr
 8004614:	ad47d74e 	.word	0xad47d74e
 8004618:	310f74f6 	.word	0x310f74f6
 800461c:	3e999999 	.word	0x3e999999
 8004620:	b493f27c 	.word	0xb493f27c
 8004624:	37d00d01 	.word	0x37d00d01
 8004628:	bab60b61 	.word	0xbab60b61
 800462c:	3d2aaaab 	.word	0x3d2aaaab
 8004630:	3f480000 	.word	0x3f480000

08004634 <__kernel_sinf>:
 8004634:	ee10 3a10 	vmov	r3, s0
 8004638:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800463c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8004640:	da04      	bge.n	800464c <__kernel_sinf+0x18>
 8004642:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004646:	ee17 3a90 	vmov	r3, s15
 800464a:	b35b      	cbz	r3, 80046a4 <__kernel_sinf+0x70>
 800464c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8004650:	eddf 7a15 	vldr	s15, [pc, #84]	; 80046a8 <__kernel_sinf+0x74>
 8004654:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80046ac <__kernel_sinf+0x78>
 8004658:	eea7 6a27 	vfma.f32	s12, s14, s15
 800465c:	eddf 7a14 	vldr	s15, [pc, #80]	; 80046b0 <__kernel_sinf+0x7c>
 8004660:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004664:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80046b4 <__kernel_sinf+0x80>
 8004668:	eea7 6a87 	vfma.f32	s12, s15, s14
 800466c:	eddf 7a12 	vldr	s15, [pc, #72]	; 80046b8 <__kernel_sinf+0x84>
 8004670:	ee60 6a07 	vmul.f32	s13, s0, s14
 8004674:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004678:	b930      	cbnz	r0, 8004688 <__kernel_sinf+0x54>
 800467a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80046bc <__kernel_sinf+0x88>
 800467e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004682:	eea6 0a26 	vfma.f32	s0, s12, s13
 8004686:	4770      	bx	lr
 8004688:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800468c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8004690:	eee0 7a86 	vfma.f32	s15, s1, s12
 8004694:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8004698:	eddf 7a09 	vldr	s15, [pc, #36]	; 80046c0 <__kernel_sinf+0x8c>
 800469c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80046a0:	ee30 0a60 	vsub.f32	s0, s0, s1
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	2f2ec9d3 	.word	0x2f2ec9d3
 80046ac:	b2d72f34 	.word	0xb2d72f34
 80046b0:	3638ef1b 	.word	0x3638ef1b
 80046b4:	b9500d01 	.word	0xb9500d01
 80046b8:	3c088889 	.word	0x3c088889
 80046bc:	be2aaaab 	.word	0xbe2aaaab
 80046c0:	3e2aaaab 	.word	0x3e2aaaab

080046c4 <__ieee754_rem_pio2f>:
 80046c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046c6:	ee10 6a10 	vmov	r6, s0
 80046ca:	4b86      	ldr	r3, [pc, #536]	; (80048e4 <__ieee754_rem_pio2f+0x220>)
 80046cc:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80046d0:	429d      	cmp	r5, r3
 80046d2:	b087      	sub	sp, #28
 80046d4:	4604      	mov	r4, r0
 80046d6:	dc05      	bgt.n	80046e4 <__ieee754_rem_pio2f+0x20>
 80046d8:	2300      	movs	r3, #0
 80046da:	ed80 0a00 	vstr	s0, [r0]
 80046de:	6043      	str	r3, [r0, #4]
 80046e0:	2000      	movs	r0, #0
 80046e2:	e020      	b.n	8004726 <__ieee754_rem_pio2f+0x62>
 80046e4:	4b80      	ldr	r3, [pc, #512]	; (80048e8 <__ieee754_rem_pio2f+0x224>)
 80046e6:	429d      	cmp	r5, r3
 80046e8:	dc38      	bgt.n	800475c <__ieee754_rem_pio2f+0x98>
 80046ea:	2e00      	cmp	r6, #0
 80046ec:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 80048ec <__ieee754_rem_pio2f+0x228>
 80046f0:	4b7f      	ldr	r3, [pc, #508]	; (80048f0 <__ieee754_rem_pio2f+0x22c>)
 80046f2:	f025 050f 	bic.w	r5, r5, #15
 80046f6:	dd18      	ble.n	800472a <__ieee754_rem_pio2f+0x66>
 80046f8:	429d      	cmp	r5, r3
 80046fa:	ee70 7a47 	vsub.f32	s15, s0, s14
 80046fe:	bf09      	itett	eq
 8004700:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 80048f4 <__ieee754_rem_pio2f+0x230>
 8004704:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 80048f8 <__ieee754_rem_pio2f+0x234>
 8004708:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800470c:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 80048fc <__ieee754_rem_pio2f+0x238>
 8004710:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8004714:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004718:	edc0 6a00 	vstr	s13, [r0]
 800471c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004720:	edc0 7a01 	vstr	s15, [r0, #4]
 8004724:	2001      	movs	r0, #1
 8004726:	b007      	add	sp, #28
 8004728:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800472a:	429d      	cmp	r5, r3
 800472c:	ee70 7a07 	vadd.f32	s15, s0, s14
 8004730:	bf09      	itett	eq
 8004732:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 80048f4 <__ieee754_rem_pio2f+0x230>
 8004736:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 80048f8 <__ieee754_rem_pio2f+0x234>
 800473a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800473e:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 80048fc <__ieee754_rem_pio2f+0x238>
 8004742:	ee77 6a87 	vadd.f32	s13, s15, s14
 8004746:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800474a:	edc0 6a00 	vstr	s13, [r0]
 800474e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004752:	edc0 7a01 	vstr	s15, [r0, #4]
 8004756:	f04f 30ff 	mov.w	r0, #4294967295
 800475a:	e7e4      	b.n	8004726 <__ieee754_rem_pio2f+0x62>
 800475c:	4b68      	ldr	r3, [pc, #416]	; (8004900 <__ieee754_rem_pio2f+0x23c>)
 800475e:	429d      	cmp	r5, r3
 8004760:	dc71      	bgt.n	8004846 <__ieee754_rem_pio2f+0x182>
 8004762:	f000 f8db 	bl	800491c <fabsf>
 8004766:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8004904 <__ieee754_rem_pio2f+0x240>
 800476a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800476e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8004772:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004776:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800477a:	ee17 0a90 	vmov	r0, s15
 800477e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80048ec <__ieee754_rem_pio2f+0x228>
 8004782:	eea7 0a67 	vfms.f32	s0, s14, s15
 8004786:	281f      	cmp	r0, #31
 8004788:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80048f8 <__ieee754_rem_pio2f+0x234>
 800478c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004790:	eeb1 6a47 	vneg.f32	s12, s14
 8004794:	ee70 6a67 	vsub.f32	s13, s0, s15
 8004798:	ee16 2a90 	vmov	r2, s13
 800479c:	dc1c      	bgt.n	80047d8 <__ieee754_rem_pio2f+0x114>
 800479e:	495a      	ldr	r1, [pc, #360]	; (8004908 <__ieee754_rem_pio2f+0x244>)
 80047a0:	1e47      	subs	r7, r0, #1
 80047a2:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80047a6:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80047aa:	428b      	cmp	r3, r1
 80047ac:	d014      	beq.n	80047d8 <__ieee754_rem_pio2f+0x114>
 80047ae:	6022      	str	r2, [r4, #0]
 80047b0:	ed94 7a00 	vldr	s14, [r4]
 80047b4:	ee30 0a47 	vsub.f32	s0, s0, s14
 80047b8:	2e00      	cmp	r6, #0
 80047ba:	ee30 0a67 	vsub.f32	s0, s0, s15
 80047be:	ed84 0a01 	vstr	s0, [r4, #4]
 80047c2:	dab0      	bge.n	8004726 <__ieee754_rem_pio2f+0x62>
 80047c4:	eeb1 7a47 	vneg.f32	s14, s14
 80047c8:	eeb1 0a40 	vneg.f32	s0, s0
 80047cc:	ed84 7a00 	vstr	s14, [r4]
 80047d0:	ed84 0a01 	vstr	s0, [r4, #4]
 80047d4:	4240      	negs	r0, r0
 80047d6:	e7a6      	b.n	8004726 <__ieee754_rem_pio2f+0x62>
 80047d8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80047dc:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 80047e0:	2908      	cmp	r1, #8
 80047e2:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80047e6:	dde2      	ble.n	80047ae <__ieee754_rem_pio2f+0xea>
 80047e8:	eddf 5a42 	vldr	s11, [pc, #264]	; 80048f4 <__ieee754_rem_pio2f+0x230>
 80047ec:	eef0 6a40 	vmov.f32	s13, s0
 80047f0:	eee6 6a25 	vfma.f32	s13, s12, s11
 80047f4:	ee70 7a66 	vsub.f32	s15, s0, s13
 80047f8:	eee6 7a25 	vfma.f32	s15, s12, s11
 80047fc:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80048fc <__ieee754_rem_pio2f+0x238>
 8004800:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8004804:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8004808:	ee15 2a90 	vmov	r2, s11
 800480c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8004810:	1a5b      	subs	r3, r3, r1
 8004812:	2b19      	cmp	r3, #25
 8004814:	dc04      	bgt.n	8004820 <__ieee754_rem_pio2f+0x15c>
 8004816:	edc4 5a00 	vstr	s11, [r4]
 800481a:	eeb0 0a66 	vmov.f32	s0, s13
 800481e:	e7c7      	b.n	80047b0 <__ieee754_rem_pio2f+0xec>
 8004820:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800490c <__ieee754_rem_pio2f+0x248>
 8004824:	eeb0 0a66 	vmov.f32	s0, s13
 8004828:	eea6 0a25 	vfma.f32	s0, s12, s11
 800482c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8004830:	eddf 6a37 	vldr	s13, [pc, #220]	; 8004910 <__ieee754_rem_pio2f+0x24c>
 8004834:	eee6 7a25 	vfma.f32	s15, s12, s11
 8004838:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800483c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8004840:	ed84 7a00 	vstr	s14, [r4]
 8004844:	e7b4      	b.n	80047b0 <__ieee754_rem_pio2f+0xec>
 8004846:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800484a:	db06      	blt.n	800485a <__ieee754_rem_pio2f+0x196>
 800484c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8004850:	edc0 7a01 	vstr	s15, [r0, #4]
 8004854:	edc0 7a00 	vstr	s15, [r0]
 8004858:	e742      	b.n	80046e0 <__ieee754_rem_pio2f+0x1c>
 800485a:	15ea      	asrs	r2, r5, #23
 800485c:	3a86      	subs	r2, #134	; 0x86
 800485e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8004862:	ee07 3a90 	vmov	s15, r3
 8004866:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800486a:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8004914 <__ieee754_rem_pio2f+0x250>
 800486e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004872:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004876:	ed8d 7a03 	vstr	s14, [sp, #12]
 800487a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800487e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8004882:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004886:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800488a:	ed8d 7a04 	vstr	s14, [sp, #16]
 800488e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004892:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800489a:	edcd 7a05 	vstr	s15, [sp, #20]
 800489e:	d11e      	bne.n	80048de <__ieee754_rem_pio2f+0x21a>
 80048a0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80048a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048a8:	bf14      	ite	ne
 80048aa:	2302      	movne	r3, #2
 80048ac:	2301      	moveq	r3, #1
 80048ae:	491a      	ldr	r1, [pc, #104]	; (8004918 <__ieee754_rem_pio2f+0x254>)
 80048b0:	9101      	str	r1, [sp, #4]
 80048b2:	2102      	movs	r1, #2
 80048b4:	9100      	str	r1, [sp, #0]
 80048b6:	a803      	add	r0, sp, #12
 80048b8:	4621      	mov	r1, r4
 80048ba:	f000 f837 	bl	800492c <__kernel_rem_pio2f>
 80048be:	2e00      	cmp	r6, #0
 80048c0:	f6bf af31 	bge.w	8004726 <__ieee754_rem_pio2f+0x62>
 80048c4:	edd4 7a00 	vldr	s15, [r4]
 80048c8:	eef1 7a67 	vneg.f32	s15, s15
 80048cc:	edc4 7a00 	vstr	s15, [r4]
 80048d0:	edd4 7a01 	vldr	s15, [r4, #4]
 80048d4:	eef1 7a67 	vneg.f32	s15, s15
 80048d8:	edc4 7a01 	vstr	s15, [r4, #4]
 80048dc:	e77a      	b.n	80047d4 <__ieee754_rem_pio2f+0x110>
 80048de:	2303      	movs	r3, #3
 80048e0:	e7e5      	b.n	80048ae <__ieee754_rem_pio2f+0x1ea>
 80048e2:	bf00      	nop
 80048e4:	3f490fd8 	.word	0x3f490fd8
 80048e8:	4016cbe3 	.word	0x4016cbe3
 80048ec:	3fc90f80 	.word	0x3fc90f80
 80048f0:	3fc90fd0 	.word	0x3fc90fd0
 80048f4:	37354400 	.word	0x37354400
 80048f8:	37354443 	.word	0x37354443
 80048fc:	2e85a308 	.word	0x2e85a308
 8004900:	43490f80 	.word	0x43490f80
 8004904:	3f22f984 	.word	0x3f22f984
 8004908:	08004f98 	.word	0x08004f98
 800490c:	2e85a300 	.word	0x2e85a300
 8004910:	248d3132 	.word	0x248d3132
 8004914:	43800000 	.word	0x43800000
 8004918:	08005018 	.word	0x08005018

0800491c <fabsf>:
 800491c:	ee10 3a10 	vmov	r3, s0
 8004920:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004924:	ee00 3a10 	vmov	s0, r3
 8004928:	4770      	bx	lr
	...

0800492c <__kernel_rem_pio2f>:
 800492c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004930:	ed2d 8b04 	vpush	{d8-d9}
 8004934:	b0d9      	sub	sp, #356	; 0x164
 8004936:	4688      	mov	r8, r1
 8004938:	9002      	str	r0, [sp, #8]
 800493a:	49b8      	ldr	r1, [pc, #736]	; (8004c1c <__kernel_rem_pio2f+0x2f0>)
 800493c:	9866      	ldr	r0, [sp, #408]	; 0x198
 800493e:	9301      	str	r3, [sp, #4]
 8004940:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8004944:	9901      	ldr	r1, [sp, #4]
 8004946:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 8004948:	f101 3bff 	add.w	fp, r1, #4294967295
 800494c:	1d11      	adds	r1, r2, #4
 800494e:	db25      	blt.n	800499c <__kernel_rem_pio2f+0x70>
 8004950:	1ed0      	subs	r0, r2, #3
 8004952:	bf48      	it	mi
 8004954:	1d10      	addmi	r0, r2, #4
 8004956:	10c0      	asrs	r0, r0, #3
 8004958:	1c45      	adds	r5, r0, #1
 800495a:	00e9      	lsls	r1, r5, #3
 800495c:	eba0 070b 	sub.w	r7, r0, fp
 8004960:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8004c2c <__kernel_rem_pio2f+0x300>
 8004964:	9103      	str	r1, [sp, #12]
 8004966:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800496a:	eb0a 0c0b 	add.w	ip, sl, fp
 800496e:	ae1c      	add	r6, sp, #112	; 0x70
 8004970:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 8004974:	2400      	movs	r4, #0
 8004976:	4564      	cmp	r4, ip
 8004978:	dd12      	ble.n	80049a0 <__kernel_rem_pio2f+0x74>
 800497a:	9901      	ldr	r1, [sp, #4]
 800497c:	ac1c      	add	r4, sp, #112	; 0x70
 800497e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8004982:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8004986:	f04f 0c00 	mov.w	ip, #0
 800498a:	45d4      	cmp	ip, sl
 800498c:	dc27      	bgt.n	80049de <__kernel_rem_pio2f+0xb2>
 800498e:	f8dd e008 	ldr.w	lr, [sp, #8]
 8004992:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8004c2c <__kernel_rem_pio2f+0x300>
 8004996:	4627      	mov	r7, r4
 8004998:	2600      	movs	r6, #0
 800499a:	e016      	b.n	80049ca <__kernel_rem_pio2f+0x9e>
 800499c:	2000      	movs	r0, #0
 800499e:	e7db      	b.n	8004958 <__kernel_rem_pio2f+0x2c>
 80049a0:	42e7      	cmn	r7, r4
 80049a2:	bf5d      	ittte	pl
 80049a4:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 80049a8:	ee07 1a90 	vmovpl	s15, r1
 80049ac:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80049b0:	eef0 7a47 	vmovmi.f32	s15, s14
 80049b4:	ece6 7a01 	vstmia	r6!, {s15}
 80049b8:	3401      	adds	r4, #1
 80049ba:	e7dc      	b.n	8004976 <__kernel_rem_pio2f+0x4a>
 80049bc:	ecfe 6a01 	vldmia	lr!, {s13}
 80049c0:	ed97 7a00 	vldr	s14, [r7]
 80049c4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80049c8:	3601      	adds	r6, #1
 80049ca:	455e      	cmp	r6, fp
 80049cc:	f1a7 0704 	sub.w	r7, r7, #4
 80049d0:	ddf4      	ble.n	80049bc <__kernel_rem_pio2f+0x90>
 80049d2:	ece9 7a01 	vstmia	r9!, {s15}
 80049d6:	f10c 0c01 	add.w	ip, ip, #1
 80049da:	3404      	adds	r4, #4
 80049dc:	e7d5      	b.n	800498a <__kernel_rem_pio2f+0x5e>
 80049de:	a908      	add	r1, sp, #32
 80049e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80049e4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80049e8:	eddf 8a8f 	vldr	s17, [pc, #572]	; 8004c28 <__kernel_rem_pio2f+0x2fc>
 80049ec:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 8004c24 <__kernel_rem_pio2f+0x2f8>
 80049f0:	9105      	str	r1, [sp, #20]
 80049f2:	9304      	str	r3, [sp, #16]
 80049f4:	4656      	mov	r6, sl
 80049f6:	00b3      	lsls	r3, r6, #2
 80049f8:	9306      	str	r3, [sp, #24]
 80049fa:	ab58      	add	r3, sp, #352	; 0x160
 80049fc:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8004a00:	ac08      	add	r4, sp, #32
 8004a02:	ab44      	add	r3, sp, #272	; 0x110
 8004a04:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8004a08:	46a4      	mov	ip, r4
 8004a0a:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8004a0e:	4637      	mov	r7, r6
 8004a10:	2f00      	cmp	r7, #0
 8004a12:	f1a0 0004 	sub.w	r0, r0, #4
 8004a16:	dc4a      	bgt.n	8004aae <__kernel_rem_pio2f+0x182>
 8004a18:	4628      	mov	r0, r5
 8004a1a:	9207      	str	r2, [sp, #28]
 8004a1c:	f000 f9f8 	bl	8004e10 <scalbnf>
 8004a20:	eeb0 8a40 	vmov.f32	s16, s0
 8004a24:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8004a28:	ee28 0a00 	vmul.f32	s0, s16, s0
 8004a2c:	f000 fa56 	bl	8004edc <floorf>
 8004a30:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8004a34:	eea0 8a67 	vfms.f32	s16, s0, s15
 8004a38:	2d00      	cmp	r5, #0
 8004a3a:	9a07      	ldr	r2, [sp, #28]
 8004a3c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8004a40:	ee17 9a90 	vmov	r9, s15
 8004a44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a48:	ee38 8a67 	vsub.f32	s16, s16, s15
 8004a4c:	dd41      	ble.n	8004ad2 <__kernel_rem_pio2f+0x1a6>
 8004a4e:	f106 3cff 	add.w	ip, r6, #4294967295
 8004a52:	ab08      	add	r3, sp, #32
 8004a54:	f1c5 0e08 	rsb	lr, r5, #8
 8004a58:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8004a5c:	fa47 f00e 	asr.w	r0, r7, lr
 8004a60:	4481      	add	r9, r0
 8004a62:	fa00 f00e 	lsl.w	r0, r0, lr
 8004a66:	1a3f      	subs	r7, r7, r0
 8004a68:	f1c5 0007 	rsb	r0, r5, #7
 8004a6c:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8004a70:	4107      	asrs	r7, r0
 8004a72:	2f00      	cmp	r7, #0
 8004a74:	dd3c      	ble.n	8004af0 <__kernel_rem_pio2f+0x1c4>
 8004a76:	f04f 0e00 	mov.w	lr, #0
 8004a7a:	f109 0901 	add.w	r9, r9, #1
 8004a7e:	4671      	mov	r1, lr
 8004a80:	4576      	cmp	r6, lr
 8004a82:	dc67      	bgt.n	8004b54 <__kernel_rem_pio2f+0x228>
 8004a84:	2d00      	cmp	r5, #0
 8004a86:	dd03      	ble.n	8004a90 <__kernel_rem_pio2f+0x164>
 8004a88:	2d01      	cmp	r5, #1
 8004a8a:	d074      	beq.n	8004b76 <__kernel_rem_pio2f+0x24a>
 8004a8c:	2d02      	cmp	r5, #2
 8004a8e:	d07b      	beq.n	8004b88 <__kernel_rem_pio2f+0x25c>
 8004a90:	2f02      	cmp	r7, #2
 8004a92:	d12d      	bne.n	8004af0 <__kernel_rem_pio2f+0x1c4>
 8004a94:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004a98:	ee30 8a48 	vsub.f32	s16, s0, s16
 8004a9c:	b341      	cbz	r1, 8004af0 <__kernel_rem_pio2f+0x1c4>
 8004a9e:	4628      	mov	r0, r5
 8004aa0:	9207      	str	r2, [sp, #28]
 8004aa2:	f000 f9b5 	bl	8004e10 <scalbnf>
 8004aa6:	9a07      	ldr	r2, [sp, #28]
 8004aa8:	ee38 8a40 	vsub.f32	s16, s16, s0
 8004aac:	e020      	b.n	8004af0 <__kernel_rem_pio2f+0x1c4>
 8004aae:	ee60 7a28 	vmul.f32	s15, s0, s17
 8004ab2:	3f01      	subs	r7, #1
 8004ab4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ab8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004abc:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8004ac0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004ac4:	ecac 0a01 	vstmia	ip!, {s0}
 8004ac8:	ed90 0a00 	vldr	s0, [r0]
 8004acc:	ee37 0a80 	vadd.f32	s0, s15, s0
 8004ad0:	e79e      	b.n	8004a10 <__kernel_rem_pio2f+0xe4>
 8004ad2:	d105      	bne.n	8004ae0 <__kernel_rem_pio2f+0x1b4>
 8004ad4:	1e70      	subs	r0, r6, #1
 8004ad6:	ab08      	add	r3, sp, #32
 8004ad8:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8004adc:	11ff      	asrs	r7, r7, #7
 8004ade:	e7c8      	b.n	8004a72 <__kernel_rem_pio2f+0x146>
 8004ae0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004ae4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aec:	da30      	bge.n	8004b50 <__kernel_rem_pio2f+0x224>
 8004aee:	2700      	movs	r7, #0
 8004af0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8004af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004af8:	f040 809a 	bne.w	8004c30 <__kernel_rem_pio2f+0x304>
 8004afc:	1e74      	subs	r4, r6, #1
 8004afe:	46a4      	mov	ip, r4
 8004b00:	2100      	movs	r1, #0
 8004b02:	45d4      	cmp	ip, sl
 8004b04:	da47      	bge.n	8004b96 <__kernel_rem_pio2f+0x26a>
 8004b06:	2900      	cmp	r1, #0
 8004b08:	d063      	beq.n	8004bd2 <__kernel_rem_pio2f+0x2a6>
 8004b0a:	ab08      	add	r3, sp, #32
 8004b0c:	3d08      	subs	r5, #8
 8004b0e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d07f      	beq.n	8004c16 <__kernel_rem_pio2f+0x2ea>
 8004b16:	4628      	mov	r0, r5
 8004b18:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004b1c:	f000 f978 	bl	8004e10 <scalbnf>
 8004b20:	1c63      	adds	r3, r4, #1
 8004b22:	aa44      	add	r2, sp, #272	; 0x110
 8004b24:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8004c28 <__kernel_rem_pio2f+0x2fc>
 8004b28:	0099      	lsls	r1, r3, #2
 8004b2a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8004b2e:	4623      	mov	r3, r4
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f280 80ad 	bge.w	8004c90 <__kernel_rem_pio2f+0x364>
 8004b36:	4623      	mov	r3, r4
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f2c0 80cb 	blt.w	8004cd4 <__kernel_rem_pio2f+0x3a8>
 8004b3e:	aa44      	add	r2, sp, #272	; 0x110
 8004b40:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8004b44:	4e36      	ldr	r6, [pc, #216]	; (8004c20 <__kernel_rem_pio2f+0x2f4>)
 8004b46:	eddf 7a39 	vldr	s15, [pc, #228]	; 8004c2c <__kernel_rem_pio2f+0x300>
 8004b4a:	2000      	movs	r0, #0
 8004b4c:	1ae2      	subs	r2, r4, r3
 8004b4e:	e0b6      	b.n	8004cbe <__kernel_rem_pio2f+0x392>
 8004b50:	2702      	movs	r7, #2
 8004b52:	e790      	b.n	8004a76 <__kernel_rem_pio2f+0x14a>
 8004b54:	6820      	ldr	r0, [r4, #0]
 8004b56:	b949      	cbnz	r1, 8004b6c <__kernel_rem_pio2f+0x240>
 8004b58:	b118      	cbz	r0, 8004b62 <__kernel_rem_pio2f+0x236>
 8004b5a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8004b5e:	6020      	str	r0, [r4, #0]
 8004b60:	2001      	movs	r0, #1
 8004b62:	f10e 0e01 	add.w	lr, lr, #1
 8004b66:	3404      	adds	r4, #4
 8004b68:	4601      	mov	r1, r0
 8004b6a:	e789      	b.n	8004a80 <__kernel_rem_pio2f+0x154>
 8004b6c:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8004b70:	6020      	str	r0, [r4, #0]
 8004b72:	4608      	mov	r0, r1
 8004b74:	e7f5      	b.n	8004b62 <__kernel_rem_pio2f+0x236>
 8004b76:	1e74      	subs	r4, r6, #1
 8004b78:	ab08      	add	r3, sp, #32
 8004b7a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004b7e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8004b82:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004b86:	e783      	b.n	8004a90 <__kernel_rem_pio2f+0x164>
 8004b88:	1e74      	subs	r4, r6, #1
 8004b8a:	ab08      	add	r3, sp, #32
 8004b8c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004b90:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8004b94:	e7f5      	b.n	8004b82 <__kernel_rem_pio2f+0x256>
 8004b96:	ab08      	add	r3, sp, #32
 8004b98:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8004b9c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004ba0:	4301      	orrs	r1, r0
 8004ba2:	e7ae      	b.n	8004b02 <__kernel_rem_pio2f+0x1d6>
 8004ba4:	3001      	adds	r0, #1
 8004ba6:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 8004baa:	2f00      	cmp	r7, #0
 8004bac:	d0fa      	beq.n	8004ba4 <__kernel_rem_pio2f+0x278>
 8004bae:	9b06      	ldr	r3, [sp, #24]
 8004bb0:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8004bb4:	eb0d 0403 	add.w	r4, sp, r3
 8004bb8:	9b01      	ldr	r3, [sp, #4]
 8004bba:	18f7      	adds	r7, r6, r3
 8004bbc:	ab1c      	add	r3, sp, #112	; 0x70
 8004bbe:	f106 0c01 	add.w	ip, r6, #1
 8004bc2:	3c4c      	subs	r4, #76	; 0x4c
 8004bc4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004bc8:	4430      	add	r0, r6
 8004bca:	4560      	cmp	r0, ip
 8004bcc:	da04      	bge.n	8004bd8 <__kernel_rem_pio2f+0x2ac>
 8004bce:	4606      	mov	r6, r0
 8004bd0:	e711      	b.n	80049f6 <__kernel_rem_pio2f+0xca>
 8004bd2:	9c05      	ldr	r4, [sp, #20]
 8004bd4:	2001      	movs	r0, #1
 8004bd6:	e7e6      	b.n	8004ba6 <__kernel_rem_pio2f+0x27a>
 8004bd8:	9b04      	ldr	r3, [sp, #16]
 8004bda:	f8dd e008 	ldr.w	lr, [sp, #8]
 8004bde:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8004be2:	9306      	str	r3, [sp, #24]
 8004be4:	ee07 3a90 	vmov	s15, r3
 8004be8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bec:	2600      	movs	r6, #0
 8004bee:	ece7 7a01 	vstmia	r7!, {s15}
 8004bf2:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8004c2c <__kernel_rem_pio2f+0x300>
 8004bf6:	46b9      	mov	r9, r7
 8004bf8:	455e      	cmp	r6, fp
 8004bfa:	dd04      	ble.n	8004c06 <__kernel_rem_pio2f+0x2da>
 8004bfc:	ece4 7a01 	vstmia	r4!, {s15}
 8004c00:	f10c 0c01 	add.w	ip, ip, #1
 8004c04:	e7e1      	b.n	8004bca <__kernel_rem_pio2f+0x29e>
 8004c06:	ecfe 6a01 	vldmia	lr!, {s13}
 8004c0a:	ed39 7a01 	vldmdb	r9!, {s14}
 8004c0e:	3601      	adds	r6, #1
 8004c10:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004c14:	e7f0      	b.n	8004bf8 <__kernel_rem_pio2f+0x2cc>
 8004c16:	3c01      	subs	r4, #1
 8004c18:	e777      	b.n	8004b0a <__kernel_rem_pio2f+0x1de>
 8004c1a:	bf00      	nop
 8004c1c:	0800535c 	.word	0x0800535c
 8004c20:	08005330 	.word	0x08005330
 8004c24:	43800000 	.word	0x43800000
 8004c28:	3b800000 	.word	0x3b800000
 8004c2c:	00000000 	.word	0x00000000
 8004c30:	9b03      	ldr	r3, [sp, #12]
 8004c32:	eeb0 0a48 	vmov.f32	s0, s16
 8004c36:	1a98      	subs	r0, r3, r2
 8004c38:	f000 f8ea 	bl	8004e10 <scalbnf>
 8004c3c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8004c24 <__kernel_rem_pio2f+0x2f8>
 8004c40:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8004c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c48:	db19      	blt.n	8004c7e <__kernel_rem_pio2f+0x352>
 8004c4a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8004c28 <__kernel_rem_pio2f+0x2fc>
 8004c4e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8004c52:	aa08      	add	r2, sp, #32
 8004c54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c58:	1c74      	adds	r4, r6, #1
 8004c5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c5e:	3508      	adds	r5, #8
 8004c60:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8004c64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c68:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004c6c:	ee10 3a10 	vmov	r3, s0
 8004c70:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8004c74:	ee17 3a90 	vmov	r3, s15
 8004c78:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8004c7c:	e74b      	b.n	8004b16 <__kernel_rem_pio2f+0x1ea>
 8004c7e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004c82:	aa08      	add	r2, sp, #32
 8004c84:	ee10 3a10 	vmov	r3, s0
 8004c88:	4634      	mov	r4, r6
 8004c8a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8004c8e:	e742      	b.n	8004b16 <__kernel_rem_pio2f+0x1ea>
 8004c90:	a808      	add	r0, sp, #32
 8004c92:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8004c96:	9001      	str	r0, [sp, #4]
 8004c98:	ee07 0a90 	vmov	s15, r0
 8004c9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	ee67 7a80 	vmul.f32	s15, s15, s0
 8004ca6:	ee20 0a07 	vmul.f32	s0, s0, s14
 8004caa:	ed62 7a01 	vstmdb	r2!, {s15}
 8004cae:	e73f      	b.n	8004b30 <__kernel_rem_pio2f+0x204>
 8004cb0:	ecf6 6a01 	vldmia	r6!, {s13}
 8004cb4:	ecb5 7a01 	vldmia	r5!, {s14}
 8004cb8:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004cbc:	3001      	adds	r0, #1
 8004cbe:	4550      	cmp	r0, sl
 8004cc0:	dc01      	bgt.n	8004cc6 <__kernel_rem_pio2f+0x39a>
 8004cc2:	4290      	cmp	r0, r2
 8004cc4:	ddf4      	ble.n	8004cb0 <__kernel_rem_pio2f+0x384>
 8004cc6:	a858      	add	r0, sp, #352	; 0x160
 8004cc8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004ccc:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 8004cd0:	3b01      	subs	r3, #1
 8004cd2:	e731      	b.n	8004b38 <__kernel_rem_pio2f+0x20c>
 8004cd4:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	dc09      	bgt.n	8004cee <__kernel_rem_pio2f+0x3c2>
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	dc2b      	bgt.n	8004d36 <__kernel_rem_pio2f+0x40a>
 8004cde:	d044      	beq.n	8004d6a <__kernel_rem_pio2f+0x43e>
 8004ce0:	f009 0007 	and.w	r0, r9, #7
 8004ce4:	b059      	add	sp, #356	; 0x164
 8004ce6:	ecbd 8b04 	vpop	{d8-d9}
 8004cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cee:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8004cf0:	2b03      	cmp	r3, #3
 8004cf2:	d1f5      	bne.n	8004ce0 <__kernel_rem_pio2f+0x3b4>
 8004cf4:	aa30      	add	r2, sp, #192	; 0xc0
 8004cf6:	1f0b      	subs	r3, r1, #4
 8004cf8:	4413      	add	r3, r2
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	4620      	mov	r0, r4
 8004cfe:	2800      	cmp	r0, #0
 8004d00:	f1a2 0204 	sub.w	r2, r2, #4
 8004d04:	dc52      	bgt.n	8004dac <__kernel_rem_pio2f+0x480>
 8004d06:	4622      	mov	r2, r4
 8004d08:	2a01      	cmp	r2, #1
 8004d0a:	f1a3 0304 	sub.w	r3, r3, #4
 8004d0e:	dc5d      	bgt.n	8004dcc <__kernel_rem_pio2f+0x4a0>
 8004d10:	ab30      	add	r3, sp, #192	; 0xc0
 8004d12:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8004c2c <__kernel_rem_pio2f+0x300>
 8004d16:	440b      	add	r3, r1
 8004d18:	2c01      	cmp	r4, #1
 8004d1a:	dc67      	bgt.n	8004dec <__kernel_rem_pio2f+0x4c0>
 8004d1c:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8004d20:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8004d24:	2f00      	cmp	r7, #0
 8004d26:	d167      	bne.n	8004df8 <__kernel_rem_pio2f+0x4cc>
 8004d28:	edc8 6a00 	vstr	s13, [r8]
 8004d2c:	ed88 7a01 	vstr	s14, [r8, #4]
 8004d30:	edc8 7a02 	vstr	s15, [r8, #8]
 8004d34:	e7d4      	b.n	8004ce0 <__kernel_rem_pio2f+0x3b4>
 8004d36:	ab30      	add	r3, sp, #192	; 0xc0
 8004d38:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 8004c2c <__kernel_rem_pio2f+0x300>
 8004d3c:	440b      	add	r3, r1
 8004d3e:	4622      	mov	r2, r4
 8004d40:	2a00      	cmp	r2, #0
 8004d42:	da24      	bge.n	8004d8e <__kernel_rem_pio2f+0x462>
 8004d44:	b34f      	cbz	r7, 8004d9a <__kernel_rem_pio2f+0x46e>
 8004d46:	eef1 7a47 	vneg.f32	s15, s14
 8004d4a:	edc8 7a00 	vstr	s15, [r8]
 8004d4e:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8004d52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004d56:	aa31      	add	r2, sp, #196	; 0xc4
 8004d58:	2301      	movs	r3, #1
 8004d5a:	429c      	cmp	r4, r3
 8004d5c:	da20      	bge.n	8004da0 <__kernel_rem_pio2f+0x474>
 8004d5e:	b10f      	cbz	r7, 8004d64 <__kernel_rem_pio2f+0x438>
 8004d60:	eef1 7a67 	vneg.f32	s15, s15
 8004d64:	edc8 7a01 	vstr	s15, [r8, #4]
 8004d68:	e7ba      	b.n	8004ce0 <__kernel_rem_pio2f+0x3b4>
 8004d6a:	ab30      	add	r3, sp, #192	; 0xc0
 8004d6c:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 8004c2c <__kernel_rem_pio2f+0x300>
 8004d70:	440b      	add	r3, r1
 8004d72:	2c00      	cmp	r4, #0
 8004d74:	da05      	bge.n	8004d82 <__kernel_rem_pio2f+0x456>
 8004d76:	b10f      	cbz	r7, 8004d7c <__kernel_rem_pio2f+0x450>
 8004d78:	eef1 7a67 	vneg.f32	s15, s15
 8004d7c:	edc8 7a00 	vstr	s15, [r8]
 8004d80:	e7ae      	b.n	8004ce0 <__kernel_rem_pio2f+0x3b4>
 8004d82:	ed33 7a01 	vldmdb	r3!, {s14}
 8004d86:	3c01      	subs	r4, #1
 8004d88:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d8c:	e7f1      	b.n	8004d72 <__kernel_rem_pio2f+0x446>
 8004d8e:	ed73 7a01 	vldmdb	r3!, {s15}
 8004d92:	3a01      	subs	r2, #1
 8004d94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004d98:	e7d2      	b.n	8004d40 <__kernel_rem_pio2f+0x414>
 8004d9a:	eef0 7a47 	vmov.f32	s15, s14
 8004d9e:	e7d4      	b.n	8004d4a <__kernel_rem_pio2f+0x41e>
 8004da0:	ecb2 7a01 	vldmia	r2!, {s14}
 8004da4:	3301      	adds	r3, #1
 8004da6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004daa:	e7d6      	b.n	8004d5a <__kernel_rem_pio2f+0x42e>
 8004dac:	edd2 7a00 	vldr	s15, [r2]
 8004db0:	edd2 6a01 	vldr	s13, [r2, #4]
 8004db4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004db8:	3801      	subs	r0, #1
 8004dba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004dbe:	ed82 7a00 	vstr	s14, [r2]
 8004dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dc6:	edc2 7a01 	vstr	s15, [r2, #4]
 8004dca:	e798      	b.n	8004cfe <__kernel_rem_pio2f+0x3d2>
 8004dcc:	edd3 7a00 	vldr	s15, [r3]
 8004dd0:	edd3 6a01 	vldr	s13, [r3, #4]
 8004dd4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004dd8:	3a01      	subs	r2, #1
 8004dda:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004dde:	ed83 7a00 	vstr	s14, [r3]
 8004de2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004de6:	edc3 7a01 	vstr	s15, [r3, #4]
 8004dea:	e78d      	b.n	8004d08 <__kernel_rem_pio2f+0x3dc>
 8004dec:	ed33 7a01 	vldmdb	r3!, {s14}
 8004df0:	3c01      	subs	r4, #1
 8004df2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004df6:	e78f      	b.n	8004d18 <__kernel_rem_pio2f+0x3ec>
 8004df8:	eef1 6a66 	vneg.f32	s13, s13
 8004dfc:	eeb1 7a47 	vneg.f32	s14, s14
 8004e00:	edc8 6a00 	vstr	s13, [r8]
 8004e04:	ed88 7a01 	vstr	s14, [r8, #4]
 8004e08:	eef1 7a67 	vneg.f32	s15, s15
 8004e0c:	e790      	b.n	8004d30 <__kernel_rem_pio2f+0x404>
 8004e0e:	bf00      	nop

08004e10 <scalbnf>:
 8004e10:	ee10 3a10 	vmov	r3, s0
 8004e14:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8004e18:	d02b      	beq.n	8004e72 <scalbnf+0x62>
 8004e1a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8004e1e:	d302      	bcc.n	8004e26 <scalbnf+0x16>
 8004e20:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004e24:	4770      	bx	lr
 8004e26:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8004e2a:	d123      	bne.n	8004e74 <scalbnf+0x64>
 8004e2c:	4b24      	ldr	r3, [pc, #144]	; (8004ec0 <scalbnf+0xb0>)
 8004e2e:	eddf 7a25 	vldr	s15, [pc, #148]	; 8004ec4 <scalbnf+0xb4>
 8004e32:	4298      	cmp	r0, r3
 8004e34:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004e38:	db17      	blt.n	8004e6a <scalbnf+0x5a>
 8004e3a:	ee10 3a10 	vmov	r3, s0
 8004e3e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004e42:	3a19      	subs	r2, #25
 8004e44:	f24c 3150 	movw	r1, #50000	; 0xc350
 8004e48:	4288      	cmp	r0, r1
 8004e4a:	dd15      	ble.n	8004e78 <scalbnf+0x68>
 8004e4c:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8004ec8 <scalbnf+0xb8>
 8004e50:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8004ecc <scalbnf+0xbc>
 8004e54:	ee10 3a10 	vmov	r3, s0
 8004e58:	eeb0 7a67 	vmov.f32	s14, s15
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	bfb8      	it	lt
 8004e60:	eef0 7a66 	vmovlt.f32	s15, s13
 8004e64:	ee27 0a87 	vmul.f32	s0, s15, s14
 8004e68:	4770      	bx	lr
 8004e6a:	eddf 7a19 	vldr	s15, [pc, #100]	; 8004ed0 <scalbnf+0xc0>
 8004e6e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8004e72:	4770      	bx	lr
 8004e74:	0dd2      	lsrs	r2, r2, #23
 8004e76:	e7e5      	b.n	8004e44 <scalbnf+0x34>
 8004e78:	4410      	add	r0, r2
 8004e7a:	28fe      	cmp	r0, #254	; 0xfe
 8004e7c:	dce6      	bgt.n	8004e4c <scalbnf+0x3c>
 8004e7e:	2800      	cmp	r0, #0
 8004e80:	dd06      	ble.n	8004e90 <scalbnf+0x80>
 8004e82:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004e86:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8004e8a:	ee00 3a10 	vmov	s0, r3
 8004e8e:	4770      	bx	lr
 8004e90:	f110 0f16 	cmn.w	r0, #22
 8004e94:	da09      	bge.n	8004eaa <scalbnf+0x9a>
 8004e96:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8004ed0 <scalbnf+0xc0>
 8004e9a:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8004ed4 <scalbnf+0xc4>
 8004e9e:	ee10 3a10 	vmov	r3, s0
 8004ea2:	eeb0 7a67 	vmov.f32	s14, s15
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	e7d9      	b.n	8004e5e <scalbnf+0x4e>
 8004eaa:	3019      	adds	r0, #25
 8004eac:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004eb0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8004eb4:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8004ed8 <scalbnf+0xc8>
 8004eb8:	ee07 3a90 	vmov	s15, r3
 8004ebc:	e7d7      	b.n	8004e6e <scalbnf+0x5e>
 8004ebe:	bf00      	nop
 8004ec0:	ffff3cb0 	.word	0xffff3cb0
 8004ec4:	4c000000 	.word	0x4c000000
 8004ec8:	7149f2ca 	.word	0x7149f2ca
 8004ecc:	f149f2ca 	.word	0xf149f2ca
 8004ed0:	0da24260 	.word	0x0da24260
 8004ed4:	8da24260 	.word	0x8da24260
 8004ed8:	33000000 	.word	0x33000000

08004edc <floorf>:
 8004edc:	ee10 3a10 	vmov	r3, s0
 8004ee0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004ee4:	3a7f      	subs	r2, #127	; 0x7f
 8004ee6:	2a16      	cmp	r2, #22
 8004ee8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004eec:	dc2a      	bgt.n	8004f44 <floorf+0x68>
 8004eee:	2a00      	cmp	r2, #0
 8004ef0:	da11      	bge.n	8004f16 <floorf+0x3a>
 8004ef2:	eddf 7a18 	vldr	s15, [pc, #96]	; 8004f54 <floorf+0x78>
 8004ef6:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004efa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f02:	dd05      	ble.n	8004f10 <floorf+0x34>
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	da23      	bge.n	8004f50 <floorf+0x74>
 8004f08:	4a13      	ldr	r2, [pc, #76]	; (8004f58 <floorf+0x7c>)
 8004f0a:	2900      	cmp	r1, #0
 8004f0c:	bf18      	it	ne
 8004f0e:	4613      	movne	r3, r2
 8004f10:	ee00 3a10 	vmov	s0, r3
 8004f14:	4770      	bx	lr
 8004f16:	4911      	ldr	r1, [pc, #68]	; (8004f5c <floorf+0x80>)
 8004f18:	4111      	asrs	r1, r2
 8004f1a:	420b      	tst	r3, r1
 8004f1c:	d0fa      	beq.n	8004f14 <floorf+0x38>
 8004f1e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8004f54 <floorf+0x78>
 8004f22:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004f26:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f2e:	ddef      	ble.n	8004f10 <floorf+0x34>
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	bfbe      	ittt	lt
 8004f34:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8004f38:	fa40 f202 	asrlt.w	r2, r0, r2
 8004f3c:	189b      	addlt	r3, r3, r2
 8004f3e:	ea23 0301 	bic.w	r3, r3, r1
 8004f42:	e7e5      	b.n	8004f10 <floorf+0x34>
 8004f44:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8004f48:	d3e4      	bcc.n	8004f14 <floorf+0x38>
 8004f4a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004f4e:	4770      	bx	lr
 8004f50:	2300      	movs	r3, #0
 8004f52:	e7dd      	b.n	8004f10 <floorf+0x34>
 8004f54:	7149f2ca 	.word	0x7149f2ca
 8004f58:	bf800000 	.word	0xbf800000
 8004f5c:	007fffff 	.word	0x007fffff

08004f60 <_init>:
 8004f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f62:	bf00      	nop
 8004f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f66:	bc08      	pop	{r3}
 8004f68:	469e      	mov	lr, r3
 8004f6a:	4770      	bx	lr

08004f6c <_fini>:
 8004f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f6e:	bf00      	nop
 8004f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f72:	bc08      	pop	{r3}
 8004f74:	469e      	mov	lr, r3
 8004f76:	4770      	bx	lr
