
Audio_interface_usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a00c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000438  0800a1a4  0800a1a4  0001a1a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5dc  0800a5dc  0002012c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5dc  0800a5dc  0001a5dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5e4  0800a5e4  0002012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5e4  0800a5e4  0001a5e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5e8  0800a5e8  0001a5e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000012c  20000000  0800a5ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004860  2000012c  0800a718  0002012c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000498c  0800a718  0002498c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014305  00000000  00000000  0002019f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003935  00000000  00000000  000344a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001118  00000000  00000000  00037de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cf9  00000000  00000000  00038ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001948b  00000000  00000000  00039bf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000183be  00000000  00000000  0005307c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008cb50  00000000  00000000  0006b43a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004790  00000000  00000000  000f7f8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  000fc71c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000012c 	.word	0x2000012c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800a18c 	.word	0x0800a18c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000130 	.word	0x20000130
 80001d4:	0800a18c 	.word	0x0800a18c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <write_register>:

//(1): Functions definitions
//-------------- Static Functions ---------------//
// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af02      	add	r7, sp, #8
 80004da:	4603      	mov	r3, r0
 80004dc:	6039      	str	r1, [r7, #0]
 80004de:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 80004e0:	4a09      	ldr	r2, [pc, #36]	; (8000508 <write_register+0x34>)
 80004e2:	79fb      	ldrb	r3, [r7, #7]
 80004e4:	7013      	strb	r3, [r2, #0]
	iData[1] = data[0];
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	781a      	ldrb	r2, [r3, #0]
 80004ea:	4b07      	ldr	r3, [pc, #28]	; (8000508 <write_register+0x34>)
 80004ec:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 80004ee:	2364      	movs	r3, #100	; 0x64
 80004f0:	9300      	str	r3, [sp, #0]
 80004f2:	2302      	movs	r3, #2
 80004f4:	4a04      	ldr	r2, [pc, #16]	; (8000508 <write_register+0x34>)
 80004f6:	2194      	movs	r1, #148	; 0x94
 80004f8:	4804      	ldr	r0, [pc, #16]	; (800050c <write_register+0x38>)
 80004fa:	f001 fdbd 	bl	8002078 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 80004fe:	bf00      	nop
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	20000148 	.word	0x20000148
 800050c:	2000014c 	.word	0x2000014c

08000510 <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af02      	add	r7, sp, #8
 8000516:	4603      	mov	r3, r0
 8000518:	6039      	str	r1, [r7, #0]
 800051a:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 800051c:	4a0b      	ldr	r2, [pc, #44]	; (800054c <read_register+0x3c>)
 800051e:	79fb      	ldrb	r3, [r7, #7]
 8000520:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 8000522:	2364      	movs	r3, #100	; 0x64
 8000524:	9300      	str	r3, [sp, #0]
 8000526:	2301      	movs	r3, #1
 8000528:	4a08      	ldr	r2, [pc, #32]	; (800054c <read_register+0x3c>)
 800052a:	2194      	movs	r1, #148	; 0x94
 800052c:	4808      	ldr	r0, [pc, #32]	; (8000550 <read_register+0x40>)
 800052e:	f001 fda3 	bl	8002078 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 8000532:	2364      	movs	r3, #100	; 0x64
 8000534:	9300      	str	r3, [sp, #0]
 8000536:	2301      	movs	r3, #1
 8000538:	683a      	ldr	r2, [r7, #0]
 800053a:	2194      	movs	r1, #148	; 0x94
 800053c:	4804      	ldr	r0, [pc, #16]	; (8000550 <read_register+0x40>)
 800053e:	f001 fe99 	bl	8002274 <HAL_I2C_Master_Receive>
}
 8000542:	bf00      	nop
 8000544:	3708      	adds	r7, #8
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	20000148 	.word	0x20000148
 8000550:	2000014c 	.word	0x2000014c

08000554 <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 8000554:	b084      	sub	sp, #16
 8000556:	b580      	push	{r7, lr}
 8000558:	af00      	add	r7, sp, #0
 800055a:	f107 0c08 	add.w	ip, r7, #8
 800055e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000562:	4b81      	ldr	r3, [pc, #516]	; (8000768 <CS43_Init+0x214>)
 8000564:	2200      	movs	r2, #0
 8000566:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 800056a:	4b7f      	ldr	r3, [pc, #508]	; (8000768 <CS43_Init+0x214>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	69da      	ldr	r2, [r3, #28]
 8000570:	4b7d      	ldr	r3, [pc, #500]	; (8000768 <CS43_Init+0x214>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000578:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 800057a:	2201      	movs	r2, #1
 800057c:	2110      	movs	r1, #16
 800057e:	487b      	ldr	r0, [pc, #492]	; (800076c <CS43_Init+0x218>)
 8000580:	f001 fc1c 	bl	8001dbc <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 8000584:	4b7a      	ldr	r3, [pc, #488]	; (8000770 <CS43_Init+0x21c>)
 8000586:	4618      	mov	r0, r3
 8000588:	f107 0308 	add.w	r3, r7, #8
 800058c:	2254      	movs	r2, #84	; 0x54
 800058e:	4619      	mov	r1, r3
 8000590:	f009 f8b4 	bl	80096fc <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 8000594:	4b77      	ldr	r3, [pc, #476]	; (8000774 <CS43_Init+0x220>)
 8000596:	2201      	movs	r2, #1
 8000598:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,iData);
 800059a:	4976      	ldr	r1, [pc, #472]	; (8000774 <CS43_Init+0x220>)
 800059c:	2002      	movs	r0, #2
 800059e:	f7ff ff99 	bl	80004d4 <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80005a2:	4b74      	ldr	r3, [pc, #464]	; (8000774 <CS43_Init+0x220>)
 80005a4:	2280      	movs	r2, #128	; 0x80
 80005a6:	705a      	strb	r2, [r3, #1]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80005a8:	4b72      	ldr	r3, [pc, #456]	; (8000774 <CS43_Init+0x220>)
 80005aa:	785b      	ldrb	r3, [r3, #1]
 80005ac:	f043 0320 	orr.w	r3, r3, #32
 80005b0:	b2da      	uxtb	r2, r3
 80005b2:	4b70      	ldr	r3, [pc, #448]	; (8000774 <CS43_Init+0x220>)
 80005b4:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80005b6:	4b6f      	ldr	r3, [pc, #444]	; (8000774 <CS43_Init+0x220>)
 80005b8:	785b      	ldrb	r3, [r3, #1]
 80005ba:	f043 030c 	orr.w	r3, r3, #12
 80005be:	b2da      	uxtb	r2, r3
 80005c0:	4b6c      	ldr	r3, [pc, #432]	; (8000774 <CS43_Init+0x220>)
 80005c2:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80005c4:	4b6b      	ldr	r3, [pc, #428]	; (8000774 <CS43_Init+0x220>)
 80005c6:	785b      	ldrb	r3, [r3, #1]
 80005c8:	f043 0303 	orr.w	r3, r3, #3
 80005cc:	b2da      	uxtb	r2, r3
 80005ce:	4b69      	ldr	r3, [pc, #420]	; (8000774 <CS43_Init+0x220>)
 80005d0:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 80005d2:	4969      	ldr	r1, [pc, #420]	; (8000778 <CS43_Init+0x224>)
 80005d4:	2004      	movs	r0, #4
 80005d6:	f7ff ff7d 	bl	80004d4 <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 80005da:	4b66      	ldr	r3, [pc, #408]	; (8000774 <CS43_Init+0x220>)
 80005dc:	2280      	movs	r2, #128	; 0x80
 80005de:	705a      	strb	r2, [r3, #1]
	write_register(CLOCKING_CONTROL,&iData[1]);
 80005e0:	4965      	ldr	r1, [pc, #404]	; (8000778 <CS43_Init+0x224>)
 80005e2:	2005      	movs	r0, #5
 80005e4:	f7ff ff76 	bl	80004d4 <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 80005e8:	4962      	ldr	r1, [pc, #392]	; (8000774 <CS43_Init+0x220>)
 80005ea:	2006      	movs	r0, #6
 80005ec:	f7ff ff90 	bl	8000510 <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 80005f0:	4b60      	ldr	r3, [pc, #384]	; (8000774 <CS43_Init+0x220>)
 80005f2:	785b      	ldrb	r3, [r3, #1]
 80005f4:	f003 0320 	and.w	r3, r3, #32
 80005f8:	b2da      	uxtb	r2, r3
 80005fa:	4b5e      	ldr	r3, [pc, #376]	; (8000774 <CS43_Init+0x220>)
 80005fc:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 7);  // Slave
 80005fe:	4b5d      	ldr	r3, [pc, #372]	; (8000774 <CS43_Init+0x220>)
 8000600:	785b      	ldrb	r3, [r3, #1]
 8000602:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000606:	b2da      	uxtb	r2, r3
 8000608:	4b5a      	ldr	r3, [pc, #360]	; (8000774 <CS43_Init+0x220>)
 800060a:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 800060c:	4b59      	ldr	r3, [pc, #356]	; (8000774 <CS43_Init+0x220>)
 800060e:	785b      	ldrb	r3, [r3, #1]
 8000610:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000614:	b2da      	uxtb	r2, r3
 8000616:	4b57      	ldr	r3, [pc, #348]	; (8000774 <CS43_Init+0x220>)
 8000618:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 4);  // No DSP mode
 800061a:	4b56      	ldr	r3, [pc, #344]	; (8000774 <CS43_Init+0x220>)
 800061c:	785b      	ldrb	r3, [r3, #1]
 800061e:	f023 0310 	bic.w	r3, r3, #16
 8000622:	b2da      	uxtb	r2, r3
 8000624:	4b53      	ldr	r3, [pc, #332]	; (8000774 <CS43_Init+0x220>)
 8000626:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 8000628:	4b52      	ldr	r3, [pc, #328]	; (8000774 <CS43_Init+0x220>)
 800062a:	785b      	ldrb	r3, [r3, #1]
 800062c:	f023 0304 	bic.w	r3, r3, #4
 8000630:	b2da      	uxtb	r2, r3
 8000632:	4b50      	ldr	r3, [pc, #320]	; (8000774 <CS43_Init+0x220>)
 8000634:	705a      	strb	r2, [r3, #1]
	iData[1] |= (1 << 2);
 8000636:	4b4f      	ldr	r3, [pc, #316]	; (8000774 <CS43_Init+0x220>)
 8000638:	785b      	ldrb	r3, [r3, #1]
 800063a:	f043 0304 	orr.w	r3, r3, #4
 800063e:	b2da      	uxtb	r2, r3
 8000640:	4b4c      	ldr	r3, [pc, #304]	; (8000774 <CS43_Init+0x220>)
 8000642:	705a      	strb	r2, [r3, #1]
	
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 8000644:	4b4b      	ldr	r3, [pc, #300]	; (8000774 <CS43_Init+0x220>)
 8000646:	785b      	ldrb	r3, [r3, #1]
 8000648:	f043 0303 	orr.w	r3, r3, #3
 800064c:	b2da      	uxtb	r2, r3
 800064e:	4b49      	ldr	r3, [pc, #292]	; (8000774 <CS43_Init+0x220>)
 8000650:	705a      	strb	r2, [r3, #1]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 8000652:	4949      	ldr	r1, [pc, #292]	; (8000778 <CS43_Init+0x224>)
 8000654:	2006      	movs	r0, #6
 8000656:	f7ff ff3d 	bl	80004d4 <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 800065a:	4947      	ldr	r1, [pc, #284]	; (8000778 <CS43_Init+0x224>)
 800065c:	2008      	movs	r0, #8
 800065e:	f7ff ff57 	bl	8000510 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8000662:	4b44      	ldr	r3, [pc, #272]	; (8000774 <CS43_Init+0x220>)
 8000664:	785b      	ldrb	r3, [r3, #1]
 8000666:	f023 030f 	bic.w	r3, r3, #15
 800066a:	b2da      	uxtb	r2, r3
 800066c:	4b41      	ldr	r3, [pc, #260]	; (8000774 <CS43_Init+0x220>)
 800066e:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 8000670:	4b40      	ldr	r3, [pc, #256]	; (8000774 <CS43_Init+0x220>)
 8000672:	785b      	ldrb	r3, [r3, #1]
 8000674:	f043 0301 	orr.w	r3, r3, #1
 8000678:	b2da      	uxtb	r2, r3
 800067a:	4b3e      	ldr	r3, [pc, #248]	; (8000774 <CS43_Init+0x220>)
 800067c:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_A,&iData[1]);
 800067e:	493e      	ldr	r1, [pc, #248]	; (8000778 <CS43_Init+0x224>)
 8000680:	2008      	movs	r0, #8
 8000682:	f7ff ff27 	bl	80004d4 <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 8000686:	493c      	ldr	r1, [pc, #240]	; (8000778 <CS43_Init+0x224>)
 8000688:	2009      	movs	r0, #9
 800068a:	f7ff ff41 	bl	8000510 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 800068e:	4b39      	ldr	r3, [pc, #228]	; (8000774 <CS43_Init+0x220>)
 8000690:	785b      	ldrb	r3, [r3, #1]
 8000692:	f023 030f 	bic.w	r3, r3, #15
 8000696:	b2da      	uxtb	r2, r3
 8000698:	4b36      	ldr	r3, [pc, #216]	; (8000774 <CS43_Init+0x220>)
 800069a:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 800069c:	4b35      	ldr	r3, [pc, #212]	; (8000774 <CS43_Init+0x220>)
 800069e:	785b      	ldrb	r3, [r3, #1]
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	4b33      	ldr	r3, [pc, #204]	; (8000774 <CS43_Init+0x220>)
 80006a8:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_B,&iData[1]);
 80006aa:	4933      	ldr	r1, [pc, #204]	; (8000778 <CS43_Init+0x224>)
 80006ac:	2009      	movs	r0, #9
 80006ae:	f7ff ff11 	bl	80004d4 <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 80006b2:	4931      	ldr	r1, [pc, #196]	; (8000778 <CS43_Init+0x224>)
 80006b4:	200e      	movs	r0, #14
 80006b6:	f7ff ff2b 	bl	8000510 <read_register>
	if(outputMode == MODE_ANALOG)
 80006ba:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80006be:	2b03      	cmp	r3, #3
 80006c0:	d123      	bne.n	800070a <CS43_Init+0x1b6>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 80006c2:	4b2c      	ldr	r3, [pc, #176]	; (8000774 <CS43_Init+0x220>)
 80006c4:	785b      	ldrb	r3, [r3, #1]
 80006c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	4b29      	ldr	r3, [pc, #164]	; (8000774 <CS43_Init+0x220>)
 80006ce:	705a      	strb	r2, [r3, #1]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 80006d0:	4b28      	ldr	r3, [pc, #160]	; (8000774 <CS43_Init+0x220>)
 80006d2:	785b      	ldrb	r3, [r3, #1]
 80006d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006d8:	b2da      	uxtb	r2, r3
 80006da:	4b26      	ldr	r3, [pc, #152]	; (8000774 <CS43_Init+0x220>)
 80006dc:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 80006de:	4b25      	ldr	r3, [pc, #148]	; (8000774 <CS43_Init+0x220>)
 80006e0:	785b      	ldrb	r3, [r3, #1]
 80006e2:	f023 0320 	bic.w	r3, r3, #32
 80006e6:	b2da      	uxtb	r2, r3
 80006e8:	4b22      	ldr	r3, [pc, #136]	; (8000774 <CS43_Init+0x220>)
 80006ea:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 80006ec:	4b21      	ldr	r3, [pc, #132]	; (8000774 <CS43_Init+0x220>)
 80006ee:	785b      	ldrb	r3, [r3, #1]
 80006f0:	f023 0310 	bic.w	r3, r3, #16
 80006f4:	b2da      	uxtb	r2, r3
 80006f6:	4b1f      	ldr	r3, [pc, #124]	; (8000774 <CS43_Init+0x220>)
 80006f8:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 80006fa:	4b1e      	ldr	r3, [pc, #120]	; (8000774 <CS43_Init+0x220>)
 80006fc:	785b      	ldrb	r3, [r3, #1]
 80006fe:	f023 0308 	bic.w	r3, r3, #8
 8000702:	b2da      	uxtb	r2, r3
 8000704:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <CS43_Init+0x220>)
 8000706:	705a      	strb	r2, [r3, #1]
 8000708:	e006      	b.n	8000718 <CS43_Init+0x1c4>
	}
	else if(outputMode == MODE_I2S)
 800070a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800070e:	2b00      	cmp	r3, #0
 8000710:	d102      	bne.n	8000718 <CS43_Init+0x1c4>
	{
		iData[1] = 0x02;
 8000712:	4b18      	ldr	r3, [pc, #96]	; (8000774 <CS43_Init+0x220>)
 8000714:	2202      	movs	r2, #2
 8000716:	705a      	strb	r2, [r3, #1]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 8000718:	4917      	ldr	r1, [pc, #92]	; (8000778 <CS43_Init+0x224>)
 800071a:	200e      	movs	r0, #14
 800071c:	f7ff feda 	bl	80004d4 <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 8000720:	4915      	ldr	r1, [pc, #84]	; (8000778 <CS43_Init+0x224>)
 8000722:	200f      	movs	r0, #15
 8000724:	f7ff fef4 	bl	8000510 <read_register>
	iData[1] = 0x00;
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <CS43_Init+0x220>)
 800072a:	2200      	movs	r2, #0
 800072c:	705a      	strb	r2, [r3, #1]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 800072e:	4912      	ldr	r1, [pc, #72]	; (8000778 <CS43_Init+0x224>)
 8000730:	200f      	movs	r0, #15
 8000732:	f7ff fecf 	bl	80004d4 <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0x00;
 8000736:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <CS43_Init+0x220>)
 8000738:	2200      	movs	r2, #0
 800073a:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 800073c:	490e      	ldr	r1, [pc, #56]	; (8000778 <CS43_Init+0x224>)
 800073e:	2014      	movs	r0, #20
 8000740:	f7ff fec8 	bl	80004d4 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8000744:	490c      	ldr	r1, [pc, #48]	; (8000778 <CS43_Init+0x224>)
 8000746:	2015      	movs	r0, #21
 8000748:	f7ff fec4 	bl	80004d4 <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 800074c:	490a      	ldr	r1, [pc, #40]	; (8000778 <CS43_Init+0x224>)
 800074e:	201a      	movs	r0, #26
 8000750:	f7ff fec0 	bl	80004d4 <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 8000754:	4908      	ldr	r1, [pc, #32]	; (8000778 <CS43_Init+0x224>)
 8000756:	201b      	movs	r0, #27
 8000758:	f7ff febc 	bl	80004d4 <write_register>
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr
 8000768:	200001f4 	.word	0x200001f4
 800076c:	40020c00 	.word	0x40020c00
 8000770:	2000014c 	.word	0x2000014c
 8000774:	20000148 	.word	0x20000148
 8000778:	20000149 	.word	0x20000149

0800077c <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]
	switch (side)
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	2b03      	cmp	r3, #3
 800078a:	d837      	bhi.n	80007fc <CS43_Enable_RightLeft+0x80>
 800078c:	a201      	add	r2, pc, #4	; (adr r2, 8000794 <CS43_Enable_RightLeft+0x18>)
 800078e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000792:	bf00      	nop
 8000794:	080007a5 	.word	0x080007a5
 8000798:	080007bb 	.word	0x080007bb
 800079c:	080007d1 	.word	0x080007d1
 80007a0:	080007e7 	.word	0x080007e7
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007a4:	4b21      	ldr	r3, [pc, #132]	; (800082c <CS43_Enable_RightLeft+0xb0>)
 80007a6:	22c0      	movs	r2, #192	; 0xc0
 80007a8:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007aa:	4b20      	ldr	r3, [pc, #128]	; (800082c <CS43_Enable_RightLeft+0xb0>)
 80007ac:	785b      	ldrb	r3, [r3, #1]
 80007ae:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80007b2:	b2da      	uxtb	r2, r3
 80007b4:	4b1d      	ldr	r3, [pc, #116]	; (800082c <CS43_Enable_RightLeft+0xb0>)
 80007b6:	705a      	strb	r2, [r3, #1]
			break;
 80007b8:	e021      	b.n	80007fe <CS43_Enable_RightLeft+0x82>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007ba:	4b1c      	ldr	r3, [pc, #112]	; (800082c <CS43_Enable_RightLeft+0xb0>)
 80007bc:	2280      	movs	r2, #128	; 0x80
 80007be:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007c0:	4b1a      	ldr	r3, [pc, #104]	; (800082c <CS43_Enable_RightLeft+0xb0>)
 80007c2:	785b      	ldrb	r3, [r3, #1]
 80007c4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80007c8:	b2da      	uxtb	r2, r3
 80007ca:	4b18      	ldr	r3, [pc, #96]	; (800082c <CS43_Enable_RightLeft+0xb0>)
 80007cc:	705a      	strb	r2, [r3, #1]
			break;
 80007ce:	e016      	b.n	80007fe <CS43_Enable_RightLeft+0x82>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007d0:	4b16      	ldr	r3, [pc, #88]	; (800082c <CS43_Enable_RightLeft+0xb0>)
 80007d2:	22c0      	movs	r2, #192	; 0xc0
 80007d4:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007d6:	4b15      	ldr	r3, [pc, #84]	; (800082c <CS43_Enable_RightLeft+0xb0>)
 80007d8:	785b      	ldrb	r3, [r3, #1]
 80007da:	f043 0320 	orr.w	r3, r3, #32
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	4b12      	ldr	r3, [pc, #72]	; (800082c <CS43_Enable_RightLeft+0xb0>)
 80007e2:	705a      	strb	r2, [r3, #1]
			break;
 80007e4:	e00b      	b.n	80007fe <CS43_Enable_RightLeft+0x82>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007e6:	4b11      	ldr	r3, [pc, #68]	; (800082c <CS43_Enable_RightLeft+0xb0>)
 80007e8:	2280      	movs	r2, #128	; 0x80
 80007ea:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007ec:	4b0f      	ldr	r3, [pc, #60]	; (800082c <CS43_Enable_RightLeft+0xb0>)
 80007ee:	785b      	ldrb	r3, [r3, #1]
 80007f0:	f043 0320 	orr.w	r3, r3, #32
 80007f4:	b2da      	uxtb	r2, r3
 80007f6:	4b0d      	ldr	r3, [pc, #52]	; (800082c <CS43_Enable_RightLeft+0xb0>)
 80007f8:	705a      	strb	r2, [r3, #1]
			break;
 80007fa:	e000      	b.n	80007fe <CS43_Enable_RightLeft+0x82>
		default:
			break;
 80007fc:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80007fe:	4b0b      	ldr	r3, [pc, #44]	; (800082c <CS43_Enable_RightLeft+0xb0>)
 8000800:	785b      	ldrb	r3, [r3, #1]
 8000802:	f043 030c 	orr.w	r3, r3, #12
 8000806:	b2da      	uxtb	r2, r3
 8000808:	4b08      	ldr	r3, [pc, #32]	; (800082c <CS43_Enable_RightLeft+0xb0>)
 800080a:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 800080c:	4b07      	ldr	r3, [pc, #28]	; (800082c <CS43_Enable_RightLeft+0xb0>)
 800080e:	785b      	ldrb	r3, [r3, #1]
 8000810:	f043 0303 	orr.w	r3, r3, #3
 8000814:	b2da      	uxtb	r2, r3
 8000816:	4b05      	ldr	r3, [pc, #20]	; (800082c <CS43_Enable_RightLeft+0xb0>)
 8000818:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 800081a:	4905      	ldr	r1, [pc, #20]	; (8000830 <CS43_Enable_RightLeft+0xb4>)
 800081c:	2004      	movs	r0, #4
 800081e:	f7ff fe59 	bl	80004d4 <write_register>
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000148 	.word	0x20000148
 8000830:	20000149 	.word	0x20000149

08000834 <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	71fb      	strb	r3, [r7, #7]
	int8_t tempVol = volume - 50;
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	3b32      	subs	r3, #50	; 0x32
 8000842:	b2db      	uxtb	r3, r3
 8000844:	73fb      	strb	r3, [r7, #15]
	tempVol = tempVol*(127/50);
 8000846:	7bfb      	ldrb	r3, [r7, #15]
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	b2db      	uxtb	r3, r3
 800084c:	73fb      	strb	r3, [r7, #15]
	uint8_t myVolume =  (uint8_t )tempVol;
 800084e:	7bfb      	ldrb	r3, [r7, #15]
 8000850:	73bb      	strb	r3, [r7, #14]
	iData[1] = myVolume;
 8000852:	4a16      	ldr	r2, [pc, #88]	; (80008ac <CS43_SetVolume+0x78>)
 8000854:	7bbb      	ldrb	r3, [r7, #14]
 8000856:	7053      	strb	r3, [r2, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8000858:	4915      	ldr	r1, [pc, #84]	; (80008b0 <CS43_SetVolume+0x7c>)
 800085a:	2014      	movs	r0, #20
 800085c:	f7ff fe3a 	bl	80004d4 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8000860:	4913      	ldr	r1, [pc, #76]	; (80008b0 <CS43_SetVolume+0x7c>)
 8000862:	2015      	movs	r0, #21
 8000864:	f7ff fe36 	bl	80004d4 <write_register>
	
	iData[1] = VOLUME_CONVERT_D(volume);
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	2b64      	cmp	r3, #100	; 0x64
 800086c:	d80e      	bhi.n	800088c <CS43_SetVolume+0x58>
 800086e:	79fa      	ldrb	r2, [r7, #7]
 8000870:	4613      	mov	r3, r2
 8000872:	005b      	lsls	r3, r3, #1
 8000874:	4413      	add	r3, r2
 8000876:	011b      	lsls	r3, r3, #4
 8000878:	4a0e      	ldr	r2, [pc, #56]	; (80008b4 <CS43_SetVolume+0x80>)
 800087a:	fb82 1203 	smull	r1, r2, r2, r3
 800087e:	1152      	asrs	r2, r2, #5
 8000880:	17db      	asrs	r3, r3, #31
 8000882:	1ad3      	subs	r3, r2, r3
 8000884:	b2db      	uxtb	r3, r3
 8000886:	3b18      	subs	r3, #24
 8000888:	b2db      	uxtb	r3, r3
 800088a:	e000      	b.n	800088e <CS43_SetVolume+0x5a>
 800088c:	2318      	movs	r3, #24
 800088e:	4a07      	ldr	r2, [pc, #28]	; (80008ac <CS43_SetVolume+0x78>)
 8000890:	7053      	strb	r3, [r2, #1]
	
	/* Set the Master volume */ 
	write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 8000892:	4907      	ldr	r1, [pc, #28]	; (80008b0 <CS43_SetVolume+0x7c>)
 8000894:	2020      	movs	r0, #32
 8000896:	f7ff fe1d 	bl	80004d4 <write_register>
	write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 800089a:	4905      	ldr	r1, [pc, #20]	; (80008b0 <CS43_SetVolume+0x7c>)
 800089c:	2021      	movs	r0, #33	; 0x21
 800089e:	f7ff fe19 	bl	80004d4 <write_register>
}
 80008a2:	bf00      	nop
 80008a4:	3710      	adds	r7, #16
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000148 	.word	0x20000148
 80008b0:	20000149 	.word	0x20000149
 80008b4:	51eb851f 	.word	0x51eb851f

080008b8 <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 80008bc:	4b1d      	ldr	r3, [pc, #116]	; (8000934 <CS43_Start+0x7c>)
 80008be:	2299      	movs	r2, #153	; 0x99
 80008c0:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 80008c2:	491d      	ldr	r1, [pc, #116]	; (8000938 <CS43_Start+0x80>)
 80008c4:	2000      	movs	r0, #0
 80008c6:	f7ff fe05 	bl	80004d4 <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 80008ca:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <CS43_Start+0x7c>)
 80008cc:	2280      	movs	r2, #128	; 0x80
 80008ce:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_47,&iData[1]);
 80008d0:	4919      	ldr	r1, [pc, #100]	; (8000938 <CS43_Start+0x80>)
 80008d2:	2047      	movs	r0, #71	; 0x47
 80008d4:	f7ff fdfe 	bl	80004d4 <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008d8:	4917      	ldr	r1, [pc, #92]	; (8000938 <CS43_Start+0x80>)
 80008da:	2032      	movs	r0, #50	; 0x32
 80008dc:	f7ff fe18 	bl	8000510 <read_register>
	iData[1] |= 0x80;
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <CS43_Start+0x7c>)
 80008e2:	785b      	ldrb	r3, [r3, #1]
 80008e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008e8:	b2da      	uxtb	r2, r3
 80008ea:	4b12      	ldr	r3, [pc, #72]	; (8000934 <CS43_Start+0x7c>)
 80008ec:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 80008ee:	4912      	ldr	r1, [pc, #72]	; (8000938 <CS43_Start+0x80>)
 80008f0:	2032      	movs	r0, #50	; 0x32
 80008f2:	f7ff fdef 	bl	80004d4 <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008f6:	4910      	ldr	r1, [pc, #64]	; (8000938 <CS43_Start+0x80>)
 80008f8:	2032      	movs	r0, #50	; 0x32
 80008fa:	f7ff fe09 	bl	8000510 <read_register>
	iData[1] &= ~(0x80);
 80008fe:	4b0d      	ldr	r3, [pc, #52]	; (8000934 <CS43_Start+0x7c>)
 8000900:	785b      	ldrb	r3, [r3, #1]
 8000902:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000906:	b2da      	uxtb	r2, r3
 8000908:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <CS43_Start+0x7c>)
 800090a:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 800090c:	490a      	ldr	r1, [pc, #40]	; (8000938 <CS43_Start+0x80>)
 800090e:	2032      	movs	r0, #50	; 0x32
 8000910:	f7ff fde0 	bl	80004d4 <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 8000914:	4b07      	ldr	r3, [pc, #28]	; (8000934 <CS43_Start+0x7c>)
 8000916:	2200      	movs	r2, #0
 8000918:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 800091a:	4907      	ldr	r1, [pc, #28]	; (8000938 <CS43_Start+0x80>)
 800091c:	2000      	movs	r0, #0
 800091e:	f7ff fdd9 	bl	80004d4 <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 8000922:	4b04      	ldr	r3, [pc, #16]	; (8000934 <CS43_Start+0x7c>)
 8000924:	229e      	movs	r2, #158	; 0x9e
 8000926:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,&iData[1]);
 8000928:	4903      	ldr	r1, [pc, #12]	; (8000938 <CS43_Start+0x80>)
 800092a:	2002      	movs	r0, #2
 800092c:	f7ff fdd2 	bl	80004d4 <write_register>
}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20000148 	.word	0x20000148
 8000938:	20000149 	.word	0x20000149

0800093c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800093c:	b590      	push	{r4, r7, lr}
 800093e:	b095      	sub	sp, #84	; 0x54
 8000940:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE BEGIN 1 */
	sample_dt = F_OUT/F_SAMPLE;
 8000942:	4b3d      	ldr	r3, [pc, #244]	; (8000a38 <main+0xfc>)
 8000944:	f04f 5274 	mov.w	r2, #1023410176	; 0x3d000000
 8000948:	601a      	str	r2, [r3, #0]
	sample_N = F_SAMPLE/F_OUT;
 800094a:	4b3c      	ldr	r3, [pc, #240]	; (8000a3c <main+0x100>)
 800094c:	2220      	movs	r2, #32
 800094e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000950:	f000 fb98 	bl	8001084 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000954:	f000 f880 	bl	8000a58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000958:	f000 f962 	bl	8000c20 <MX_GPIO_Init>
  MX_DMA_Init();
 800095c:	f000 f940 	bl	8000be0 <MX_DMA_Init>
  MX_I2C1_Init();
 8000960:	f000 f8e2 	bl	8000b28 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000964:	f000 f90e 	bl	8000b84 <MX_I2S3_Init>
  MX_USB_DEVICE_Init();
 8000968:	f008 f9f8 	bl	8008d5c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
	CS43_Init(hi2c1, MODE_I2S);
 800096c:	4c34      	ldr	r4, [pc, #208]	; (8000a40 <main+0x104>)
 800096e:	2300      	movs	r3, #0
 8000970:	9311      	str	r3, [sp, #68]	; 0x44
 8000972:	4668      	mov	r0, sp
 8000974:	f104 0310 	add.w	r3, r4, #16
 8000978:	2244      	movs	r2, #68	; 0x44
 800097a:	4619      	mov	r1, r3
 800097c:	f008 febe 	bl	80096fc <memcpy>
 8000980:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000984:	f7ff fde6 	bl	8000554 <CS43_Init>
	CS43_SetVolume(20); //0 - 100,, 40
 8000988:	2014      	movs	r0, #20
 800098a:	f7ff ff53 	bl	8000834 <CS43_SetVolume>
	CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 800098e:	2003      	movs	r0, #3
 8000990:	f7ff fef4 	bl	800077c <CS43_Enable_RightLeft>
	CS43_Start();
 8000994:	f7ff ff90 	bl	80008b8 <CS43_Start>
//Build Sine wave
	for(uint16_t i=0; i<sample_N; i++)
 8000998:	2300      	movs	r3, #0
 800099a:	80fb      	strh	r3, [r7, #6]
 800099c:	e03d      	b.n	8000a1a <main+0xde>
	{
		mySinVal = sinf(i*2*PI*sample_dt);
 800099e:	88fb      	ldrh	r3, [r7, #6]
 80009a0:	005b      	lsls	r3, r3, #1
 80009a2:	ee07 3a90 	vmov	s15, r3
 80009a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009aa:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8000a44 <main+0x108>
 80009ae:	ee27 7a87 	vmul.f32	s14, s15, s14
 80009b2:	4b21      	ldr	r3, [pc, #132]	; (8000a38 <main+0xfc>)
 80009b4:	edd3 7a00 	vldr	s15, [r3]
 80009b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009bc:	eeb0 0a67 	vmov.f32	s0, s15
 80009c0:	f008 feaa 	bl	8009718 <sinf>
 80009c4:	eef0 7a40 	vmov.f32	s15, s0
 80009c8:	4b1f      	ldr	r3, [pc, #124]	; (8000a48 <main+0x10c>)
 80009ca:	edc3 7a00 	vstr	s15, [r3]
		dataI2S[i*2] = (mySinVal )*8000;    //Right data (0 2 4 6 8 10 12)
 80009ce:	4b1e      	ldr	r3, [pc, #120]	; (8000a48 <main+0x10c>)
 80009d0:	edd3 7a00 	vldr	s15, [r3]
 80009d4:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8000a4c <main+0x110>
 80009d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009dc:	88fb      	ldrh	r3, [r7, #6]
 80009de:	005b      	lsls	r3, r3, #1
 80009e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009e4:	ee17 2a90 	vmov	r2, s15
 80009e8:	b211      	sxth	r1, r2
 80009ea:	4a19      	ldr	r2, [pc, #100]	; (8000a50 <main+0x114>)
 80009ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		dataI2S[i*2 + 1] =(mySinVal )*8000; //Left data  (1 3 5 7 9 11 13)
 80009f0:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <main+0x10c>)
 80009f2:	edd3 7a00 	vldr	s15, [r3]
 80009f6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000a4c <main+0x110>
 80009fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009fe:	88fb      	ldrh	r3, [r7, #6]
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	3301      	adds	r3, #1
 8000a04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a08:	ee17 2a90 	vmov	r2, s15
 8000a0c:	b211      	sxth	r1, r2
 8000a0e:	4a10      	ldr	r2, [pc, #64]	; (8000a50 <main+0x114>)
 8000a10:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint16_t i=0; i<sample_N; i++)
 8000a14:	88fb      	ldrh	r3, [r7, #6]
 8000a16:	3301      	adds	r3, #1
 8000a18:	80fb      	strh	r3, [r7, #6]
 8000a1a:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <main+0x100>)
 8000a1c:	881b      	ldrh	r3, [r3, #0]
 8000a1e:	88fa      	ldrh	r2, [r7, #6]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d3bc      	bcc.n	800099e <main+0x62>
	}
	
	HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)dataI2S, sample_N*2);
 8000a24:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <main+0x100>)
 8000a26:	881b      	ldrh	r3, [r3, #0]
 8000a28:	005b      	lsls	r3, r3, #1
 8000a2a:	b29b      	uxth	r3, r3
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	4908      	ldr	r1, [pc, #32]	; (8000a50 <main+0x114>)
 8000a30:	4808      	ldr	r0, [pc, #32]	; (8000a54 <main+0x118>)
 8000a32:	f002 fb17 	bl	8003064 <HAL_I2S_Transmit_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a36:	e7fe      	b.n	8000a36 <main+0xfa>
 8000a38:	200002a0 	.word	0x200002a0
 8000a3c:	200002a4 	.word	0x200002a4
 8000a40:	200001a0 	.word	0x200001a0
 8000a44:	40490fd0 	.word	0x40490fd0
 8000a48:	2000029c 	.word	0x2000029c
 8000a4c:	45fa0000 	.word	0x45fa0000
 8000a50:	200002a8 	.word	0x200002a8
 8000a54:	200001f4 	.word	0x200001f4

08000a58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b094      	sub	sp, #80	; 0x50
 8000a5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a5e:	f107 0320 	add.w	r3, r7, #32
 8000a62:	2230      	movs	r2, #48	; 0x30
 8000a64:	2100      	movs	r1, #0
 8000a66:	4618      	mov	r0, r3
 8000a68:	f008 fe1c 	bl	80096a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a6c:	f107 030c 	add.w	r3, r7, #12
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	4b27      	ldr	r3, [pc, #156]	; (8000b20 <SystemClock_Config+0xc8>)
 8000a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a84:	4a26      	ldr	r2, [pc, #152]	; (8000b20 <SystemClock_Config+0xc8>)
 8000a86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a8c:	4b24      	ldr	r3, [pc, #144]	; (8000b20 <SystemClock_Config+0xc8>)
 8000a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a94:	60bb      	str	r3, [r7, #8]
 8000a96:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a98:	2300      	movs	r3, #0
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	4b21      	ldr	r3, [pc, #132]	; (8000b24 <SystemClock_Config+0xcc>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a20      	ldr	r2, [pc, #128]	; (8000b24 <SystemClock_Config+0xcc>)
 8000aa2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000aa6:	6013      	str	r3, [r2, #0]
 8000aa8:	4b1e      	ldr	r3, [pc, #120]	; (8000b24 <SystemClock_Config+0xcc>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ab8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ac2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ac8:	2304      	movs	r3, #4
 8000aca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000acc:	2360      	movs	r3, #96	; 0x60
 8000ace:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8000ad0:	2306      	movs	r3, #6
 8000ad2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ad4:	2304      	movs	r3, #4
 8000ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad8:	f107 0320 	add.w	r3, r7, #32
 8000adc:	4618      	mov	r0, r3
 8000ade:	f004 f983 	bl	8004de8 <HAL_RCC_OscConfig>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ae8:	f000 f908 	bl	8000cfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aec:	230f      	movs	r3, #15
 8000aee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000af0:	2302      	movs	r3, #2
 8000af2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000af4:	2380      	movs	r3, #128	; 0x80
 8000af6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000af8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000afc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b02:	f107 030c 	add.w	r3, r7, #12
 8000b06:	2100      	movs	r1, #0
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f004 fbe5 	bl	80052d8 <HAL_RCC_ClockConfig>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b14:	f000 f8f2 	bl	8000cfc <Error_Handler>
  }
}
 8000b18:	bf00      	nop
 8000b1a:	3750      	adds	r7, #80	; 0x50
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40007000 	.word	0x40007000

08000b28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <MX_I2C1_Init+0x50>)
 8000b2e:	4a13      	ldr	r2, [pc, #76]	; (8000b7c <MX_I2C1_Init+0x54>)
 8000b30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b32:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <MX_I2C1_Init+0x50>)
 8000b34:	4a12      	ldr	r2, [pc, #72]	; (8000b80 <MX_I2C1_Init+0x58>)
 8000b36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <MX_I2C1_Init+0x50>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <MX_I2C1_Init+0x50>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <MX_I2C1_Init+0x50>)
 8000b46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b4c:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <MX_I2C1_Init+0x50>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b52:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <MX_I2C1_Init+0x50>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b58:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <MX_I2C1_Init+0x50>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <MX_I2C1_Init+0x50>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b64:	4804      	ldr	r0, [pc, #16]	; (8000b78 <MX_I2C1_Init+0x50>)
 8000b66:	f001 f943 	bl	8001df0 <HAL_I2C_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b70:	f000 f8c4 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	200001a0 	.word	0x200001a0
 8000b7c:	40005400 	.word	0x40005400
 8000b80:	000186a0 	.word	0x000186a0

08000b84 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000b88:	4b13      	ldr	r3, [pc, #76]	; (8000bd8 <MX_I2S3_Init+0x54>)
 8000b8a:	4a14      	ldr	r2, [pc, #80]	; (8000bdc <MX_I2S3_Init+0x58>)
 8000b8c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000b8e:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <MX_I2S3_Init+0x54>)
 8000b90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b94:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b96:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <MX_I2S3_Init+0x54>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000b9c:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <MX_I2S3_Init+0x54>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000ba2:	4b0d      	ldr	r3, [pc, #52]	; (8000bd8 <MX_I2S3_Init+0x54>)
 8000ba4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ba8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000baa:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <MX_I2S3_Init+0x54>)
 8000bac:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000bb0:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000bb2:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <MX_I2S3_Init+0x54>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000bb8:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <MX_I2S3_Init+0x54>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000bbe:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <MX_I2S3_Init+0x54>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000bc4:	4804      	ldr	r0, [pc, #16]	; (8000bd8 <MX_I2S3_Init+0x54>)
 8000bc6:	f002 f90d 	bl	8002de4 <HAL_I2S_Init>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8000bd0:	f000 f894 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000bd4:	bf00      	nop
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	200001f4 	.word	0x200001f4
 8000bdc:	40003c00 	.word	0x40003c00

08000be0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <MX_DMA_Init+0x3c>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a0b      	ldr	r2, [pc, #44]	; (8000c1c <MX_DMA_Init+0x3c>)
 8000bf0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <MX_DMA_Init+0x3c>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2100      	movs	r1, #0
 8000c06:	2010      	movs	r0, #16
 8000c08:	f000 fbad 	bl	8001366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000c0c:	2010      	movs	r0, #16
 8000c0e:	f000 fbc6 	bl	800139e <HAL_NVIC_EnableIRQ>

}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40023800 	.word	0x40023800

08000c20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08a      	sub	sp, #40	; 0x28
 8000c24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]
 8000c34:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
 8000c3a:	4b2e      	ldr	r3, [pc, #184]	; (8000cf4 <MX_GPIO_Init+0xd4>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a2d      	ldr	r2, [pc, #180]	; (8000cf4 <MX_GPIO_Init+0xd4>)
 8000c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b2b      	ldr	r3, [pc, #172]	; (8000cf4 <MX_GPIO_Init+0xd4>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c4e:	613b      	str	r3, [r7, #16]
 8000c50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	4b27      	ldr	r3, [pc, #156]	; (8000cf4 <MX_GPIO_Init+0xd4>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a26      	ldr	r2, [pc, #152]	; (8000cf4 <MX_GPIO_Init+0xd4>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b24      	ldr	r3, [pc, #144]	; (8000cf4 <MX_GPIO_Init+0xd4>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60bb      	str	r3, [r7, #8]
 8000c72:	4b20      	ldr	r3, [pc, #128]	; (8000cf4 <MX_GPIO_Init+0xd4>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a1f      	ldr	r2, [pc, #124]	; (8000cf4 <MX_GPIO_Init+0xd4>)
 8000c78:	f043 0308 	orr.w	r3, r3, #8
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b1d      	ldr	r3, [pc, #116]	; (8000cf4 <MX_GPIO_Init+0xd4>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0308 	and.w	r3, r3, #8
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	4b19      	ldr	r3, [pc, #100]	; (8000cf4 <MX_GPIO_Init+0xd4>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a18      	ldr	r2, [pc, #96]	; (8000cf4 <MX_GPIO_Init+0xd4>)
 8000c94:	f043 0304 	orr.w	r3, r3, #4
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b16      	ldr	r3, [pc, #88]	; (8000cf4 <MX_GPIO_Init+0xd4>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0304 	and.w	r3, r3, #4
 8000ca2:	607b      	str	r3, [r7, #4]
 8000ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	603b      	str	r3, [r7, #0]
 8000caa:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <MX_GPIO_Init+0xd4>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a11      	ldr	r2, [pc, #68]	; (8000cf4 <MX_GPIO_Init+0xd4>)
 8000cb0:	f043 0302 	orr.w	r3, r3, #2
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <MX_GPIO_Init+0xd4>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f003 0302 	and.w	r3, r3, #2
 8000cbe:	603b      	str	r3, [r7, #0]
 8000cc0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000cc8:	480b      	ldr	r0, [pc, #44]	; (8000cf8 <MX_GPIO_Init+0xd8>)
 8000cca:	f001 f877 	bl	8001dbc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000cce:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000cd2:	617b      	str	r3, [r7, #20]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4804      	ldr	r0, [pc, #16]	; (8000cf8 <MX_GPIO_Init+0xd8>)
 8000ce8:	f000 fee4 	bl	8001ab4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cec:	bf00      	nop
 8000cee:	3728      	adds	r7, #40	; 0x28
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40023800 	.word	0x40023800
 8000cf8:	40020c00 	.word	0x40020c00

08000cfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d00:	b672      	cpsid	i
}
 8000d02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <Error_Handler+0x8>
	...

08000d08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	607b      	str	r3, [r7, #4]
 8000d12:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d16:	4a0f      	ldr	r2, [pc, #60]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d1e:	4b0d      	ldr	r3, [pc, #52]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	603b      	str	r3, [r7, #0]
 8000d2e:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	4a08      	ldr	r2, [pc, #32]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d38:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d42:	603b      	str	r3, [r7, #0]
 8000d44:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d46:	2007      	movs	r0, #7
 8000d48:	f000 fb02 	bl	8001350 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40023800 	.word	0x40023800

08000d58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08a      	sub	sp, #40	; 0x28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a19      	ldr	r2, [pc, #100]	; (8000ddc <HAL_I2C_MspInit+0x84>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d12c      	bne.n	8000dd4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	613b      	str	r3, [r7, #16]
 8000d7e:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <HAL_I2C_MspInit+0x88>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a17      	ldr	r2, [pc, #92]	; (8000de0 <HAL_I2C_MspInit+0x88>)
 8000d84:	f043 0302 	orr.w	r3, r3, #2
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <HAL_I2C_MspInit+0x88>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000d96:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d9c:	2312      	movs	r3, #18
 8000d9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000da0:	2301      	movs	r3, #1
 8000da2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da4:	2300      	movs	r3, #0
 8000da6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000da8:	2304      	movs	r3, #4
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	4619      	mov	r1, r3
 8000db2:	480c      	ldr	r0, [pc, #48]	; (8000de4 <HAL_I2C_MspInit+0x8c>)
 8000db4:	f000 fe7e 	bl	8001ab4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000db8:	2300      	movs	r3, #0
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <HAL_I2C_MspInit+0x88>)
 8000dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc0:	4a07      	ldr	r2, [pc, #28]	; (8000de0 <HAL_I2C_MspInit+0x88>)
 8000dc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dc6:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc8:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <HAL_I2C_MspInit+0x88>)
 8000dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000dd4:	bf00      	nop
 8000dd6:	3728      	adds	r7, #40	; 0x28
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40005400 	.word	0x40005400
 8000de0:	40023800 	.word	0x40023800
 8000de4:	40020400 	.word	0x40020400

08000de8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b090      	sub	sp, #64	; 0x40
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
 8000e10:	615a      	str	r2, [r3, #20]
  if(hi2s->Instance==SPI3)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a53      	ldr	r2, [pc, #332]	; (8000f64 <HAL_I2S_MspInit+0x17c>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	f040 809e 	bne.w	8000f5a <HAL_I2S_MspInit+0x172>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8000e22:	2364      	movs	r3, #100	; 0x64
 8000e24:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 8000e26:	2308      	movs	r3, #8
 8000e28:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	4618      	mov	r0, r3
 8000e34:	f004 fc5c 	bl	80056f0 <HAL_RCCEx_PeriphCLKConfig>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <HAL_I2S_MspInit+0x5a>
    {
      Error_Handler();
 8000e3e:	f7ff ff5d 	bl	8000cfc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
 8000e46:	4b48      	ldr	r3, [pc, #288]	; (8000f68 <HAL_I2S_MspInit+0x180>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4a:	4a47      	ldr	r2, [pc, #284]	; (8000f68 <HAL_I2S_MspInit+0x180>)
 8000e4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e50:	6413      	str	r3, [r2, #64]	; 0x40
 8000e52:	4b45      	ldr	r3, [pc, #276]	; (8000f68 <HAL_I2S_MspInit+0x180>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	4b41      	ldr	r3, [pc, #260]	; (8000f68 <HAL_I2S_MspInit+0x180>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a40      	ldr	r2, [pc, #256]	; (8000f68 <HAL_I2S_MspInit+0x180>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b3e      	ldr	r3, [pc, #248]	; (8000f68 <HAL_I2S_MspInit+0x180>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60bb      	str	r3, [r7, #8]
 8000e7e:	4b3a      	ldr	r3, [pc, #232]	; (8000f68 <HAL_I2S_MspInit+0x180>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	4a39      	ldr	r2, [pc, #228]	; (8000f68 <HAL_I2S_MspInit+0x180>)
 8000e84:	f043 0304 	orr.w	r3, r3, #4
 8000e88:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8a:	4b37      	ldr	r3, [pc, #220]	; (8000f68 <HAL_I2S_MspInit+0x180>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	f003 0304 	and.w	r3, r3, #4
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000e96:	2310      	movs	r3, #16
 8000e98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ea6:	2306      	movs	r3, #6
 8000ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000eaa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eae:	4619      	mov	r1, r3
 8000eb0:	482e      	ldr	r0, [pc, #184]	; (8000f6c <HAL_I2S_MspInit+0x184>)
 8000eb2:	f000 fdff 	bl	8001ab4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000eb6:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000eba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ec8:	2306      	movs	r3, #6
 8000eca:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ecc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4827      	ldr	r0, [pc, #156]	; (8000f70 <HAL_I2S_MspInit+0x188>)
 8000ed4:	f000 fdee 	bl	8001ab4 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8000ed8:	4b26      	ldr	r3, [pc, #152]	; (8000f74 <HAL_I2S_MspInit+0x18c>)
 8000eda:	4a27      	ldr	r2, [pc, #156]	; (8000f78 <HAL_I2S_MspInit+0x190>)
 8000edc:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8000ede:	4b25      	ldr	r3, [pc, #148]	; (8000f74 <HAL_I2S_MspInit+0x18c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ee4:	4b23      	ldr	r3, [pc, #140]	; (8000f74 <HAL_I2S_MspInit+0x18c>)
 8000ee6:	2240      	movs	r2, #64	; 0x40
 8000ee8:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eea:	4b22      	ldr	r3, [pc, #136]	; (8000f74 <HAL_I2S_MspInit+0x18c>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ef0:	4b20      	ldr	r3, [pc, #128]	; (8000f74 <HAL_I2S_MspInit+0x18c>)
 8000ef2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ef6:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ef8:	4b1e      	ldr	r3, [pc, #120]	; (8000f74 <HAL_I2S_MspInit+0x18c>)
 8000efa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000efe:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f00:	4b1c      	ldr	r3, [pc, #112]	; (8000f74 <HAL_I2S_MspInit+0x18c>)
 8000f02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f06:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8000f08:	4b1a      	ldr	r3, [pc, #104]	; (8000f74 <HAL_I2S_MspInit+0x18c>)
 8000f0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f0e:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f10:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <HAL_I2S_MspInit+0x18c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000f16:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <HAL_I2S_MspInit+0x18c>)
 8000f18:	2204      	movs	r2, #4
 8000f1a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000f1c:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <HAL_I2S_MspInit+0x18c>)
 8000f1e:	2203      	movs	r2, #3
 8000f20:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000f22:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <HAL_I2S_MspInit+0x18c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000f28:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <HAL_I2S_MspInit+0x18c>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000f2e:	4811      	ldr	r0, [pc, #68]	; (8000f74 <HAL_I2S_MspInit+0x18c>)
 8000f30:	f000 fa50 	bl	80013d4 <HAL_DMA_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <HAL_I2S_MspInit+0x156>
    {
      Error_Handler();
 8000f3a:	f7ff fedf 	bl	8000cfc <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a0c      	ldr	r2, [pc, #48]	; (8000f74 <HAL_I2S_MspInit+0x18c>)
 8000f42:	639a      	str	r2, [r3, #56]	; 0x38
 8000f44:	4a0b      	ldr	r2, [pc, #44]	; (8000f74 <HAL_I2S_MspInit+0x18c>)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	2033      	movs	r0, #51	; 0x33
 8000f50:	f000 fa09 	bl	8001366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000f54:	2033      	movs	r0, #51	; 0x33
 8000f56:	f000 fa22 	bl	800139e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000f5a:	bf00      	nop
 8000f5c:	3740      	adds	r7, #64	; 0x40
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40003c00 	.word	0x40003c00
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40020000 	.word	0x40020000
 8000f70:	40020800 	.word	0x40020800
 8000f74:	2000023c 	.word	0x2000023c
 8000f78:	40026088 	.word	0x40026088

08000f7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f80:	e7fe      	b.n	8000f80 <NMI_Handler+0x4>

08000f82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f86:	e7fe      	b.n	8000f86 <HardFault_Handler+0x4>

08000f88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <MemManage_Handler+0x4>

08000f8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f92:	e7fe      	b.n	8000f92 <BusFault_Handler+0x4>

08000f94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <UsageFault_Handler+0x4>

08000f9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc8:	f000 f8ae 	bl	8001128 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8000fd4:	4802      	ldr	r0, [pc, #8]	; (8000fe0 <DMA1_Stream5_IRQHandler+0x10>)
 8000fd6:	f000 fb03 	bl	80015e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	2000023c 	.word	0x2000023c

08000fe4 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 8000fe8:	4802      	ldr	r0, [pc, #8]	; (8000ff4 <SPI3_IRQHandler+0x10>)
 8000fea:	f002 f8e3 	bl	80031b4 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200001f4 	.word	0x200001f4

08000ff8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ffc:	4802      	ldr	r0, [pc, #8]	; (8001008 <OTG_FS_IRQHandler+0x10>)
 8000ffe:	f002 fde7 	bl	8003bd0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000854 	.word	0x20000854

0800100c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <SystemInit+0x20>)
 8001012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001016:	4a05      	ldr	r2, [pc, #20]	; (800102c <SystemInit+0x20>)
 8001018:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800101c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001030:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001068 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001034:	f7ff ffea 	bl	800100c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001038:	480c      	ldr	r0, [pc, #48]	; (800106c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800103a:	490d      	ldr	r1, [pc, #52]	; (8001070 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800103c:	4a0d      	ldr	r2, [pc, #52]	; (8001074 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800103e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001040:	e002      	b.n	8001048 <LoopCopyDataInit>

08001042 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001042:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001044:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001046:	3304      	adds	r3, #4

08001048 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001048:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800104a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800104c:	d3f9      	bcc.n	8001042 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800104e:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001050:	4c0a      	ldr	r4, [pc, #40]	; (800107c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001052:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001054:	e001      	b.n	800105a <LoopFillZerobss>

08001056 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001056:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001058:	3204      	adds	r2, #4

0800105a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800105a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800105c:	d3fb      	bcc.n	8001056 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800105e:	f008 fb29 	bl	80096b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001062:	f7ff fc6b 	bl	800093c <main>
  bx  lr    
 8001066:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001068:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800106c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001070:	2000012c 	.word	0x2000012c
  ldr r2, =_sidata
 8001074:	0800a5ec 	.word	0x0800a5ec
  ldr r2, =_sbss
 8001078:	2000012c 	.word	0x2000012c
  ldr r4, =_ebss
 800107c:	2000498c 	.word	0x2000498c

08001080 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001080:	e7fe      	b.n	8001080 <ADC_IRQHandler>
	...

08001084 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001088:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <HAL_Init+0x40>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a0d      	ldr	r2, [pc, #52]	; (80010c4 <HAL_Init+0x40>)
 800108e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001092:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001094:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <HAL_Init+0x40>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a0a      	ldr	r2, [pc, #40]	; (80010c4 <HAL_Init+0x40>)
 800109a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800109e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010a0:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <HAL_Init+0x40>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a07      	ldr	r2, [pc, #28]	; (80010c4 <HAL_Init+0x40>)
 80010a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ac:	2003      	movs	r0, #3
 80010ae:	f000 f94f 	bl	8001350 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010b2:	2000      	movs	r0, #0
 80010b4:	f000 f808 	bl	80010c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010b8:	f7ff fe26 	bl	8000d08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40023c00 	.word	0x40023c00

080010c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010d0:	4b12      	ldr	r3, [pc, #72]	; (800111c <HAL_InitTick+0x54>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	4b12      	ldr	r3, [pc, #72]	; (8001120 <HAL_InitTick+0x58>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	4619      	mov	r1, r3
 80010da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010de:	fbb3 f3f1 	udiv	r3, r3, r1
 80010e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e6:	4618      	mov	r0, r3
 80010e8:	f000 f967 	bl	80013ba <HAL_SYSTICK_Config>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e00e      	b.n	8001114 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2b0f      	cmp	r3, #15
 80010fa:	d80a      	bhi.n	8001112 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010fc:	2200      	movs	r2, #0
 80010fe:	6879      	ldr	r1, [r7, #4]
 8001100:	f04f 30ff 	mov.w	r0, #4294967295
 8001104:	f000 f92f 	bl	8001366 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001108:	4a06      	ldr	r2, [pc, #24]	; (8001124 <HAL_InitTick+0x5c>)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800110e:	2300      	movs	r3, #0
 8001110:	e000      	b.n	8001114 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
}
 8001114:	4618      	mov	r0, r3
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20000000 	.word	0x20000000
 8001120:	20000008 	.word	0x20000008
 8001124:	20000004 	.word	0x20000004

08001128 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <HAL_IncTick+0x20>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	461a      	mov	r2, r3
 8001132:	4b06      	ldr	r3, [pc, #24]	; (800114c <HAL_IncTick+0x24>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4413      	add	r3, r2
 8001138:	4a04      	ldr	r2, [pc, #16]	; (800114c <HAL_IncTick+0x24>)
 800113a:	6013      	str	r3, [r2, #0]
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	20000008 	.word	0x20000008
 800114c:	20000370 	.word	0x20000370

08001150 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  return uwTick;
 8001154:	4b03      	ldr	r3, [pc, #12]	; (8001164 <HAL_GetTick+0x14>)
 8001156:	681b      	ldr	r3, [r3, #0]
}
 8001158:	4618      	mov	r0, r3
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	20000370 	.word	0x20000370

08001168 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001170:	f7ff ffee 	bl	8001150 <HAL_GetTick>
 8001174:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001180:	d005      	beq.n	800118e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001182:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <HAL_Delay+0x44>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	461a      	mov	r2, r3
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	4413      	add	r3, r2
 800118c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800118e:	bf00      	nop
 8001190:	f7ff ffde 	bl	8001150 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	68fa      	ldr	r2, [r7, #12]
 800119c:	429a      	cmp	r2, r3
 800119e:	d8f7      	bhi.n	8001190 <HAL_Delay+0x28>
  {
  }
}
 80011a0:	bf00      	nop
 80011a2:	bf00      	nop
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000008 	.word	0x20000008

080011b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <__NVIC_SetPriorityGrouping+0x44>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011c6:	68ba      	ldr	r2, [r7, #8]
 80011c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011cc:	4013      	ands	r3, r2
 80011ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011e2:	4a04      	ldr	r2, [pc, #16]	; (80011f4 <__NVIC_SetPriorityGrouping+0x44>)
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	60d3      	str	r3, [r2, #12]
}
 80011e8:	bf00      	nop
 80011ea:	3714      	adds	r7, #20
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011fc:	4b04      	ldr	r3, [pc, #16]	; (8001210 <__NVIC_GetPriorityGrouping+0x18>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	0a1b      	lsrs	r3, r3, #8
 8001202:	f003 0307 	and.w	r3, r3, #7
}
 8001206:	4618      	mov	r0, r3
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	2b00      	cmp	r3, #0
 8001224:	db0b      	blt.n	800123e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	f003 021f 	and.w	r2, r3, #31
 800122c:	4907      	ldr	r1, [pc, #28]	; (800124c <__NVIC_EnableIRQ+0x38>)
 800122e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001232:	095b      	lsrs	r3, r3, #5
 8001234:	2001      	movs	r0, #1
 8001236:	fa00 f202 	lsl.w	r2, r0, r2
 800123a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	e000e100 	.word	0xe000e100

08001250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	6039      	str	r1, [r7, #0]
 800125a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800125c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001260:	2b00      	cmp	r3, #0
 8001262:	db0a      	blt.n	800127a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	b2da      	uxtb	r2, r3
 8001268:	490c      	ldr	r1, [pc, #48]	; (800129c <__NVIC_SetPriority+0x4c>)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	0112      	lsls	r2, r2, #4
 8001270:	b2d2      	uxtb	r2, r2
 8001272:	440b      	add	r3, r1
 8001274:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001278:	e00a      	b.n	8001290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	b2da      	uxtb	r2, r3
 800127e:	4908      	ldr	r1, [pc, #32]	; (80012a0 <__NVIC_SetPriority+0x50>)
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	f003 030f 	and.w	r3, r3, #15
 8001286:	3b04      	subs	r3, #4
 8001288:	0112      	lsls	r2, r2, #4
 800128a:	b2d2      	uxtb	r2, r2
 800128c:	440b      	add	r3, r1
 800128e:	761a      	strb	r2, [r3, #24]
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	e000e100 	.word	0xe000e100
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b089      	sub	sp, #36	; 0x24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	f1c3 0307 	rsb	r3, r3, #7
 80012be:	2b04      	cmp	r3, #4
 80012c0:	bf28      	it	cs
 80012c2:	2304      	movcs	r3, #4
 80012c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3304      	adds	r3, #4
 80012ca:	2b06      	cmp	r3, #6
 80012cc:	d902      	bls.n	80012d4 <NVIC_EncodePriority+0x30>
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	3b03      	subs	r3, #3
 80012d2:	e000      	b.n	80012d6 <NVIC_EncodePriority+0x32>
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d8:	f04f 32ff 	mov.w	r2, #4294967295
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43da      	mvns	r2, r3
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	401a      	ands	r2, r3
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012ec:	f04f 31ff 	mov.w	r1, #4294967295
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	fa01 f303 	lsl.w	r3, r1, r3
 80012f6:	43d9      	mvns	r1, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012fc:	4313      	orrs	r3, r2
         );
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3724      	adds	r7, #36	; 0x24
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
	...

0800130c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3b01      	subs	r3, #1
 8001318:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800131c:	d301      	bcc.n	8001322 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800131e:	2301      	movs	r3, #1
 8001320:	e00f      	b.n	8001342 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001322:	4a0a      	ldr	r2, [pc, #40]	; (800134c <SysTick_Config+0x40>)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3b01      	subs	r3, #1
 8001328:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800132a:	210f      	movs	r1, #15
 800132c:	f04f 30ff 	mov.w	r0, #4294967295
 8001330:	f7ff ff8e 	bl	8001250 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001334:	4b05      	ldr	r3, [pc, #20]	; (800134c <SysTick_Config+0x40>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800133a:	4b04      	ldr	r3, [pc, #16]	; (800134c <SysTick_Config+0x40>)
 800133c:	2207      	movs	r2, #7
 800133e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	e000e010 	.word	0xe000e010

08001350 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff ff29 	bl	80011b0 <__NVIC_SetPriorityGrouping>
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001366:	b580      	push	{r7, lr}
 8001368:	b086      	sub	sp, #24
 800136a:	af00      	add	r7, sp, #0
 800136c:	4603      	mov	r3, r0
 800136e:	60b9      	str	r1, [r7, #8]
 8001370:	607a      	str	r2, [r7, #4]
 8001372:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001378:	f7ff ff3e 	bl	80011f8 <__NVIC_GetPriorityGrouping>
 800137c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	68b9      	ldr	r1, [r7, #8]
 8001382:	6978      	ldr	r0, [r7, #20]
 8001384:	f7ff ff8e 	bl	80012a4 <NVIC_EncodePriority>
 8001388:	4602      	mov	r2, r0
 800138a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800138e:	4611      	mov	r1, r2
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff ff5d 	bl	8001250 <__NVIC_SetPriority>
}
 8001396:	bf00      	nop
 8001398:	3718      	adds	r7, #24
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	4603      	mov	r3, r0
 80013a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff ff31 	bl	8001214 <__NVIC_EnableIRQ>
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b082      	sub	sp, #8
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f7ff ffa2 	bl	800130c <SysTick_Config>
 80013c8:	4603      	mov	r3, r0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
	...

080013d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80013e0:	f7ff feb6 	bl	8001150 <HAL_GetTick>
 80013e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d101      	bne.n	80013f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e099      	b.n	8001524 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2202      	movs	r2, #2
 80013f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f022 0201 	bic.w	r2, r2, #1
 800140e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001410:	e00f      	b.n	8001432 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001412:	f7ff fe9d 	bl	8001150 <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	2b05      	cmp	r3, #5
 800141e:	d908      	bls.n	8001432 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2220      	movs	r2, #32
 8001424:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2203      	movs	r2, #3
 800142a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e078      	b.n	8001524 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0301 	and.w	r3, r3, #1
 800143c:	2b00      	cmp	r3, #0
 800143e:	d1e8      	bne.n	8001412 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001448:	697a      	ldr	r2, [r7, #20]
 800144a:	4b38      	ldr	r3, [pc, #224]	; (800152c <HAL_DMA_Init+0x158>)
 800144c:	4013      	ands	r3, r2
 800144e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685a      	ldr	r2, [r3, #4]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800145e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800146a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001476:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a1b      	ldr	r3, [r3, #32]
 800147c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800147e:	697a      	ldr	r2, [r7, #20]
 8001480:	4313      	orrs	r3, r2
 8001482:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001488:	2b04      	cmp	r3, #4
 800148a:	d107      	bne.n	800149c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001494:	4313      	orrs	r3, r2
 8001496:	697a      	ldr	r2, [r7, #20]
 8001498:	4313      	orrs	r3, r2
 800149a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	697a      	ldr	r2, [r7, #20]
 80014a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	f023 0307 	bic.w	r3, r3, #7
 80014b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b8:	697a      	ldr	r2, [r7, #20]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c2:	2b04      	cmp	r3, #4
 80014c4:	d117      	bne.n	80014f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ca:	697a      	ldr	r2, [r7, #20]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d00e      	beq.n	80014f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f000 fa6f 	bl	80019bc <DMA_CheckFifoParam>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d008      	beq.n	80014f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2240      	movs	r2, #64	; 0x40
 80014e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2201      	movs	r2, #1
 80014ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80014f2:	2301      	movs	r3, #1
 80014f4:	e016      	b.n	8001524 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	697a      	ldr	r2, [r7, #20]
 80014fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f000 fa26 	bl	8001950 <DMA_CalcBaseAndBitshift>
 8001504:	4603      	mov	r3, r0
 8001506:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800150c:	223f      	movs	r2, #63	; 0x3f
 800150e:	409a      	lsls	r2, r3
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2201      	movs	r2, #1
 800151e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001522:	2300      	movs	r3, #0
}
 8001524:	4618      	mov	r0, r3
 8001526:	3718      	adds	r7, #24
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	f010803f 	.word	0xf010803f

08001530 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
 800153c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800153e:	2300      	movs	r3, #0
 8001540:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001546:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800154e:	2b01      	cmp	r3, #1
 8001550:	d101      	bne.n	8001556 <HAL_DMA_Start_IT+0x26>
 8001552:	2302      	movs	r3, #2
 8001554:	e040      	b.n	80015d8 <HAL_DMA_Start_IT+0xa8>
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2201      	movs	r2, #1
 800155a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001564:	b2db      	uxtb	r3, r3
 8001566:	2b01      	cmp	r3, #1
 8001568:	d12f      	bne.n	80015ca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2202      	movs	r2, #2
 800156e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2200      	movs	r2, #0
 8001576:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	68b9      	ldr	r1, [r7, #8]
 800157e:	68f8      	ldr	r0, [r7, #12]
 8001580:	f000 f9b8 	bl	80018f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001588:	223f      	movs	r2, #63	; 0x3f
 800158a:	409a      	lsls	r2, r3
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f042 0216 	orr.w	r2, r2, #22
 800159e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d007      	beq.n	80015b8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f042 0208 	orr.w	r2, r2, #8
 80015b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f042 0201 	orr.w	r2, r2, #1
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	e005      	b.n	80015d6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80015d2:	2302      	movs	r3, #2
 80015d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80015d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80015e8:	2300      	movs	r3, #0
 80015ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80015ec:	4b8e      	ldr	r3, [pc, #568]	; (8001828 <HAL_DMA_IRQHandler+0x248>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a8e      	ldr	r2, [pc, #568]	; (800182c <HAL_DMA_IRQHandler+0x24c>)
 80015f2:	fba2 2303 	umull	r2, r3, r2, r3
 80015f6:	0a9b      	lsrs	r3, r3, #10
 80015f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800160a:	2208      	movs	r2, #8
 800160c:	409a      	lsls	r2, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	4013      	ands	r3, r2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d01a      	beq.n	800164c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0304 	and.w	r3, r3, #4
 8001620:	2b00      	cmp	r3, #0
 8001622:	d013      	beq.n	800164c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f022 0204 	bic.w	r2, r2, #4
 8001632:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001638:	2208      	movs	r2, #8
 800163a:	409a      	lsls	r2, r3
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001644:	f043 0201 	orr.w	r2, r3, #1
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001650:	2201      	movs	r2, #1
 8001652:	409a      	lsls	r2, r3
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	4013      	ands	r3, r2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d012      	beq.n	8001682 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001666:	2b00      	cmp	r3, #0
 8001668:	d00b      	beq.n	8001682 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800166e:	2201      	movs	r2, #1
 8001670:	409a      	lsls	r2, r3
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800167a:	f043 0202 	orr.w	r2, r3, #2
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001686:	2204      	movs	r2, #4
 8001688:	409a      	lsls	r2, r3
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	4013      	ands	r3, r2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d012      	beq.n	80016b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d00b      	beq.n	80016b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a4:	2204      	movs	r2, #4
 80016a6:	409a      	lsls	r2, r3
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016b0:	f043 0204 	orr.w	r2, r3, #4
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016bc:	2210      	movs	r2, #16
 80016be:	409a      	lsls	r2, r3
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	4013      	ands	r3, r2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d043      	beq.n	8001750 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0308 	and.w	r3, r3, #8
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d03c      	beq.n	8001750 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016da:	2210      	movs	r2, #16
 80016dc:	409a      	lsls	r2, r3
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d018      	beq.n	8001722 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d108      	bne.n	8001710 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	2b00      	cmp	r3, #0
 8001704:	d024      	beq.n	8001750 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	4798      	blx	r3
 800170e:	e01f      	b.n	8001750 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001714:	2b00      	cmp	r3, #0
 8001716:	d01b      	beq.n	8001750 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	4798      	blx	r3
 8001720:	e016      	b.n	8001750 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800172c:	2b00      	cmp	r3, #0
 800172e:	d107      	bne.n	8001740 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f022 0208 	bic.w	r2, r2, #8
 800173e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001744:	2b00      	cmp	r3, #0
 8001746:	d003      	beq.n	8001750 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001754:	2220      	movs	r2, #32
 8001756:	409a      	lsls	r2, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	4013      	ands	r3, r2
 800175c:	2b00      	cmp	r3, #0
 800175e:	f000 808f 	beq.w	8001880 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0310 	and.w	r3, r3, #16
 800176c:	2b00      	cmp	r3, #0
 800176e:	f000 8087 	beq.w	8001880 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001776:	2220      	movs	r2, #32
 8001778:	409a      	lsls	r2, r3
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2b05      	cmp	r3, #5
 8001788:	d136      	bne.n	80017f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f022 0216 	bic.w	r2, r2, #22
 8001798:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	695a      	ldr	r2, [r3, #20]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d103      	bne.n	80017ba <HAL_DMA_IRQHandler+0x1da>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d007      	beq.n	80017ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f022 0208 	bic.w	r2, r2, #8
 80017c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ce:	223f      	movs	r2, #63	; 0x3f
 80017d0:	409a      	lsls	r2, r3
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2201      	movs	r2, #1
 80017da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d07e      	beq.n	80018ec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	4798      	blx	r3
        }
        return;
 80017f6:	e079      	b.n	80018ec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d01d      	beq.n	8001842 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d10d      	bne.n	8001830 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001818:	2b00      	cmp	r3, #0
 800181a:	d031      	beq.n	8001880 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	4798      	blx	r3
 8001824:	e02c      	b.n	8001880 <HAL_DMA_IRQHandler+0x2a0>
 8001826:	bf00      	nop
 8001828:	20000000 	.word	0x20000000
 800182c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001834:	2b00      	cmp	r3, #0
 8001836:	d023      	beq.n	8001880 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	4798      	blx	r3
 8001840:	e01e      	b.n	8001880 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184c:	2b00      	cmp	r3, #0
 800184e:	d10f      	bne.n	8001870 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f022 0210 	bic.w	r2, r2, #16
 800185e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2201      	movs	r2, #1
 8001864:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001874:	2b00      	cmp	r3, #0
 8001876:	d003      	beq.n	8001880 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001884:	2b00      	cmp	r3, #0
 8001886:	d032      	beq.n	80018ee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	2b00      	cmp	r3, #0
 8001892:	d022      	beq.n	80018da <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2205      	movs	r2, #5
 8001898:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f022 0201 	bic.w	r2, r2, #1
 80018aa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	3301      	adds	r3, #1
 80018b0:	60bb      	str	r3, [r7, #8]
 80018b2:	697a      	ldr	r2, [r7, #20]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d307      	bcc.n	80018c8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1f2      	bne.n	80018ac <HAL_DMA_IRQHandler+0x2cc>
 80018c6:	e000      	b.n	80018ca <HAL_DMA_IRQHandler+0x2ea>
          break;
 80018c8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2201      	movs	r2, #1
 80018ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d005      	beq.n	80018ee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	4798      	blx	r3
 80018ea:	e000      	b.n	80018ee <HAL_DMA_IRQHandler+0x30e>
        return;
 80018ec:	bf00      	nop
    }
  }
}
 80018ee:	3718      	adds	r7, #24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
 8001900:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001910:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	683a      	ldr	r2, [r7, #0]
 8001918:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	2b40      	cmp	r3, #64	; 0x40
 8001920:	d108      	bne.n	8001934 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	68ba      	ldr	r2, [r7, #8]
 8001930:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001932:	e007      	b.n	8001944 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	68ba      	ldr	r2, [r7, #8]
 800193a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	60da      	str	r2, [r3, #12]
}
 8001944:	bf00      	nop
 8001946:	3714      	adds	r7, #20
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	b2db      	uxtb	r3, r3
 800195e:	3b10      	subs	r3, #16
 8001960:	4a14      	ldr	r2, [pc, #80]	; (80019b4 <DMA_CalcBaseAndBitshift+0x64>)
 8001962:	fba2 2303 	umull	r2, r3, r2, r3
 8001966:	091b      	lsrs	r3, r3, #4
 8001968:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800196a:	4a13      	ldr	r2, [pc, #76]	; (80019b8 <DMA_CalcBaseAndBitshift+0x68>)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4413      	add	r3, r2
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	461a      	mov	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2b03      	cmp	r3, #3
 800197c:	d909      	bls.n	8001992 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001986:	f023 0303 	bic.w	r3, r3, #3
 800198a:	1d1a      	adds	r2, r3, #4
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	659a      	str	r2, [r3, #88]	; 0x58
 8001990:	e007      	b.n	80019a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800199a:	f023 0303 	bic.w	r3, r3, #3
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3714      	adds	r7, #20
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	aaaaaaab 	.word	0xaaaaaaab
 80019b8:	0800a204 	.word	0x0800a204

080019bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019c4:	2300      	movs	r3, #0
 80019c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d11f      	bne.n	8001a16 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	2b03      	cmp	r3, #3
 80019da:	d856      	bhi.n	8001a8a <DMA_CheckFifoParam+0xce>
 80019dc:	a201      	add	r2, pc, #4	; (adr r2, 80019e4 <DMA_CheckFifoParam+0x28>)
 80019de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e2:	bf00      	nop
 80019e4:	080019f5 	.word	0x080019f5
 80019e8:	08001a07 	.word	0x08001a07
 80019ec:	080019f5 	.word	0x080019f5
 80019f0:	08001a8b 	.word	0x08001a8b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d046      	beq.n	8001a8e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a04:	e043      	b.n	8001a8e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a0e:	d140      	bne.n	8001a92 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a14:	e03d      	b.n	8001a92 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	699b      	ldr	r3, [r3, #24]
 8001a1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a1e:	d121      	bne.n	8001a64 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	2b03      	cmp	r3, #3
 8001a24:	d837      	bhi.n	8001a96 <DMA_CheckFifoParam+0xda>
 8001a26:	a201      	add	r2, pc, #4	; (adr r2, 8001a2c <DMA_CheckFifoParam+0x70>)
 8001a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a2c:	08001a3d 	.word	0x08001a3d
 8001a30:	08001a43 	.word	0x08001a43
 8001a34:	08001a3d 	.word	0x08001a3d
 8001a38:	08001a55 	.word	0x08001a55
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8001a40:	e030      	b.n	8001aa4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d025      	beq.n	8001a9a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a52:	e022      	b.n	8001a9a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a58:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a5c:	d11f      	bne.n	8001a9e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a62:	e01c      	b.n	8001a9e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d903      	bls.n	8001a72 <DMA_CheckFifoParam+0xb6>
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	2b03      	cmp	r3, #3
 8001a6e:	d003      	beq.n	8001a78 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a70:	e018      	b.n	8001aa4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	73fb      	strb	r3, [r7, #15]
      break;
 8001a76:	e015      	b.n	8001aa4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d00e      	beq.n	8001aa2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	73fb      	strb	r3, [r7, #15]
      break;
 8001a88:	e00b      	b.n	8001aa2 <DMA_CheckFifoParam+0xe6>
      break;
 8001a8a:	bf00      	nop
 8001a8c:	e00a      	b.n	8001aa4 <DMA_CheckFifoParam+0xe8>
      break;
 8001a8e:	bf00      	nop
 8001a90:	e008      	b.n	8001aa4 <DMA_CheckFifoParam+0xe8>
      break;
 8001a92:	bf00      	nop
 8001a94:	e006      	b.n	8001aa4 <DMA_CheckFifoParam+0xe8>
      break;
 8001a96:	bf00      	nop
 8001a98:	e004      	b.n	8001aa4 <DMA_CheckFifoParam+0xe8>
      break;
 8001a9a:	bf00      	nop
 8001a9c:	e002      	b.n	8001aa4 <DMA_CheckFifoParam+0xe8>
      break;   
 8001a9e:	bf00      	nop
 8001aa0:	e000      	b.n	8001aa4 <DMA_CheckFifoParam+0xe8>
      break;
 8001aa2:	bf00      	nop
    }
  } 
  
  return status; 
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3714      	adds	r7, #20
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop

08001ab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b089      	sub	sp, #36	; 0x24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aca:	2300      	movs	r3, #0
 8001acc:	61fb      	str	r3, [r7, #28]
 8001ace:	e159      	b.n	8001d84 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	697a      	ldr	r2, [r7, #20]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	f040 8148 	bne.w	8001d7e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f003 0303 	and.w	r3, r3, #3
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d005      	beq.n	8001b06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d130      	bne.n	8001b68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	2203      	movs	r2, #3
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43db      	mvns	r3, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	68da      	ldr	r2, [r3, #12]
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	43db      	mvns	r3, r3
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	091b      	lsrs	r3, r3, #4
 8001b52:	f003 0201 	and.w	r2, r3, #1
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f003 0303 	and.w	r3, r3, #3
 8001b70:	2b03      	cmp	r3, #3
 8001b72:	d017      	beq.n	8001ba4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	2203      	movs	r2, #3
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	43db      	mvns	r3, r3
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f003 0303 	and.w	r3, r3, #3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d123      	bne.n	8001bf8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	08da      	lsrs	r2, r3, #3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3208      	adds	r2, #8
 8001bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	f003 0307 	and.w	r3, r3, #7
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	220f      	movs	r2, #15
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	691a      	ldr	r2, [r3, #16]
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	08da      	lsrs	r2, r3, #3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	3208      	adds	r2, #8
 8001bf2:	69b9      	ldr	r1, [r7, #24]
 8001bf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	2203      	movs	r2, #3
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f003 0203 	and.w	r2, r3, #3
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f000 80a2 	beq.w	8001d7e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60fb      	str	r3, [r7, #12]
 8001c3e:	4b57      	ldr	r3, [pc, #348]	; (8001d9c <HAL_GPIO_Init+0x2e8>)
 8001c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c42:	4a56      	ldr	r2, [pc, #344]	; (8001d9c <HAL_GPIO_Init+0x2e8>)
 8001c44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c48:	6453      	str	r3, [r2, #68]	; 0x44
 8001c4a:	4b54      	ldr	r3, [pc, #336]	; (8001d9c <HAL_GPIO_Init+0x2e8>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c56:	4a52      	ldr	r2, [pc, #328]	; (8001da0 <HAL_GPIO_Init+0x2ec>)
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	089b      	lsrs	r3, r3, #2
 8001c5c:	3302      	adds	r3, #2
 8001c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	f003 0303 	and.w	r3, r3, #3
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	220f      	movs	r2, #15
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	43db      	mvns	r3, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4013      	ands	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a49      	ldr	r2, [pc, #292]	; (8001da4 <HAL_GPIO_Init+0x2f0>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d019      	beq.n	8001cb6 <HAL_GPIO_Init+0x202>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a48      	ldr	r2, [pc, #288]	; (8001da8 <HAL_GPIO_Init+0x2f4>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d013      	beq.n	8001cb2 <HAL_GPIO_Init+0x1fe>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a47      	ldr	r2, [pc, #284]	; (8001dac <HAL_GPIO_Init+0x2f8>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d00d      	beq.n	8001cae <HAL_GPIO_Init+0x1fa>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a46      	ldr	r2, [pc, #280]	; (8001db0 <HAL_GPIO_Init+0x2fc>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d007      	beq.n	8001caa <HAL_GPIO_Init+0x1f6>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a45      	ldr	r2, [pc, #276]	; (8001db4 <HAL_GPIO_Init+0x300>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d101      	bne.n	8001ca6 <HAL_GPIO_Init+0x1f2>
 8001ca2:	2304      	movs	r3, #4
 8001ca4:	e008      	b.n	8001cb8 <HAL_GPIO_Init+0x204>
 8001ca6:	2307      	movs	r3, #7
 8001ca8:	e006      	b.n	8001cb8 <HAL_GPIO_Init+0x204>
 8001caa:	2303      	movs	r3, #3
 8001cac:	e004      	b.n	8001cb8 <HAL_GPIO_Init+0x204>
 8001cae:	2302      	movs	r3, #2
 8001cb0:	e002      	b.n	8001cb8 <HAL_GPIO_Init+0x204>
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e000      	b.n	8001cb8 <HAL_GPIO_Init+0x204>
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	69fa      	ldr	r2, [r7, #28]
 8001cba:	f002 0203 	and.w	r2, r2, #3
 8001cbe:	0092      	lsls	r2, r2, #2
 8001cc0:	4093      	lsls	r3, r2
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cc8:	4935      	ldr	r1, [pc, #212]	; (8001da0 <HAL_GPIO_Init+0x2ec>)
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	089b      	lsrs	r3, r3, #2
 8001cce:	3302      	adds	r3, #2
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cd6:	4b38      	ldr	r3, [pc, #224]	; (8001db8 <HAL_GPIO_Init+0x304>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cfa:	4a2f      	ldr	r2, [pc, #188]	; (8001db8 <HAL_GPIO_Init+0x304>)
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d00:	4b2d      	ldr	r3, [pc, #180]	; (8001db8 <HAL_GPIO_Init+0x304>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d24:	4a24      	ldr	r2, [pc, #144]	; (8001db8 <HAL_GPIO_Init+0x304>)
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d2a:	4b23      	ldr	r3, [pc, #140]	; (8001db8 <HAL_GPIO_Init+0x304>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	43db      	mvns	r3, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4013      	ands	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d4e:	4a1a      	ldr	r2, [pc, #104]	; (8001db8 <HAL_GPIO_Init+0x304>)
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d54:	4b18      	ldr	r3, [pc, #96]	; (8001db8 <HAL_GPIO_Init+0x304>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d003      	beq.n	8001d78 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d78:	4a0f      	ldr	r2, [pc, #60]	; (8001db8 <HAL_GPIO_Init+0x304>)
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	3301      	adds	r3, #1
 8001d82:	61fb      	str	r3, [r7, #28]
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	2b0f      	cmp	r3, #15
 8001d88:	f67f aea2 	bls.w	8001ad0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d8c:	bf00      	nop
 8001d8e:	bf00      	nop
 8001d90:	3724      	adds	r7, #36	; 0x24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	40013800 	.word	0x40013800
 8001da4:	40020000 	.word	0x40020000
 8001da8:	40020400 	.word	0x40020400
 8001dac:	40020800 	.word	0x40020800
 8001db0:	40020c00 	.word	0x40020c00
 8001db4:	40021000 	.word	0x40021000
 8001db8:	40013c00 	.word	0x40013c00

08001dbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	807b      	strh	r3, [r7, #2]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dcc:	787b      	ldrb	r3, [r7, #1]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dd2:	887a      	ldrh	r2, [r7, #2]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dd8:	e003      	b.n	8001de2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dda:	887b      	ldrh	r3, [r7, #2]
 8001ddc:	041a      	lsls	r2, r3, #16
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	619a      	str	r2, [r3, #24]
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
	...

08001df0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e12b      	b.n	800205a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d106      	bne.n	8001e1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f7fe ff9e 	bl	8000d58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2224      	movs	r2, #36	; 0x24
 8001e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f022 0201 	bic.w	r2, r2, #1
 8001e32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e54:	f003 fc38 	bl	80056c8 <HAL_RCC_GetPCLK1Freq>
 8001e58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	4a81      	ldr	r2, [pc, #516]	; (8002064 <HAL_I2C_Init+0x274>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d807      	bhi.n	8001e74 <HAL_I2C_Init+0x84>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	4a80      	ldr	r2, [pc, #512]	; (8002068 <HAL_I2C_Init+0x278>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	bf94      	ite	ls
 8001e6c:	2301      	movls	r3, #1
 8001e6e:	2300      	movhi	r3, #0
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	e006      	b.n	8001e82 <HAL_I2C_Init+0x92>
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	4a7d      	ldr	r2, [pc, #500]	; (800206c <HAL_I2C_Init+0x27c>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	bf94      	ite	ls
 8001e7c:	2301      	movls	r3, #1
 8001e7e:	2300      	movhi	r3, #0
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e0e7      	b.n	800205a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	4a78      	ldr	r2, [pc, #480]	; (8002070 <HAL_I2C_Init+0x280>)
 8001e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e92:	0c9b      	lsrs	r3, r3, #18
 8001e94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68ba      	ldr	r2, [r7, #8]
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	4a6a      	ldr	r2, [pc, #424]	; (8002064 <HAL_I2C_Init+0x274>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d802      	bhi.n	8001ec4 <HAL_I2C_Init+0xd4>
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	e009      	b.n	8001ed8 <HAL_I2C_Init+0xe8>
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001eca:	fb02 f303 	mul.w	r3, r2, r3
 8001ece:	4a69      	ldr	r2, [pc, #420]	; (8002074 <HAL_I2C_Init+0x284>)
 8001ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed4:	099b      	lsrs	r3, r3, #6
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	6812      	ldr	r2, [r2, #0]
 8001edc:	430b      	orrs	r3, r1
 8001ede:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001eea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	495c      	ldr	r1, [pc, #368]	; (8002064 <HAL_I2C_Init+0x274>)
 8001ef4:	428b      	cmp	r3, r1
 8001ef6:	d819      	bhi.n	8001f2c <HAL_I2C_Init+0x13c>
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	1e59      	subs	r1, r3, #1
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f06:	1c59      	adds	r1, r3, #1
 8001f08:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f0c:	400b      	ands	r3, r1
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d00a      	beq.n	8001f28 <HAL_I2C_Init+0x138>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	1e59      	subs	r1, r3, #1
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f20:	3301      	adds	r3, #1
 8001f22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f26:	e051      	b.n	8001fcc <HAL_I2C_Init+0x1dc>
 8001f28:	2304      	movs	r3, #4
 8001f2a:	e04f      	b.n	8001fcc <HAL_I2C_Init+0x1dc>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d111      	bne.n	8001f58 <HAL_I2C_Init+0x168>
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	1e58      	subs	r0, r3, #1
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6859      	ldr	r1, [r3, #4]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	440b      	add	r3, r1
 8001f42:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f46:	3301      	adds	r3, #1
 8001f48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	bf0c      	ite	eq
 8001f50:	2301      	moveq	r3, #1
 8001f52:	2300      	movne	r3, #0
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	e012      	b.n	8001f7e <HAL_I2C_Init+0x18e>
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	1e58      	subs	r0, r3, #1
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6859      	ldr	r1, [r3, #4]
 8001f60:	460b      	mov	r3, r1
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	440b      	add	r3, r1
 8001f66:	0099      	lsls	r1, r3, #2
 8001f68:	440b      	add	r3, r1
 8001f6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f6e:	3301      	adds	r3, #1
 8001f70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	bf0c      	ite	eq
 8001f78:	2301      	moveq	r3, #1
 8001f7a:	2300      	movne	r3, #0
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <HAL_I2C_Init+0x196>
 8001f82:	2301      	movs	r3, #1
 8001f84:	e022      	b.n	8001fcc <HAL_I2C_Init+0x1dc>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d10e      	bne.n	8001fac <HAL_I2C_Init+0x1bc>
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	1e58      	subs	r0, r3, #1
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6859      	ldr	r1, [r3, #4]
 8001f96:	460b      	mov	r3, r1
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	440b      	add	r3, r1
 8001f9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001faa:	e00f      	b.n	8001fcc <HAL_I2C_Init+0x1dc>
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	1e58      	subs	r0, r3, #1
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6859      	ldr	r1, [r3, #4]
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	440b      	add	r3, r1
 8001fba:	0099      	lsls	r1, r3, #2
 8001fbc:	440b      	add	r3, r1
 8001fbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fcc:	6879      	ldr	r1, [r7, #4]
 8001fce:	6809      	ldr	r1, [r1, #0]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	69da      	ldr	r2, [r3, #28]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	430a      	orrs	r2, r1
 8001fee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001ffa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	6911      	ldr	r1, [r2, #16]
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	68d2      	ldr	r2, [r2, #12]
 8002006:	4311      	orrs	r1, r2
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	6812      	ldr	r2, [r2, #0]
 800200c:	430b      	orrs	r3, r1
 800200e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	695a      	ldr	r2, [r3, #20]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	431a      	orrs	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	430a      	orrs	r2, r1
 800202a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f042 0201 	orr.w	r2, r2, #1
 800203a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2220      	movs	r2, #32
 8002046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	000186a0 	.word	0x000186a0
 8002068:	001e847f 	.word	0x001e847f
 800206c:	003d08ff 	.word	0x003d08ff
 8002070:	431bde83 	.word	0x431bde83
 8002074:	10624dd3 	.word	0x10624dd3

08002078 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b088      	sub	sp, #32
 800207c:	af02      	add	r7, sp, #8
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	607a      	str	r2, [r7, #4]
 8002082:	461a      	mov	r2, r3
 8002084:	460b      	mov	r3, r1
 8002086:	817b      	strh	r3, [r7, #10]
 8002088:	4613      	mov	r3, r2
 800208a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800208c:	f7ff f860 	bl	8001150 <HAL_GetTick>
 8002090:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b20      	cmp	r3, #32
 800209c:	f040 80e0 	bne.w	8002260 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	9300      	str	r3, [sp, #0]
 80020a4:	2319      	movs	r3, #25
 80020a6:	2201      	movs	r2, #1
 80020a8:	4970      	ldr	r1, [pc, #448]	; (800226c <HAL_I2C_Master_Transmit+0x1f4>)
 80020aa:	68f8      	ldr	r0, [r7, #12]
 80020ac:	f000 fc64 	bl	8002978 <I2C_WaitOnFlagUntilTimeout>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80020b6:	2302      	movs	r3, #2
 80020b8:	e0d3      	b.n	8002262 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d101      	bne.n	80020c8 <HAL_I2C_Master_Transmit+0x50>
 80020c4:	2302      	movs	r3, #2
 80020c6:	e0cc      	b.n	8002262 <HAL_I2C_Master_Transmit+0x1ea>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d007      	beq.n	80020ee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f042 0201 	orr.w	r2, r2, #1
 80020ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2221      	movs	r2, #33	; 0x21
 8002102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2210      	movs	r2, #16
 800210a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2200      	movs	r2, #0
 8002112:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	893a      	ldrh	r2, [r7, #8]
 800211e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002124:	b29a      	uxth	r2, r3
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	4a50      	ldr	r2, [pc, #320]	; (8002270 <HAL_I2C_Master_Transmit+0x1f8>)
 800212e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002130:	8979      	ldrh	r1, [r7, #10]
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	6a3a      	ldr	r2, [r7, #32]
 8002136:	68f8      	ldr	r0, [r7, #12]
 8002138:	f000 face 	bl	80026d8 <I2C_MasterRequestWrite>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e08d      	b.n	8002262 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002146:	2300      	movs	r3, #0
 8002148:	613b      	str	r3, [r7, #16]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	695b      	ldr	r3, [r3, #20]
 8002150:	613b      	str	r3, [r7, #16]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	613b      	str	r3, [r7, #16]
 800215a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800215c:	e066      	b.n	800222c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	6a39      	ldr	r1, [r7, #32]
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	f000 fd22 	bl	8002bac <I2C_WaitOnTXEFlagUntilTimeout>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00d      	beq.n	800218a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	2b04      	cmp	r3, #4
 8002174:	d107      	bne.n	8002186 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002184:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e06b      	b.n	8002262 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218e:	781a      	ldrb	r2, [r3, #0]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219a:	1c5a      	adds	r2, r3, #1
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	3b01      	subs	r3, #1
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b2:	3b01      	subs	r3, #1
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	695b      	ldr	r3, [r3, #20]
 80021c0:	f003 0304 	and.w	r3, r3, #4
 80021c4:	2b04      	cmp	r3, #4
 80021c6:	d11b      	bne.n	8002200 <HAL_I2C_Master_Transmit+0x188>
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d017      	beq.n	8002200 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d4:	781a      	ldrb	r2, [r3, #0]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e0:	1c5a      	adds	r2, r3, #1
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	3b01      	subs	r3, #1
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f8:	3b01      	subs	r3, #1
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002200:	697a      	ldr	r2, [r7, #20]
 8002202:	6a39      	ldr	r1, [r7, #32]
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	f000 fd19 	bl	8002c3c <I2C_WaitOnBTFFlagUntilTimeout>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d00d      	beq.n	800222c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002214:	2b04      	cmp	r3, #4
 8002216:	d107      	bne.n	8002228 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002226:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e01a      	b.n	8002262 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002230:	2b00      	cmp	r3, #0
 8002232:	d194      	bne.n	800215e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002242:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2220      	movs	r2, #32
 8002248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800225c:	2300      	movs	r3, #0
 800225e:	e000      	b.n	8002262 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002260:	2302      	movs	r3, #2
  }
}
 8002262:	4618      	mov	r0, r3
 8002264:	3718      	adds	r7, #24
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	00100002 	.word	0x00100002
 8002270:	ffff0000 	.word	0xffff0000

08002274 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b08c      	sub	sp, #48	; 0x30
 8002278:	af02      	add	r7, sp, #8
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	607a      	str	r2, [r7, #4]
 800227e:	461a      	mov	r2, r3
 8002280:	460b      	mov	r3, r1
 8002282:	817b      	strh	r3, [r7, #10]
 8002284:	4613      	mov	r3, r2
 8002286:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002288:	f7fe ff62 	bl	8001150 <HAL_GetTick>
 800228c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b20      	cmp	r3, #32
 8002298:	f040 8217 	bne.w	80026ca <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800229c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229e:	9300      	str	r3, [sp, #0]
 80022a0:	2319      	movs	r3, #25
 80022a2:	2201      	movs	r2, #1
 80022a4:	497c      	ldr	r1, [pc, #496]	; (8002498 <HAL_I2C_Master_Receive+0x224>)
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f000 fb66 	bl	8002978 <I2C_WaitOnFlagUntilTimeout>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80022b2:	2302      	movs	r3, #2
 80022b4:	e20a      	b.n	80026cc <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d101      	bne.n	80022c4 <HAL_I2C_Master_Receive+0x50>
 80022c0:	2302      	movs	r3, #2
 80022c2:	e203      	b.n	80026cc <HAL_I2C_Master_Receive+0x458>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d007      	beq.n	80022ea <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f042 0201 	orr.w	r2, r2, #1
 80022e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2222      	movs	r2, #34	; 0x22
 80022fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2210      	movs	r2, #16
 8002306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	893a      	ldrh	r2, [r7, #8]
 800231a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002320:	b29a      	uxth	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	4a5c      	ldr	r2, [pc, #368]	; (800249c <HAL_I2C_Master_Receive+0x228>)
 800232a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800232c:	8979      	ldrh	r1, [r7, #10]
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f000 fa52 	bl	80027dc <I2C_MasterRequestRead>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e1c4      	b.n	80026cc <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002346:	2b00      	cmp	r3, #0
 8002348:	d113      	bne.n	8002372 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800234a:	2300      	movs	r3, #0
 800234c:	623b      	str	r3, [r7, #32]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	695b      	ldr	r3, [r3, #20]
 8002354:	623b      	str	r3, [r7, #32]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	623b      	str	r3, [r7, #32]
 800235e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	e198      	b.n	80026a4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002376:	2b01      	cmp	r3, #1
 8002378:	d11b      	bne.n	80023b2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002388:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800238a:	2300      	movs	r3, #0
 800238c:	61fb      	str	r3, [r7, #28]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	695b      	ldr	r3, [r3, #20]
 8002394:	61fb      	str	r3, [r7, #28]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	61fb      	str	r3, [r7, #28]
 800239e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	e178      	b.n	80026a4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d11b      	bne.n	80023f2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023c8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023da:	2300      	movs	r3, #0
 80023dc:	61bb      	str	r3, [r7, #24]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	695b      	ldr	r3, [r3, #20]
 80023e4:	61bb      	str	r3, [r7, #24]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	61bb      	str	r3, [r7, #24]
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	e158      	b.n	80026a4 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002400:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002402:	2300      	movs	r3, #0
 8002404:	617b      	str	r3, [r7, #20]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	695b      	ldr	r3, [r3, #20]
 800240c:	617b      	str	r3, [r7, #20]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	617b      	str	r3, [r7, #20]
 8002416:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002418:	e144      	b.n	80026a4 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800241e:	2b03      	cmp	r3, #3
 8002420:	f200 80f1 	bhi.w	8002606 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002428:	2b01      	cmp	r3, #1
 800242a:	d123      	bne.n	8002474 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800242c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800242e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f000 fc4b 	bl	8002ccc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e145      	b.n	80026cc <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	691a      	ldr	r2, [r3, #16]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002452:	1c5a      	adds	r2, r3, #1
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800245c:	3b01      	subs	r3, #1
 800245e:	b29a      	uxth	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002468:	b29b      	uxth	r3, r3
 800246a:	3b01      	subs	r3, #1
 800246c:	b29a      	uxth	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002472:	e117      	b.n	80026a4 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002478:	2b02      	cmp	r3, #2
 800247a:	d14e      	bne.n	800251a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002482:	2200      	movs	r2, #0
 8002484:	4906      	ldr	r1, [pc, #24]	; (80024a0 <HAL_I2C_Master_Receive+0x22c>)
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	f000 fa76 	bl	8002978 <I2C_WaitOnFlagUntilTimeout>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d008      	beq.n	80024a4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e11a      	b.n	80026cc <HAL_I2C_Master_Receive+0x458>
 8002496:	bf00      	nop
 8002498:	00100002 	.word	0x00100002
 800249c:	ffff0000 	.word	0xffff0000
 80024a0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	691a      	ldr	r2, [r3, #16]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c6:	1c5a      	adds	r2, r3, #1
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d0:	3b01      	subs	r3, #1
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024dc:	b29b      	uxth	r3, r3
 80024de:	3b01      	subs	r3, #1
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	691a      	ldr	r2, [r3, #16]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f0:	b2d2      	uxtb	r2, r2
 80024f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f8:	1c5a      	adds	r2, r3, #1
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002502:	3b01      	subs	r3, #1
 8002504:	b29a      	uxth	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800250e:	b29b      	uxth	r3, r3
 8002510:	3b01      	subs	r3, #1
 8002512:	b29a      	uxth	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002518:	e0c4      	b.n	80026a4 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	9300      	str	r3, [sp, #0]
 800251e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002520:	2200      	movs	r2, #0
 8002522:	496c      	ldr	r1, [pc, #432]	; (80026d4 <HAL_I2C_Master_Receive+0x460>)
 8002524:	68f8      	ldr	r0, [r7, #12]
 8002526:	f000 fa27 	bl	8002978 <I2C_WaitOnFlagUntilTimeout>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e0cb      	b.n	80026cc <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002542:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	691a      	ldr	r2, [r3, #16]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254e:	b2d2      	uxtb	r2, r2
 8002550:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002556:	1c5a      	adds	r2, r3, #1
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002560:	3b01      	subs	r3, #1
 8002562:	b29a      	uxth	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800256c:	b29b      	uxth	r3, r3
 800256e:	3b01      	subs	r3, #1
 8002570:	b29a      	uxth	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800257c:	2200      	movs	r2, #0
 800257e:	4955      	ldr	r1, [pc, #340]	; (80026d4 <HAL_I2C_Master_Receive+0x460>)
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	f000 f9f9 	bl	8002978 <I2C_WaitOnFlagUntilTimeout>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e09d      	b.n	80026cc <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800259e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	691a      	ldr	r2, [r3, #16]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025aa:	b2d2      	uxtb	r2, r2
 80025ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b2:	1c5a      	adds	r2, r3, #1
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025bc:	3b01      	subs	r3, #1
 80025be:	b29a      	uxth	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	3b01      	subs	r3, #1
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	691a      	ldr	r2, [r3, #16]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e4:	1c5a      	adds	r2, r3, #1
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ee:	3b01      	subs	r3, #1
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	3b01      	subs	r3, #1
 80025fe:	b29a      	uxth	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002604:	e04e      	b.n	80026a4 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002608:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f000 fb5e 	bl	8002ccc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e058      	b.n	80026cc <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	691a      	ldr	r2, [r3, #16]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002624:	b2d2      	uxtb	r2, r2
 8002626:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	1c5a      	adds	r2, r3, #1
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002636:	3b01      	subs	r3, #1
 8002638:	b29a      	uxth	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002642:	b29b      	uxth	r3, r3
 8002644:	3b01      	subs	r3, #1
 8002646:	b29a      	uxth	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	f003 0304 	and.w	r3, r3, #4
 8002656:	2b04      	cmp	r3, #4
 8002658:	d124      	bne.n	80026a4 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800265e:	2b03      	cmp	r3, #3
 8002660:	d107      	bne.n	8002672 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002670:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	691a      	ldr	r2, [r3, #16]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267c:	b2d2      	uxtb	r2, r2
 800267e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002684:	1c5a      	adds	r2, r3, #1
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800268e:	3b01      	subs	r3, #1
 8002690:	b29a      	uxth	r2, r3
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800269a:	b29b      	uxth	r3, r3
 800269c:	3b01      	subs	r3, #1
 800269e:	b29a      	uxth	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f47f aeb6 	bne.w	800241a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2220      	movs	r2, #32
 80026b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026c6:	2300      	movs	r3, #0
 80026c8:	e000      	b.n	80026cc <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80026ca:	2302      	movs	r3, #2
  }
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3728      	adds	r7, #40	; 0x28
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	00010004 	.word	0x00010004

080026d8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b088      	sub	sp, #32
 80026dc:	af02      	add	r7, sp, #8
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	607a      	str	r2, [r7, #4]
 80026e2:	603b      	str	r3, [r7, #0]
 80026e4:	460b      	mov	r3, r1
 80026e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	2b08      	cmp	r3, #8
 80026f2:	d006      	beq.n	8002702 <I2C_MasterRequestWrite+0x2a>
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d003      	beq.n	8002702 <I2C_MasterRequestWrite+0x2a>
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002700:	d108      	bne.n	8002714 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	e00b      	b.n	800272c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002718:	2b12      	cmp	r3, #18
 800271a:	d107      	bne.n	800272c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800272a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	9300      	str	r3, [sp, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f000 f91d 	bl	8002978 <I2C_WaitOnFlagUntilTimeout>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00d      	beq.n	8002760 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002752:	d103      	bne.n	800275c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f44f 7200 	mov.w	r2, #512	; 0x200
 800275a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e035      	b.n	80027cc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002768:	d108      	bne.n	800277c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800276a:	897b      	ldrh	r3, [r7, #10]
 800276c:	b2db      	uxtb	r3, r3
 800276e:	461a      	mov	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002778:	611a      	str	r2, [r3, #16]
 800277a:	e01b      	b.n	80027b4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800277c:	897b      	ldrh	r3, [r7, #10]
 800277e:	11db      	asrs	r3, r3, #7
 8002780:	b2db      	uxtb	r3, r3
 8002782:	f003 0306 	and.w	r3, r3, #6
 8002786:	b2db      	uxtb	r3, r3
 8002788:	f063 030f 	orn	r3, r3, #15
 800278c:	b2da      	uxtb	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	490e      	ldr	r1, [pc, #56]	; (80027d4 <I2C_MasterRequestWrite+0xfc>)
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f000 f966 	bl	8002a6c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e010      	b.n	80027cc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80027aa:	897b      	ldrh	r3, [r7, #10]
 80027ac:	b2da      	uxtb	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	4907      	ldr	r1, [pc, #28]	; (80027d8 <I2C_MasterRequestWrite+0x100>)
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f000 f956 	bl	8002a6c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e000      	b.n	80027cc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3718      	adds	r7, #24
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	00010008 	.word	0x00010008
 80027d8:	00010002 	.word	0x00010002

080027dc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b088      	sub	sp, #32
 80027e0:	af02      	add	r7, sp, #8
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	607a      	str	r2, [r7, #4]
 80027e6:	603b      	str	r3, [r7, #0]
 80027e8:	460b      	mov	r3, r1
 80027ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002800:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	2b08      	cmp	r3, #8
 8002806:	d006      	beq.n	8002816 <I2C_MasterRequestRead+0x3a>
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d003      	beq.n	8002816 <I2C_MasterRequestRead+0x3a>
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002814:	d108      	bne.n	8002828 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	e00b      	b.n	8002840 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282c:	2b11      	cmp	r3, #17
 800282e:	d107      	bne.n	8002840 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800283e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f000 f893 	bl	8002978 <I2C_WaitOnFlagUntilTimeout>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00d      	beq.n	8002874 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002866:	d103      	bne.n	8002870 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800286e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e079      	b.n	8002968 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800287c:	d108      	bne.n	8002890 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800287e:	897b      	ldrh	r3, [r7, #10]
 8002880:	b2db      	uxtb	r3, r3
 8002882:	f043 0301 	orr.w	r3, r3, #1
 8002886:	b2da      	uxtb	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	611a      	str	r2, [r3, #16]
 800288e:	e05f      	b.n	8002950 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002890:	897b      	ldrh	r3, [r7, #10]
 8002892:	11db      	asrs	r3, r3, #7
 8002894:	b2db      	uxtb	r3, r3
 8002896:	f003 0306 	and.w	r3, r3, #6
 800289a:	b2db      	uxtb	r3, r3
 800289c:	f063 030f 	orn	r3, r3, #15
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	4930      	ldr	r1, [pc, #192]	; (8002970 <I2C_MasterRequestRead+0x194>)
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f000 f8dc 	bl	8002a6c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e054      	b.n	8002968 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80028be:	897b      	ldrh	r3, [r7, #10]
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	4929      	ldr	r1, [pc, #164]	; (8002974 <I2C_MasterRequestRead+0x198>)
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f000 f8cc 	bl	8002a6c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e044      	b.n	8002968 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028de:	2300      	movs	r3, #0
 80028e0:	613b      	str	r3, [r7, #16]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	695b      	ldr	r3, [r3, #20]
 80028e8:	613b      	str	r3, [r7, #16]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	613b      	str	r3, [r7, #16]
 80028f2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002902:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	9300      	str	r3, [sp, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f000 f831 	bl	8002978 <I2C_WaitOnFlagUntilTimeout>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00d      	beq.n	8002938 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002926:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800292a:	d103      	bne.n	8002934 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002932:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e017      	b.n	8002968 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002938:	897b      	ldrh	r3, [r7, #10]
 800293a:	11db      	asrs	r3, r3, #7
 800293c:	b2db      	uxtb	r3, r3
 800293e:	f003 0306 	and.w	r3, r3, #6
 8002942:	b2db      	uxtb	r3, r3
 8002944:	f063 030e 	orn	r3, r3, #14
 8002948:	b2da      	uxtb	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	4907      	ldr	r1, [pc, #28]	; (8002974 <I2C_MasterRequestRead+0x198>)
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	f000 f888 	bl	8002a6c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e000      	b.n	8002968 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3718      	adds	r7, #24
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	00010008 	.word	0x00010008
 8002974:	00010002 	.word	0x00010002

08002978 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	603b      	str	r3, [r7, #0]
 8002984:	4613      	mov	r3, r2
 8002986:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002988:	e048      	b.n	8002a1c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002990:	d044      	beq.n	8002a1c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002992:	f7fe fbdd 	bl	8001150 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d302      	bcc.n	80029a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d139      	bne.n	8002a1c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	0c1b      	lsrs	r3, r3, #16
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d10d      	bne.n	80029ce <I2C_WaitOnFlagUntilTimeout+0x56>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	43da      	mvns	r2, r3
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	4013      	ands	r3, r2
 80029be:	b29b      	uxth	r3, r3
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	bf0c      	ite	eq
 80029c4:	2301      	moveq	r3, #1
 80029c6:	2300      	movne	r3, #0
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	461a      	mov	r2, r3
 80029cc:	e00c      	b.n	80029e8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	43da      	mvns	r2, r3
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	4013      	ands	r3, r2
 80029da:	b29b      	uxth	r3, r3
 80029dc:	2b00      	cmp	r3, #0
 80029de:	bf0c      	ite	eq
 80029e0:	2301      	moveq	r3, #1
 80029e2:	2300      	movne	r3, #0
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	461a      	mov	r2, r3
 80029e8:	79fb      	ldrb	r3, [r7, #7]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d116      	bne.n	8002a1c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2220      	movs	r2, #32
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	f043 0220 	orr.w	r2, r3, #32
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e023      	b.n	8002a64 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	0c1b      	lsrs	r3, r3, #16
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d10d      	bne.n	8002a42 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	43da      	mvns	r2, r3
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	4013      	ands	r3, r2
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	bf0c      	ite	eq
 8002a38:	2301      	moveq	r3, #1
 8002a3a:	2300      	movne	r3, #0
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	461a      	mov	r2, r3
 8002a40:	e00c      	b.n	8002a5c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	43da      	mvns	r2, r3
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	bf0c      	ite	eq
 8002a54:	2301      	moveq	r3, #1
 8002a56:	2300      	movne	r3, #0
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	79fb      	ldrb	r3, [r7, #7]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d093      	beq.n	800298a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
 8002a78:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a7a:	e071      	b.n	8002b60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a8a:	d123      	bne.n	8002ad4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a9a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002aa4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2220      	movs	r2, #32
 8002ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac0:	f043 0204 	orr.w	r2, r3, #4
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e067      	b.n	8002ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ada:	d041      	beq.n	8002b60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002adc:	f7fe fb38 	bl	8001150 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d302      	bcc.n	8002af2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d136      	bne.n	8002b60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	0c1b      	lsrs	r3, r3, #16
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d10c      	bne.n	8002b16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	43da      	mvns	r2, r3
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	4013      	ands	r3, r2
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	bf14      	ite	ne
 8002b0e:	2301      	movne	r3, #1
 8002b10:	2300      	moveq	r3, #0
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	e00b      	b.n	8002b2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	43da      	mvns	r2, r3
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	4013      	ands	r3, r2
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	bf14      	ite	ne
 8002b28:	2301      	movne	r3, #1
 8002b2a:	2300      	moveq	r3, #0
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d016      	beq.n	8002b60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2220      	movs	r2, #32
 8002b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4c:	f043 0220 	orr.w	r2, r3, #32
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e021      	b.n	8002ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	0c1b      	lsrs	r3, r3, #16
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d10c      	bne.n	8002b84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	695b      	ldr	r3, [r3, #20]
 8002b70:	43da      	mvns	r2, r3
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	4013      	ands	r3, r2
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	bf14      	ite	ne
 8002b7c:	2301      	movne	r3, #1
 8002b7e:	2300      	moveq	r3, #0
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	e00b      	b.n	8002b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	43da      	mvns	r2, r3
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	bf14      	ite	ne
 8002b96:	2301      	movne	r3, #1
 8002b98:	2300      	moveq	r3, #0
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f47f af6d 	bne.w	8002a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bb8:	e034      	b.n	8002c24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f000 f8e3 	bl	8002d86 <I2C_IsAcknowledgeFailed>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e034      	b.n	8002c34 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd0:	d028      	beq.n	8002c24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bd2:	f7fe fabd 	bl	8001150 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	68ba      	ldr	r2, [r7, #8]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d302      	bcc.n	8002be8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d11d      	bne.n	8002c24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf2:	2b80      	cmp	r3, #128	; 0x80
 8002bf4:	d016      	beq.n	8002c24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2220      	movs	r2, #32
 8002c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c10:	f043 0220 	orr.w	r2, r3, #32
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e007      	b.n	8002c34 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c2e:	2b80      	cmp	r3, #128	; 0x80
 8002c30:	d1c3      	bne.n	8002bba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3710      	adds	r7, #16
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c48:	e034      	b.n	8002cb4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f000 f89b 	bl	8002d86 <I2C_IsAcknowledgeFailed>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e034      	b.n	8002cc4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c60:	d028      	beq.n	8002cb4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c62:	f7fe fa75 	bl	8001150 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	68ba      	ldr	r2, [r7, #8]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d302      	bcc.n	8002c78 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d11d      	bne.n	8002cb4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	f003 0304 	and.w	r3, r3, #4
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	d016      	beq.n	8002cb4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2220      	movs	r2, #32
 8002c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	f043 0220 	orr.w	r2, r3, #32
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e007      	b.n	8002cc4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	f003 0304 	and.w	r3, r3, #4
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	d1c3      	bne.n	8002c4a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002cd8:	e049      	b.n	8002d6e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	695b      	ldr	r3, [r3, #20]
 8002ce0:	f003 0310 	and.w	r3, r3, #16
 8002ce4:	2b10      	cmp	r3, #16
 8002ce6:	d119      	bne.n	8002d1c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f06f 0210 	mvn.w	r2, #16
 8002cf0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e030      	b.n	8002d7e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d1c:	f7fe fa18 	bl	8001150 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	68ba      	ldr	r2, [r7, #8]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d302      	bcc.n	8002d32 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d11d      	bne.n	8002d6e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3c:	2b40      	cmp	r3, #64	; 0x40
 8002d3e:	d016      	beq.n	8002d6e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2220      	movs	r2, #32
 8002d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	f043 0220 	orr.w	r2, r3, #32
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e007      	b.n	8002d7e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d78:	2b40      	cmp	r3, #64	; 0x40
 8002d7a:	d1ae      	bne.n	8002cda <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d86:	b480      	push	{r7}
 8002d88:	b083      	sub	sp, #12
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	695b      	ldr	r3, [r3, #20]
 8002d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d9c:	d11b      	bne.n	8002dd6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002da6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2220      	movs	r2, #32
 8002db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	f043 0204 	orr.w	r2, r3, #4
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e000      	b.n	8002dd8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b088      	sub	sp, #32
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e128      	b.n	8003048 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d109      	bne.n	8002e16 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a90      	ldr	r2, [pc, #576]	; (8003050 <HAL_I2S_Init+0x26c>)
 8002e0e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f7fd ffe9 	bl	8000de8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2202      	movs	r2, #2
 8002e1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	69db      	ldr	r3, [r3, #28]
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6812      	ldr	r2, [r2, #0]
 8002e28:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002e2c:	f023 030f 	bic.w	r3, r3, #15
 8002e30:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2202      	movs	r2, #2
 8002e38:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d060      	beq.n	8002f04 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d102      	bne.n	8002e50 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002e4a:	2310      	movs	r3, #16
 8002e4c:	617b      	str	r3, [r7, #20]
 8002e4e:	e001      	b.n	8002e54 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002e50:	2320      	movs	r3, #32
 8002e52:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	2b20      	cmp	r3, #32
 8002e5a:	d802      	bhi.n	8002e62 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002e62:	2001      	movs	r0, #1
 8002e64:	f002 fd34 	bl	80058d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002e68:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e72:	d125      	bne.n	8002ec0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d010      	beq.n	8002e9e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e86:	4613      	mov	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	4413      	add	r3, r2
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	461a      	mov	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e98:	3305      	adds	r3, #5
 8002e9a:	613b      	str	r3, [r7, #16]
 8002e9c:	e01f      	b.n	8002ede <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4413      	add	r3, r2
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eba:	3305      	adds	r3, #5
 8002ebc:	613b      	str	r3, [r7, #16]
 8002ebe:	e00e      	b.n	8002ede <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ec8:	4613      	mov	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4413      	add	r3, r2
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eda:	3305      	adds	r3, #5
 8002edc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	4a5c      	ldr	r2, [pc, #368]	; (8003054 <HAL_I2S_Init+0x270>)
 8002ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee6:	08db      	lsrs	r3, r3, #3
 8002ee8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	085b      	lsrs	r3, r3, #1
 8002efa:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	021b      	lsls	r3, r3, #8
 8002f00:	61bb      	str	r3, [r7, #24]
 8002f02:	e003      	b.n	8002f0c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002f04:	2302      	movs	r3, #2
 8002f06:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d902      	bls.n	8002f18 <HAL_I2S_Init+0x134>
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	2bff      	cmp	r3, #255	; 0xff
 8002f16:	d907      	bls.n	8002f28 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1c:	f043 0210 	orr.w	r2, r3, #16
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e08f      	b.n	8003048 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	691a      	ldr	r2, [r3, #16]
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	ea42 0103 	orr.w	r1, r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	69fa      	ldr	r2, [r7, #28]
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002f46:	f023 030f 	bic.w	r3, r3, #15
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	6851      	ldr	r1, [r2, #4]
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6892      	ldr	r2, [r2, #8]
 8002f52:	4311      	orrs	r1, r2
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	68d2      	ldr	r2, [r2, #12]
 8002f58:	4311      	orrs	r1, r2
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	6992      	ldr	r2, [r2, #24]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	431a      	orrs	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f6a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a1b      	ldr	r3, [r3, #32]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d161      	bne.n	8003038 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a38      	ldr	r2, [pc, #224]	; (8003058 <HAL_I2S_Init+0x274>)
 8002f78:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a37      	ldr	r2, [pc, #220]	; (800305c <HAL_I2S_Init+0x278>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d101      	bne.n	8002f88 <HAL_I2S_Init+0x1a4>
 8002f84:	4b36      	ldr	r3, [pc, #216]	; (8003060 <HAL_I2S_Init+0x27c>)
 8002f86:	e001      	b.n	8002f8c <HAL_I2S_Init+0x1a8>
 8002f88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	6812      	ldr	r2, [r2, #0]
 8002f92:	4932      	ldr	r1, [pc, #200]	; (800305c <HAL_I2S_Init+0x278>)
 8002f94:	428a      	cmp	r2, r1
 8002f96:	d101      	bne.n	8002f9c <HAL_I2S_Init+0x1b8>
 8002f98:	4a31      	ldr	r2, [pc, #196]	; (8003060 <HAL_I2S_Init+0x27c>)
 8002f9a:	e001      	b.n	8002fa0 <HAL_I2S_Init+0x1bc>
 8002f9c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002fa0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002fa4:	f023 030f 	bic.w	r3, r3, #15
 8002fa8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a2b      	ldr	r2, [pc, #172]	; (800305c <HAL_I2S_Init+0x278>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d101      	bne.n	8002fb8 <HAL_I2S_Init+0x1d4>
 8002fb4:	4b2a      	ldr	r3, [pc, #168]	; (8003060 <HAL_I2S_Init+0x27c>)
 8002fb6:	e001      	b.n	8002fbc <HAL_I2S_Init+0x1d8>
 8002fb8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fbc:	2202      	movs	r2, #2
 8002fbe:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a25      	ldr	r2, [pc, #148]	; (800305c <HAL_I2S_Init+0x278>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d101      	bne.n	8002fce <HAL_I2S_Init+0x1ea>
 8002fca:	4b25      	ldr	r3, [pc, #148]	; (8003060 <HAL_I2S_Init+0x27c>)
 8002fcc:	e001      	b.n	8002fd2 <HAL_I2S_Init+0x1ee>
 8002fce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fd2:	69db      	ldr	r3, [r3, #28]
 8002fd4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fde:	d003      	beq.n	8002fe8 <HAL_I2S_Init+0x204>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d103      	bne.n	8002ff0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002fe8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fec:	613b      	str	r3, [r7, #16]
 8002fee:	e001      	b.n	8002ff4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002ffe:	4313      	orrs	r3, r2
 8003000:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003008:	4313      	orrs	r3, r2
 800300a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003012:	4313      	orrs	r3, r2
 8003014:	b29a      	uxth	r2, r3
 8003016:	897b      	ldrh	r3, [r7, #10]
 8003018:	4313      	orrs	r3, r2
 800301a:	b29b      	uxth	r3, r3
 800301c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003020:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a0d      	ldr	r2, [pc, #52]	; (800305c <HAL_I2S_Init+0x278>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d101      	bne.n	8003030 <HAL_I2S_Init+0x24c>
 800302c:	4b0c      	ldr	r3, [pc, #48]	; (8003060 <HAL_I2S_Init+0x27c>)
 800302e:	e001      	b.n	8003034 <HAL_I2S_Init+0x250>
 8003030:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003034:	897a      	ldrh	r2, [r7, #10]
 8003036:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3720      	adds	r7, #32
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	08003381 	.word	0x08003381
 8003054:	cccccccd 	.word	0xcccccccd
 8003058:	08003495 	.word	0x08003495
 800305c:	40003800 	.word	0x40003800
 8003060:	40003400 	.word	0x40003400

08003064 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	4613      	mov	r3, r2
 8003070:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d002      	beq.n	800307e <HAL_I2S_Transmit_DMA+0x1a>
 8003078:	88fb      	ldrh	r3, [r7, #6]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e08e      	b.n	80031a0 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b01      	cmp	r3, #1
 800308c:	d101      	bne.n	8003092 <HAL_I2S_Transmit_DMA+0x2e>
 800308e:	2302      	movs	r3, #2
 8003090:	e086      	b.n	80031a0 <HAL_I2S_Transmit_DMA+0x13c>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d005      	beq.n	80030b2 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 80030ae:	2302      	movs	r3, #2
 80030b0:	e076      	b.n	80031a0 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2203      	movs	r2, #3
 80030b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	68ba      	ldr	r2, [r7, #8]
 80030c4:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	69db      	ldr	r3, [r3, #28]
 80030cc:	f003 0307 	and.w	r3, r3, #7
 80030d0:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	2b03      	cmp	r3, #3
 80030d6:	d002      	beq.n	80030de <HAL_I2S_Transmit_DMA+0x7a>
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	2b05      	cmp	r3, #5
 80030dc:	d10a      	bne.n	80030f4 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 80030de:	88fb      	ldrh	r3, [r7, #6]
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80030e8:	88fb      	ldrh	r3, [r7, #6]
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030f2:	e005      	b.n	8003100 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	88fa      	ldrh	r2, [r7, #6]
 80030f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	88fa      	ldrh	r2, [r7, #6]
 80030fe:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003104:	4a28      	ldr	r2, [pc, #160]	; (80031a8 <HAL_I2S_Transmit_DMA+0x144>)
 8003106:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310c:	4a27      	ldr	r2, [pc, #156]	; (80031ac <HAL_I2S_Transmit_DMA+0x148>)
 800310e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003114:	4a26      	ldr	r2, [pc, #152]	; (80031b0 <HAL_I2S_Transmit_DMA+0x14c>)
 8003116:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003120:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003128:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800312e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003130:	f7fe f9fe 	bl	8001530 <HAL_DMA_Start_IT>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00f      	beq.n	800315a <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313e:	f043 0208 	orr.w	r2, r3, #8
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e022      	b.n	80031a0 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	69db      	ldr	r3, [r3, #28]
 8003160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003164:	2b00      	cmp	r3, #0
 8003166:	d107      	bne.n	8003178 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	69da      	ldr	r2, [r3, #28]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003176:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d107      	bne.n	8003196 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	685a      	ldr	r2, [r3, #4]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f042 0202 	orr.w	r2, r2, #2
 8003194:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3718      	adds	r7, #24
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	0800325f 	.word	0x0800325f
 80031ac:	0800321d 	.word	0x0800321d
 80031b0:	0800327b 	.word	0x0800327b

080031b4 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	4798      	blx	r3
}
 80031c4:	bf00      	nop
 80031c6:	3708      	adds	r7, #8
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003228:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10e      	bne.n	8003250 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f022 0202 	bic.w	r2, r2, #2
 8003240:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f7ff ffc5 	bl	80031e0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003256:	bf00      	nop
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b084      	sub	sp, #16
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800326a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f7ff ffad 	bl	80031cc <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003272:	bf00      	nop
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b084      	sub	sp, #16
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003286:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	685a      	ldr	r2, [r3, #4]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 0203 	bic.w	r2, r2, #3
 8003296:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b0:	f043 0208 	orr.w	r2, r3, #8
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	f7ff ffa5 	bl	8003208 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80032be:	bf00      	nop
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b082      	sub	sp, #8
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d2:	881a      	ldrh	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032de:	1c9a      	adds	r2, r3, #2
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	3b01      	subs	r3, #1
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d10e      	bne.n	800331a <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800330a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f7ff ff63 	bl	80031e0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800331a:	bf00      	nop
 800331c:	3708      	adds	r7, #8
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b082      	sub	sp, #8
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68da      	ldr	r2, [r3, #12]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003334:	b292      	uxth	r2, r2
 8003336:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333c:	1c9a      	adds	r2, r3, #2
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003346:	b29b      	uxth	r3, r3
 8003348:	3b01      	subs	r3, #1
 800334a:	b29a      	uxth	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003354:	b29b      	uxth	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10e      	bne.n	8003378 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003368:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f7ff ff3e 	bl	80031f4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003378:	bf00      	nop
 800337a:	3708      	adds	r7, #8
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2b04      	cmp	r3, #4
 800339a:	d13a      	bne.n	8003412 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d109      	bne.n	80033ba <I2S_IRQHandler+0x3a>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b0:	2b40      	cmp	r3, #64	; 0x40
 80033b2:	d102      	bne.n	80033ba <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f7ff ffb4 	bl	8003322 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c0:	2b40      	cmp	r3, #64	; 0x40
 80033c2:	d126      	bne.n	8003412 <I2S_IRQHandler+0x92>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f003 0320 	and.w	r3, r3, #32
 80033ce:	2b20      	cmp	r3, #32
 80033d0:	d11f      	bne.n	8003412 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033e0:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80033e2:	2300      	movs	r3, #0
 80033e4:	613b      	str	r3, [r7, #16]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	613b      	str	r3, [r7, #16]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	613b      	str	r3, [r7, #16]
 80033f6:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003404:	f043 0202 	orr.w	r2, r3, #2
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f7ff fefb 	bl	8003208 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b03      	cmp	r3, #3
 800341c:	d136      	bne.n	800348c <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b02      	cmp	r3, #2
 8003426:	d109      	bne.n	800343c <I2S_IRQHandler+0xbc>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003432:	2b80      	cmp	r3, #128	; 0x80
 8003434:	d102      	bne.n	800343c <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7ff ff45 	bl	80032c6 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	f003 0308 	and.w	r3, r3, #8
 8003442:	2b08      	cmp	r3, #8
 8003444:	d122      	bne.n	800348c <I2S_IRQHandler+0x10c>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f003 0320 	and.w	r3, r3, #32
 8003450:	2b20      	cmp	r3, #32
 8003452:	d11b      	bne.n	800348c <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003462:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003464:	2300      	movs	r3, #0
 8003466:	60fb      	str	r3, [r7, #12]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	60fb      	str	r3, [r7, #12]
 8003470:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347e:	f043 0204 	orr.w	r2, r3, #4
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7ff febe 	bl	8003208 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800348c:	bf00      	nop
 800348e:	3718      	adds	r7, #24
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b088      	sub	sp, #32
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a92      	ldr	r2, [pc, #584]	; (80036f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d101      	bne.n	80034b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80034ae:	4b92      	ldr	r3, [pc, #584]	; (80036f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034b0:	e001      	b.n	80034b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80034b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a8b      	ldr	r2, [pc, #556]	; (80036f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d101      	bne.n	80034d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80034cc:	4b8a      	ldr	r3, [pc, #552]	; (80036f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034ce:	e001      	b.n	80034d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80034d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034e0:	d004      	beq.n	80034ec <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f040 8099 	bne.w	800361e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d107      	bne.n	8003506 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d002      	beq.n	8003506 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 f925 	bl	8003750 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	2b01      	cmp	r3, #1
 800350e:	d107      	bne.n	8003520 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003516:	2b00      	cmp	r3, #0
 8003518:	d002      	beq.n	8003520 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f9c8 	bl	80038b0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003526:	2b40      	cmp	r3, #64	; 0x40
 8003528:	d13a      	bne.n	80035a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	f003 0320 	and.w	r3, r3, #32
 8003530:	2b00      	cmp	r3, #0
 8003532:	d035      	beq.n	80035a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a6e      	ldr	r2, [pc, #440]	; (80036f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d101      	bne.n	8003542 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800353e:	4b6e      	ldr	r3, [pc, #440]	; (80036f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003540:	e001      	b.n	8003546 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003542:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4969      	ldr	r1, [pc, #420]	; (80036f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800354e:	428b      	cmp	r3, r1
 8003550:	d101      	bne.n	8003556 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003552:	4b69      	ldr	r3, [pc, #420]	; (80036f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003554:	e001      	b.n	800355a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003556:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800355a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800355e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800356e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003570:	2300      	movs	r3, #0
 8003572:	60fb      	str	r3, [r7, #12]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	60fb      	str	r3, [r7, #12]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	60fb      	str	r3, [r7, #12]
 8003584:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003592:	f043 0202 	orr.w	r2, r3, #2
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7ff fe34 	bl	8003208 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	f003 0308 	and.w	r3, r3, #8
 80035a6:	2b08      	cmp	r3, #8
 80035a8:	f040 80c3 	bne.w	8003732 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	f003 0320 	and.w	r3, r3, #32
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f000 80bd 	beq.w	8003732 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035c6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a49      	ldr	r2, [pc, #292]	; (80036f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d101      	bne.n	80035d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80035d2:	4b49      	ldr	r3, [pc, #292]	; (80036f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035d4:	e001      	b.n	80035da <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80035d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4944      	ldr	r1, [pc, #272]	; (80036f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035e2:	428b      	cmp	r3, r1
 80035e4:	d101      	bne.n	80035ea <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80035e6:	4b44      	ldr	r3, [pc, #272]	; (80036f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035e8:	e001      	b.n	80035ee <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80035ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035f2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80035f4:	2300      	movs	r3, #0
 80035f6:	60bb      	str	r3, [r7, #8]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	60bb      	str	r3, [r7, #8]
 8003600:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360e:	f043 0204 	orr.w	r2, r3, #4
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7ff fdf6 	bl	8003208 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800361c:	e089      	b.n	8003732 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b02      	cmp	r3, #2
 8003626:	d107      	bne.n	8003638 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800362e:	2b00      	cmp	r3, #0
 8003630:	d002      	beq.n	8003638 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f8be 	bl	80037b4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b01      	cmp	r3, #1
 8003640:	d107      	bne.n	8003652 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003648:	2b00      	cmp	r3, #0
 800364a:	d002      	beq.n	8003652 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 f8fd 	bl	800384c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003658:	2b40      	cmp	r3, #64	; 0x40
 800365a:	d12f      	bne.n	80036bc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	f003 0320 	and.w	r3, r3, #32
 8003662:	2b00      	cmp	r3, #0
 8003664:	d02a      	beq.n	80036bc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003674:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a1e      	ldr	r2, [pc, #120]	; (80036f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d101      	bne.n	8003684 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003680:	4b1d      	ldr	r3, [pc, #116]	; (80036f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003682:	e001      	b.n	8003688 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003684:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003688:	685a      	ldr	r2, [r3, #4]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4919      	ldr	r1, [pc, #100]	; (80036f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003690:	428b      	cmp	r3, r1
 8003692:	d101      	bne.n	8003698 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003694:	4b18      	ldr	r3, [pc, #96]	; (80036f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003696:	e001      	b.n	800369c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003698:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800369c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036a0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ae:	f043 0202 	orr.w	r2, r3, #2
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7ff fda6 	bl	8003208 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	f003 0308 	and.w	r3, r3, #8
 80036c2:	2b08      	cmp	r3, #8
 80036c4:	d136      	bne.n	8003734 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	f003 0320 	and.w	r3, r3, #32
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d031      	beq.n	8003734 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a07      	ldr	r2, [pc, #28]	; (80036f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d101      	bne.n	80036de <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80036da:	4b07      	ldr	r3, [pc, #28]	; (80036f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036dc:	e001      	b.n	80036e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80036de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4902      	ldr	r1, [pc, #8]	; (80036f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036ea:	428b      	cmp	r3, r1
 80036ec:	d106      	bne.n	80036fc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80036ee:	4b02      	ldr	r3, [pc, #8]	; (80036f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036f0:	e006      	b.n	8003700 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80036f2:	bf00      	nop
 80036f4:	40003800 	.word	0x40003800
 80036f8:	40003400 	.word	0x40003400
 80036fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003700:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003704:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003714:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003722:	f043 0204 	orr.w	r2, r3, #4
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7ff fd6c 	bl	8003208 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003730:	e000      	b.n	8003734 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003732:	bf00      	nop
}
 8003734:	bf00      	nop
 8003736:	3720      	adds	r7, #32
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375c:	1c99      	adds	r1, r3, #2
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	6251      	str	r1, [r2, #36]	; 0x24
 8003762:	881a      	ldrh	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376e:	b29b      	uxth	r3, r3
 8003770:	3b01      	subs	r3, #1
 8003772:	b29a      	uxth	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800377c:	b29b      	uxth	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d113      	bne.n	80037aa <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003790:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003796:	b29b      	uxth	r3, r3
 8003798:	2b00      	cmp	r3, #0
 800379a:	d106      	bne.n	80037aa <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f7ff ffc9 	bl	800373c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037aa:	bf00      	nop
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
	...

080037b4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c0:	1c99      	adds	r1, r3, #2
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	6251      	str	r1, [r2, #36]	; 0x24
 80037c6:	8819      	ldrh	r1, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a1d      	ldr	r2, [pc, #116]	; (8003844 <I2SEx_TxISR_I2SExt+0x90>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d101      	bne.n	80037d6 <I2SEx_TxISR_I2SExt+0x22>
 80037d2:	4b1d      	ldr	r3, [pc, #116]	; (8003848 <I2SEx_TxISR_I2SExt+0x94>)
 80037d4:	e001      	b.n	80037da <I2SEx_TxISR_I2SExt+0x26>
 80037d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037da:	460a      	mov	r2, r1
 80037dc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	3b01      	subs	r3, #1
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d121      	bne.n	800383a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a12      	ldr	r2, [pc, #72]	; (8003844 <I2SEx_TxISR_I2SExt+0x90>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d101      	bne.n	8003804 <I2SEx_TxISR_I2SExt+0x50>
 8003800:	4b11      	ldr	r3, [pc, #68]	; (8003848 <I2SEx_TxISR_I2SExt+0x94>)
 8003802:	e001      	b.n	8003808 <I2SEx_TxISR_I2SExt+0x54>
 8003804:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	490d      	ldr	r1, [pc, #52]	; (8003844 <I2SEx_TxISR_I2SExt+0x90>)
 8003810:	428b      	cmp	r3, r1
 8003812:	d101      	bne.n	8003818 <I2SEx_TxISR_I2SExt+0x64>
 8003814:	4b0c      	ldr	r3, [pc, #48]	; (8003848 <I2SEx_TxISR_I2SExt+0x94>)
 8003816:	e001      	b.n	800381c <I2SEx_TxISR_I2SExt+0x68>
 8003818:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800381c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003820:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003826:	b29b      	uxth	r3, r3
 8003828:	2b00      	cmp	r3, #0
 800382a:	d106      	bne.n	800383a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f7ff ff81 	bl	800373c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800383a:	bf00      	nop
 800383c:	3708      	adds	r7, #8
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	40003800 	.word	0x40003800
 8003848:	40003400 	.word	0x40003400

0800384c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68d8      	ldr	r0, [r3, #12]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385e:	1c99      	adds	r1, r3, #2
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003864:	b282      	uxth	r2, r0
 8003866:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800386c:	b29b      	uxth	r3, r3
 800386e:	3b01      	subs	r3, #1
 8003870:	b29a      	uxth	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800387a:	b29b      	uxth	r3, r3
 800387c:	2b00      	cmp	r3, #0
 800387e:	d113      	bne.n	80038a8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800388e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003894:	b29b      	uxth	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d106      	bne.n	80038a8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7ff ff4a 	bl	800373c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038a8:	bf00      	nop
 80038aa:	3708      	adds	r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a20      	ldr	r2, [pc, #128]	; (8003940 <I2SEx_RxISR_I2SExt+0x90>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d101      	bne.n	80038c6 <I2SEx_RxISR_I2SExt+0x16>
 80038c2:	4b20      	ldr	r3, [pc, #128]	; (8003944 <I2SEx_RxISR_I2SExt+0x94>)
 80038c4:	e001      	b.n	80038ca <I2SEx_RxISR_I2SExt+0x1a>
 80038c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038ca:	68d8      	ldr	r0, [r3, #12]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d0:	1c99      	adds	r1, r3, #2
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80038d6:	b282      	uxth	r2, r0
 80038d8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038de:	b29b      	uxth	r3, r3
 80038e0:	3b01      	subs	r3, #1
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d121      	bne.n	8003936 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a12      	ldr	r2, [pc, #72]	; (8003940 <I2SEx_RxISR_I2SExt+0x90>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d101      	bne.n	8003900 <I2SEx_RxISR_I2SExt+0x50>
 80038fc:	4b11      	ldr	r3, [pc, #68]	; (8003944 <I2SEx_RxISR_I2SExt+0x94>)
 80038fe:	e001      	b.n	8003904 <I2SEx_RxISR_I2SExt+0x54>
 8003900:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003904:	685a      	ldr	r2, [r3, #4]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	490d      	ldr	r1, [pc, #52]	; (8003940 <I2SEx_RxISR_I2SExt+0x90>)
 800390c:	428b      	cmp	r3, r1
 800390e:	d101      	bne.n	8003914 <I2SEx_RxISR_I2SExt+0x64>
 8003910:	4b0c      	ldr	r3, [pc, #48]	; (8003944 <I2SEx_RxISR_I2SExt+0x94>)
 8003912:	e001      	b.n	8003918 <I2SEx_RxISR_I2SExt+0x68>
 8003914:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003918:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800391c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003922:	b29b      	uxth	r3, r3
 8003924:	2b00      	cmp	r3, #0
 8003926:	d106      	bne.n	8003936 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f7ff ff03 	bl	800373c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003936:	bf00      	nop
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	40003800 	.word	0x40003800
 8003944:	40003400 	.word	0x40003400

08003948 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af02      	add	r7, sp, #8
 800394e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e101      	b.n	8003b5e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b00      	cmp	r3, #0
 800396a:	d106      	bne.n	800397a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f005 fb8b 	bl	8009090 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2203      	movs	r2, #3
 800397e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003988:	d102      	bne.n	8003990 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4618      	mov	r0, r3
 8003996:	f002 f914 	bl	8005bc2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6818      	ldr	r0, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	7c1a      	ldrb	r2, [r3, #16]
 80039a2:	f88d 2000 	strb.w	r2, [sp]
 80039a6:	3304      	adds	r3, #4
 80039a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039aa:	f001 fff3 	bl	8005994 <USB_CoreInit>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d005      	beq.n	80039c0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2202      	movs	r2, #2
 80039b8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e0ce      	b.n	8003b5e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2100      	movs	r1, #0
 80039c6:	4618      	mov	r0, r3
 80039c8:	f002 f90c 	bl	8005be4 <USB_SetCurrentMode>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d005      	beq.n	80039de <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2202      	movs	r2, #2
 80039d6:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e0bf      	b.n	8003b5e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039de:	2300      	movs	r3, #0
 80039e0:	73fb      	strb	r3, [r7, #15]
 80039e2:	e04a      	b.n	8003a7a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80039e4:	7bfa      	ldrb	r2, [r7, #15]
 80039e6:	6879      	ldr	r1, [r7, #4]
 80039e8:	4613      	mov	r3, r2
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	4413      	add	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	440b      	add	r3, r1
 80039f2:	3315      	adds	r3, #21
 80039f4:	2201      	movs	r2, #1
 80039f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80039f8:	7bfa      	ldrb	r2, [r7, #15]
 80039fa:	6879      	ldr	r1, [r7, #4]
 80039fc:	4613      	mov	r3, r2
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	4413      	add	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	440b      	add	r3, r1
 8003a06:	3314      	adds	r3, #20
 8003a08:	7bfa      	ldrb	r2, [r7, #15]
 8003a0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a0c:	7bfa      	ldrb	r2, [r7, #15]
 8003a0e:	7bfb      	ldrb	r3, [r7, #15]
 8003a10:	b298      	uxth	r0, r3
 8003a12:	6879      	ldr	r1, [r7, #4]
 8003a14:	4613      	mov	r3, r2
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	4413      	add	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	440b      	add	r3, r1
 8003a1e:	332e      	adds	r3, #46	; 0x2e
 8003a20:	4602      	mov	r2, r0
 8003a22:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a24:	7bfa      	ldrb	r2, [r7, #15]
 8003a26:	6879      	ldr	r1, [r7, #4]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	4413      	add	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	440b      	add	r3, r1
 8003a32:	3318      	adds	r3, #24
 8003a34:	2200      	movs	r2, #0
 8003a36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a38:	7bfa      	ldrb	r2, [r7, #15]
 8003a3a:	6879      	ldr	r1, [r7, #4]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	4413      	add	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	440b      	add	r3, r1
 8003a46:	331c      	adds	r3, #28
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a4c:	7bfa      	ldrb	r2, [r7, #15]
 8003a4e:	6879      	ldr	r1, [r7, #4]
 8003a50:	4613      	mov	r3, r2
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	4413      	add	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	440b      	add	r3, r1
 8003a5a:	3320      	adds	r3, #32
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a60:	7bfa      	ldrb	r2, [r7, #15]
 8003a62:	6879      	ldr	r1, [r7, #4]
 8003a64:	4613      	mov	r3, r2
 8003a66:	00db      	lsls	r3, r3, #3
 8003a68:	4413      	add	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	440b      	add	r3, r1
 8003a6e:	3324      	adds	r3, #36	; 0x24
 8003a70:	2200      	movs	r2, #0
 8003a72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a74:	7bfb      	ldrb	r3, [r7, #15]
 8003a76:	3301      	adds	r3, #1
 8003a78:	73fb      	strb	r3, [r7, #15]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	791b      	ldrb	r3, [r3, #4]
 8003a7e:	7bfa      	ldrb	r2, [r7, #15]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d3af      	bcc.n	80039e4 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a84:	2300      	movs	r3, #0
 8003a86:	73fb      	strb	r3, [r7, #15]
 8003a88:	e044      	b.n	8003b14 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003a8a:	7bfa      	ldrb	r2, [r7, #15]
 8003a8c:	6879      	ldr	r1, [r7, #4]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	4413      	add	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	440b      	add	r3, r1
 8003a98:	f203 2355 	addw	r3, r3, #597	; 0x255
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003aa0:	7bfa      	ldrb	r2, [r7, #15]
 8003aa2:	6879      	ldr	r1, [r7, #4]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	4413      	add	r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	440b      	add	r3, r1
 8003aae:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8003ab2:	7bfa      	ldrb	r2, [r7, #15]
 8003ab4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ab6:	7bfa      	ldrb	r2, [r7, #15]
 8003ab8:	6879      	ldr	r1, [r7, #4]
 8003aba:	4613      	mov	r3, r2
 8003abc:	00db      	lsls	r3, r3, #3
 8003abe:	4413      	add	r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	440b      	add	r3, r1
 8003ac4:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8003ac8:	2200      	movs	r2, #0
 8003aca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003acc:	7bfa      	ldrb	r2, [r7, #15]
 8003ace:	6879      	ldr	r1, [r7, #4]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	4413      	add	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	440b      	add	r3, r1
 8003ada:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8003ade:	2200      	movs	r2, #0
 8003ae0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003ae2:	7bfa      	ldrb	r2, [r7, #15]
 8003ae4:	6879      	ldr	r1, [r7, #4]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	00db      	lsls	r3, r3, #3
 8003aea:	4413      	add	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	440b      	add	r3, r1
 8003af0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8003af4:	2200      	movs	r2, #0
 8003af6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003af8:	7bfa      	ldrb	r2, [r7, #15]
 8003afa:	6879      	ldr	r1, [r7, #4]
 8003afc:	4613      	mov	r3, r2
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	4413      	add	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	440b      	add	r3, r1
 8003b06:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b0e:	7bfb      	ldrb	r3, [r7, #15]
 8003b10:	3301      	adds	r3, #1
 8003b12:	73fb      	strb	r3, [r7, #15]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	791b      	ldrb	r3, [r3, #4]
 8003b18:	7bfa      	ldrb	r2, [r7, #15]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d3b5      	bcc.n	8003a8a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6818      	ldr	r0, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	7c1a      	ldrb	r2, [r3, #16]
 8003b26:	f88d 2000 	strb.w	r2, [sp]
 8003b2a:	3304      	adds	r3, #4
 8003b2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b2e:	f002 f8a5 	bl	8005c7c <USB_DevInit>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d005      	beq.n	8003b44 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e00c      	b.n	8003b5e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f003 f8e9 	bl	8006d2e <USB_DevDisconnect>

  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b084      	sub	sp, #16
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d101      	bne.n	8003b82 <HAL_PCD_Start+0x1c>
 8003b7e:	2302      	movs	r3, #2
 8003b80:	e022      	b.n	8003bc8 <HAL_PCD_Start+0x62>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d009      	beq.n	8003baa <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d105      	bne.n	8003baa <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f001 fff6 	bl	8005ba0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f003 f897 	bl	8006cec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3710      	adds	r7, #16
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003bd0:	b590      	push	{r4, r7, lr}
 8003bd2:	b08d      	sub	sp, #52	; 0x34
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bde:	6a3b      	ldr	r3, [r7, #32]
 8003be0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f003 f955 	bl	8006e96 <USB_GetMode>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f040 848c 	bne.w	800450c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f003 f8b9 	bl	8006d70 <USB_ReadInterrupts>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 8482 	beq.w	800450a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	0a1b      	lsrs	r3, r3, #8
 8003c10:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f003 f8a6 	bl	8006d70 <USB_ReadInterrupts>
 8003c24:	4603      	mov	r3, r0
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d107      	bne.n	8003c3e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	695a      	ldr	r2, [r3, #20]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f002 0202 	and.w	r2, r2, #2
 8003c3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f003 f894 	bl	8006d70 <USB_ReadInterrupts>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	f003 0310 	and.w	r3, r3, #16
 8003c4e:	2b10      	cmp	r3, #16
 8003c50:	d161      	bne.n	8003d16 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	699a      	ldr	r2, [r3, #24]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 0210 	bic.w	r2, r2, #16
 8003c60:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003c62:	6a3b      	ldr	r3, [r7, #32]
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	f003 020f 	and.w	r2, r3, #15
 8003c6e:	4613      	mov	r3, r2
 8003c70:	00db      	lsls	r3, r3, #3
 8003c72:	4413      	add	r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	3304      	adds	r3, #4
 8003c80:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	0c5b      	lsrs	r3, r3, #17
 8003c86:	f003 030f 	and.w	r3, r3, #15
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d124      	bne.n	8003cd8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003c94:	4013      	ands	r3, r2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d035      	beq.n	8003d06 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	091b      	lsrs	r3, r3, #4
 8003ca2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003ca4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	461a      	mov	r2, r3
 8003cac:	6a38      	ldr	r0, [r7, #32]
 8003cae:	f002 fecb 	bl	8006a48 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	68da      	ldr	r2, [r3, #12]
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	091b      	lsrs	r3, r3, #4
 8003cba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cbe:	441a      	add	r2, r3
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	695a      	ldr	r2, [r3, #20]
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	091b      	lsrs	r3, r3, #4
 8003ccc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cd0:	441a      	add	r2, r3
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	615a      	str	r2, [r3, #20]
 8003cd6:	e016      	b.n	8003d06 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	0c5b      	lsrs	r3, r3, #17
 8003cdc:	f003 030f 	and.w	r3, r3, #15
 8003ce0:	2b06      	cmp	r3, #6
 8003ce2:	d110      	bne.n	8003d06 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003cea:	2208      	movs	r2, #8
 8003cec:	4619      	mov	r1, r3
 8003cee:	6a38      	ldr	r0, [r7, #32]
 8003cf0:	f002 feaa 	bl	8006a48 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	695a      	ldr	r2, [r3, #20]
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	091b      	lsrs	r3, r3, #4
 8003cfc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d00:	441a      	add	r2, r3
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	699a      	ldr	r2, [r3, #24]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f042 0210 	orr.w	r2, r2, #16
 8003d14:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f003 f828 	bl	8006d70 <USB_ReadInterrupts>
 8003d20:	4603      	mov	r3, r0
 8003d22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d26:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003d2a:	f040 80a7 	bne.w	8003e7c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f003 f82d 	bl	8006d96 <USB_ReadDevAllOutEpInterrupt>
 8003d3c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003d3e:	e099      	b.n	8003e74 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f000 808e 	beq.w	8003e68 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d52:	b2d2      	uxtb	r2, r2
 8003d54:	4611      	mov	r1, r2
 8003d56:	4618      	mov	r0, r3
 8003d58:	f003 f851 	bl	8006dfe <USB_ReadDevOutEPInterrupt>
 8003d5c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00c      	beq.n	8003d82 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6a:	015a      	lsls	r2, r3, #5
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	4413      	add	r3, r2
 8003d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d74:	461a      	mov	r2, r3
 8003d76:	2301      	movs	r3, #1
 8003d78:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003d7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 fea1 	bl	8004ac4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	f003 0308 	and.w	r3, r3, #8
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00c      	beq.n	8003da6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8e:	015a      	lsls	r2, r3, #5
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	4413      	add	r3, r2
 8003d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d98:	461a      	mov	r2, r3
 8003d9a:	2308      	movs	r3, #8
 8003d9c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003d9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 ff77 	bl	8004c94 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	f003 0310 	and.w	r3, r3, #16
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d008      	beq.n	8003dc2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db2:	015a      	lsls	r2, r3, #5
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	4413      	add	r3, r2
 8003db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	2310      	movs	r3, #16
 8003dc0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d030      	beq.n	8003e2e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003dcc:	6a3b      	ldr	r3, [r7, #32]
 8003dce:	695b      	ldr	r3, [r3, #20]
 8003dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd4:	2b80      	cmp	r3, #128	; 0x80
 8003dd6:	d109      	bne.n	8003dec <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	69fa      	ldr	r2, [r7, #28]
 8003de2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003de6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dea:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dee:	4613      	mov	r3, r2
 8003df0:	00db      	lsls	r3, r3, #3
 8003df2:	4413      	add	r3, r2
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	3304      	adds	r3, #4
 8003e00:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	78db      	ldrb	r3, [r3, #3]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d108      	bne.n	8003e1c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	4619      	mov	r1, r3
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f005 fa36 	bl	8009288 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1e:	015a      	lsls	r2, r3, #5
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	4413      	add	r3, r2
 8003e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e28:	461a      	mov	r2, r3
 8003e2a:	2302      	movs	r3, #2
 8003e2c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	f003 0320 	and.w	r3, r3, #32
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d008      	beq.n	8003e4a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3a:	015a      	lsls	r2, r3, #5
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	4413      	add	r3, r2
 8003e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e44:	461a      	mov	r2, r3
 8003e46:	2320      	movs	r3, #32
 8003e48:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d009      	beq.n	8003e68 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e56:	015a      	lsls	r2, r3, #5
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e60:	461a      	mov	r2, r3
 8003e62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e66:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e70:	085b      	lsrs	r3, r3, #1
 8003e72:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f47f af62 	bne.w	8003d40 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4618      	mov	r0, r3
 8003e82:	f002 ff75 	bl	8006d70 <USB_ReadInterrupts>
 8003e86:	4603      	mov	r3, r0
 8003e88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e8c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e90:	f040 80db 	bne.w	800404a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f002 ff96 	bl	8006dca <USB_ReadDevAllInEpInterrupt>
 8003e9e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003ea4:	e0cd      	b.n	8004042 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f000 80c2 	beq.w	8004036 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eb8:	b2d2      	uxtb	r2, r2
 8003eba:	4611      	mov	r1, r2
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f002 ffbc 	bl	8006e3a <USB_ReadDevInEPInterrupt>
 8003ec2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d057      	beq.n	8003f7e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	f003 030f 	and.w	r3, r3, #15
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eda:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ee2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	43db      	mvns	r3, r3
 8003ee8:	69f9      	ldr	r1, [r7, #28]
 8003eea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003eee:	4013      	ands	r3, r2
 8003ef0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef4:	015a      	lsls	r2, r3, #5
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	4413      	add	r3, r2
 8003efa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003efe:	461a      	mov	r2, r3
 8003f00:	2301      	movs	r3, #1
 8003f02:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	799b      	ldrb	r3, [r3, #6]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d132      	bne.n	8003f72 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003f0c:	6879      	ldr	r1, [r7, #4]
 8003f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f10:	4613      	mov	r3, r2
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	4413      	add	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	440b      	add	r3, r1
 8003f1a:	3320      	adds	r3, #32
 8003f1c:	6819      	ldr	r1, [r3, #0]
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f22:	4613      	mov	r3, r2
 8003f24:	00db      	lsls	r3, r3, #3
 8003f26:	4413      	add	r3, r2
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	4403      	add	r3, r0
 8003f2c:	331c      	adds	r3, #28
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4419      	add	r1, r3
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f36:	4613      	mov	r3, r2
 8003f38:	00db      	lsls	r3, r3, #3
 8003f3a:	4413      	add	r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	4403      	add	r3, r0
 8003f40:	3320      	adds	r3, #32
 8003f42:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d113      	bne.n	8003f72 <HAL_PCD_IRQHandler+0x3a2>
 8003f4a:	6879      	ldr	r1, [r7, #4]
 8003f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f4e:	4613      	mov	r3, r2
 8003f50:	00db      	lsls	r3, r3, #3
 8003f52:	4413      	add	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	440b      	add	r3, r1
 8003f58:	3324      	adds	r3, #36	; 0x24
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d108      	bne.n	8003f72 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6818      	ldr	r0, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	2101      	movs	r1, #1
 8003f6e:	f002 ffc3 	bl	8006ef8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	4619      	mov	r1, r3
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f005 f90a 	bl	8009192 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	f003 0308 	and.w	r3, r3, #8
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d008      	beq.n	8003f9a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8a:	015a      	lsls	r2, r3, #5
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	4413      	add	r3, r2
 8003f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f94:	461a      	mov	r2, r3
 8003f96:	2308      	movs	r3, #8
 8003f98:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	f003 0310 	and.w	r3, r3, #16
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d008      	beq.n	8003fb6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa6:	015a      	lsls	r2, r3, #5
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	4413      	add	r3, r2
 8003fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	2310      	movs	r3, #16
 8003fb4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d008      	beq.n	8003fd2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc2:	015a      	lsls	r2, r3, #5
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fcc:	461a      	mov	r2, r3
 8003fce:	2340      	movs	r3, #64	; 0x40
 8003fd0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d023      	beq.n	8004024 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003fdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003fde:	6a38      	ldr	r0, [r7, #32]
 8003fe0:	f001 ffb0 	bl	8005f44 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	00db      	lsls	r3, r3, #3
 8003fea:	4413      	add	r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	3310      	adds	r3, #16
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	3304      	adds	r3, #4
 8003ff6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	78db      	ldrb	r3, [r3, #3]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d108      	bne.n	8004012 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	2200      	movs	r2, #0
 8004004:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004008:	b2db      	uxtb	r3, r3
 800400a:	4619      	mov	r1, r3
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f005 f94d 	bl	80092ac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004014:	015a      	lsls	r2, r3, #5
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	4413      	add	r3, r2
 800401a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800401e:	461a      	mov	r2, r3
 8004020:	2302      	movs	r3, #2
 8004022:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800402e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 fcbb 	bl	80049ac <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004038:	3301      	adds	r3, #1
 800403a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800403c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403e:	085b      	lsrs	r3, r3, #1
 8004040:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004044:	2b00      	cmp	r3, #0
 8004046:	f47f af2e 	bne.w	8003ea6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4618      	mov	r0, r3
 8004050:	f002 fe8e 	bl	8006d70 <USB_ReadInterrupts>
 8004054:	4603      	mov	r3, r0
 8004056:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800405a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800405e:	d122      	bne.n	80040a6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	69fa      	ldr	r2, [r7, #28]
 800406a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800406e:	f023 0301 	bic.w	r3, r3, #1
 8004072:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 800407a:	2b01      	cmp	r3, #1
 800407c:	d108      	bne.n	8004090 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004086:	2100      	movs	r1, #0
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 fea1 	bl	8004dd0 <HAL_PCDEx_LPM_Callback>
 800408e:	e002      	b.n	8004096 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f005 f8eb 	bl	800926c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	695a      	ldr	r2, [r3, #20]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80040a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f002 fe60 	bl	8006d70 <USB_ReadInterrupts>
 80040b0:	4603      	mov	r3, r0
 80040b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040ba:	d112      	bne.n	80040e2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d102      	bne.n	80040d2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f005 f8a7 	bl	8009220 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	695a      	ldr	r2, [r3, #20]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80040e0:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f002 fe42 	bl	8006d70 <USB_ReadInterrupts>
 80040ec:	4603      	mov	r3, r0
 80040ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040f6:	f040 80b7 	bne.w	8004268 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	69fa      	ldr	r2, [r7, #28]
 8004104:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004108:	f023 0301 	bic.w	r3, r3, #1
 800410c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2110      	movs	r1, #16
 8004114:	4618      	mov	r0, r3
 8004116:	f001 ff15 	bl	8005f44 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800411a:	2300      	movs	r3, #0
 800411c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800411e:	e046      	b.n	80041ae <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004122:	015a      	lsls	r2, r3, #5
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	4413      	add	r3, r2
 8004128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800412c:	461a      	mov	r2, r3
 800412e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004132:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004136:	015a      	lsls	r2, r3, #5
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	4413      	add	r3, r2
 800413c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004144:	0151      	lsls	r1, r2, #5
 8004146:	69fa      	ldr	r2, [r7, #28]
 8004148:	440a      	add	r2, r1
 800414a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800414e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004152:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004156:	015a      	lsls	r2, r3, #5
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	4413      	add	r3, r2
 800415c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004160:	461a      	mov	r2, r3
 8004162:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004166:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800416a:	015a      	lsls	r2, r3, #5
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	4413      	add	r3, r2
 8004170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004178:	0151      	lsls	r1, r2, #5
 800417a:	69fa      	ldr	r2, [r7, #28]
 800417c:	440a      	add	r2, r1
 800417e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004182:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004186:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800418a:	015a      	lsls	r2, r3, #5
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	4413      	add	r3, r2
 8004190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004198:	0151      	lsls	r1, r2, #5
 800419a:	69fa      	ldr	r2, [r7, #28]
 800419c:	440a      	add	r2, r1
 800419e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80041a6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041aa:	3301      	adds	r3, #1
 80041ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	791b      	ldrb	r3, [r3, #4]
 80041b2:	461a      	mov	r2, r3
 80041b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d3b2      	bcc.n	8004120 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041c0:	69db      	ldr	r3, [r3, #28]
 80041c2:	69fa      	ldr	r2, [r7, #28]
 80041c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041c8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80041cc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	7bdb      	ldrb	r3, [r3, #15]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d016      	beq.n	8004204 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041e0:	69fa      	ldr	r2, [r7, #28]
 80041e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041e6:	f043 030b 	orr.w	r3, r3, #11
 80041ea:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f6:	69fa      	ldr	r2, [r7, #28]
 80041f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041fc:	f043 030b 	orr.w	r3, r3, #11
 8004200:	6453      	str	r3, [r2, #68]	; 0x44
 8004202:	e015      	b.n	8004230 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	69fa      	ldr	r2, [r7, #28]
 800420e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004212:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004216:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800421a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	69fa      	ldr	r2, [r7, #28]
 8004226:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800422a:	f043 030b 	orr.w	r3, r3, #11
 800422e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	69fa      	ldr	r2, [r7, #28]
 800423a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800423e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004242:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6818      	ldr	r0, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004252:	461a      	mov	r2, r3
 8004254:	f002 fe50 	bl	8006ef8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	695a      	ldr	r2, [r3, #20]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004266:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4618      	mov	r0, r3
 800426e:	f002 fd7f 	bl	8006d70 <USB_ReadInterrupts>
 8004272:	4603      	mov	r3, r0
 8004274:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004278:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800427c:	d123      	bne.n	80042c6 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4618      	mov	r0, r3
 8004284:	f002 fe15 	bl	8006eb2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4618      	mov	r0, r3
 800428e:	f001 fed2 	bl	8006036 <USB_GetDevSpeed>
 8004292:	4603      	mov	r3, r0
 8004294:	461a      	mov	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681c      	ldr	r4, [r3, #0]
 800429e:	f001 fa07 	bl	80056b0 <HAL_RCC_GetHCLKFreq>
 80042a2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80042a8:	461a      	mov	r2, r3
 80042aa:	4620      	mov	r0, r4
 80042ac:	f001 fbd6 	bl	8005a5c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f004 ff96 	bl	80091e2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	695a      	ldr	r2, [r3, #20]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80042c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4618      	mov	r0, r3
 80042cc:	f002 fd50 	bl	8006d70 <USB_ReadInterrupts>
 80042d0:	4603      	mov	r3, r0
 80042d2:	f003 0308 	and.w	r3, r3, #8
 80042d6:	2b08      	cmp	r3, #8
 80042d8:	d10a      	bne.n	80042f0 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f004 ff73 	bl	80091c6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	695a      	ldr	r2, [r3, #20]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f002 0208 	and.w	r2, r2, #8
 80042ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f002 fd3b 	bl	8006d70 <USB_ReadInterrupts>
 80042fa:	4603      	mov	r3, r0
 80042fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004300:	2b80      	cmp	r3, #128	; 0x80
 8004302:	d123      	bne.n	800434c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004304:	6a3b      	ldr	r3, [r7, #32]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800430c:	6a3b      	ldr	r3, [r7, #32]
 800430e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004310:	2301      	movs	r3, #1
 8004312:	627b      	str	r3, [r7, #36]	; 0x24
 8004314:	e014      	b.n	8004340 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004316:	6879      	ldr	r1, [r7, #4]
 8004318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800431a:	4613      	mov	r3, r2
 800431c:	00db      	lsls	r3, r3, #3
 800431e:	4413      	add	r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	440b      	add	r3, r1
 8004324:	f203 2357 	addw	r3, r3, #599	; 0x257
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d105      	bne.n	800433a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800432e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004330:	b2db      	uxtb	r3, r3
 8004332:	4619      	mov	r1, r3
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 fb08 	bl	800494a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800433a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433c:	3301      	adds	r3, #1
 800433e:	627b      	str	r3, [r7, #36]	; 0x24
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	791b      	ldrb	r3, [r3, #4]
 8004344:	461a      	mov	r2, r3
 8004346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004348:	4293      	cmp	r3, r2
 800434a:	d3e4      	bcc.n	8004316 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4618      	mov	r0, r3
 8004352:	f002 fd0d 	bl	8006d70 <USB_ReadInterrupts>
 8004356:	4603      	mov	r3, r0
 8004358:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800435c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004360:	d13c      	bne.n	80043dc <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004362:	2301      	movs	r3, #1
 8004364:	627b      	str	r3, [r7, #36]	; 0x24
 8004366:	e02b      	b.n	80043c0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436a:	015a      	lsls	r2, r3, #5
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	4413      	add	r3, r2
 8004370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004378:	6879      	ldr	r1, [r7, #4]
 800437a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800437c:	4613      	mov	r3, r2
 800437e:	00db      	lsls	r3, r3, #3
 8004380:	4413      	add	r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	440b      	add	r3, r1
 8004386:	3318      	adds	r3, #24
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d115      	bne.n	80043ba <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800438e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004390:	2b00      	cmp	r3, #0
 8004392:	da12      	bge.n	80043ba <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004394:	6879      	ldr	r1, [r7, #4]
 8004396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004398:	4613      	mov	r3, r2
 800439a:	00db      	lsls	r3, r3, #3
 800439c:	4413      	add	r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	440b      	add	r3, r1
 80043a2:	3317      	adds	r3, #23
 80043a4:	2201      	movs	r2, #1
 80043a6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80043a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	4619      	mov	r1, r3
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 fac8 	bl	800494a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043bc:	3301      	adds	r3, #1
 80043be:	627b      	str	r3, [r7, #36]	; 0x24
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	791b      	ldrb	r3, [r3, #4]
 80043c4:	461a      	mov	r2, r3
 80043c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d3cd      	bcc.n	8004368 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	695a      	ldr	r2, [r3, #20]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80043da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4618      	mov	r0, r3
 80043e2:	f002 fcc5 	bl	8006d70 <USB_ReadInterrupts>
 80043e6:	4603      	mov	r3, r0
 80043e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043f0:	d156      	bne.n	80044a0 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043f2:	2301      	movs	r3, #1
 80043f4:	627b      	str	r3, [r7, #36]	; 0x24
 80043f6:	e045      	b.n	8004484 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80043f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fa:	015a      	lsls	r2, r3, #5
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	4413      	add	r3, r2
 8004400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004408:	6879      	ldr	r1, [r7, #4]
 800440a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800440c:	4613      	mov	r3, r2
 800440e:	00db      	lsls	r3, r3, #3
 8004410:	4413      	add	r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	440b      	add	r3, r1
 8004416:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d12e      	bne.n	800447e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004420:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004422:	2b00      	cmp	r3, #0
 8004424:	da2b      	bge.n	800447e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8004432:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004436:	429a      	cmp	r2, r3
 8004438:	d121      	bne.n	800447e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800443a:	6879      	ldr	r1, [r7, #4]
 800443c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800443e:	4613      	mov	r3, r2
 8004440:	00db      	lsls	r3, r3, #3
 8004442:	4413      	add	r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	440b      	add	r3, r1
 8004448:	f203 2357 	addw	r3, r3, #599	; 0x257
 800444c:	2201      	movs	r2, #1
 800444e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004450:	6a3b      	ldr	r3, [r7, #32]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004458:	6a3b      	ldr	r3, [r7, #32]
 800445a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800445c:	6a3b      	ldr	r3, [r7, #32]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10a      	bne.n	800447e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	69fa      	ldr	r2, [r7, #28]
 8004472:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004476:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800447a:	6053      	str	r3, [r2, #4]
            break;
 800447c:	e008      	b.n	8004490 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800447e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004480:	3301      	adds	r3, #1
 8004482:	627b      	str	r3, [r7, #36]	; 0x24
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	791b      	ldrb	r3, [r3, #4]
 8004488:	461a      	mov	r2, r3
 800448a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448c:	4293      	cmp	r3, r2
 800448e:	d3b3      	bcc.n	80043f8 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	695a      	ldr	r2, [r3, #20]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800449e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4618      	mov	r0, r3
 80044a6:	f002 fc63 	bl	8006d70 <USB_ReadInterrupts>
 80044aa:	4603      	mov	r3, r0
 80044ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80044b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044b4:	d10a      	bne.n	80044cc <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f004 ff0a 	bl	80092d0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	695a      	ldr	r2, [r3, #20]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80044ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4618      	mov	r0, r3
 80044d2:	f002 fc4d 	bl	8006d70 <USB_ReadInterrupts>
 80044d6:	4603      	mov	r3, r0
 80044d8:	f003 0304 	and.w	r3, r3, #4
 80044dc:	2b04      	cmp	r3, #4
 80044de:	d115      	bne.n	800450c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	f003 0304 	and.w	r3, r3, #4
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d002      	beq.n	80044f8 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f004 fefa 	bl	80092ec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6859      	ldr	r1, [r3, #4]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	69ba      	ldr	r2, [r7, #24]
 8004504:	430a      	orrs	r2, r1
 8004506:	605a      	str	r2, [r3, #4]
 8004508:	e000      	b.n	800450c <HAL_PCD_IRQHandler+0x93c>
      return;
 800450a:	bf00      	nop
    }
  }
}
 800450c:	3734      	adds	r7, #52	; 0x34
 800450e:	46bd      	mov	sp, r7
 8004510:	bd90      	pop	{r4, r7, pc}

08004512 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004512:	b580      	push	{r7, lr}
 8004514:	b082      	sub	sp, #8
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
 800451a:	460b      	mov	r3, r1
 800451c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004524:	2b01      	cmp	r3, #1
 8004526:	d101      	bne.n	800452c <HAL_PCD_SetAddress+0x1a>
 8004528:	2302      	movs	r3, #2
 800452a:	e012      	b.n	8004552 <HAL_PCD_SetAddress+0x40>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	78fa      	ldrb	r2, [r7, #3]
 8004538:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	78fa      	ldrb	r2, [r7, #3]
 8004540:	4611      	mov	r1, r2
 8004542:	4618      	mov	r0, r3
 8004544:	f002 fbac 	bl	8006ca0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3708      	adds	r7, #8
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	b084      	sub	sp, #16
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
 8004562:	4608      	mov	r0, r1
 8004564:	4611      	mov	r1, r2
 8004566:	461a      	mov	r2, r3
 8004568:	4603      	mov	r3, r0
 800456a:	70fb      	strb	r3, [r7, #3]
 800456c:	460b      	mov	r3, r1
 800456e:	803b      	strh	r3, [r7, #0]
 8004570:	4613      	mov	r3, r2
 8004572:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004574:	2300      	movs	r3, #0
 8004576:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004578:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800457c:	2b00      	cmp	r3, #0
 800457e:	da0f      	bge.n	80045a0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004580:	78fb      	ldrb	r3, [r7, #3]
 8004582:	f003 020f 	and.w	r2, r3, #15
 8004586:	4613      	mov	r3, r2
 8004588:	00db      	lsls	r3, r3, #3
 800458a:	4413      	add	r3, r2
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	3310      	adds	r3, #16
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	4413      	add	r3, r2
 8004594:	3304      	adds	r3, #4
 8004596:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2201      	movs	r2, #1
 800459c:	705a      	strb	r2, [r3, #1]
 800459e:	e00f      	b.n	80045c0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045a0:	78fb      	ldrb	r3, [r7, #3]
 80045a2:	f003 020f 	and.w	r2, r3, #15
 80045a6:	4613      	mov	r3, r2
 80045a8:	00db      	lsls	r3, r3, #3
 80045aa:	4413      	add	r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	4413      	add	r3, r2
 80045b6:	3304      	adds	r3, #4
 80045b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80045c0:	78fb      	ldrb	r3, [r7, #3]
 80045c2:	f003 030f 	and.w	r3, r3, #15
 80045c6:	b2da      	uxtb	r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80045cc:	883a      	ldrh	r2, [r7, #0]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	78ba      	ldrb	r2, [r7, #2]
 80045d6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	785b      	ldrb	r3, [r3, #1]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d004      	beq.n	80045ea <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	b29a      	uxth	r2, r3
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80045ea:	78bb      	ldrb	r3, [r7, #2]
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d102      	bne.n	80045f6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d101      	bne.n	8004604 <HAL_PCD_EP_Open+0xaa>
 8004600:	2302      	movs	r3, #2
 8004602:	e00e      	b.n	8004622 <HAL_PCD_EP_Open+0xc8>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68f9      	ldr	r1, [r7, #12]
 8004612:	4618      	mov	r0, r3
 8004614:	f001 fd34 	bl	8006080 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8004620:	7afb      	ldrb	r3, [r7, #11]
}
 8004622:	4618      	mov	r0, r3
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}

0800462a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	b084      	sub	sp, #16
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
 8004632:	460b      	mov	r3, r1
 8004634:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004636:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800463a:	2b00      	cmp	r3, #0
 800463c:	da0f      	bge.n	800465e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800463e:	78fb      	ldrb	r3, [r7, #3]
 8004640:	f003 020f 	and.w	r2, r3, #15
 8004644:	4613      	mov	r3, r2
 8004646:	00db      	lsls	r3, r3, #3
 8004648:	4413      	add	r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	3310      	adds	r3, #16
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	4413      	add	r3, r2
 8004652:	3304      	adds	r3, #4
 8004654:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2201      	movs	r2, #1
 800465a:	705a      	strb	r2, [r3, #1]
 800465c:	e00f      	b.n	800467e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800465e:	78fb      	ldrb	r3, [r7, #3]
 8004660:	f003 020f 	and.w	r2, r3, #15
 8004664:	4613      	mov	r3, r2
 8004666:	00db      	lsls	r3, r3, #3
 8004668:	4413      	add	r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	4413      	add	r3, r2
 8004674:	3304      	adds	r3, #4
 8004676:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800467e:	78fb      	ldrb	r3, [r7, #3]
 8004680:	f003 030f 	and.w	r3, r3, #15
 8004684:	b2da      	uxtb	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004690:	2b01      	cmp	r3, #1
 8004692:	d101      	bne.n	8004698 <HAL_PCD_EP_Close+0x6e>
 8004694:	2302      	movs	r3, #2
 8004696:	e00e      	b.n	80046b6 <HAL_PCD_EP_Close+0x8c>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68f9      	ldr	r1, [r7, #12]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f001 fd72 	bl	8006190 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	b086      	sub	sp, #24
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	60f8      	str	r0, [r7, #12]
 80046c6:	607a      	str	r2, [r7, #4]
 80046c8:	603b      	str	r3, [r7, #0]
 80046ca:	460b      	mov	r3, r1
 80046cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046ce:	7afb      	ldrb	r3, [r7, #11]
 80046d0:	f003 020f 	and.w	r2, r3, #15
 80046d4:	4613      	mov	r3, r2
 80046d6:	00db      	lsls	r3, r3, #3
 80046d8:	4413      	add	r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	4413      	add	r3, r2
 80046e4:	3304      	adds	r3, #4
 80046e6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	683a      	ldr	r2, [r7, #0]
 80046f2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	2200      	movs	r2, #0
 80046f8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	2200      	movs	r2, #0
 80046fe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004700:	7afb      	ldrb	r3, [r7, #11]
 8004702:	f003 030f 	and.w	r3, r3, #15
 8004706:	b2da      	uxtb	r2, r3
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	799b      	ldrb	r3, [r3, #6]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d102      	bne.n	800471a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6818      	ldr	r0, [r3, #0]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	799b      	ldrb	r3, [r3, #6]
 8004722:	461a      	mov	r2, r3
 8004724:	6979      	ldr	r1, [r7, #20]
 8004726:	f001 fe0f 	bl	8006348 <USB_EPStartXfer>

  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3718      	adds	r7, #24
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	460b      	mov	r3, r1
 800473e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004740:	78fb      	ldrb	r3, [r7, #3]
 8004742:	f003 020f 	and.w	r2, r3, #15
 8004746:	6879      	ldr	r1, [r7, #4]
 8004748:	4613      	mov	r3, r2
 800474a:	00db      	lsls	r3, r3, #3
 800474c:	4413      	add	r3, r2
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	440b      	add	r3, r1
 8004752:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8004756:	681b      	ldr	r3, [r3, #0]
}
 8004758:	4618      	mov	r0, r3
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b086      	sub	sp, #24
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	607a      	str	r2, [r7, #4]
 800476e:	603b      	str	r3, [r7, #0]
 8004770:	460b      	mov	r3, r1
 8004772:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004774:	7afb      	ldrb	r3, [r7, #11]
 8004776:	f003 020f 	and.w	r2, r3, #15
 800477a:	4613      	mov	r3, r2
 800477c:	00db      	lsls	r3, r3, #3
 800477e:	4413      	add	r3, r2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	3310      	adds	r3, #16
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	4413      	add	r3, r2
 8004788:	3304      	adds	r3, #4
 800478a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	683a      	ldr	r2, [r7, #0]
 8004796:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	2200      	movs	r2, #0
 800479c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	2201      	movs	r2, #1
 80047a2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047a4:	7afb      	ldrb	r3, [r7, #11]
 80047a6:	f003 030f 	and.w	r3, r3, #15
 80047aa:	b2da      	uxtb	r2, r3
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	799b      	ldrb	r3, [r3, #6]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d102      	bne.n	80047be <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6818      	ldr	r0, [r3, #0]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	799b      	ldrb	r3, [r3, #6]
 80047c6:	461a      	mov	r2, r3
 80047c8:	6979      	ldr	r1, [r7, #20]
 80047ca:	f001 fdbd 	bl	8006348 <USB_EPStartXfer>

  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3718      	adds	r7, #24
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	460b      	mov	r3, r1
 80047e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80047e4:	78fb      	ldrb	r3, [r7, #3]
 80047e6:	f003 030f 	and.w	r3, r3, #15
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	7912      	ldrb	r2, [r2, #4]
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d901      	bls.n	80047f6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e04f      	b.n	8004896 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80047f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	da0f      	bge.n	800481e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047fe:	78fb      	ldrb	r3, [r7, #3]
 8004800:	f003 020f 	and.w	r2, r3, #15
 8004804:	4613      	mov	r3, r2
 8004806:	00db      	lsls	r3, r3, #3
 8004808:	4413      	add	r3, r2
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	3310      	adds	r3, #16
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	4413      	add	r3, r2
 8004812:	3304      	adds	r3, #4
 8004814:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2201      	movs	r2, #1
 800481a:	705a      	strb	r2, [r3, #1]
 800481c:	e00d      	b.n	800483a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800481e:	78fa      	ldrb	r2, [r7, #3]
 8004820:	4613      	mov	r3, r2
 8004822:	00db      	lsls	r3, r3, #3
 8004824:	4413      	add	r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	4413      	add	r3, r2
 8004830:	3304      	adds	r3, #4
 8004832:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2201      	movs	r2, #1
 800483e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004840:	78fb      	ldrb	r3, [r7, #3]
 8004842:	f003 030f 	and.w	r3, r3, #15
 8004846:	b2da      	uxtb	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004852:	2b01      	cmp	r3, #1
 8004854:	d101      	bne.n	800485a <HAL_PCD_EP_SetStall+0x82>
 8004856:	2302      	movs	r3, #2
 8004858:	e01d      	b.n	8004896 <HAL_PCD_EP_SetStall+0xbe>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68f9      	ldr	r1, [r7, #12]
 8004868:	4618      	mov	r0, r3
 800486a:	f002 f945 	bl	8006af8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800486e:	78fb      	ldrb	r3, [r7, #3]
 8004870:	f003 030f 	and.w	r3, r3, #15
 8004874:	2b00      	cmp	r3, #0
 8004876:	d109      	bne.n	800488c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6818      	ldr	r0, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	7999      	ldrb	r1, [r3, #6]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004886:	461a      	mov	r2, r3
 8004888:	f002 fb36 	bl	8006ef8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3710      	adds	r7, #16
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800489e:	b580      	push	{r7, lr}
 80048a0:	b084      	sub	sp, #16
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
 80048a6:	460b      	mov	r3, r1
 80048a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80048aa:	78fb      	ldrb	r3, [r7, #3]
 80048ac:	f003 030f 	and.w	r3, r3, #15
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	7912      	ldrb	r2, [r2, #4]
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d901      	bls.n	80048bc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e042      	b.n	8004942 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80048bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	da0f      	bge.n	80048e4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048c4:	78fb      	ldrb	r3, [r7, #3]
 80048c6:	f003 020f 	and.w	r2, r3, #15
 80048ca:	4613      	mov	r3, r2
 80048cc:	00db      	lsls	r3, r3, #3
 80048ce:	4413      	add	r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	3310      	adds	r3, #16
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	4413      	add	r3, r2
 80048d8:	3304      	adds	r3, #4
 80048da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2201      	movs	r2, #1
 80048e0:	705a      	strb	r2, [r3, #1]
 80048e2:	e00f      	b.n	8004904 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048e4:	78fb      	ldrb	r3, [r7, #3]
 80048e6:	f003 020f 	and.w	r2, r3, #15
 80048ea:	4613      	mov	r3, r2
 80048ec:	00db      	lsls	r3, r3, #3
 80048ee:	4413      	add	r3, r2
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	4413      	add	r3, r2
 80048fa:	3304      	adds	r3, #4
 80048fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2200      	movs	r2, #0
 8004908:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800490a:	78fb      	ldrb	r3, [r7, #3]
 800490c:	f003 030f 	and.w	r3, r3, #15
 8004910:	b2da      	uxtb	r2, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800491c:	2b01      	cmp	r3, #1
 800491e:	d101      	bne.n	8004924 <HAL_PCD_EP_ClrStall+0x86>
 8004920:	2302      	movs	r3, #2
 8004922:	e00e      	b.n	8004942 <HAL_PCD_EP_ClrStall+0xa4>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68f9      	ldr	r1, [r7, #12]
 8004932:	4618      	mov	r0, r3
 8004934:	f002 f94e 	bl	8006bd4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3710      	adds	r7, #16
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}

0800494a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800494a:	b580      	push	{r7, lr}
 800494c:	b084      	sub	sp, #16
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
 8004952:	460b      	mov	r3, r1
 8004954:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004956:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800495a:	2b00      	cmp	r3, #0
 800495c:	da0c      	bge.n	8004978 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800495e:	78fb      	ldrb	r3, [r7, #3]
 8004960:	f003 020f 	and.w	r2, r3, #15
 8004964:	4613      	mov	r3, r2
 8004966:	00db      	lsls	r3, r3, #3
 8004968:	4413      	add	r3, r2
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	3310      	adds	r3, #16
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	4413      	add	r3, r2
 8004972:	3304      	adds	r3, #4
 8004974:	60fb      	str	r3, [r7, #12]
 8004976:	e00c      	b.n	8004992 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004978:	78fb      	ldrb	r3, [r7, #3]
 800497a:	f003 020f 	and.w	r2, r3, #15
 800497e:	4613      	mov	r3, r2
 8004980:	00db      	lsls	r3, r3, #3
 8004982:	4413      	add	r3, r2
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	4413      	add	r3, r2
 800498e:	3304      	adds	r3, #4
 8004990:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68f9      	ldr	r1, [r7, #12]
 8004998:	4618      	mov	r0, r3
 800499a:	f001 ff6d 	bl	8006878 <USB_EPStopXfer>
 800499e:	4603      	mov	r3, r0
 80049a0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80049a2:	7afb      	ldrb	r3, [r7, #11]
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3710      	adds	r7, #16
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b08a      	sub	sp, #40	; 0x28
 80049b0:	af02      	add	r7, sp, #8
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80049c0:	683a      	ldr	r2, [r7, #0]
 80049c2:	4613      	mov	r3, r2
 80049c4:	00db      	lsls	r3, r3, #3
 80049c6:	4413      	add	r3, r2
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	3310      	adds	r3, #16
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	4413      	add	r3, r2
 80049d0:	3304      	adds	r3, #4
 80049d2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	695a      	ldr	r2, [r3, #20]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d901      	bls.n	80049e4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e06b      	b.n	8004abc <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	691a      	ldr	r2, [r3, #16]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	695b      	ldr	r3, [r3, #20]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	69fa      	ldr	r2, [r7, #28]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d902      	bls.n	8004a00 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	3303      	adds	r3, #3
 8004a04:	089b      	lsrs	r3, r3, #2
 8004a06:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004a08:	e02a      	b.n	8004a60 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	691a      	ldr	r2, [r3, #16]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	69fa      	ldr	r2, [r7, #28]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d902      	bls.n	8004a26 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	3303      	adds	r3, #3
 8004a2a:	089b      	lsrs	r3, r3, #2
 8004a2c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	68d9      	ldr	r1, [r3, #12]
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	b2da      	uxtb	r2, r3
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004a3e:	9300      	str	r3, [sp, #0]
 8004a40:	4603      	mov	r3, r0
 8004a42:	6978      	ldr	r0, [r7, #20]
 8004a44:	f001 ffc2 	bl	80069cc <USB_WritePacket>

    ep->xfer_buff  += len;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	68da      	ldr	r2, [r3, #12]
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	441a      	add	r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	695a      	ldr	r2, [r3, #20]
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	441a      	add	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	015a      	lsls	r2, r3, #5
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	4413      	add	r3, r2
 8004a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004a70:	69ba      	ldr	r2, [r7, #24]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d809      	bhi.n	8004a8a <PCD_WriteEmptyTxFifo+0xde>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	695a      	ldr	r2, [r3, #20]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d203      	bcs.n	8004a8a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1bf      	bne.n	8004a0a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	691a      	ldr	r2, [r3, #16]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d811      	bhi.n	8004aba <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	f003 030f 	and.w	r3, r3, #15
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	43db      	mvns	r3, r3
 8004ab0:	6939      	ldr	r1, [r7, #16]
 8004ab2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3720      	adds	r7, #32
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b088      	sub	sp, #32
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	333c      	adds	r3, #60	; 0x3c
 8004adc:	3304      	adds	r3, #4
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	015a      	lsls	r2, r3, #5
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	4413      	add	r3, r2
 8004aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	799b      	ldrb	r3, [r3, #6]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d17b      	bne.n	8004bf2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	f003 0308 	and.w	r3, r3, #8
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d015      	beq.n	8004b30 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	4a61      	ldr	r2, [pc, #388]	; (8004c8c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	f240 80b9 	bls.w	8004c80 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 80b3 	beq.w	8004c80 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	015a      	lsls	r2, r3, #5
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	4413      	add	r3, r2
 8004b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b26:	461a      	mov	r2, r3
 8004b28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b2c:	6093      	str	r3, [r2, #8]
 8004b2e:	e0a7      	b.n	8004c80 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	f003 0320 	and.w	r3, r3, #32
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d009      	beq.n	8004b4e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	015a      	lsls	r2, r3, #5
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	4413      	add	r3, r2
 8004b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b46:	461a      	mov	r2, r3
 8004b48:	2320      	movs	r3, #32
 8004b4a:	6093      	str	r3, [r2, #8]
 8004b4c:	e098      	b.n	8004c80 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f040 8093 	bne.w	8004c80 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	4a4b      	ldr	r2, [pc, #300]	; (8004c8c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d90f      	bls.n	8004b82 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00a      	beq.n	8004b82 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	015a      	lsls	r2, r3, #5
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	4413      	add	r3, r2
 8004b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b78:	461a      	mov	r2, r3
 8004b7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b7e:	6093      	str	r3, [r2, #8]
 8004b80:	e07e      	b.n	8004c80 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004b82:	683a      	ldr	r2, [r7, #0]
 8004b84:	4613      	mov	r3, r2
 8004b86:	00db      	lsls	r3, r3, #3
 8004b88:	4413      	add	r3, r2
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	4413      	add	r3, r2
 8004b94:	3304      	adds	r3, #4
 8004b96:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6a1a      	ldr	r2, [r3, #32]
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	0159      	lsls	r1, r3, #5
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	440b      	add	r3, r1
 8004ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bae:	1ad2      	subs	r2, r2, r3
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d114      	bne.n	8004be4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d109      	bne.n	8004bd6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6818      	ldr	r0, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004bcc:	461a      	mov	r2, r3
 8004bce:	2101      	movs	r1, #1
 8004bd0:	f002 f992 	bl	8006ef8 <USB_EP0_OutStart>
 8004bd4:	e006      	b.n	8004be4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	68da      	ldr	r2, [r3, #12]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	695b      	ldr	r3, [r3, #20]
 8004bde:	441a      	add	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	4619      	mov	r1, r3
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f004 fab6 	bl	800915c <HAL_PCD_DataOutStageCallback>
 8004bf0:	e046      	b.n	8004c80 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	4a26      	ldr	r2, [pc, #152]	; (8004c90 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d124      	bne.n	8004c44 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00a      	beq.n	8004c1a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	015a      	lsls	r2, r3, #5
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c10:	461a      	mov	r2, r3
 8004c12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c16:	6093      	str	r3, [r2, #8]
 8004c18:	e032      	b.n	8004c80 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	f003 0320 	and.w	r3, r3, #32
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d008      	beq.n	8004c36 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	015a      	lsls	r2, r3, #5
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c30:	461a      	mov	r2, r3
 8004c32:	2320      	movs	r3, #32
 8004c34:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f004 fa8d 	bl	800915c <HAL_PCD_DataOutStageCallback>
 8004c42:	e01d      	b.n	8004c80 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d114      	bne.n	8004c74 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004c4a:	6879      	ldr	r1, [r7, #4]
 8004c4c:	683a      	ldr	r2, [r7, #0]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	00db      	lsls	r3, r3, #3
 8004c52:	4413      	add	r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	440b      	add	r3, r1
 8004c58:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d108      	bne.n	8004c74 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6818      	ldr	r0, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	2100      	movs	r1, #0
 8004c70:	f002 f942 	bl	8006ef8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	4619      	mov	r1, r3
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f004 fa6e 	bl	800915c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3720      	adds	r7, #32
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	4f54300a 	.word	0x4f54300a
 8004c90:	4f54310a 	.word	0x4f54310a

08004c94 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b086      	sub	sp, #24
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	333c      	adds	r3, #60	; 0x3c
 8004cac:	3304      	adds	r3, #4
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	015a      	lsls	r2, r3, #5
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	4413      	add	r3, r2
 8004cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	4a15      	ldr	r2, [pc, #84]	; (8004d1c <PCD_EP_OutSetupPacket_int+0x88>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d90e      	bls.n	8004ce8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d009      	beq.n	8004ce8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	015a      	lsls	r2, r3, #5
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	4413      	add	r3, r2
 8004cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ce6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f004 fa25 	bl	8009138 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	4a0a      	ldr	r2, [pc, #40]	; (8004d1c <PCD_EP_OutSetupPacket_int+0x88>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d90c      	bls.n	8004d10 <PCD_EP_OutSetupPacket_int+0x7c>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	799b      	ldrb	r3, [r3, #6]
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d108      	bne.n	8004d10 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6818      	ldr	r0, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004d08:	461a      	mov	r2, r3
 8004d0a:	2101      	movs	r1, #1
 8004d0c:	f002 f8f4 	bl	8006ef8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3718      	adds	r7, #24
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	4f54300a 	.word	0x4f54300a

08004d20 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	460b      	mov	r3, r1
 8004d2a:	70fb      	strb	r3, [r7, #3]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d36:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004d38:	78fb      	ldrb	r3, [r7, #3]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d107      	bne.n	8004d4e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004d3e:	883b      	ldrh	r3, [r7, #0]
 8004d40:	0419      	lsls	r1, r3, #16
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68ba      	ldr	r2, [r7, #8]
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	629a      	str	r2, [r3, #40]	; 0x28
 8004d4c:	e028      	b.n	8004da0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d54:	0c1b      	lsrs	r3, r3, #16
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	4413      	add	r3, r2
 8004d5a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	73fb      	strb	r3, [r7, #15]
 8004d60:	e00d      	b.n	8004d7e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	7bfb      	ldrb	r3, [r7, #15]
 8004d68:	3340      	adds	r3, #64	; 0x40
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	4413      	add	r3, r2
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	0c1b      	lsrs	r3, r3, #16
 8004d72:	68ba      	ldr	r2, [r7, #8]
 8004d74:	4413      	add	r3, r2
 8004d76:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004d78:	7bfb      	ldrb	r3, [r7, #15]
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	73fb      	strb	r3, [r7, #15]
 8004d7e:	7bfa      	ldrb	r2, [r7, #15]
 8004d80:	78fb      	ldrb	r3, [r7, #3]
 8004d82:	3b01      	subs	r3, #1
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d3ec      	bcc.n	8004d62 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004d88:	883b      	ldrh	r3, [r7, #0]
 8004d8a:	0418      	lsls	r0, r3, #16
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6819      	ldr	r1, [r3, #0]
 8004d90:	78fb      	ldrb	r3, [r7, #3]
 8004d92:	3b01      	subs	r3, #1
 8004d94:	68ba      	ldr	r2, [r7, #8]
 8004d96:	4302      	orrs	r2, r0
 8004d98:	3340      	adds	r3, #64	; 0x40
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	440b      	add	r3, r1
 8004d9e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3714      	adds	r7, #20
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr

08004dae <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004dae:	b480      	push	{r7}
 8004db0:	b083      	sub	sp, #12
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
 8004db6:	460b      	mov	r3, r1
 8004db8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	887a      	ldrh	r2, [r7, #2]
 8004dc0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	460b      	mov	r3, r1
 8004dda:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b086      	sub	sp, #24
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d101      	bne.n	8004dfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e267      	b.n	80052ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0301 	and.w	r3, r3, #1
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d075      	beq.n	8004ef2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e06:	4b88      	ldr	r3, [pc, #544]	; (8005028 <HAL_RCC_OscConfig+0x240>)
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f003 030c 	and.w	r3, r3, #12
 8004e0e:	2b04      	cmp	r3, #4
 8004e10:	d00c      	beq.n	8004e2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e12:	4b85      	ldr	r3, [pc, #532]	; (8005028 <HAL_RCC_OscConfig+0x240>)
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e1a:	2b08      	cmp	r3, #8
 8004e1c:	d112      	bne.n	8004e44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e1e:	4b82      	ldr	r3, [pc, #520]	; (8005028 <HAL_RCC_OscConfig+0x240>)
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e2a:	d10b      	bne.n	8004e44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e2c:	4b7e      	ldr	r3, [pc, #504]	; (8005028 <HAL_RCC_OscConfig+0x240>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d05b      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x108>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d157      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e242      	b.n	80052ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e4c:	d106      	bne.n	8004e5c <HAL_RCC_OscConfig+0x74>
 8004e4e:	4b76      	ldr	r3, [pc, #472]	; (8005028 <HAL_RCC_OscConfig+0x240>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a75      	ldr	r2, [pc, #468]	; (8005028 <HAL_RCC_OscConfig+0x240>)
 8004e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e58:	6013      	str	r3, [r2, #0]
 8004e5a:	e01d      	b.n	8004e98 <HAL_RCC_OscConfig+0xb0>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e64:	d10c      	bne.n	8004e80 <HAL_RCC_OscConfig+0x98>
 8004e66:	4b70      	ldr	r3, [pc, #448]	; (8005028 <HAL_RCC_OscConfig+0x240>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a6f      	ldr	r2, [pc, #444]	; (8005028 <HAL_RCC_OscConfig+0x240>)
 8004e6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e70:	6013      	str	r3, [r2, #0]
 8004e72:	4b6d      	ldr	r3, [pc, #436]	; (8005028 <HAL_RCC_OscConfig+0x240>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a6c      	ldr	r2, [pc, #432]	; (8005028 <HAL_RCC_OscConfig+0x240>)
 8004e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e7c:	6013      	str	r3, [r2, #0]
 8004e7e:	e00b      	b.n	8004e98 <HAL_RCC_OscConfig+0xb0>
 8004e80:	4b69      	ldr	r3, [pc, #420]	; (8005028 <HAL_RCC_OscConfig+0x240>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a68      	ldr	r2, [pc, #416]	; (8005028 <HAL_RCC_OscConfig+0x240>)
 8004e86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e8a:	6013      	str	r3, [r2, #0]
 8004e8c:	4b66      	ldr	r3, [pc, #408]	; (8005028 <HAL_RCC_OscConfig+0x240>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a65      	ldr	r2, [pc, #404]	; (8005028 <HAL_RCC_OscConfig+0x240>)
 8004e92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d013      	beq.n	8004ec8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea0:	f7fc f956 	bl	8001150 <HAL_GetTick>
 8004ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ea6:	e008      	b.n	8004eba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ea8:	f7fc f952 	bl	8001150 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	2b64      	cmp	r3, #100	; 0x64
 8004eb4:	d901      	bls.n	8004eba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e207      	b.n	80052ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eba:	4b5b      	ldr	r3, [pc, #364]	; (8005028 <HAL_RCC_OscConfig+0x240>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d0f0      	beq.n	8004ea8 <HAL_RCC_OscConfig+0xc0>
 8004ec6:	e014      	b.n	8004ef2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec8:	f7fc f942 	bl	8001150 <HAL_GetTick>
 8004ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ece:	e008      	b.n	8004ee2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ed0:	f7fc f93e 	bl	8001150 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b64      	cmp	r3, #100	; 0x64
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e1f3      	b.n	80052ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ee2:	4b51      	ldr	r3, [pc, #324]	; (8005028 <HAL_RCC_OscConfig+0x240>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1f0      	bne.n	8004ed0 <HAL_RCC_OscConfig+0xe8>
 8004eee:	e000      	b.n	8004ef2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ef0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0302 	and.w	r3, r3, #2
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d063      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004efe:	4b4a      	ldr	r3, [pc, #296]	; (8005028 <HAL_RCC_OscConfig+0x240>)
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f003 030c 	and.w	r3, r3, #12
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00b      	beq.n	8004f22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f0a:	4b47      	ldr	r3, [pc, #284]	; (8005028 <HAL_RCC_OscConfig+0x240>)
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f12:	2b08      	cmp	r3, #8
 8004f14:	d11c      	bne.n	8004f50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f16:	4b44      	ldr	r3, [pc, #272]	; (8005028 <HAL_RCC_OscConfig+0x240>)
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d116      	bne.n	8004f50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f22:	4b41      	ldr	r3, [pc, #260]	; (8005028 <HAL_RCC_OscConfig+0x240>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0302 	and.w	r3, r3, #2
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d005      	beq.n	8004f3a <HAL_RCC_OscConfig+0x152>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d001      	beq.n	8004f3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e1c7      	b.n	80052ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f3a:	4b3b      	ldr	r3, [pc, #236]	; (8005028 <HAL_RCC_OscConfig+0x240>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	00db      	lsls	r3, r3, #3
 8004f48:	4937      	ldr	r1, [pc, #220]	; (8005028 <HAL_RCC_OscConfig+0x240>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f4e:	e03a      	b.n	8004fc6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d020      	beq.n	8004f9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f58:	4b34      	ldr	r3, [pc, #208]	; (800502c <HAL_RCC_OscConfig+0x244>)
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f5e:	f7fc f8f7 	bl	8001150 <HAL_GetTick>
 8004f62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f64:	e008      	b.n	8004f78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f66:	f7fc f8f3 	bl	8001150 <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d901      	bls.n	8004f78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e1a8      	b.n	80052ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f78:	4b2b      	ldr	r3, [pc, #172]	; (8005028 <HAL_RCC_OscConfig+0x240>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0302 	and.w	r3, r3, #2
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d0f0      	beq.n	8004f66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f84:	4b28      	ldr	r3, [pc, #160]	; (8005028 <HAL_RCC_OscConfig+0x240>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	00db      	lsls	r3, r3, #3
 8004f92:	4925      	ldr	r1, [pc, #148]	; (8005028 <HAL_RCC_OscConfig+0x240>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	600b      	str	r3, [r1, #0]
 8004f98:	e015      	b.n	8004fc6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f9a:	4b24      	ldr	r3, [pc, #144]	; (800502c <HAL_RCC_OscConfig+0x244>)
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa0:	f7fc f8d6 	bl	8001150 <HAL_GetTick>
 8004fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fa6:	e008      	b.n	8004fba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fa8:	f7fc f8d2 	bl	8001150 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d901      	bls.n	8004fba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e187      	b.n	80052ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fba:	4b1b      	ldr	r3, [pc, #108]	; (8005028 <HAL_RCC_OscConfig+0x240>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0302 	and.w	r3, r3, #2
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1f0      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0308 	and.w	r3, r3, #8
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d036      	beq.n	8005040 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d016      	beq.n	8005008 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fda:	4b15      	ldr	r3, [pc, #84]	; (8005030 <HAL_RCC_OscConfig+0x248>)
 8004fdc:	2201      	movs	r2, #1
 8004fde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fe0:	f7fc f8b6 	bl	8001150 <HAL_GetTick>
 8004fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fe6:	e008      	b.n	8004ffa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fe8:	f7fc f8b2 	bl	8001150 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d901      	bls.n	8004ffa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e167      	b.n	80052ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ffa:	4b0b      	ldr	r3, [pc, #44]	; (8005028 <HAL_RCC_OscConfig+0x240>)
 8004ffc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	2b00      	cmp	r3, #0
 8005004:	d0f0      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x200>
 8005006:	e01b      	b.n	8005040 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005008:	4b09      	ldr	r3, [pc, #36]	; (8005030 <HAL_RCC_OscConfig+0x248>)
 800500a:	2200      	movs	r2, #0
 800500c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800500e:	f7fc f89f 	bl	8001150 <HAL_GetTick>
 8005012:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005014:	e00e      	b.n	8005034 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005016:	f7fc f89b 	bl	8001150 <HAL_GetTick>
 800501a:	4602      	mov	r2, r0
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	2b02      	cmp	r3, #2
 8005022:	d907      	bls.n	8005034 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e150      	b.n	80052ca <HAL_RCC_OscConfig+0x4e2>
 8005028:	40023800 	.word	0x40023800
 800502c:	42470000 	.word	0x42470000
 8005030:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005034:	4b88      	ldr	r3, [pc, #544]	; (8005258 <HAL_RCC_OscConfig+0x470>)
 8005036:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005038:	f003 0302 	and.w	r3, r3, #2
 800503c:	2b00      	cmp	r3, #0
 800503e:	d1ea      	bne.n	8005016 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0304 	and.w	r3, r3, #4
 8005048:	2b00      	cmp	r3, #0
 800504a:	f000 8097 	beq.w	800517c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800504e:	2300      	movs	r3, #0
 8005050:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005052:	4b81      	ldr	r3, [pc, #516]	; (8005258 <HAL_RCC_OscConfig+0x470>)
 8005054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10f      	bne.n	800507e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800505e:	2300      	movs	r3, #0
 8005060:	60bb      	str	r3, [r7, #8]
 8005062:	4b7d      	ldr	r3, [pc, #500]	; (8005258 <HAL_RCC_OscConfig+0x470>)
 8005064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005066:	4a7c      	ldr	r2, [pc, #496]	; (8005258 <HAL_RCC_OscConfig+0x470>)
 8005068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800506c:	6413      	str	r3, [r2, #64]	; 0x40
 800506e:	4b7a      	ldr	r3, [pc, #488]	; (8005258 <HAL_RCC_OscConfig+0x470>)
 8005070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005076:	60bb      	str	r3, [r7, #8]
 8005078:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800507a:	2301      	movs	r3, #1
 800507c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800507e:	4b77      	ldr	r3, [pc, #476]	; (800525c <HAL_RCC_OscConfig+0x474>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005086:	2b00      	cmp	r3, #0
 8005088:	d118      	bne.n	80050bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800508a:	4b74      	ldr	r3, [pc, #464]	; (800525c <HAL_RCC_OscConfig+0x474>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a73      	ldr	r2, [pc, #460]	; (800525c <HAL_RCC_OscConfig+0x474>)
 8005090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005094:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005096:	f7fc f85b 	bl	8001150 <HAL_GetTick>
 800509a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800509c:	e008      	b.n	80050b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800509e:	f7fc f857 	bl	8001150 <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d901      	bls.n	80050b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e10c      	b.n	80052ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050b0:	4b6a      	ldr	r3, [pc, #424]	; (800525c <HAL_RCC_OscConfig+0x474>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d0f0      	beq.n	800509e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d106      	bne.n	80050d2 <HAL_RCC_OscConfig+0x2ea>
 80050c4:	4b64      	ldr	r3, [pc, #400]	; (8005258 <HAL_RCC_OscConfig+0x470>)
 80050c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c8:	4a63      	ldr	r2, [pc, #396]	; (8005258 <HAL_RCC_OscConfig+0x470>)
 80050ca:	f043 0301 	orr.w	r3, r3, #1
 80050ce:	6713      	str	r3, [r2, #112]	; 0x70
 80050d0:	e01c      	b.n	800510c <HAL_RCC_OscConfig+0x324>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	2b05      	cmp	r3, #5
 80050d8:	d10c      	bne.n	80050f4 <HAL_RCC_OscConfig+0x30c>
 80050da:	4b5f      	ldr	r3, [pc, #380]	; (8005258 <HAL_RCC_OscConfig+0x470>)
 80050dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050de:	4a5e      	ldr	r2, [pc, #376]	; (8005258 <HAL_RCC_OscConfig+0x470>)
 80050e0:	f043 0304 	orr.w	r3, r3, #4
 80050e4:	6713      	str	r3, [r2, #112]	; 0x70
 80050e6:	4b5c      	ldr	r3, [pc, #368]	; (8005258 <HAL_RCC_OscConfig+0x470>)
 80050e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ea:	4a5b      	ldr	r2, [pc, #364]	; (8005258 <HAL_RCC_OscConfig+0x470>)
 80050ec:	f043 0301 	orr.w	r3, r3, #1
 80050f0:	6713      	str	r3, [r2, #112]	; 0x70
 80050f2:	e00b      	b.n	800510c <HAL_RCC_OscConfig+0x324>
 80050f4:	4b58      	ldr	r3, [pc, #352]	; (8005258 <HAL_RCC_OscConfig+0x470>)
 80050f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f8:	4a57      	ldr	r2, [pc, #348]	; (8005258 <HAL_RCC_OscConfig+0x470>)
 80050fa:	f023 0301 	bic.w	r3, r3, #1
 80050fe:	6713      	str	r3, [r2, #112]	; 0x70
 8005100:	4b55      	ldr	r3, [pc, #340]	; (8005258 <HAL_RCC_OscConfig+0x470>)
 8005102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005104:	4a54      	ldr	r2, [pc, #336]	; (8005258 <HAL_RCC_OscConfig+0x470>)
 8005106:	f023 0304 	bic.w	r3, r3, #4
 800510a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d015      	beq.n	8005140 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005114:	f7fc f81c 	bl	8001150 <HAL_GetTick>
 8005118:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800511a:	e00a      	b.n	8005132 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800511c:	f7fc f818 	bl	8001150 <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	f241 3288 	movw	r2, #5000	; 0x1388
 800512a:	4293      	cmp	r3, r2
 800512c:	d901      	bls.n	8005132 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e0cb      	b.n	80052ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005132:	4b49      	ldr	r3, [pc, #292]	; (8005258 <HAL_RCC_OscConfig+0x470>)
 8005134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005136:	f003 0302 	and.w	r3, r3, #2
 800513a:	2b00      	cmp	r3, #0
 800513c:	d0ee      	beq.n	800511c <HAL_RCC_OscConfig+0x334>
 800513e:	e014      	b.n	800516a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005140:	f7fc f806 	bl	8001150 <HAL_GetTick>
 8005144:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005146:	e00a      	b.n	800515e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005148:	f7fc f802 	bl	8001150 <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	f241 3288 	movw	r2, #5000	; 0x1388
 8005156:	4293      	cmp	r3, r2
 8005158:	d901      	bls.n	800515e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e0b5      	b.n	80052ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800515e:	4b3e      	ldr	r3, [pc, #248]	; (8005258 <HAL_RCC_OscConfig+0x470>)
 8005160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1ee      	bne.n	8005148 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800516a:	7dfb      	ldrb	r3, [r7, #23]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d105      	bne.n	800517c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005170:	4b39      	ldr	r3, [pc, #228]	; (8005258 <HAL_RCC_OscConfig+0x470>)
 8005172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005174:	4a38      	ldr	r2, [pc, #224]	; (8005258 <HAL_RCC_OscConfig+0x470>)
 8005176:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800517a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	699b      	ldr	r3, [r3, #24]
 8005180:	2b00      	cmp	r3, #0
 8005182:	f000 80a1 	beq.w	80052c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005186:	4b34      	ldr	r3, [pc, #208]	; (8005258 <HAL_RCC_OscConfig+0x470>)
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f003 030c 	and.w	r3, r3, #12
 800518e:	2b08      	cmp	r3, #8
 8005190:	d05c      	beq.n	800524c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	2b02      	cmp	r3, #2
 8005198:	d141      	bne.n	800521e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800519a:	4b31      	ldr	r3, [pc, #196]	; (8005260 <HAL_RCC_OscConfig+0x478>)
 800519c:	2200      	movs	r2, #0
 800519e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051a0:	f7fb ffd6 	bl	8001150 <HAL_GetTick>
 80051a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051a6:	e008      	b.n	80051ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051a8:	f7fb ffd2 	bl	8001150 <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d901      	bls.n	80051ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e087      	b.n	80052ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051ba:	4b27      	ldr	r3, [pc, #156]	; (8005258 <HAL_RCC_OscConfig+0x470>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1f0      	bne.n	80051a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	69da      	ldr	r2, [r3, #28]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	431a      	orrs	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d4:	019b      	lsls	r3, r3, #6
 80051d6:	431a      	orrs	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051dc:	085b      	lsrs	r3, r3, #1
 80051de:	3b01      	subs	r3, #1
 80051e0:	041b      	lsls	r3, r3, #16
 80051e2:	431a      	orrs	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e8:	061b      	lsls	r3, r3, #24
 80051ea:	491b      	ldr	r1, [pc, #108]	; (8005258 <HAL_RCC_OscConfig+0x470>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051f0:	4b1b      	ldr	r3, [pc, #108]	; (8005260 <HAL_RCC_OscConfig+0x478>)
 80051f2:	2201      	movs	r2, #1
 80051f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051f6:	f7fb ffab 	bl	8001150 <HAL_GetTick>
 80051fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051fc:	e008      	b.n	8005210 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051fe:	f7fb ffa7 	bl	8001150 <HAL_GetTick>
 8005202:	4602      	mov	r2, r0
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	2b02      	cmp	r3, #2
 800520a:	d901      	bls.n	8005210 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	e05c      	b.n	80052ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005210:	4b11      	ldr	r3, [pc, #68]	; (8005258 <HAL_RCC_OscConfig+0x470>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d0f0      	beq.n	80051fe <HAL_RCC_OscConfig+0x416>
 800521c:	e054      	b.n	80052c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800521e:	4b10      	ldr	r3, [pc, #64]	; (8005260 <HAL_RCC_OscConfig+0x478>)
 8005220:	2200      	movs	r2, #0
 8005222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005224:	f7fb ff94 	bl	8001150 <HAL_GetTick>
 8005228:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800522a:	e008      	b.n	800523e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800522c:	f7fb ff90 	bl	8001150 <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	2b02      	cmp	r3, #2
 8005238:	d901      	bls.n	800523e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e045      	b.n	80052ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800523e:	4b06      	ldr	r3, [pc, #24]	; (8005258 <HAL_RCC_OscConfig+0x470>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1f0      	bne.n	800522c <HAL_RCC_OscConfig+0x444>
 800524a:	e03d      	b.n	80052c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d107      	bne.n	8005264 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e038      	b.n	80052ca <HAL_RCC_OscConfig+0x4e2>
 8005258:	40023800 	.word	0x40023800
 800525c:	40007000 	.word	0x40007000
 8005260:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005264:	4b1b      	ldr	r3, [pc, #108]	; (80052d4 <HAL_RCC_OscConfig+0x4ec>)
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	2b01      	cmp	r3, #1
 8005270:	d028      	beq.n	80052c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800527c:	429a      	cmp	r2, r3
 800527e:	d121      	bne.n	80052c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800528a:	429a      	cmp	r2, r3
 800528c:	d11a      	bne.n	80052c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005294:	4013      	ands	r3, r2
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800529a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800529c:	4293      	cmp	r3, r2
 800529e:	d111      	bne.n	80052c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052aa:	085b      	lsrs	r3, r3, #1
 80052ac:	3b01      	subs	r3, #1
 80052ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d107      	bne.n	80052c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d001      	beq.n	80052c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e000      	b.n	80052ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3718      	adds	r7, #24
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	40023800 	.word	0x40023800

080052d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d101      	bne.n	80052ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e0cc      	b.n	8005486 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052ec:	4b68      	ldr	r3, [pc, #416]	; (8005490 <HAL_RCC_ClockConfig+0x1b8>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0307 	and.w	r3, r3, #7
 80052f4:	683a      	ldr	r2, [r7, #0]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d90c      	bls.n	8005314 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052fa:	4b65      	ldr	r3, [pc, #404]	; (8005490 <HAL_RCC_ClockConfig+0x1b8>)
 80052fc:	683a      	ldr	r2, [r7, #0]
 80052fe:	b2d2      	uxtb	r2, r2
 8005300:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005302:	4b63      	ldr	r3, [pc, #396]	; (8005490 <HAL_RCC_ClockConfig+0x1b8>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0307 	and.w	r3, r3, #7
 800530a:	683a      	ldr	r2, [r7, #0]
 800530c:	429a      	cmp	r2, r3
 800530e:	d001      	beq.n	8005314 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e0b8      	b.n	8005486 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0302 	and.w	r3, r3, #2
 800531c:	2b00      	cmp	r3, #0
 800531e:	d020      	beq.n	8005362 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0304 	and.w	r3, r3, #4
 8005328:	2b00      	cmp	r3, #0
 800532a:	d005      	beq.n	8005338 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800532c:	4b59      	ldr	r3, [pc, #356]	; (8005494 <HAL_RCC_ClockConfig+0x1bc>)
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	4a58      	ldr	r2, [pc, #352]	; (8005494 <HAL_RCC_ClockConfig+0x1bc>)
 8005332:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005336:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0308 	and.w	r3, r3, #8
 8005340:	2b00      	cmp	r3, #0
 8005342:	d005      	beq.n	8005350 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005344:	4b53      	ldr	r3, [pc, #332]	; (8005494 <HAL_RCC_ClockConfig+0x1bc>)
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	4a52      	ldr	r2, [pc, #328]	; (8005494 <HAL_RCC_ClockConfig+0x1bc>)
 800534a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800534e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005350:	4b50      	ldr	r3, [pc, #320]	; (8005494 <HAL_RCC_ClockConfig+0x1bc>)
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	494d      	ldr	r1, [pc, #308]	; (8005494 <HAL_RCC_ClockConfig+0x1bc>)
 800535e:	4313      	orrs	r3, r2
 8005360:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0301 	and.w	r3, r3, #1
 800536a:	2b00      	cmp	r3, #0
 800536c:	d044      	beq.n	80053f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	2b01      	cmp	r3, #1
 8005374:	d107      	bne.n	8005386 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005376:	4b47      	ldr	r3, [pc, #284]	; (8005494 <HAL_RCC_ClockConfig+0x1bc>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d119      	bne.n	80053b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e07f      	b.n	8005486 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	2b02      	cmp	r3, #2
 800538c:	d003      	beq.n	8005396 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005392:	2b03      	cmp	r3, #3
 8005394:	d107      	bne.n	80053a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005396:	4b3f      	ldr	r3, [pc, #252]	; (8005494 <HAL_RCC_ClockConfig+0x1bc>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d109      	bne.n	80053b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e06f      	b.n	8005486 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053a6:	4b3b      	ldr	r3, [pc, #236]	; (8005494 <HAL_RCC_ClockConfig+0x1bc>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d101      	bne.n	80053b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e067      	b.n	8005486 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053b6:	4b37      	ldr	r3, [pc, #220]	; (8005494 <HAL_RCC_ClockConfig+0x1bc>)
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f023 0203 	bic.w	r2, r3, #3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	4934      	ldr	r1, [pc, #208]	; (8005494 <HAL_RCC_ClockConfig+0x1bc>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053c8:	f7fb fec2 	bl	8001150 <HAL_GetTick>
 80053cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ce:	e00a      	b.n	80053e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053d0:	f7fb febe 	bl	8001150 <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	f241 3288 	movw	r2, #5000	; 0x1388
 80053de:	4293      	cmp	r3, r2
 80053e0:	d901      	bls.n	80053e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e04f      	b.n	8005486 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053e6:	4b2b      	ldr	r3, [pc, #172]	; (8005494 <HAL_RCC_ClockConfig+0x1bc>)
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f003 020c 	and.w	r2, r3, #12
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d1eb      	bne.n	80053d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053f8:	4b25      	ldr	r3, [pc, #148]	; (8005490 <HAL_RCC_ClockConfig+0x1b8>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0307 	and.w	r3, r3, #7
 8005400:	683a      	ldr	r2, [r7, #0]
 8005402:	429a      	cmp	r2, r3
 8005404:	d20c      	bcs.n	8005420 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005406:	4b22      	ldr	r3, [pc, #136]	; (8005490 <HAL_RCC_ClockConfig+0x1b8>)
 8005408:	683a      	ldr	r2, [r7, #0]
 800540a:	b2d2      	uxtb	r2, r2
 800540c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800540e:	4b20      	ldr	r3, [pc, #128]	; (8005490 <HAL_RCC_ClockConfig+0x1b8>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0307 	and.w	r3, r3, #7
 8005416:	683a      	ldr	r2, [r7, #0]
 8005418:	429a      	cmp	r2, r3
 800541a:	d001      	beq.n	8005420 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e032      	b.n	8005486 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0304 	and.w	r3, r3, #4
 8005428:	2b00      	cmp	r3, #0
 800542a:	d008      	beq.n	800543e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800542c:	4b19      	ldr	r3, [pc, #100]	; (8005494 <HAL_RCC_ClockConfig+0x1bc>)
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	4916      	ldr	r1, [pc, #88]	; (8005494 <HAL_RCC_ClockConfig+0x1bc>)
 800543a:	4313      	orrs	r3, r2
 800543c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0308 	and.w	r3, r3, #8
 8005446:	2b00      	cmp	r3, #0
 8005448:	d009      	beq.n	800545e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800544a:	4b12      	ldr	r3, [pc, #72]	; (8005494 <HAL_RCC_ClockConfig+0x1bc>)
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	00db      	lsls	r3, r3, #3
 8005458:	490e      	ldr	r1, [pc, #56]	; (8005494 <HAL_RCC_ClockConfig+0x1bc>)
 800545a:	4313      	orrs	r3, r2
 800545c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800545e:	f000 f821 	bl	80054a4 <HAL_RCC_GetSysClockFreq>
 8005462:	4602      	mov	r2, r0
 8005464:	4b0b      	ldr	r3, [pc, #44]	; (8005494 <HAL_RCC_ClockConfig+0x1bc>)
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	091b      	lsrs	r3, r3, #4
 800546a:	f003 030f 	and.w	r3, r3, #15
 800546e:	490a      	ldr	r1, [pc, #40]	; (8005498 <HAL_RCC_ClockConfig+0x1c0>)
 8005470:	5ccb      	ldrb	r3, [r1, r3]
 8005472:	fa22 f303 	lsr.w	r3, r2, r3
 8005476:	4a09      	ldr	r2, [pc, #36]	; (800549c <HAL_RCC_ClockConfig+0x1c4>)
 8005478:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800547a:	4b09      	ldr	r3, [pc, #36]	; (80054a0 <HAL_RCC_ClockConfig+0x1c8>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4618      	mov	r0, r3
 8005480:	f7fb fe22 	bl	80010c8 <HAL_InitTick>

  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	40023c00 	.word	0x40023c00
 8005494:	40023800 	.word	0x40023800
 8005498:	0800a1ec 	.word	0x0800a1ec
 800549c:	20000000 	.word	0x20000000
 80054a0:	20000004 	.word	0x20000004

080054a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054a8:	b094      	sub	sp, #80	; 0x50
 80054aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80054ac:	2300      	movs	r3, #0
 80054ae:	647b      	str	r3, [r7, #68]	; 0x44
 80054b0:	2300      	movs	r3, #0
 80054b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054b4:	2300      	movs	r3, #0
 80054b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80054b8:	2300      	movs	r3, #0
 80054ba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054bc:	4b79      	ldr	r3, [pc, #484]	; (80056a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	f003 030c 	and.w	r3, r3, #12
 80054c4:	2b08      	cmp	r3, #8
 80054c6:	d00d      	beq.n	80054e4 <HAL_RCC_GetSysClockFreq+0x40>
 80054c8:	2b08      	cmp	r3, #8
 80054ca:	f200 80e1 	bhi.w	8005690 <HAL_RCC_GetSysClockFreq+0x1ec>
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d002      	beq.n	80054d8 <HAL_RCC_GetSysClockFreq+0x34>
 80054d2:	2b04      	cmp	r3, #4
 80054d4:	d003      	beq.n	80054de <HAL_RCC_GetSysClockFreq+0x3a>
 80054d6:	e0db      	b.n	8005690 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054d8:	4b73      	ldr	r3, [pc, #460]	; (80056a8 <HAL_RCC_GetSysClockFreq+0x204>)
 80054da:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80054dc:	e0db      	b.n	8005696 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054de:	4b73      	ldr	r3, [pc, #460]	; (80056ac <HAL_RCC_GetSysClockFreq+0x208>)
 80054e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80054e2:	e0d8      	b.n	8005696 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054e4:	4b6f      	ldr	r3, [pc, #444]	; (80056a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054ec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054ee:	4b6d      	ldr	r3, [pc, #436]	; (80056a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d063      	beq.n	80055c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054fa:	4b6a      	ldr	r3, [pc, #424]	; (80056a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	099b      	lsrs	r3, r3, #6
 8005500:	2200      	movs	r2, #0
 8005502:	63bb      	str	r3, [r7, #56]	; 0x38
 8005504:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800550c:	633b      	str	r3, [r7, #48]	; 0x30
 800550e:	2300      	movs	r3, #0
 8005510:	637b      	str	r3, [r7, #52]	; 0x34
 8005512:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005516:	4622      	mov	r2, r4
 8005518:	462b      	mov	r3, r5
 800551a:	f04f 0000 	mov.w	r0, #0
 800551e:	f04f 0100 	mov.w	r1, #0
 8005522:	0159      	lsls	r1, r3, #5
 8005524:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005528:	0150      	lsls	r0, r2, #5
 800552a:	4602      	mov	r2, r0
 800552c:	460b      	mov	r3, r1
 800552e:	4621      	mov	r1, r4
 8005530:	1a51      	subs	r1, r2, r1
 8005532:	6139      	str	r1, [r7, #16]
 8005534:	4629      	mov	r1, r5
 8005536:	eb63 0301 	sbc.w	r3, r3, r1
 800553a:	617b      	str	r3, [r7, #20]
 800553c:	f04f 0200 	mov.w	r2, #0
 8005540:	f04f 0300 	mov.w	r3, #0
 8005544:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005548:	4659      	mov	r1, fp
 800554a:	018b      	lsls	r3, r1, #6
 800554c:	4651      	mov	r1, sl
 800554e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005552:	4651      	mov	r1, sl
 8005554:	018a      	lsls	r2, r1, #6
 8005556:	4651      	mov	r1, sl
 8005558:	ebb2 0801 	subs.w	r8, r2, r1
 800555c:	4659      	mov	r1, fp
 800555e:	eb63 0901 	sbc.w	r9, r3, r1
 8005562:	f04f 0200 	mov.w	r2, #0
 8005566:	f04f 0300 	mov.w	r3, #0
 800556a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800556e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005572:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005576:	4690      	mov	r8, r2
 8005578:	4699      	mov	r9, r3
 800557a:	4623      	mov	r3, r4
 800557c:	eb18 0303 	adds.w	r3, r8, r3
 8005580:	60bb      	str	r3, [r7, #8]
 8005582:	462b      	mov	r3, r5
 8005584:	eb49 0303 	adc.w	r3, r9, r3
 8005588:	60fb      	str	r3, [r7, #12]
 800558a:	f04f 0200 	mov.w	r2, #0
 800558e:	f04f 0300 	mov.w	r3, #0
 8005592:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005596:	4629      	mov	r1, r5
 8005598:	024b      	lsls	r3, r1, #9
 800559a:	4621      	mov	r1, r4
 800559c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80055a0:	4621      	mov	r1, r4
 80055a2:	024a      	lsls	r2, r1, #9
 80055a4:	4610      	mov	r0, r2
 80055a6:	4619      	mov	r1, r3
 80055a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055aa:	2200      	movs	r2, #0
 80055ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80055ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80055b4:	f7fa fe10 	bl	80001d8 <__aeabi_uldivmod>
 80055b8:	4602      	mov	r2, r0
 80055ba:	460b      	mov	r3, r1
 80055bc:	4613      	mov	r3, r2
 80055be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055c0:	e058      	b.n	8005674 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055c2:	4b38      	ldr	r3, [pc, #224]	; (80056a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	099b      	lsrs	r3, r3, #6
 80055c8:	2200      	movs	r2, #0
 80055ca:	4618      	mov	r0, r3
 80055cc:	4611      	mov	r1, r2
 80055ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80055d2:	623b      	str	r3, [r7, #32]
 80055d4:	2300      	movs	r3, #0
 80055d6:	627b      	str	r3, [r7, #36]	; 0x24
 80055d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80055dc:	4642      	mov	r2, r8
 80055de:	464b      	mov	r3, r9
 80055e0:	f04f 0000 	mov.w	r0, #0
 80055e4:	f04f 0100 	mov.w	r1, #0
 80055e8:	0159      	lsls	r1, r3, #5
 80055ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055ee:	0150      	lsls	r0, r2, #5
 80055f0:	4602      	mov	r2, r0
 80055f2:	460b      	mov	r3, r1
 80055f4:	4641      	mov	r1, r8
 80055f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80055fa:	4649      	mov	r1, r9
 80055fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8005600:	f04f 0200 	mov.w	r2, #0
 8005604:	f04f 0300 	mov.w	r3, #0
 8005608:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800560c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005610:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005614:	ebb2 040a 	subs.w	r4, r2, sl
 8005618:	eb63 050b 	sbc.w	r5, r3, fp
 800561c:	f04f 0200 	mov.w	r2, #0
 8005620:	f04f 0300 	mov.w	r3, #0
 8005624:	00eb      	lsls	r3, r5, #3
 8005626:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800562a:	00e2      	lsls	r2, r4, #3
 800562c:	4614      	mov	r4, r2
 800562e:	461d      	mov	r5, r3
 8005630:	4643      	mov	r3, r8
 8005632:	18e3      	adds	r3, r4, r3
 8005634:	603b      	str	r3, [r7, #0]
 8005636:	464b      	mov	r3, r9
 8005638:	eb45 0303 	adc.w	r3, r5, r3
 800563c:	607b      	str	r3, [r7, #4]
 800563e:	f04f 0200 	mov.w	r2, #0
 8005642:	f04f 0300 	mov.w	r3, #0
 8005646:	e9d7 4500 	ldrd	r4, r5, [r7]
 800564a:	4629      	mov	r1, r5
 800564c:	028b      	lsls	r3, r1, #10
 800564e:	4621      	mov	r1, r4
 8005650:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005654:	4621      	mov	r1, r4
 8005656:	028a      	lsls	r2, r1, #10
 8005658:	4610      	mov	r0, r2
 800565a:	4619      	mov	r1, r3
 800565c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800565e:	2200      	movs	r2, #0
 8005660:	61bb      	str	r3, [r7, #24]
 8005662:	61fa      	str	r2, [r7, #28]
 8005664:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005668:	f7fa fdb6 	bl	80001d8 <__aeabi_uldivmod>
 800566c:	4602      	mov	r2, r0
 800566e:	460b      	mov	r3, r1
 8005670:	4613      	mov	r3, r2
 8005672:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005674:	4b0b      	ldr	r3, [pc, #44]	; (80056a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	0c1b      	lsrs	r3, r3, #16
 800567a:	f003 0303 	and.w	r3, r3, #3
 800567e:	3301      	adds	r3, #1
 8005680:	005b      	lsls	r3, r3, #1
 8005682:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005684:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005686:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005688:	fbb2 f3f3 	udiv	r3, r2, r3
 800568c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800568e:	e002      	b.n	8005696 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005690:	4b05      	ldr	r3, [pc, #20]	; (80056a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005692:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005694:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005696:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005698:	4618      	mov	r0, r3
 800569a:	3750      	adds	r7, #80	; 0x50
 800569c:	46bd      	mov	sp, r7
 800569e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056a2:	bf00      	nop
 80056a4:	40023800 	.word	0x40023800
 80056a8:	00f42400 	.word	0x00f42400
 80056ac:	007a1200 	.word	0x007a1200

080056b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056b0:	b480      	push	{r7}
 80056b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056b4:	4b03      	ldr	r3, [pc, #12]	; (80056c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80056b6:	681b      	ldr	r3, [r3, #0]
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	20000000 	.word	0x20000000

080056c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80056cc:	f7ff fff0 	bl	80056b0 <HAL_RCC_GetHCLKFreq>
 80056d0:	4602      	mov	r2, r0
 80056d2:	4b05      	ldr	r3, [pc, #20]	; (80056e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	0a9b      	lsrs	r3, r3, #10
 80056d8:	f003 0307 	and.w	r3, r3, #7
 80056dc:	4903      	ldr	r1, [pc, #12]	; (80056ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80056de:	5ccb      	ldrb	r3, [r1, r3]
 80056e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	40023800 	.word	0x40023800
 80056ec:	0800a1fc 	.word	0x0800a1fc

080056f0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b086      	sub	sp, #24
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80056f8:	2300      	movs	r3, #0
 80056fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80056fc:	2300      	movs	r3, #0
 80056fe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0301 	and.w	r3, r3, #1
 8005708:	2b00      	cmp	r3, #0
 800570a:	d105      	bne.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005714:	2b00      	cmp	r3, #0
 8005716:	d038      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005718:	4b68      	ldr	r3, [pc, #416]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800571a:	2200      	movs	r2, #0
 800571c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800571e:	f7fb fd17 	bl	8001150 <HAL_GetTick>
 8005722:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005724:	e008      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005726:	f7fb fd13 	bl	8001150 <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	2b02      	cmp	r3, #2
 8005732:	d901      	bls.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e0bd      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005738:	4b61      	ldr	r3, [pc, #388]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1f0      	bne.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	685a      	ldr	r2, [r3, #4]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	019b      	lsls	r3, r3, #6
 800574e:	431a      	orrs	r2, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	071b      	lsls	r3, r3, #28
 8005756:	495a      	ldr	r1, [pc, #360]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005758:	4313      	orrs	r3, r2
 800575a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800575e:	4b57      	ldr	r3, [pc, #348]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005760:	2201      	movs	r2, #1
 8005762:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005764:	f7fb fcf4 	bl	8001150 <HAL_GetTick>
 8005768:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800576a:	e008      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800576c:	f7fb fcf0 	bl	8001150 <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	2b02      	cmp	r3, #2
 8005778:	d901      	bls.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e09a      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800577e:	4b50      	ldr	r3, [pc, #320]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d0f0      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0302 	and.w	r3, r3, #2
 8005792:	2b00      	cmp	r3, #0
 8005794:	f000 8083 	beq.w	800589e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005798:	2300      	movs	r3, #0
 800579a:	60fb      	str	r3, [r7, #12]
 800579c:	4b48      	ldr	r3, [pc, #288]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800579e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a0:	4a47      	ldr	r2, [pc, #284]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057a6:	6413      	str	r3, [r2, #64]	; 0x40
 80057a8:	4b45      	ldr	r3, [pc, #276]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057b0:	60fb      	str	r3, [r7, #12]
 80057b2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80057b4:	4b43      	ldr	r3, [pc, #268]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a42      	ldr	r2, [pc, #264]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80057ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057be:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80057c0:	f7fb fcc6 	bl	8001150 <HAL_GetTick>
 80057c4:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80057c6:	e008      	b.n	80057da <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80057c8:	f7fb fcc2 	bl	8001150 <HAL_GetTick>
 80057cc:	4602      	mov	r2, r0
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d901      	bls.n	80057da <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e06c      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80057da:	4b3a      	ldr	r3, [pc, #232]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d0f0      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80057e6:	4b36      	ldr	r3, [pc, #216]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057ee:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d02f      	beq.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057fe:	693a      	ldr	r2, [r7, #16]
 8005800:	429a      	cmp	r2, r3
 8005802:	d028      	beq.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005804:	4b2e      	ldr	r3, [pc, #184]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005808:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800580c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800580e:	4b2e      	ldr	r3, [pc, #184]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005810:	2201      	movs	r2, #1
 8005812:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005814:	4b2c      	ldr	r3, [pc, #176]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005816:	2200      	movs	r2, #0
 8005818:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800581a:	4a29      	ldr	r2, [pc, #164]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005820:	4b27      	ldr	r3, [pc, #156]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005824:	f003 0301 	and.w	r3, r3, #1
 8005828:	2b01      	cmp	r3, #1
 800582a:	d114      	bne.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800582c:	f7fb fc90 	bl	8001150 <HAL_GetTick>
 8005830:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005832:	e00a      	b.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005834:	f7fb fc8c 	bl	8001150 <HAL_GetTick>
 8005838:	4602      	mov	r2, r0
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005842:	4293      	cmp	r3, r2
 8005844:	d901      	bls.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e034      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800584a:	4b1d      	ldr	r3, [pc, #116]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800584c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800584e:	f003 0302 	and.w	r3, r3, #2
 8005852:	2b00      	cmp	r3, #0
 8005854:	d0ee      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800585e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005862:	d10d      	bne.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005864:	4b16      	ldr	r3, [pc, #88]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005874:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005878:	4911      	ldr	r1, [pc, #68]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800587a:	4313      	orrs	r3, r2
 800587c:	608b      	str	r3, [r1, #8]
 800587e:	e005      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005880:	4b0f      	ldr	r3, [pc, #60]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	4a0e      	ldr	r2, [pc, #56]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005886:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800588a:	6093      	str	r3, [r2, #8]
 800588c:	4b0c      	ldr	r3, [pc, #48]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800588e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005898:	4909      	ldr	r1, [pc, #36]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800589a:	4313      	orrs	r3, r2
 800589c:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0308 	and.w	r3, r3, #8
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d003      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	7d1a      	ldrb	r2, [r3, #20]
 80058ae:	4b07      	ldr	r3, [pc, #28]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80058b0:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3718      	adds	r7, #24
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	42470068 	.word	0x42470068
 80058c0:	40023800 	.word	0x40023800
 80058c4:	40007000 	.word	0x40007000
 80058c8:	42470e40 	.word	0x42470e40
 80058cc:	424711e0 	.word	0x424711e0

080058d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b087      	sub	sp, #28
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80058d8:	2300      	movs	r3, #0
 80058da:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80058dc:	2300      	movs	r3, #0
 80058de:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80058e0:	2300      	movs	r3, #0
 80058e2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80058e4:	2300      	movs	r3, #0
 80058e6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d141      	bne.n	8005972 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80058ee:	4b25      	ldr	r3, [pc, #148]	; (8005984 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058f6:	60fb      	str	r3, [r7, #12]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d006      	beq.n	800590c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005904:	d131      	bne.n	800596a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005906:	4b20      	ldr	r3, [pc, #128]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005908:	617b      	str	r3, [r7, #20]
          break;
 800590a:	e031      	b.n	8005970 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800590c:	4b1d      	ldr	r3, [pc, #116]	; (8005984 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005914:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005918:	d109      	bne.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800591a:	4b1a      	ldr	r3, [pc, #104]	; (8005984 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800591c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005920:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005924:	4a19      	ldr	r2, [pc, #100]	; (800598c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005926:	fbb2 f3f3 	udiv	r3, r2, r3
 800592a:	613b      	str	r3, [r7, #16]
 800592c:	e008      	b.n	8005940 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800592e:	4b15      	ldr	r3, [pc, #84]	; (8005984 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005930:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005934:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005938:	4a15      	ldr	r2, [pc, #84]	; (8005990 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800593a:	fbb2 f3f3 	udiv	r3, r2, r3
 800593e:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005940:	4b10      	ldr	r3, [pc, #64]	; (8005984 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005942:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005946:	099b      	lsrs	r3, r3, #6
 8005948:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	fb02 f303 	mul.w	r3, r2, r3
 8005952:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005954:	4b0b      	ldr	r3, [pc, #44]	; (8005984 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005956:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800595a:	0f1b      	lsrs	r3, r3, #28
 800595c:	f003 0307 	and.w	r3, r3, #7
 8005960:	68ba      	ldr	r2, [r7, #8]
 8005962:	fbb2 f3f3 	udiv	r3, r2, r3
 8005966:	617b      	str	r3, [r7, #20]
          break;
 8005968:	e002      	b.n	8005970 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800596a:	2300      	movs	r3, #0
 800596c:	617b      	str	r3, [r7, #20]
          break;
 800596e:	bf00      	nop
        }
      }
      break;
 8005970:	e000      	b.n	8005974 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
  default:
    {
       break;
 8005972:	bf00      	nop
    }
  }
  return frequency;
 8005974:	697b      	ldr	r3, [r7, #20]
}
 8005976:	4618      	mov	r0, r3
 8005978:	371c      	adds	r7, #28
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	40023800 	.word	0x40023800
 8005988:	00bb8000 	.word	0x00bb8000
 800598c:	007a1200 	.word	0x007a1200
 8005990:	00f42400 	.word	0x00f42400

08005994 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005994:	b084      	sub	sp, #16
 8005996:	b580      	push	{r7, lr}
 8005998:	b084      	sub	sp, #16
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
 800599e:	f107 001c 	add.w	r0, r7, #28
 80059a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80059a6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d123      	bne.n	80059f6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80059c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80059d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d105      	bne.n	80059ea <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f001 fae2 	bl	8006fb4 <USB_CoreReset>
 80059f0:	4603      	mov	r3, r0
 80059f2:	73fb      	strb	r3, [r7, #15]
 80059f4:	e01b      	b.n	8005a2e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f001 fad6 	bl	8006fb4 <USB_CoreReset>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005a0c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d106      	bne.n	8005a22 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a18:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	639a      	str	r2, [r3, #56]	; 0x38
 8005a20:	e005      	b.n	8005a2e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a26:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005a2e:	7fbb      	ldrb	r3, [r7, #30]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d10b      	bne.n	8005a4c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	f043 0206 	orr.w	r2, r3, #6
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	f043 0220 	orr.w	r2, r3, #32
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3710      	adds	r7, #16
 8005a52:	46bd      	mov	sp, r7
 8005a54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a58:	b004      	add	sp, #16
 8005a5a:	4770      	bx	lr

08005a5c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b087      	sub	sp, #28
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	4613      	mov	r3, r2
 8005a68:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005a6a:	79fb      	ldrb	r3, [r7, #7]
 8005a6c:	2b02      	cmp	r3, #2
 8005a6e:	d165      	bne.n	8005b3c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	4a41      	ldr	r2, [pc, #260]	; (8005b78 <USB_SetTurnaroundTime+0x11c>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d906      	bls.n	8005a86 <USB_SetTurnaroundTime+0x2a>
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	4a40      	ldr	r2, [pc, #256]	; (8005b7c <USB_SetTurnaroundTime+0x120>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d202      	bcs.n	8005a86 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005a80:	230f      	movs	r3, #15
 8005a82:	617b      	str	r3, [r7, #20]
 8005a84:	e062      	b.n	8005b4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	4a3c      	ldr	r2, [pc, #240]	; (8005b7c <USB_SetTurnaroundTime+0x120>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d306      	bcc.n	8005a9c <USB_SetTurnaroundTime+0x40>
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	4a3b      	ldr	r2, [pc, #236]	; (8005b80 <USB_SetTurnaroundTime+0x124>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d202      	bcs.n	8005a9c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005a96:	230e      	movs	r3, #14
 8005a98:	617b      	str	r3, [r7, #20]
 8005a9a:	e057      	b.n	8005b4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	4a38      	ldr	r2, [pc, #224]	; (8005b80 <USB_SetTurnaroundTime+0x124>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d306      	bcc.n	8005ab2 <USB_SetTurnaroundTime+0x56>
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	4a37      	ldr	r2, [pc, #220]	; (8005b84 <USB_SetTurnaroundTime+0x128>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d202      	bcs.n	8005ab2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005aac:	230d      	movs	r3, #13
 8005aae:	617b      	str	r3, [r7, #20]
 8005ab0:	e04c      	b.n	8005b4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	4a33      	ldr	r2, [pc, #204]	; (8005b84 <USB_SetTurnaroundTime+0x128>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d306      	bcc.n	8005ac8 <USB_SetTurnaroundTime+0x6c>
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	4a32      	ldr	r2, [pc, #200]	; (8005b88 <USB_SetTurnaroundTime+0x12c>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d802      	bhi.n	8005ac8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005ac2:	230c      	movs	r3, #12
 8005ac4:	617b      	str	r3, [r7, #20]
 8005ac6:	e041      	b.n	8005b4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	4a2f      	ldr	r2, [pc, #188]	; (8005b88 <USB_SetTurnaroundTime+0x12c>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d906      	bls.n	8005ade <USB_SetTurnaroundTime+0x82>
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	4a2e      	ldr	r2, [pc, #184]	; (8005b8c <USB_SetTurnaroundTime+0x130>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d802      	bhi.n	8005ade <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005ad8:	230b      	movs	r3, #11
 8005ada:	617b      	str	r3, [r7, #20]
 8005adc:	e036      	b.n	8005b4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	4a2a      	ldr	r2, [pc, #168]	; (8005b8c <USB_SetTurnaroundTime+0x130>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d906      	bls.n	8005af4 <USB_SetTurnaroundTime+0x98>
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	4a29      	ldr	r2, [pc, #164]	; (8005b90 <USB_SetTurnaroundTime+0x134>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d802      	bhi.n	8005af4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005aee:	230a      	movs	r3, #10
 8005af0:	617b      	str	r3, [r7, #20]
 8005af2:	e02b      	b.n	8005b4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	4a26      	ldr	r2, [pc, #152]	; (8005b90 <USB_SetTurnaroundTime+0x134>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d906      	bls.n	8005b0a <USB_SetTurnaroundTime+0xae>
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	4a25      	ldr	r2, [pc, #148]	; (8005b94 <USB_SetTurnaroundTime+0x138>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d202      	bcs.n	8005b0a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005b04:	2309      	movs	r3, #9
 8005b06:	617b      	str	r3, [r7, #20]
 8005b08:	e020      	b.n	8005b4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	4a21      	ldr	r2, [pc, #132]	; (8005b94 <USB_SetTurnaroundTime+0x138>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d306      	bcc.n	8005b20 <USB_SetTurnaroundTime+0xc4>
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	4a20      	ldr	r2, [pc, #128]	; (8005b98 <USB_SetTurnaroundTime+0x13c>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d802      	bhi.n	8005b20 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005b1a:	2308      	movs	r3, #8
 8005b1c:	617b      	str	r3, [r7, #20]
 8005b1e:	e015      	b.n	8005b4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	4a1d      	ldr	r2, [pc, #116]	; (8005b98 <USB_SetTurnaroundTime+0x13c>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d906      	bls.n	8005b36 <USB_SetTurnaroundTime+0xda>
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	4a1c      	ldr	r2, [pc, #112]	; (8005b9c <USB_SetTurnaroundTime+0x140>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d202      	bcs.n	8005b36 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005b30:	2307      	movs	r3, #7
 8005b32:	617b      	str	r3, [r7, #20]
 8005b34:	e00a      	b.n	8005b4c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005b36:	2306      	movs	r3, #6
 8005b38:	617b      	str	r3, [r7, #20]
 8005b3a:	e007      	b.n	8005b4c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005b3c:	79fb      	ldrb	r3, [r7, #7]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d102      	bne.n	8005b48 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005b42:	2309      	movs	r3, #9
 8005b44:	617b      	str	r3, [r7, #20]
 8005b46:	e001      	b.n	8005b4c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005b48:	2309      	movs	r3, #9
 8005b4a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	68da      	ldr	r2, [r3, #12]
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	029b      	lsls	r3, r3, #10
 8005b60:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005b64:	431a      	orrs	r2, r3
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	371c      	adds	r7, #28
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr
 8005b78:	00d8acbf 	.word	0x00d8acbf
 8005b7c:	00e4e1c0 	.word	0x00e4e1c0
 8005b80:	00f42400 	.word	0x00f42400
 8005b84:	01067380 	.word	0x01067380
 8005b88:	011a499f 	.word	0x011a499f
 8005b8c:	01312cff 	.word	0x01312cff
 8005b90:	014ca43f 	.word	0x014ca43f
 8005b94:	016e3600 	.word	0x016e3600
 8005b98:	01a6ab1f 	.word	0x01a6ab1f
 8005b9c:	01e84800 	.word	0x01e84800

08005ba0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f043 0201 	orr.w	r2, r3, #1
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	370c      	adds	r7, #12
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr

08005bc2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bc2:	b480      	push	{r7}
 8005bc4:	b083      	sub	sp, #12
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f023 0201 	bic.w	r2, r3, #1
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	460b      	mov	r3, r1
 8005bee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005c00:	78fb      	ldrb	r3, [r7, #3]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d115      	bne.n	8005c32 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005c12:	200a      	movs	r0, #10
 8005c14:	f7fb faa8 	bl	8001168 <HAL_Delay>
      ms += 10U;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	330a      	adds	r3, #10
 8005c1c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f001 f939 	bl	8006e96 <USB_GetMode>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d01e      	beq.n	8005c68 <USB_SetCurrentMode+0x84>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2bc7      	cmp	r3, #199	; 0xc7
 8005c2e:	d9f0      	bls.n	8005c12 <USB_SetCurrentMode+0x2e>
 8005c30:	e01a      	b.n	8005c68 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005c32:	78fb      	ldrb	r3, [r7, #3]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d115      	bne.n	8005c64 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005c44:	200a      	movs	r0, #10
 8005c46:	f7fb fa8f 	bl	8001168 <HAL_Delay>
      ms += 10U;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	330a      	adds	r3, #10
 8005c4e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f001 f920 	bl	8006e96 <USB_GetMode>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d005      	beq.n	8005c68 <USB_SetCurrentMode+0x84>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2bc7      	cmp	r3, #199	; 0xc7
 8005c60:	d9f0      	bls.n	8005c44 <USB_SetCurrentMode+0x60>
 8005c62:	e001      	b.n	8005c68 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e005      	b.n	8005c74 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2bc8      	cmp	r3, #200	; 0xc8
 8005c6c:	d101      	bne.n	8005c72 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e000      	b.n	8005c74 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3710      	adds	r7, #16
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c7c:	b084      	sub	sp, #16
 8005c7e:	b580      	push	{r7, lr}
 8005c80:	b086      	sub	sp, #24
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
 8005c86:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005c8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005c96:	2300      	movs	r3, #0
 8005c98:	613b      	str	r3, [r7, #16]
 8005c9a:	e009      	b.n	8005cb0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	3340      	adds	r3, #64	; 0x40
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	4413      	add	r3, r2
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	3301      	adds	r3, #1
 8005cae:	613b      	str	r3, [r7, #16]
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	2b0e      	cmp	r3, #14
 8005cb4:	d9f2      	bls.n	8005c9c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005cb6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d11c      	bne.n	8005cf8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ccc:	f043 0302 	orr.w	r3, r3, #2
 8005cd0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cee:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	639a      	str	r2, [r3, #56]	; 0x38
 8005cf6:	e00b      	b.n	8005d10 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d08:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d16:	461a      	mov	r2, r3
 8005d18:	2300      	movs	r3, #0
 8005d1a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d1c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d10d      	bne.n	8005d40 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005d24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d104      	bne.n	8005d36 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005d2c:	2100      	movs	r1, #0
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 f968 	bl	8006004 <USB_SetDevSpeed>
 8005d34:	e008      	b.n	8005d48 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005d36:	2101      	movs	r1, #1
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 f963 	bl	8006004 <USB_SetDevSpeed>
 8005d3e:	e003      	b.n	8005d48 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005d40:	2103      	movs	r1, #3
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 f95e 	bl	8006004 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d48:	2110      	movs	r1, #16
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 f8fa 	bl	8005f44 <USB_FlushTxFifo>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d001      	beq.n	8005d5a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f924 	bl	8005fa8 <USB_FlushRxFifo>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d001      	beq.n	8005d6a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d70:	461a      	mov	r2, r3
 8005d72:	2300      	movs	r3, #0
 8005d74:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	2300      	movs	r3, #0
 8005d80:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d88:	461a      	mov	r2, r3
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d8e:	2300      	movs	r3, #0
 8005d90:	613b      	str	r3, [r7, #16]
 8005d92:	e043      	b.n	8005e1c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	015a      	lsls	r2, r3, #5
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005da6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005daa:	d118      	bne.n	8005dde <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d10a      	bne.n	8005dc8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	015a      	lsls	r2, r3, #5
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	4413      	add	r3, r2
 8005dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005dc4:	6013      	str	r3, [r2, #0]
 8005dc6:	e013      	b.n	8005df0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	015a      	lsls	r2, r3, #5
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	4413      	add	r3, r2
 8005dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005dda:	6013      	str	r3, [r2, #0]
 8005ddc:	e008      	b.n	8005df0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	015a      	lsls	r2, r3, #5
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	4413      	add	r3, r2
 8005de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dea:	461a      	mov	r2, r3
 8005dec:	2300      	movs	r3, #0
 8005dee:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	015a      	lsls	r2, r3, #5
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	4413      	add	r3, r2
 8005df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	2300      	movs	r3, #0
 8005e00:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	015a      	lsls	r2, r3, #5
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	4413      	add	r3, r2
 8005e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e0e:	461a      	mov	r2, r3
 8005e10:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e14:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	3301      	adds	r3, #1
 8005e1a:	613b      	str	r3, [r7, #16]
 8005e1c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005e20:	461a      	mov	r2, r3
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d3b5      	bcc.n	8005d94 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e28:	2300      	movs	r3, #0
 8005e2a:	613b      	str	r3, [r7, #16]
 8005e2c:	e043      	b.n	8005eb6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	015a      	lsls	r2, r3, #5
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	4413      	add	r3, r2
 8005e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e44:	d118      	bne.n	8005e78 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d10a      	bne.n	8005e62 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	015a      	lsls	r2, r3, #5
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	4413      	add	r3, r2
 8005e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e58:	461a      	mov	r2, r3
 8005e5a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e5e:	6013      	str	r3, [r2, #0]
 8005e60:	e013      	b.n	8005e8a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	015a      	lsls	r2, r3, #5
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	4413      	add	r3, r2
 8005e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e6e:	461a      	mov	r2, r3
 8005e70:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e74:	6013      	str	r3, [r2, #0]
 8005e76:	e008      	b.n	8005e8a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	015a      	lsls	r2, r3, #5
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	4413      	add	r3, r2
 8005e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e84:	461a      	mov	r2, r3
 8005e86:	2300      	movs	r3, #0
 8005e88:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	015a      	lsls	r2, r3, #5
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	4413      	add	r3, r2
 8005e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e96:	461a      	mov	r2, r3
 8005e98:	2300      	movs	r3, #0
 8005e9a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	015a      	lsls	r2, r3, #5
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005eae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	613b      	str	r3, [r7, #16]
 8005eb6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005eba:	461a      	mov	r2, r3
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d3b5      	bcc.n	8005e2e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ed0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ed4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005ee2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005ee4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d105      	bne.n	8005ef8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	699b      	ldr	r3, [r3, #24]
 8005ef0:	f043 0210 	orr.w	r2, r3, #16
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	699a      	ldr	r2, [r3, #24]
 8005efc:	4b10      	ldr	r3, [pc, #64]	; (8005f40 <USB_DevInit+0x2c4>)
 8005efe:	4313      	orrs	r3, r2
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005f04:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d005      	beq.n	8005f18 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	699b      	ldr	r3, [r3, #24]
 8005f10:	f043 0208 	orr.w	r2, r3, #8
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005f18:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d107      	bne.n	8005f30 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	699b      	ldr	r3, [r3, #24]
 8005f24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f28:	f043 0304 	orr.w	r3, r3, #4
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005f30:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3718      	adds	r7, #24
 8005f36:	46bd      	mov	sp, r7
 8005f38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f3c:	b004      	add	sp, #16
 8005f3e:	4770      	bx	lr
 8005f40:	803c3800 	.word	0x803c3800

08005f44 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	3301      	adds	r3, #1
 8005f56:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005f5e:	d901      	bls.n	8005f64 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005f60:	2303      	movs	r3, #3
 8005f62:	e01b      	b.n	8005f9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	daf2      	bge.n	8005f52 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	019b      	lsls	r3, r3, #6
 8005f74:	f043 0220 	orr.w	r2, r3, #32
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	3301      	adds	r3, #1
 8005f80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005f88:	d901      	bls.n	8005f8e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	e006      	b.n	8005f9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	f003 0320 	and.w	r3, r3, #32
 8005f96:	2b20      	cmp	r3, #32
 8005f98:	d0f0      	beq.n	8005f7c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3714      	adds	r7, #20
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005fc0:	d901      	bls.n	8005fc6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e018      	b.n	8005ff8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	daf2      	bge.n	8005fb4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2210      	movs	r2, #16
 8005fd6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	3301      	adds	r3, #1
 8005fdc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005fe4:	d901      	bls.n	8005fea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e006      	b.n	8005ff8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	f003 0310 	and.w	r3, r3, #16
 8005ff2:	2b10      	cmp	r3, #16
 8005ff4:	d0f0      	beq.n	8005fd8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3714      	adds	r7, #20
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	460b      	mov	r3, r1
 800600e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	78fb      	ldrb	r3, [r7, #3]
 800601e:	68f9      	ldr	r1, [r7, #12]
 8006020:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006024:	4313      	orrs	r3, r2
 8006026:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3714      	adds	r7, #20
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr

08006036 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006036:	b480      	push	{r7}
 8006038:	b087      	sub	sp, #28
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	f003 0306 	and.w	r3, r3, #6
 800604e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d102      	bne.n	800605c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006056:	2300      	movs	r3, #0
 8006058:	75fb      	strb	r3, [r7, #23]
 800605a:	e00a      	b.n	8006072 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2b02      	cmp	r3, #2
 8006060:	d002      	beq.n	8006068 <USB_GetDevSpeed+0x32>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2b06      	cmp	r3, #6
 8006066:	d102      	bne.n	800606e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006068:	2302      	movs	r3, #2
 800606a:	75fb      	strb	r3, [r7, #23]
 800606c:	e001      	b.n	8006072 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800606e:	230f      	movs	r3, #15
 8006070:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006072:	7dfb      	ldrb	r3, [r7, #23]
}
 8006074:	4618      	mov	r0, r3
 8006076:	371c      	adds	r7, #28
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006080:	b480      	push	{r7}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	785b      	ldrb	r3, [r3, #1]
 8006098:	2b01      	cmp	r3, #1
 800609a:	d13a      	bne.n	8006112 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060a2:	69da      	ldr	r2, [r3, #28]
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	f003 030f 	and.w	r3, r3, #15
 80060ac:	2101      	movs	r1, #1
 80060ae:	fa01 f303 	lsl.w	r3, r1, r3
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	68f9      	ldr	r1, [r7, #12]
 80060b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060ba:	4313      	orrs	r3, r2
 80060bc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	015a      	lsls	r2, r3, #5
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	4413      	add	r3, r2
 80060c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d155      	bne.n	8006180 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	015a      	lsls	r2, r3, #5
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	4413      	add	r3, r2
 80060dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	791b      	ldrb	r3, [r3, #4]
 80060ee:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80060f0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	059b      	lsls	r3, r3, #22
 80060f6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80060f8:	4313      	orrs	r3, r2
 80060fa:	68ba      	ldr	r2, [r7, #8]
 80060fc:	0151      	lsls	r1, r2, #5
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	440a      	add	r2, r1
 8006102:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006106:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800610a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800610e:	6013      	str	r3, [r2, #0]
 8006110:	e036      	b.n	8006180 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006118:	69da      	ldr	r2, [r3, #28]
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	f003 030f 	and.w	r3, r3, #15
 8006122:	2101      	movs	r1, #1
 8006124:	fa01 f303 	lsl.w	r3, r1, r3
 8006128:	041b      	lsls	r3, r3, #16
 800612a:	68f9      	ldr	r1, [r7, #12]
 800612c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006130:	4313      	orrs	r3, r2
 8006132:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	015a      	lsls	r2, r3, #5
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	4413      	add	r3, r2
 800613c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006146:	2b00      	cmp	r3, #0
 8006148:	d11a      	bne.n	8006180 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	015a      	lsls	r2, r3, #5
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	4413      	add	r3, r2
 8006152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	791b      	ldrb	r3, [r3, #4]
 8006164:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006166:	430b      	orrs	r3, r1
 8006168:	4313      	orrs	r3, r2
 800616a:	68ba      	ldr	r2, [r7, #8]
 800616c:	0151      	lsls	r1, r2, #5
 800616e:	68fa      	ldr	r2, [r7, #12]
 8006170:	440a      	add	r2, r1
 8006172:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006176:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800617a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800617e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3714      	adds	r7, #20
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
	...

08006190 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006190:	b480      	push	{r7}
 8006192:	b085      	sub	sp, #20
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	785b      	ldrb	r3, [r3, #1]
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d161      	bne.n	8006270 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	015a      	lsls	r2, r3, #5
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	4413      	add	r3, r2
 80061b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061c2:	d11f      	bne.n	8006204 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	015a      	lsls	r2, r3, #5
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	4413      	add	r3, r2
 80061cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68ba      	ldr	r2, [r7, #8]
 80061d4:	0151      	lsls	r1, r2, #5
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	440a      	add	r2, r1
 80061da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80061e2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	015a      	lsls	r2, r3, #5
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	4413      	add	r3, r2
 80061ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68ba      	ldr	r2, [r7, #8]
 80061f4:	0151      	lsls	r1, r2, #5
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	440a      	add	r2, r1
 80061fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006202:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800620a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	f003 030f 	and.w	r3, r3, #15
 8006214:	2101      	movs	r1, #1
 8006216:	fa01 f303 	lsl.w	r3, r1, r3
 800621a:	b29b      	uxth	r3, r3
 800621c:	43db      	mvns	r3, r3
 800621e:	68f9      	ldr	r1, [r7, #12]
 8006220:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006224:	4013      	ands	r3, r2
 8006226:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800622e:	69da      	ldr	r2, [r3, #28]
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	f003 030f 	and.w	r3, r3, #15
 8006238:	2101      	movs	r1, #1
 800623a:	fa01 f303 	lsl.w	r3, r1, r3
 800623e:	b29b      	uxth	r3, r3
 8006240:	43db      	mvns	r3, r3
 8006242:	68f9      	ldr	r1, [r7, #12]
 8006244:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006248:	4013      	ands	r3, r2
 800624a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	015a      	lsls	r2, r3, #5
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	4413      	add	r3, r2
 8006254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	0159      	lsls	r1, r3, #5
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	440b      	add	r3, r1
 8006262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006266:	4619      	mov	r1, r3
 8006268:	4b35      	ldr	r3, [pc, #212]	; (8006340 <USB_DeactivateEndpoint+0x1b0>)
 800626a:	4013      	ands	r3, r2
 800626c:	600b      	str	r3, [r1, #0]
 800626e:	e060      	b.n	8006332 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	015a      	lsls	r2, r3, #5
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	4413      	add	r3, r2
 8006278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006282:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006286:	d11f      	bne.n	80062c8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	015a      	lsls	r2, r3, #5
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	4413      	add	r3, r2
 8006290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68ba      	ldr	r2, [r7, #8]
 8006298:	0151      	lsls	r1, r2, #5
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	440a      	add	r2, r1
 800629e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80062a6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	015a      	lsls	r2, r3, #5
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	4413      	add	r3, r2
 80062b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68ba      	ldr	r2, [r7, #8]
 80062b8:	0151      	lsls	r1, r2, #5
 80062ba:	68fa      	ldr	r2, [r7, #12]
 80062bc:	440a      	add	r2, r1
 80062be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	f003 030f 	and.w	r3, r3, #15
 80062d8:	2101      	movs	r1, #1
 80062da:	fa01 f303 	lsl.w	r3, r1, r3
 80062de:	041b      	lsls	r3, r3, #16
 80062e0:	43db      	mvns	r3, r3
 80062e2:	68f9      	ldr	r1, [r7, #12]
 80062e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062e8:	4013      	ands	r3, r2
 80062ea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062f2:	69da      	ldr	r2, [r3, #28]
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	f003 030f 	and.w	r3, r3, #15
 80062fc:	2101      	movs	r1, #1
 80062fe:	fa01 f303 	lsl.w	r3, r1, r3
 8006302:	041b      	lsls	r3, r3, #16
 8006304:	43db      	mvns	r3, r3
 8006306:	68f9      	ldr	r1, [r7, #12]
 8006308:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800630c:	4013      	ands	r3, r2
 800630e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	015a      	lsls	r2, r3, #5
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	4413      	add	r3, r2
 8006318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	0159      	lsls	r1, r3, #5
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	440b      	add	r3, r1
 8006326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800632a:	4619      	mov	r1, r3
 800632c:	4b05      	ldr	r3, [pc, #20]	; (8006344 <USB_DeactivateEndpoint+0x1b4>)
 800632e:	4013      	ands	r3, r2
 8006330:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006332:	2300      	movs	r3, #0
}
 8006334:	4618      	mov	r0, r3
 8006336:	3714      	adds	r7, #20
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr
 8006340:	ec337800 	.word	0xec337800
 8006344:	eff37800 	.word	0xeff37800

08006348 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b08a      	sub	sp, #40	; 0x28
 800634c:	af02      	add	r7, sp, #8
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	4613      	mov	r3, r2
 8006354:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	785b      	ldrb	r3, [r3, #1]
 8006364:	2b01      	cmp	r3, #1
 8006366:	f040 817a 	bne.w	800665e <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d132      	bne.n	80063d8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006372:	69bb      	ldr	r3, [r7, #24]
 8006374:	015a      	lsls	r2, r3, #5
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	4413      	add	r3, r2
 800637a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800637e:	691b      	ldr	r3, [r3, #16]
 8006380:	69ba      	ldr	r2, [r7, #24]
 8006382:	0151      	lsls	r1, r2, #5
 8006384:	69fa      	ldr	r2, [r7, #28]
 8006386:	440a      	add	r2, r1
 8006388:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800638c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006390:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006394:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	015a      	lsls	r2, r3, #5
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	4413      	add	r3, r2
 800639e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063a2:	691b      	ldr	r3, [r3, #16]
 80063a4:	69ba      	ldr	r2, [r7, #24]
 80063a6:	0151      	lsls	r1, r2, #5
 80063a8:	69fa      	ldr	r2, [r7, #28]
 80063aa:	440a      	add	r2, r1
 80063ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	015a      	lsls	r2, r3, #5
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	4413      	add	r3, r2
 80063be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	69ba      	ldr	r2, [r7, #24]
 80063c6:	0151      	lsls	r1, r2, #5
 80063c8:	69fa      	ldr	r2, [r7, #28]
 80063ca:	440a      	add	r2, r1
 80063cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063d0:	0cdb      	lsrs	r3, r3, #19
 80063d2:	04db      	lsls	r3, r3, #19
 80063d4:	6113      	str	r3, [r2, #16]
 80063d6:	e092      	b.n	80064fe <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	015a      	lsls	r2, r3, #5
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	4413      	add	r3, r2
 80063e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	69ba      	ldr	r2, [r7, #24]
 80063e8:	0151      	lsls	r1, r2, #5
 80063ea:	69fa      	ldr	r2, [r7, #28]
 80063ec:	440a      	add	r2, r1
 80063ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063f2:	0cdb      	lsrs	r3, r3, #19
 80063f4:	04db      	lsls	r3, r3, #19
 80063f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	015a      	lsls	r2, r3, #5
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	4413      	add	r3, r2
 8006400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	69ba      	ldr	r2, [r7, #24]
 8006408:	0151      	lsls	r1, r2, #5
 800640a:	69fa      	ldr	r2, [r7, #28]
 800640c:	440a      	add	r2, r1
 800640e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006412:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006416:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800641a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d11a      	bne.n	8006458 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	691a      	ldr	r2, [r3, #16]
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	429a      	cmp	r2, r3
 800642c:	d903      	bls.n	8006436 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	689a      	ldr	r2, [r3, #8]
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006436:	69bb      	ldr	r3, [r7, #24]
 8006438:	015a      	lsls	r2, r3, #5
 800643a:	69fb      	ldr	r3, [r7, #28]
 800643c:	4413      	add	r3, r2
 800643e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006442:	691b      	ldr	r3, [r3, #16]
 8006444:	69ba      	ldr	r2, [r7, #24]
 8006446:	0151      	lsls	r1, r2, #5
 8006448:	69fa      	ldr	r2, [r7, #28]
 800644a:	440a      	add	r2, r1
 800644c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006450:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006454:	6113      	str	r3, [r2, #16]
 8006456:	e01b      	b.n	8006490 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	015a      	lsls	r2, r3, #5
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	4413      	add	r3, r2
 8006460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006464:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	6919      	ldr	r1, [r3, #16]
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	440b      	add	r3, r1
 8006470:	1e59      	subs	r1, r3, #1
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	fbb1 f3f3 	udiv	r3, r1, r3
 800647a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800647c:	4ba2      	ldr	r3, [pc, #648]	; (8006708 <USB_EPStartXfer+0x3c0>)
 800647e:	400b      	ands	r3, r1
 8006480:	69b9      	ldr	r1, [r7, #24]
 8006482:	0148      	lsls	r0, r1, #5
 8006484:	69f9      	ldr	r1, [r7, #28]
 8006486:	4401      	add	r1, r0
 8006488:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800648c:	4313      	orrs	r3, r2
 800648e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	015a      	lsls	r2, r3, #5
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	4413      	add	r3, r2
 8006498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800649c:	691a      	ldr	r2, [r3, #16]
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064a6:	69b9      	ldr	r1, [r7, #24]
 80064a8:	0148      	lsls	r0, r1, #5
 80064aa:	69f9      	ldr	r1, [r7, #28]
 80064ac:	4401      	add	r1, r0
 80064ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80064b2:	4313      	orrs	r3, r2
 80064b4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	791b      	ldrb	r3, [r3, #4]
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d11f      	bne.n	80064fe <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	015a      	lsls	r2, r3, #5
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	4413      	add	r3, r2
 80064c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	69ba      	ldr	r2, [r7, #24]
 80064ce:	0151      	lsls	r1, r2, #5
 80064d0:	69fa      	ldr	r2, [r7, #28]
 80064d2:	440a      	add	r2, r1
 80064d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064d8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80064dc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	015a      	lsls	r2, r3, #5
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	4413      	add	r3, r2
 80064e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	69ba      	ldr	r2, [r7, #24]
 80064ee:	0151      	lsls	r1, r2, #5
 80064f0:	69fa      	ldr	r2, [r7, #28]
 80064f2:	440a      	add	r2, r1
 80064f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80064fc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80064fe:	79fb      	ldrb	r3, [r7, #7]
 8006500:	2b01      	cmp	r3, #1
 8006502:	d14b      	bne.n	800659c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	69db      	ldr	r3, [r3, #28]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d009      	beq.n	8006520 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	015a      	lsls	r2, r3, #5
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	4413      	add	r3, r2
 8006514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006518:	461a      	mov	r2, r3
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	69db      	ldr	r3, [r3, #28]
 800651e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	791b      	ldrb	r3, [r3, #4]
 8006524:	2b01      	cmp	r3, #1
 8006526:	d128      	bne.n	800657a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006534:	2b00      	cmp	r3, #0
 8006536:	d110      	bne.n	800655a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	015a      	lsls	r2, r3, #5
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	4413      	add	r3, r2
 8006540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	69ba      	ldr	r2, [r7, #24]
 8006548:	0151      	lsls	r1, r2, #5
 800654a:	69fa      	ldr	r2, [r7, #28]
 800654c:	440a      	add	r2, r1
 800654e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006552:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006556:	6013      	str	r3, [r2, #0]
 8006558:	e00f      	b.n	800657a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	015a      	lsls	r2, r3, #5
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	4413      	add	r3, r2
 8006562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	69ba      	ldr	r2, [r7, #24]
 800656a:	0151      	lsls	r1, r2, #5
 800656c:	69fa      	ldr	r2, [r7, #28]
 800656e:	440a      	add	r2, r1
 8006570:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006578:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	015a      	lsls	r2, r3, #5
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	4413      	add	r3, r2
 8006582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	69ba      	ldr	r2, [r7, #24]
 800658a:	0151      	lsls	r1, r2, #5
 800658c:	69fa      	ldr	r2, [r7, #28]
 800658e:	440a      	add	r2, r1
 8006590:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006594:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006598:	6013      	str	r3, [r2, #0]
 800659a:	e165      	b.n	8006868 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	015a      	lsls	r2, r3, #5
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	4413      	add	r3, r2
 80065a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	69ba      	ldr	r2, [r7, #24]
 80065ac:	0151      	lsls	r1, r2, #5
 80065ae:	69fa      	ldr	r2, [r7, #28]
 80065b0:	440a      	add	r2, r1
 80065b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80065ba:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	791b      	ldrb	r3, [r3, #4]
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d015      	beq.n	80065f0 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	f000 814d 	beq.w	8006868 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	f003 030f 	and.w	r3, r3, #15
 80065de:	2101      	movs	r1, #1
 80065e0:	fa01 f303 	lsl.w	r3, r1, r3
 80065e4:	69f9      	ldr	r1, [r7, #28]
 80065e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065ea:	4313      	orrs	r3, r2
 80065ec:	634b      	str	r3, [r1, #52]	; 0x34
 80065ee:	e13b      	b.n	8006868 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d110      	bne.n	8006622 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	015a      	lsls	r2, r3, #5
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	4413      	add	r3, r2
 8006608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	69ba      	ldr	r2, [r7, #24]
 8006610:	0151      	lsls	r1, r2, #5
 8006612:	69fa      	ldr	r2, [r7, #28]
 8006614:	440a      	add	r2, r1
 8006616:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800661a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800661e:	6013      	str	r3, [r2, #0]
 8006620:	e00f      	b.n	8006642 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	015a      	lsls	r2, r3, #5
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	4413      	add	r3, r2
 800662a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	69ba      	ldr	r2, [r7, #24]
 8006632:	0151      	lsls	r1, r2, #5
 8006634:	69fa      	ldr	r2, [r7, #28]
 8006636:	440a      	add	r2, r1
 8006638:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800663c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006640:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	68d9      	ldr	r1, [r3, #12]
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	781a      	ldrb	r2, [r3, #0]
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	b298      	uxth	r0, r3
 8006650:	79fb      	ldrb	r3, [r7, #7]
 8006652:	9300      	str	r3, [sp, #0]
 8006654:	4603      	mov	r3, r0
 8006656:	68f8      	ldr	r0, [r7, #12]
 8006658:	f000 f9b8 	bl	80069cc <USB_WritePacket>
 800665c:	e104      	b.n	8006868 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	015a      	lsls	r2, r3, #5
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	4413      	add	r3, r2
 8006666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	69ba      	ldr	r2, [r7, #24]
 800666e:	0151      	lsls	r1, r2, #5
 8006670:	69fa      	ldr	r2, [r7, #28]
 8006672:	440a      	add	r2, r1
 8006674:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006678:	0cdb      	lsrs	r3, r3, #19
 800667a:	04db      	lsls	r3, r3, #19
 800667c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	015a      	lsls	r2, r3, #5
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	4413      	add	r3, r2
 8006686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800668a:	691b      	ldr	r3, [r3, #16]
 800668c:	69ba      	ldr	r2, [r7, #24]
 800668e:	0151      	lsls	r1, r2, #5
 8006690:	69fa      	ldr	r2, [r7, #28]
 8006692:	440a      	add	r2, r1
 8006694:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006698:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800669c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80066a0:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d131      	bne.n	800670c <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d003      	beq.n	80066b8 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	689a      	ldr	r2, [r3, #8]
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	689a      	ldr	r2, [r3, #8]
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80066c0:	69bb      	ldr	r3, [r7, #24]
 80066c2:	015a      	lsls	r2, r3, #5
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	4413      	add	r3, r2
 80066c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066cc:	691a      	ldr	r2, [r3, #16]
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	6a1b      	ldr	r3, [r3, #32]
 80066d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066d6:	69b9      	ldr	r1, [r7, #24]
 80066d8:	0148      	lsls	r0, r1, #5
 80066da:	69f9      	ldr	r1, [r7, #28]
 80066dc:	4401      	add	r1, r0
 80066de:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80066e2:	4313      	orrs	r3, r2
 80066e4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80066e6:	69bb      	ldr	r3, [r7, #24]
 80066e8:	015a      	lsls	r2, r3, #5
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	4413      	add	r3, r2
 80066ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066f2:	691b      	ldr	r3, [r3, #16]
 80066f4:	69ba      	ldr	r2, [r7, #24]
 80066f6:	0151      	lsls	r1, r2, #5
 80066f8:	69fa      	ldr	r2, [r7, #28]
 80066fa:	440a      	add	r2, r1
 80066fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006700:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006704:	6113      	str	r3, [r2, #16]
 8006706:	e061      	b.n	80067cc <USB_EPStartXfer+0x484>
 8006708:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	691b      	ldr	r3, [r3, #16]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d123      	bne.n	800675c <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	015a      	lsls	r2, r3, #5
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	4413      	add	r3, r2
 800671c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006720:	691a      	ldr	r2, [r3, #16]
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800672a:	69b9      	ldr	r1, [r7, #24]
 800672c:	0148      	lsls	r0, r1, #5
 800672e:	69f9      	ldr	r1, [r7, #28]
 8006730:	4401      	add	r1, r0
 8006732:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006736:	4313      	orrs	r3, r2
 8006738:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	015a      	lsls	r2, r3, #5
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	4413      	add	r3, r2
 8006742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006746:	691b      	ldr	r3, [r3, #16]
 8006748:	69ba      	ldr	r2, [r7, #24]
 800674a:	0151      	lsls	r1, r2, #5
 800674c:	69fa      	ldr	r2, [r7, #28]
 800674e:	440a      	add	r2, r1
 8006750:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006754:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006758:	6113      	str	r3, [r2, #16]
 800675a:	e037      	b.n	80067cc <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	691a      	ldr	r2, [r3, #16]
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	4413      	add	r3, r2
 8006766:	1e5a      	subs	r2, r3, #1
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006770:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	8afa      	ldrh	r2, [r7, #22]
 8006778:	fb03 f202 	mul.w	r2, r3, r2
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	015a      	lsls	r2, r3, #5
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	4413      	add	r3, r2
 8006788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800678c:	691a      	ldr	r2, [r3, #16]
 800678e:	8afb      	ldrh	r3, [r7, #22]
 8006790:	04d9      	lsls	r1, r3, #19
 8006792:	4b38      	ldr	r3, [pc, #224]	; (8006874 <USB_EPStartXfer+0x52c>)
 8006794:	400b      	ands	r3, r1
 8006796:	69b9      	ldr	r1, [r7, #24]
 8006798:	0148      	lsls	r0, r1, #5
 800679a:	69f9      	ldr	r1, [r7, #28]
 800679c:	4401      	add	r1, r0
 800679e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80067a2:	4313      	orrs	r3, r2
 80067a4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	015a      	lsls	r2, r3, #5
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	4413      	add	r3, r2
 80067ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b2:	691a      	ldr	r2, [r3, #16]
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	6a1b      	ldr	r3, [r3, #32]
 80067b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067bc:	69b9      	ldr	r1, [r7, #24]
 80067be:	0148      	lsls	r0, r1, #5
 80067c0:	69f9      	ldr	r1, [r7, #28]
 80067c2:	4401      	add	r1, r0
 80067c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80067c8:	4313      	orrs	r3, r2
 80067ca:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80067cc:	79fb      	ldrb	r3, [r7, #7]
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d10d      	bne.n	80067ee <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d009      	beq.n	80067ee <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	68d9      	ldr	r1, [r3, #12]
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	015a      	lsls	r2, r3, #5
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	4413      	add	r3, r2
 80067e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ea:	460a      	mov	r2, r1
 80067ec:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	791b      	ldrb	r3, [r3, #4]
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d128      	bne.n	8006848 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006802:	2b00      	cmp	r3, #0
 8006804:	d110      	bne.n	8006828 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	015a      	lsls	r2, r3, #5
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	4413      	add	r3, r2
 800680e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	69ba      	ldr	r2, [r7, #24]
 8006816:	0151      	lsls	r1, r2, #5
 8006818:	69fa      	ldr	r2, [r7, #28]
 800681a:	440a      	add	r2, r1
 800681c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006820:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006824:	6013      	str	r3, [r2, #0]
 8006826:	e00f      	b.n	8006848 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	015a      	lsls	r2, r3, #5
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	4413      	add	r3, r2
 8006830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	69ba      	ldr	r2, [r7, #24]
 8006838:	0151      	lsls	r1, r2, #5
 800683a:	69fa      	ldr	r2, [r7, #28]
 800683c:	440a      	add	r2, r1
 800683e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006846:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	015a      	lsls	r2, r3, #5
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	4413      	add	r3, r2
 8006850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	69ba      	ldr	r2, [r7, #24]
 8006858:	0151      	lsls	r1, r2, #5
 800685a:	69fa      	ldr	r2, [r7, #28]
 800685c:	440a      	add	r2, r1
 800685e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006862:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006866:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3720      	adds	r7, #32
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	1ff80000 	.word	0x1ff80000

08006878 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006878:	b480      	push	{r7}
 800687a:	b087      	sub	sp, #28
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006882:	2300      	movs	r3, #0
 8006884:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006886:	2300      	movs	r3, #0
 8006888:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	785b      	ldrb	r3, [r3, #1]
 8006892:	2b01      	cmp	r3, #1
 8006894:	d14a      	bne.n	800692c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	015a      	lsls	r2, r3, #5
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	4413      	add	r3, r2
 80068a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068ae:	f040 8086 	bne.w	80069be <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	015a      	lsls	r2, r3, #5
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	4413      	add	r3, r2
 80068bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	683a      	ldr	r2, [r7, #0]
 80068c4:	7812      	ldrb	r2, [r2, #0]
 80068c6:	0151      	lsls	r1, r2, #5
 80068c8:	693a      	ldr	r2, [r7, #16]
 80068ca:	440a      	add	r2, r1
 80068cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80068d4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	015a      	lsls	r2, r3, #5
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	4413      	add	r3, r2
 80068e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	683a      	ldr	r2, [r7, #0]
 80068e8:	7812      	ldrb	r2, [r2, #0]
 80068ea:	0151      	lsls	r1, r2, #5
 80068ec:	693a      	ldr	r2, [r7, #16]
 80068ee:	440a      	add	r2, r1
 80068f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	3301      	adds	r3, #1
 80068fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f242 7210 	movw	r2, #10000	; 0x2710
 8006906:	4293      	cmp	r3, r2
 8006908:	d902      	bls.n	8006910 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	75fb      	strb	r3, [r7, #23]
          break;
 800690e:	e056      	b.n	80069be <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	015a      	lsls	r2, r3, #5
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	4413      	add	r3, r2
 800691a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006924:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006928:	d0e7      	beq.n	80068fa <USB_EPStopXfer+0x82>
 800692a:	e048      	b.n	80069be <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	015a      	lsls	r2, r3, #5
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	4413      	add	r3, r2
 8006936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006940:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006944:	d13b      	bne.n	80069be <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	015a      	lsls	r2, r3, #5
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	4413      	add	r3, r2
 8006950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	683a      	ldr	r2, [r7, #0]
 8006958:	7812      	ldrb	r2, [r2, #0]
 800695a:	0151      	lsls	r1, r2, #5
 800695c:	693a      	ldr	r2, [r7, #16]
 800695e:	440a      	add	r2, r1
 8006960:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006964:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006968:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	015a      	lsls	r2, r3, #5
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	4413      	add	r3, r2
 8006974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	683a      	ldr	r2, [r7, #0]
 800697c:	7812      	ldrb	r2, [r2, #0]
 800697e:	0151      	lsls	r1, r2, #5
 8006980:	693a      	ldr	r2, [r7, #16]
 8006982:	440a      	add	r2, r1
 8006984:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006988:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800698c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	3301      	adds	r3, #1
 8006992:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f242 7210 	movw	r2, #10000	; 0x2710
 800699a:	4293      	cmp	r3, r2
 800699c:	d902      	bls.n	80069a4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	75fb      	strb	r3, [r7, #23]
          break;
 80069a2:	e00c      	b.n	80069be <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	015a      	lsls	r2, r3, #5
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	4413      	add	r3, r2
 80069ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069bc:	d0e7      	beq.n	800698e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80069be:	7dfb      	ldrb	r3, [r7, #23]
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	371c      	adds	r7, #28
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b089      	sub	sp, #36	; 0x24
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	4611      	mov	r1, r2
 80069d8:	461a      	mov	r2, r3
 80069da:	460b      	mov	r3, r1
 80069dc:	71fb      	strb	r3, [r7, #7]
 80069de:	4613      	mov	r3, r2
 80069e0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80069ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d123      	bne.n	8006a3a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80069f2:	88bb      	ldrh	r3, [r7, #4]
 80069f4:	3303      	adds	r3, #3
 80069f6:	089b      	lsrs	r3, r3, #2
 80069f8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80069fa:	2300      	movs	r3, #0
 80069fc:	61bb      	str	r3, [r7, #24]
 80069fe:	e018      	b.n	8006a32 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006a00:	79fb      	ldrb	r3, [r7, #7]
 8006a02:	031a      	lsls	r2, r3, #12
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	4413      	add	r3, r2
 8006a08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	3301      	adds	r3, #1
 8006a18:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006a1a:	69fb      	ldr	r3, [r7, #28]
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	3301      	adds	r3, #1
 8006a24:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	3301      	adds	r3, #1
 8006a2a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006a2c:	69bb      	ldr	r3, [r7, #24]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	61bb      	str	r3, [r7, #24]
 8006a32:	69ba      	ldr	r2, [r7, #24]
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d3e2      	bcc.n	8006a00 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006a3a:	2300      	movs	r3, #0
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3724      	adds	r7, #36	; 0x24
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b08b      	sub	sp, #44	; 0x2c
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	4613      	mov	r3, r2
 8006a54:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006a5e:	88fb      	ldrh	r3, [r7, #6]
 8006a60:	089b      	lsrs	r3, r3, #2
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006a66:	88fb      	ldrh	r3, [r7, #6]
 8006a68:	f003 0303 	and.w	r3, r3, #3
 8006a6c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006a6e:	2300      	movs	r3, #0
 8006a70:	623b      	str	r3, [r7, #32]
 8006a72:	e014      	b.n	8006a9e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a82:	3301      	adds	r3, #1
 8006a84:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a88:	3301      	adds	r3, #1
 8006a8a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8e:	3301      	adds	r3, #1
 8006a90:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a94:	3301      	adds	r3, #1
 8006a96:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006a98:	6a3b      	ldr	r3, [r7, #32]
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	623b      	str	r3, [r7, #32]
 8006a9e:	6a3a      	ldr	r2, [r7, #32]
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d3e6      	bcc.n	8006a74 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006aa6:	8bfb      	ldrh	r3, [r7, #30]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d01e      	beq.n	8006aea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006aac:	2300      	movs	r3, #0
 8006aae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	f107 0310 	add.w	r3, r7, #16
 8006abc:	6812      	ldr	r2, [r2, #0]
 8006abe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006ac0:	693a      	ldr	r2, [r7, #16]
 8006ac2:	6a3b      	ldr	r3, [r7, #32]
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	00db      	lsls	r3, r3, #3
 8006ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8006acc:	b2da      	uxtb	r2, r3
 8006ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad0:	701a      	strb	r2, [r3, #0]
      i++;
 8006ad2:	6a3b      	ldr	r3, [r7, #32]
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	623b      	str	r3, [r7, #32]
      pDest++;
 8006ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ada:	3301      	adds	r3, #1
 8006adc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006ade:	8bfb      	ldrh	r3, [r7, #30]
 8006ae0:	3b01      	subs	r3, #1
 8006ae2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006ae4:	8bfb      	ldrh	r3, [r7, #30]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d1ea      	bne.n	8006ac0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	372c      	adds	r7, #44	; 0x2c
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b085      	sub	sp, #20
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	785b      	ldrb	r3, [r3, #1]
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d12c      	bne.n	8006b6e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	015a      	lsls	r2, r3, #5
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	4413      	add	r3, r2
 8006b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	db12      	blt.n	8006b4c <USB_EPSetStall+0x54>
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d00f      	beq.n	8006b4c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	015a      	lsls	r2, r3, #5
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	4413      	add	r3, r2
 8006b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	68ba      	ldr	r2, [r7, #8]
 8006b3c:	0151      	lsls	r1, r2, #5
 8006b3e:	68fa      	ldr	r2, [r7, #12]
 8006b40:	440a      	add	r2, r1
 8006b42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b46:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006b4a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	015a      	lsls	r2, r3, #5
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	4413      	add	r3, r2
 8006b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68ba      	ldr	r2, [r7, #8]
 8006b5c:	0151      	lsls	r1, r2, #5
 8006b5e:	68fa      	ldr	r2, [r7, #12]
 8006b60:	440a      	add	r2, r1
 8006b62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006b6a:	6013      	str	r3, [r2, #0]
 8006b6c:	e02b      	b.n	8006bc6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	015a      	lsls	r2, r3, #5
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	4413      	add	r3, r2
 8006b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	db12      	blt.n	8006ba6 <USB_EPSetStall+0xae>
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d00f      	beq.n	8006ba6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	015a      	lsls	r2, r3, #5
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	4413      	add	r3, r2
 8006b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	68ba      	ldr	r2, [r7, #8]
 8006b96:	0151      	lsls	r1, r2, #5
 8006b98:	68fa      	ldr	r2, [r7, #12]
 8006b9a:	440a      	add	r2, r1
 8006b9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ba0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006ba4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	015a      	lsls	r2, r3, #5
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	4413      	add	r3, r2
 8006bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	68ba      	ldr	r2, [r7, #8]
 8006bb6:	0151      	lsls	r1, r2, #5
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	440a      	add	r2, r1
 8006bbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006bc4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3714      	adds	r7, #20
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b085      	sub	sp, #20
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	785b      	ldrb	r3, [r3, #1]
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d128      	bne.n	8006c42 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	015a      	lsls	r2, r3, #5
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	4413      	add	r3, r2
 8006bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	68ba      	ldr	r2, [r7, #8]
 8006c00:	0151      	lsls	r1, r2, #5
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	440a      	add	r2, r1
 8006c06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006c0e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	791b      	ldrb	r3, [r3, #4]
 8006c14:	2b03      	cmp	r3, #3
 8006c16:	d003      	beq.n	8006c20 <USB_EPClearStall+0x4c>
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	791b      	ldrb	r3, [r3, #4]
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	d138      	bne.n	8006c92 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	015a      	lsls	r2, r3, #5
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	4413      	add	r3, r2
 8006c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	68ba      	ldr	r2, [r7, #8]
 8006c30:	0151      	lsls	r1, r2, #5
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	440a      	add	r2, r1
 8006c36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c3e:	6013      	str	r3, [r2, #0]
 8006c40:	e027      	b.n	8006c92 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	015a      	lsls	r2, r3, #5
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	4413      	add	r3, r2
 8006c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	68ba      	ldr	r2, [r7, #8]
 8006c52:	0151      	lsls	r1, r2, #5
 8006c54:	68fa      	ldr	r2, [r7, #12]
 8006c56:	440a      	add	r2, r1
 8006c58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c5c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006c60:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	791b      	ldrb	r3, [r3, #4]
 8006c66:	2b03      	cmp	r3, #3
 8006c68:	d003      	beq.n	8006c72 <USB_EPClearStall+0x9e>
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	791b      	ldrb	r3, [r3, #4]
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d10f      	bne.n	8006c92 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	015a      	lsls	r2, r3, #5
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	4413      	add	r3, r2
 8006c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	68ba      	ldr	r2, [r7, #8]
 8006c82:	0151      	lsls	r1, r2, #5
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	440a      	add	r2, r1
 8006c88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c90:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006c92:	2300      	movs	r3, #0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3714      	adds	r7, #20
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b085      	sub	sp, #20
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	460b      	mov	r3, r1
 8006caa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cbe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006cc2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	78fb      	ldrb	r3, [r7, #3]
 8006cce:	011b      	lsls	r3, r3, #4
 8006cd0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006cd4:	68f9      	ldr	r1, [r7, #12]
 8006cd6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006cde:	2300      	movs	r3, #0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3714      	adds	r7, #20
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b085      	sub	sp, #20
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68fa      	ldr	r2, [r7, #12]
 8006d02:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006d06:	f023 0303 	bic.w	r3, r3, #3
 8006d0a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d1a:	f023 0302 	bic.w	r3, r3, #2
 8006d1e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3714      	adds	r7, #20
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr

08006d2e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d2e:	b480      	push	{r7}
 8006d30:	b085      	sub	sp, #20
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	68fa      	ldr	r2, [r7, #12]
 8006d44:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006d48:	f023 0303 	bic.w	r3, r3, #3
 8006d4c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	68fa      	ldr	r2, [r7, #12]
 8006d58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d5c:	f043 0302 	orr.w	r3, r3, #2
 8006d60:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3714      	adds	r7, #20
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b085      	sub	sp, #20
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	695b      	ldr	r3, [r3, #20]
 8006d7c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	699b      	ldr	r3, [r3, #24]
 8006d82:	68fa      	ldr	r2, [r7, #12]
 8006d84:	4013      	ands	r3, r2
 8006d86:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006d88:	68fb      	ldr	r3, [r7, #12]
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3714      	adds	r7, #20
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr

08006d96 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d96:	b480      	push	{r7}
 8006d98:	b085      	sub	sp, #20
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006da8:	699b      	ldr	r3, [r3, #24]
 8006daa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006db2:	69db      	ldr	r3, [r3, #28]
 8006db4:	68ba      	ldr	r2, [r7, #8]
 8006db6:	4013      	ands	r3, r2
 8006db8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	0c1b      	lsrs	r3, r3, #16
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3714      	adds	r7, #20
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr

08006dca <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006dca:	b480      	push	{r7}
 8006dcc:	b085      	sub	sp, #20
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ddc:	699b      	ldr	r3, [r3, #24]
 8006dde:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006de6:	69db      	ldr	r3, [r3, #28]
 8006de8:	68ba      	ldr	r2, [r7, #8]
 8006dea:	4013      	ands	r3, r2
 8006dec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	b29b      	uxth	r3, r3
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3714      	adds	r7, #20
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr

08006dfe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006dfe:	b480      	push	{r7}
 8006e00:	b085      	sub	sp, #20
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
 8006e06:	460b      	mov	r3, r1
 8006e08:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006e0e:	78fb      	ldrb	r3, [r7, #3]
 8006e10:	015a      	lsls	r2, r3, #5
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	4413      	add	r3, r2
 8006e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e24:	695b      	ldr	r3, [r3, #20]
 8006e26:	68ba      	ldr	r2, [r7, #8]
 8006e28:	4013      	ands	r3, r2
 8006e2a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006e2c:	68bb      	ldr	r3, [r7, #8]
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3714      	adds	r7, #20
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr

08006e3a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006e3a:	b480      	push	{r7}
 8006e3c:	b087      	sub	sp, #28
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
 8006e42:	460b      	mov	r3, r1
 8006e44:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e5c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006e5e:	78fb      	ldrb	r3, [r7, #3]
 8006e60:	f003 030f 	and.w	r3, r3, #15
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	fa22 f303 	lsr.w	r3, r2, r3
 8006e6a:	01db      	lsls	r3, r3, #7
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	693a      	ldr	r2, [r7, #16]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006e74:	78fb      	ldrb	r3, [r7, #3]
 8006e76:	015a      	lsls	r2, r3, #5
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	693a      	ldr	r2, [r7, #16]
 8006e84:	4013      	ands	r3, r2
 8006e86:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006e88:	68bb      	ldr	r3, [r7, #8]
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	371c      	adds	r7, #28
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr

08006e96 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006e96:	b480      	push	{r7}
 8006e98:	b083      	sub	sp, #12
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	695b      	ldr	r3, [r3, #20]
 8006ea2:	f003 0301 	and.w	r3, r3, #1
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	370c      	adds	r7, #12
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr

08006eb2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006eb2:	b480      	push	{r7}
 8006eb4:	b085      	sub	sp, #20
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68fa      	ldr	r2, [r7, #12]
 8006ec8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ecc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006ed0:	f023 0307 	bic.w	r3, r3, #7
 8006ed4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	68fa      	ldr	r2, [r7, #12]
 8006ee0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ee8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006eea:	2300      	movs	r3, #0
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3714      	adds	r7, #20
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b087      	sub	sp, #28
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	460b      	mov	r3, r1
 8006f02:	607a      	str	r2, [r7, #4]
 8006f04:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	333c      	adds	r3, #60	; 0x3c
 8006f0e:	3304      	adds	r3, #4
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	4a26      	ldr	r2, [pc, #152]	; (8006fb0 <USB_EP0_OutStart+0xb8>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d90a      	bls.n	8006f32 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f2c:	d101      	bne.n	8006f32 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	e037      	b.n	8006fa2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f38:	461a      	mov	r2, r3
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	697a      	ldr	r2, [r7, #20]
 8006f48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	697a      	ldr	r2, [r7, #20]
 8006f5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f60:	f043 0318 	orr.w	r3, r3, #24
 8006f64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f6c:	691b      	ldr	r3, [r3, #16]
 8006f6e:	697a      	ldr	r2, [r7, #20]
 8006f70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f74:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006f78:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006f7a:	7afb      	ldrb	r3, [r7, #11]
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d10f      	bne.n	8006fa0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f86:	461a      	mov	r2, r3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	697a      	ldr	r2, [r7, #20]
 8006f96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f9a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006f9e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	371c      	adds	r7, #28
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr
 8006fae:	bf00      	nop
 8006fb0:	4f54300a 	.word	0x4f54300a

08006fb4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b085      	sub	sp, #20
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006fcc:	d901      	bls.n	8006fd2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006fce:	2303      	movs	r3, #3
 8006fd0:	e01b      	b.n	800700a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	daf2      	bge.n	8006fc0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	f043 0201 	orr.w	r2, r3, #1
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	3301      	adds	r3, #1
 8006fee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006ff6:	d901      	bls.n	8006ffc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006ff8:	2303      	movs	r3, #3
 8006ffa:	e006      	b.n	800700a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	f003 0301 	and.w	r3, r3, #1
 8007004:	2b01      	cmp	r3, #1
 8007006:	d0f0      	beq.n	8006fea <USB_CoreReset+0x36>

  return HAL_OK;
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	3714      	adds	r7, #20
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr
	...

08007018 <USBD_AUDIO_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	460b      	mov	r3, r1
 8007022:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_AUDIO_HandleTypeDef *haudio;

  /* Allocate Audio structure */
  haudio = (USBD_AUDIO_HandleTypeDef *)USBD_malloc(sizeof(USBD_AUDIO_HandleTypeDef));
 8007024:	f643 4050 	movw	r0, #15440	; 0x3c50
 8007028:	f002 faf8 	bl	800961c <USBD_static_malloc>
 800702c:	60f8      	str	r0, [r7, #12]

  if (haudio == NULL)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d109      	bne.n	8007048 <USBD_AUDIO_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	32b0      	adds	r2, #176	; 0xb0
 800703e:	2100      	movs	r1, #0
 8007040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007044:	2302      	movs	r3, #2
 8007046:	e07e      	b.n	8007146 <USBD_AUDIO_Init+0x12e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)haudio;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	32b0      	adds	r2, #176	; 0xb0
 8007052:	68f9      	ldr	r1, [r7, #12]
 8007054:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	32b0      	adds	r2, #176	; 0xb0
 8007062:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	7c1b      	ldrb	r3, [r3, #16]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d10e      	bne.n	8007092 <USBD_AUDIO_Init+0x7a>
  {
    pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = AUDIO_HS_BINTERVAL;
 8007074:	4b36      	ldr	r3, [pc, #216]	; (8007150 <USBD_AUDIO_Init+0x138>)
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	f003 020f 	and.w	r2, r3, #15
 800707c:	6879      	ldr	r1, [r7, #4]
 800707e:	4613      	mov	r3, r2
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	4413      	add	r3, r2
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	440b      	add	r3, r1
 8007088:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800708c:	2201      	movs	r2, #1
 800708e:	801a      	strh	r2, [r3, #0]
 8007090:	e00d      	b.n	80070ae <USBD_AUDIO_Init+0x96>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = AUDIO_FS_BINTERVAL;
 8007092:	4b2f      	ldr	r3, [pc, #188]	; (8007150 <USBD_AUDIO_Init+0x138>)
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	f003 020f 	and.w	r2, r3, #15
 800709a:	6879      	ldr	r1, [r7, #4]
 800709c:	4613      	mov	r3, r2
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	4413      	add	r3, r2
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	440b      	add	r3, r1
 80070a6:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80070aa:	2201      	movs	r2, #1
 80070ac:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, AUDIOOutEpAdd, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 80070ae:	4b28      	ldr	r3, [pc, #160]	; (8007150 <USBD_AUDIO_Init+0x138>)
 80070b0:	7819      	ldrb	r1, [r3, #0]
 80070b2:	23c0      	movs	r3, #192	; 0xc0
 80070b4:	2201      	movs	r2, #1
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f002 f98d 	bl	80093d6 <USBD_LL_OpenEP>
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].is_used = 1U;
 80070bc:	4b24      	ldr	r3, [pc, #144]	; (8007150 <USBD_AUDIO_Init+0x138>)
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	f003 020f 	and.w	r2, r3, #15
 80070c4:	6879      	ldr	r1, [r7, #4]
 80070c6:	4613      	mov	r3, r2
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	4413      	add	r3, r2
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	440b      	add	r3, r1
 80070d0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80070d4:	2201      	movs	r2, #1
 80070d6:	801a      	strh	r2, [r3, #0]

  haudio->alt_setting = 0U;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2200      	movs	r2, #0
 80070dc:	601a      	str	r2, [r3, #0]
  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80070e4:	2203      	movs	r2, #3
 80070e6:	f883 2c04 	strb.w	r2, [r3, #3076]	; 0xc04
  haudio->wr_ptr = 0U;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80070f0:	2200      	movs	r2, #0
 80070f2:	f8a3 2c08 	strh.w	r2, [r3, #3080]	; 0xc08
  haudio->rd_ptr = 0U;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80070fc:	2200      	movs	r2, #0
 80070fe:	f8a3 2c06 	strh.w	r2, [r3, #3078]	; 0xc06
  haudio->rd_enable = 0U;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007108:	2200      	movs	r2, #0
 800710a:	f883 2c05 	strb.w	r2, [r3, #3077]	; 0xc05

  /* Initialize the Audio output Hardware layer */
  if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init(USBD_AUDIO_FREQ,
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	33b0      	adds	r3, #176	; 0xb0
 8007118:	009b      	lsls	r3, r3, #2
 800711a:	4413      	add	r3, r2
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2200      	movs	r2, #0
 8007122:	2146      	movs	r1, #70	; 0x46
 8007124:	f64b 3080 	movw	r0, #48000	; 0xbb80
 8007128:	4798      	blx	r3
 800712a:	4603      	mov	r3, r0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d001      	beq.n	8007134 <USBD_AUDIO_Init+0x11c>
                                                                      AUDIO_DEFAULT_VOLUME,
                                                                      0U) != 0U)
  {
    return (uint8_t)USBD_FAIL;
 8007130:	2303      	movs	r3, #3
 8007132:	e008      	b.n	8007146 <USBD_AUDIO_Init+0x12e>
  }

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd, haudio->buffer,
 8007134:	4b06      	ldr	r3, [pc, #24]	; (8007150 <USBD_AUDIO_Init+0x138>)
 8007136:	7819      	ldrb	r1, [r3, #0]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	1d1a      	adds	r2, r3, #4
 800713c:	23c0      	movs	r3, #192	; 0xc0
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f002 fa38 	bl	80095b4 <USBD_LL_PrepareReceive>
                               AUDIO_OUT_PACKET);

  return (uint8_t)USBD_OK;
 8007144:	2300      	movs	r3, #0
}
 8007146:	4618      	mov	r0, r3
 8007148:	3710      	adds	r7, #16
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	200000be 	.word	0x200000be

08007154 <USBD_AUDIO_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b082      	sub	sp, #8
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	460b      	mov	r3, r1
 800715e:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Open EP OUT */
  (void)USBD_LL_CloseEP(pdev, AUDIOOutEpAdd);
 8007160:	4b28      	ldr	r3, [pc, #160]	; (8007204 <USBD_AUDIO_DeInit+0xb0>)
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	4619      	mov	r1, r3
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f002 f95b 	bl	8009422 <USBD_LL_CloseEP>
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].is_used = 0U;
 800716c:	4b25      	ldr	r3, [pc, #148]	; (8007204 <USBD_AUDIO_DeInit+0xb0>)
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	f003 020f 	and.w	r2, r3, #15
 8007174:	6879      	ldr	r1, [r7, #4]
 8007176:	4613      	mov	r3, r2
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	4413      	add	r3, r2
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	440b      	add	r3, r1
 8007180:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007184:	2200      	movs	r2, #0
 8007186:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = 0U;
 8007188:	4b1e      	ldr	r3, [pc, #120]	; (8007204 <USBD_AUDIO_DeInit+0xb0>)
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	f003 020f 	and.w	r2, r3, #15
 8007190:	6879      	ldr	r1, [r7, #4]
 8007192:	4613      	mov	r3, r2
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	4413      	add	r3, r2
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	440b      	add	r3, r1
 800719c:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80071a0:	2200      	movs	r2, #0
 80071a2:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	32b0      	adds	r2, #176	; 0xb0
 80071ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d020      	beq.n	80071f8 <USBD_AUDIO_DeInit+0xa4>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit(0U);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	33b0      	adds	r3, #176	; 0xb0
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	4413      	add	r3, r2
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	2000      	movs	r0, #0
 80071ca:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	32b0      	adds	r2, #176	; 0xb0
 80071d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071da:	4618      	mov	r0, r3
 80071dc:	f002 fa2c 	bl	8009638 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	32b0      	adds	r2, #176	; 0xb0
 80071ea:	2100      	movs	r1, #0
 80071ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80071f8:	2300      	movs	r3, #0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3708      	adds	r7, #8
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	200000be 	.word	0x200000be

08007208 <USBD_AUDIO_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_AUDIO_Setup(USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b086      	sub	sp, #24
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8007212:	2300      	movs	r3, #0
 8007214:	813b      	strh	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 8007216:	2300      	movs	r3, #0
 8007218:	75fb      	strb	r3, [r7, #23]

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	32b0      	adds	r2, #176	; 0xb0
 8007224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007228:	613b      	str	r3, [r7, #16]

  if (haudio == NULL)
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d101      	bne.n	8007234 <USBD_AUDIO_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8007230:	2303      	movs	r3, #3
 8007232:	e0c1      	b.n	80073b8 <USBD_AUDIO_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800723c:	2b00      	cmp	r3, #0
 800723e:	d01a      	beq.n	8007276 <USBD_AUDIO_Setup+0x6e>
 8007240:	2b20      	cmp	r3, #32
 8007242:	f040 80b1 	bne.w	80073a8 <USBD_AUDIO_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	785b      	ldrb	r3, [r3, #1]
 800724a:	2b01      	cmp	r3, #1
 800724c:	d006      	beq.n	800725c <USBD_AUDIO_Setup+0x54>
 800724e:	2b81      	cmp	r3, #129	; 0x81
 8007250:	d109      	bne.n	8007266 <USBD_AUDIO_Setup+0x5e>
      {
        case AUDIO_REQ_GET_CUR:
          AUDIO_REQ_GetCurrent(pdev, req);
 8007252:	6839      	ldr	r1, [r7, #0]
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 f9f5 	bl	8007644 <AUDIO_REQ_GetCurrent>
          break;
 800725a:	e00b      	b.n	8007274 <USBD_AUDIO_Setup+0x6c>

        case AUDIO_REQ_SET_CUR:
          AUDIO_REQ_SetCurrent(pdev, req);
 800725c:	6839      	ldr	r1, [r7, #0]
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 fa1c 	bl	800769c <AUDIO_REQ_SetCurrent>
          break;
 8007264:	e006      	b.n	8007274 <USBD_AUDIO_Setup+0x6c>

        default:
          USBD_CtlError(pdev, req);
 8007266:	6839      	ldr	r1, [r7, #0]
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f001 fc86 	bl	8008b7a <USBD_CtlError>
          ret = USBD_FAIL;
 800726e:	2303      	movs	r3, #3
 8007270:	75fb      	strb	r3, [r7, #23]
          break;
 8007272:	bf00      	nop
      }
      break;
 8007274:	e09f      	b.n	80073b6 <USBD_AUDIO_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	785b      	ldrb	r3, [r3, #1]
 800727a:	2b0b      	cmp	r3, #11
 800727c:	f200 8089 	bhi.w	8007392 <USBD_AUDIO_Setup+0x18a>
 8007280:	a201      	add	r2, pc, #4	; (adr r2, 8007288 <USBD_AUDIO_Setup+0x80>)
 8007282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007286:	bf00      	nop
 8007288:	080072b9 	.word	0x080072b9
 800728c:	080073a1 	.word	0x080073a1
 8007290:	08007393 	.word	0x08007393
 8007294:	08007393 	.word	0x08007393
 8007298:	08007393 	.word	0x08007393
 800729c:	08007393 	.word	0x08007393
 80072a0:	080072e3 	.word	0x080072e3
 80072a4:	08007393 	.word	0x08007393
 80072a8:	08007393 	.word	0x08007393
 80072ac:	08007393 	.word	0x08007393
 80072b0:	0800732b 	.word	0x0800732b
 80072b4:	08007353 	.word	0x08007353
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	2b03      	cmp	r3, #3
 80072c2:	d107      	bne.n	80072d4 <USBD_AUDIO_Setup+0xcc>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80072c4:	f107 0308 	add.w	r3, r7, #8
 80072c8:	2202      	movs	r2, #2
 80072ca:	4619      	mov	r1, r3
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f001 fcc5 	bl	8008c5c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80072d2:	e068      	b.n	80073a6 <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80072d4:	6839      	ldr	r1, [r7, #0]
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f001 fc4f 	bl	8008b7a <USBD_CtlError>
            ret = USBD_FAIL;
 80072dc:	2303      	movs	r3, #3
 80072de:	75fb      	strb	r3, [r7, #23]
          break;
 80072e0:	e061      	b.n	80073a6 <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	885b      	ldrh	r3, [r3, #2]
 80072e6:	0a1b      	lsrs	r3, r3, #8
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	2b21      	cmp	r3, #33	; 0x21
 80072ec:	d15a      	bne.n	80073a4 <USBD_AUDIO_Setup+0x19c>
          {
            pbuf = (uint8_t *)USBD_AUDIO_GetAudioHeaderDesc(pdev->pConfDesc);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 80072f4:	4618      	mov	r0, r3
 80072f6:	f000 fa3f 	bl	8007778 <USBD_AUDIO_GetAudioHeaderDesc>
 80072fa:	60f8      	str	r0, [r7, #12]
            if (pbuf != NULL)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d00c      	beq.n	800731c <USBD_AUDIO_Setup+0x114>
            {
              len = MIN(USB_AUDIO_DESC_SIZ, req->wLength);
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	88db      	ldrh	r3, [r3, #6]
 8007306:	2b09      	cmp	r3, #9
 8007308:	bf28      	it	cs
 800730a:	2309      	movcs	r3, #9
 800730c:	817b      	strh	r3, [r7, #10]
              (void)USBD_CtlSendData(pdev, pbuf, len);
 800730e:	897b      	ldrh	r3, [r7, #10]
 8007310:	461a      	mov	r2, r3
 8007312:	68f9      	ldr	r1, [r7, #12]
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f001 fca1 	bl	8008c5c <USBD_CtlSendData>
            {
              USBD_CtlError(pdev, req);
              ret = USBD_FAIL;
            }
          }
          break;
 800731a:	e043      	b.n	80073a4 <USBD_AUDIO_Setup+0x19c>
              USBD_CtlError(pdev, req);
 800731c:	6839      	ldr	r1, [r7, #0]
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f001 fc2b 	bl	8008b7a <USBD_CtlError>
              ret = USBD_FAIL;
 8007324:	2303      	movs	r3, #3
 8007326:	75fb      	strb	r3, [r7, #23]
          break;
 8007328:	e03c      	b.n	80073a4 <USBD_AUDIO_Setup+0x19c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007330:	b2db      	uxtb	r3, r3
 8007332:	2b03      	cmp	r3, #3
 8007334:	d106      	bne.n	8007344 <USBD_AUDIO_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&haudio->alt_setting, 1U);
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	2201      	movs	r2, #1
 800733a:	4619      	mov	r1, r3
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f001 fc8d 	bl	8008c5c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007342:	e030      	b.n	80073a6 <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007344:	6839      	ldr	r1, [r7, #0]
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f001 fc17 	bl	8008b7a <USBD_CtlError>
            ret = USBD_FAIL;
 800734c:	2303      	movs	r3, #3
 800734e:	75fb      	strb	r3, [r7, #23]
          break;
 8007350:	e029      	b.n	80073a6 <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007358:	b2db      	uxtb	r3, r3
 800735a:	2b03      	cmp	r3, #3
 800735c:	d112      	bne.n	8007384 <USBD_AUDIO_Setup+0x17c>
          {
            if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	885b      	ldrh	r3, [r3, #2]
 8007362:	b2db      	uxtb	r3, r3
 8007364:	2b01      	cmp	r3, #1
 8007366:	d806      	bhi.n	8007376 <USBD_AUDIO_Setup+0x16e>
            {
              haudio->alt_setting = (uint8_t)(req->wValue);
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	885b      	ldrh	r3, [r3, #2]
 800736c:	b2db      	uxtb	r3, r3
 800736e:	461a      	mov	r2, r3
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	601a      	str	r2, [r3, #0]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007374:	e017      	b.n	80073a6 <USBD_AUDIO_Setup+0x19e>
              USBD_CtlError(pdev, req);
 8007376:	6839      	ldr	r1, [r7, #0]
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f001 fbfe 	bl	8008b7a <USBD_CtlError>
              ret = USBD_FAIL;
 800737e:	2303      	movs	r3, #3
 8007380:	75fb      	strb	r3, [r7, #23]
          break;
 8007382:	e010      	b.n	80073a6 <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007384:	6839      	ldr	r1, [r7, #0]
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f001 fbf7 	bl	8008b7a <USBD_CtlError>
            ret = USBD_FAIL;
 800738c:	2303      	movs	r3, #3
 800738e:	75fb      	strb	r3, [r7, #23]
          break;
 8007390:	e009      	b.n	80073a6 <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007392:	6839      	ldr	r1, [r7, #0]
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f001 fbf0 	bl	8008b7a <USBD_CtlError>
          ret = USBD_FAIL;
 800739a:	2303      	movs	r3, #3
 800739c:	75fb      	strb	r3, [r7, #23]
          break;
 800739e:	e002      	b.n	80073a6 <USBD_AUDIO_Setup+0x19e>
          break;
 80073a0:	bf00      	nop
 80073a2:	e008      	b.n	80073b6 <USBD_AUDIO_Setup+0x1ae>
          break;
 80073a4:	bf00      	nop
      }
      break;
 80073a6:	e006      	b.n	80073b6 <USBD_AUDIO_Setup+0x1ae>
    default:
      USBD_CtlError(pdev, req);
 80073a8:	6839      	ldr	r1, [r7, #0]
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f001 fbe5 	bl	8008b7a <USBD_CtlError>
      ret = USBD_FAIL;
 80073b0:	2303      	movs	r3, #3
 80073b2:	75fb      	strb	r3, [r7, #23]
      break;
 80073b4:	bf00      	nop
  }

  return (uint8_t)ret;
 80073b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3718      	adds	r7, #24
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <USBD_AUDIO_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetCfgDesc(uint16_t *length)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_CfgDesc);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	226d      	movs	r2, #109	; 0x6d
 80073cc:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_CfgDesc;
 80073ce:	4b03      	ldr	r3, [pc, #12]	; (80073dc <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr
 80073dc:	20000044 	.word	0x20000044

080073e0 <USBD_AUDIO_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	460b      	mov	r3, r1
 80073ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  /* Only OUT data are processed */
  return (uint8_t)USBD_OK;
 80073ec:	2300      	movs	r3, #0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	370c      	adds	r7, #12
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr

080073fa <USBD_AUDIO_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80073fa:	b580      	push	{r7, lr}
 80073fc:	b084      	sub	sp, #16
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	32b0      	adds	r2, #176	; 0xb0
 800740c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007410:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d101      	bne.n	800741c <USBD_AUDIO_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007418:	2303      	movs	r3, #3
 800741a:	e02a      	b.n	8007472 <USBD_AUDIO_EP0_RxReady+0x78>
  }

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007422:	f893 3c0a 	ldrb.w	r3, [r3, #3082]	; 0xc0a
 8007426:	2b01      	cmp	r3, #1
 8007428:	d122      	bne.n	8007470 <USBD_AUDIO_EP0_RxReady+0x76>
  {
    /* In this driver, to simplify code, only SET_CUR request is managed */

    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007430:	f893 3c4c 	ldrb.w	r3, [r3, #3148]	; 0xc4c
 8007434:	2b02      	cmp	r3, #2
 8007436:	d11b      	bne.n	8007470 <USBD_AUDIO_EP0_RxReady+0x76>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->MuteCtl(haudio->control.data[0]);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	33b0      	adds	r3, #176	; 0xb0
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	4413      	add	r3, r2
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	68fa      	ldr	r2, [r7, #12]
 800744c:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8007450:	f892 2c0b 	ldrb.w	r2, [r2, #3083]	; 0xc0b
 8007454:	4610      	mov	r0, r2
 8007456:	4798      	blx	r3
      haudio->control.cmd = 0U;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800745e:	2200      	movs	r2, #0
 8007460:	f883 2c0a 	strb.w	r2, [r3, #3082]	; 0xc0a
      haudio->control.len = 0U;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800746a:	2200      	movs	r2, #0
 800746c:	f883 2c4b 	strb.w	r2, [r3, #3147]	; 0xc4b
    }
  }

  return (uint8_t)USBD_OK;
 8007470:	2300      	movs	r3, #0
}
 8007472:	4618      	mov	r0, r3
 8007474:	3710      	adds	r7, #16
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}

0800747a <USBD_AUDIO_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800747a:	b480      	push	{r7}
 800747c:	b083      	sub	sp, #12
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  /* Only OUT control data are processed */
  return (uint8_t)USBD_OK;
 8007482:	2300      	movs	r3, #0
}
 8007484:	4618      	mov	r0, r3
 8007486:	370c      	adds	r7, #12
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr

08007490 <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev)
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8007498:	2300      	movs	r3, #0
}
 800749a:	4618      	mov	r0, r3
 800749c:	370c      	adds	r7, #12
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr

080074a6 <USBD_AUDIO_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80074a6:	b480      	push	{r7}
 80074a8:	b083      	sub	sp, #12
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
 80074ae:	460b      	mov	r3, r1
 80074b0:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 80074b2:	2300      	movs	r3, #0
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	370c      	adds	r7, #12
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <USBD_AUDIO_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	460b      	mov	r3, r1
 80074ca:	70fb      	strb	r3, [r7, #3]
  USBD_AUDIO_HandleTypeDef *haudio;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	32b0      	adds	r2, #176	; 0xb0
 80074d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d101      	bne.n	80074e2 <USBD_AUDIO_IsoOutIncomplete+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80074de:	2303      	movs	r3, #3
 80074e0:	e016      	b.n	8007510 <USBD_AUDIO_IsoOutIncomplete+0x50>
  }

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	32b0      	adds	r2, #176	; 0xb0
 80074ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074f0:	60fb      	str	r3, [r7, #12]

  /* Prepare Out endpoint to receive next audio packet */
  (void)USBD_LL_PrepareReceive(pdev, epnum,
                               &haudio->buffer[haudio->wr_ptr],
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80074f8:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 80074fc:	461a      	mov	r2, r3
  (void)USBD_LL_PrepareReceive(pdev, epnum,
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	4413      	add	r3, r2
 8007502:	1d1a      	adds	r2, r3, #4
 8007504:	78f9      	ldrb	r1, [r7, #3]
 8007506:	23c0      	movs	r3, #192	; 0xc0
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f002 f853 	bl	80095b4 <USBD_LL_PrepareReceive>
                               AUDIO_OUT_PACKET);

  return (uint8_t)USBD_OK;
 800750e:	2300      	movs	r3, #0
}
 8007510:	4618      	mov	r0, r3
 8007512:	3710      	adds	r7, #16
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <USBD_AUDIO_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	460b      	mov	r3, r1
 8007522:	70fb      	strb	r3, [r7, #3]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	32b0      	adds	r2, #176	; 0xb0
 800752e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007532:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d101      	bne.n	800753e <USBD_AUDIO_DataOut+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800753a:	2303      	movs	r3, #3
 800753c:	e07c      	b.n	8007638 <USBD_AUDIO_DataOut+0x120>
  }

  if (epnum == AUDIOOutEpAdd)
 800753e:	4b40      	ldr	r3, [pc, #256]	; (8007640 <USBD_AUDIO_DataOut+0x128>)
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	78fa      	ldrb	r2, [r7, #3]
 8007544:	429a      	cmp	r2, r3
 8007546:	d176      	bne.n	8007636 <USBD_AUDIO_DataOut+0x11e>
  {
    /* Get received data packet length */
    PacketSize = (uint16_t)USBD_LL_GetRxDataSize(pdev, epnum);
 8007548:	78fb      	ldrb	r3, [r7, #3]
 800754a:	4619      	mov	r1, r3
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f002 f852 	bl	80095f6 <USBD_LL_GetRxDataSize>
 8007552:	4603      	mov	r3, r0
 8007554:	817b      	strh	r3, [r7, #10]

    /* Packet received Callback */
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->PeriodicTC(&haudio->buffer[haudio->wr_ptr],
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	33b0      	adds	r3, #176	; 0xb0
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	4413      	add	r3, r2
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	695b      	ldr	r3, [r3, #20]
 8007568:	68fa      	ldr	r2, [r7, #12]
 800756a:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 800756e:	f8b2 2c08 	ldrh.w	r2, [r2, #3080]	; 0xc08
 8007572:	4611      	mov	r1, r2
 8007574:	68fa      	ldr	r2, [r7, #12]
 8007576:	440a      	add	r2, r1
 8007578:	1d10      	adds	r0, r2, #4
 800757a:	8979      	ldrh	r1, [r7, #10]
 800757c:	2201      	movs	r2, #1
 800757e:	4798      	blx	r3
                                                                          PacketSize, AUDIO_OUT_TC);

    /* Increment the Buffer pointer or roll it back when all buffers are full */
    haudio->wr_ptr += PacketSize;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007586:	f8b3 2c08 	ldrh.w	r2, [r3, #3080]	; 0xc08
 800758a:	897b      	ldrh	r3, [r7, #10]
 800758c:	4413      	add	r3, r2
 800758e:	b29a      	uxth	r2, r3
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007596:	f8a3 2c08 	strh.w	r2, [r3, #3080]	; 0xc08

    if (haudio->wr_ptr >= AUDIO_TOTAL_BUF_SIZE)
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80075a0:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 80075a4:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 80075a8:	d321      	bcc.n	80075ee <USBD_AUDIO_DataOut+0xd6>
    {
      /* All buffers are full: roll back */
      haudio->wr_ptr = 0U;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80075b0:	2200      	movs	r2, #0
 80075b2:	f8a3 2c08 	strh.w	r2, [r3, #3080]	; 0xc08

      if (haudio->offset == AUDIO_OFFSET_UNKNOWN)
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80075bc:	f893 3c04 	ldrb.w	r3, [r3, #3076]	; 0xc04
 80075c0:	2b03      	cmp	r3, #3
 80075c2:	d114      	bne.n	80075ee <USBD_AUDIO_DataOut+0xd6>
      {
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->AudioCmd(&haudio->buffer[0],
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	33b0      	adds	r3, #176	; 0xb0
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	4413      	add	r3, r2
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	68fa      	ldr	r2, [r7, #12]
 80075d8:	1d10      	adds	r0, r2, #4
 80075da:	2201      	movs	r2, #1
 80075dc:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 80075e0:	4798      	blx	r3
                                                                            AUDIO_TOTAL_BUF_SIZE / 2U,
                                                                            AUDIO_CMD_START);
        haudio->offset = AUDIO_OFFSET_NONE;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80075e8:	2200      	movs	r2, #0
 80075ea:	f883 2c04 	strb.w	r2, [r3, #3076]	; 0xc04
      }
    }

    if (haudio->rd_enable == 0U)
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80075f4:	f893 3c05 	ldrb.w	r3, [r3, #3077]	; 0xc05
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d10d      	bne.n	8007618 <USBD_AUDIO_DataOut+0x100>
    {
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007602:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 8007606:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 800760a:	d105      	bne.n	8007618 <USBD_AUDIO_DataOut+0x100>
      {
        haudio->rd_enable = 1U;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007612:	2201      	movs	r2, #1
 8007614:	f883 2c05 	strb.w	r2, [r3, #3077]	; 0xc05
      }
    }

    /* Prepare Out endpoint to receive next audio packet */
    (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd,
 8007618:	4b09      	ldr	r3, [pc, #36]	; (8007640 <USBD_AUDIO_DataOut+0x128>)
 800761a:	7819      	ldrb	r1, [r3, #0]
                                 &haudio->buffer[haudio->wr_ptr],
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007622:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 8007626:	461a      	mov	r2, r3
    (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd,
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	4413      	add	r3, r2
 800762c:	1d1a      	adds	r2, r3, #4
 800762e:	23c0      	movs	r3, #192	; 0xc0
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f001 ffbf 	bl	80095b4 <USBD_LL_PrepareReceive>
                                 AUDIO_OUT_PACKET);
  }

  return (uint8_t)USBD_OK;
 8007636:	2300      	movs	r3, #0
}
 8007638:	4618      	mov	r0, r3
 800763a:	3710      	adds	r7, #16
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}
 8007640:	200000be 	.word	0x200000be

08007644 <AUDIO_REQ_GetCurrent>:
  * @param  pdev: device instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	32b0      	adds	r2, #176	; 0xb0
 8007658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800765c:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d017      	beq.n	8007694 <AUDIO_REQ_GetCurrent+0x50>
  {
    return;
  }

  (void)USBD_memset(haudio->control.data, 0, USB_MAX_EP0_SIZE);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800766a:	330b      	adds	r3, #11
 800766c:	2240      	movs	r2, #64	; 0x40
 800766e:	2100      	movs	r1, #0
 8007670:	4618      	mov	r0, r3
 8007672:	f002 f817 	bl	80096a4 <memset>

  /* Send the current mute state */
  (void)USBD_CtlSendData(pdev, haudio->control.data,
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800767c:	330b      	adds	r3, #11
                         MIN(req->wLength, USB_MAX_EP0_SIZE));
 800767e:	683a      	ldr	r2, [r7, #0]
 8007680:	88d2      	ldrh	r2, [r2, #6]
 8007682:	2a40      	cmp	r2, #64	; 0x40
 8007684:	bf28      	it	cs
 8007686:	2240      	movcs	r2, #64	; 0x40
 8007688:	b292      	uxth	r2, r2
  (void)USBD_CtlSendData(pdev, haudio->control.data,
 800768a:	4619      	mov	r1, r3
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f001 fae5 	bl	8008c5c <USBD_CtlSendData>
 8007692:	e000      	b.n	8007696 <AUDIO_REQ_GetCurrent+0x52>
    return;
 8007694:	bf00      	nop
}
 8007696:	3710      	adds	r7, #16
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <AUDIO_REQ_SetCurrent>:
  * @param  pdev: device instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	32b0      	adds	r2, #176	; 0xb0
 80076b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076b4:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d02f      	beq.n	800771c <AUDIO_REQ_SetCurrent+0x80>
  {
    return;
  }

  if (req->wLength != 0U)
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	88db      	ldrh	r3, [r3, #6]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d02c      	beq.n	800771e <AUDIO_REQ_SetCurrent+0x82>
  {
    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 2c0a 	strb.w	r2, [r3, #3082]	; 0xc0a
    haudio->control.len = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);  /* Set the request data length */
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	88db      	ldrh	r3, [r3, #6]
 80076d4:	2b3f      	cmp	r3, #63	; 0x3f
 80076d6:	d803      	bhi.n	80076e0 <AUDIO_REQ_SetCurrent+0x44>
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	88db      	ldrh	r3, [r3, #6]
 80076dc:	b2da      	uxtb	r2, r3
 80076de:	e000      	b.n	80076e2 <AUDIO_REQ_SetCurrent+0x46>
 80076e0:	2240      	movs	r2, #64	; 0x40
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80076e8:	f883 2c4b 	strb.w	r2, [r3, #3147]	; 0xc4b
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	889b      	ldrh	r3, [r3, #4]
 80076f0:	0a1b      	lsrs	r3, r3, #8
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	b2da      	uxtb	r2, r3
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80076fc:	f883 2c4c 	strb.w	r2, [r3, #3148]	; 0xc4c

    /* Prepare the reception of the buffer over EP0 */
    (void)USBD_CtlPrepareRx(pdev, haudio->control.data, haudio->control.len);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8007706:	330b      	adds	r3, #11
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 800770e:	f892 2c4b 	ldrb.w	r2, [r2, #3147]	; 0xc4b
 8007712:	4619      	mov	r1, r3
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f001 facd 	bl	8008cb4 <USBD_CtlPrepareRx>
 800771a:	e000      	b.n	800771e <AUDIO_REQ_SetCurrent+0x82>
    return;
 800771c:	bf00      	nop
  }
}
 800771e:	3710      	adds	r7, #16
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <USBD_AUDIO_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length)
{
 8007724:	b480      	push	{r7}
 8007726:	b083      	sub	sp, #12
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_DeviceQualifierDesc);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	220a      	movs	r2, #10
 8007730:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_DeviceQualifierDesc;
 8007732:	4b03      	ldr	r3, [pc, #12]	; (8007740 <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 8007734:	4618      	mov	r0, r3
 8007736:	370c      	adds	r7, #12
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr
 8007740:	200000b4 	.word	0x200000b4

08007744 <USBD_AUDIO_RegisterInterface>:
  * @param  fops: Audio interface callback
  * @retval status
  */
uint8_t USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
                                     USBD_AUDIO_ItfTypeDef *fops)
{
 8007744:	b480      	push	{r7}
 8007746:	b083      	sub	sp, #12
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d101      	bne.n	8007758 <USBD_AUDIO_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007754:	2303      	movs	r3, #3
 8007756:	e009      	b.n	800776c <USBD_AUDIO_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	33b0      	adds	r3, #176	; 0xb0
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	4413      	add	r3, r2
 8007766:	683a      	ldr	r2, [r7, #0]
 8007768:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800776a:	2300      	movs	r3, #0
}
 800776c:	4618      	mov	r0, r3
 800776e:	370c      	adds	r7, #12
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr

08007778 <USBD_AUDIO_GetAudioHeaderDesc>:
  * @param  pdev: device instance
  * @param  pConfDesc:  pointer to Bos descriptor
  * @retval pointer to the Audio AC Header descriptor
  */
static void *USBD_AUDIO_GetAudioHeaderDesc(uint8_t *pConfDesc)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b086      	sub	sp, #24
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	60fb      	str	r3, [r7, #12]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	617b      	str	r3, [r7, #20]
  uint8_t *pAudioDesc =  NULL;
 8007788:	2300      	movs	r3, #0
 800778a:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	885b      	ldrh	r3, [r3, #2]
 8007790:	b29a      	uxth	r2, r3
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	b29b      	uxth	r3, r3
 8007798:	429a      	cmp	r2, r3
 800779a:	d91c      	bls.n	80077d6 <USBD_AUDIO_GetAudioHeaderDesc+0x5e>
  {
    ptr = desc->bLength;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80077a4:	e011      	b.n	80077ca <USBD_AUDIO_GetAudioHeaderDesc+0x52>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80077a6:	f107 030a 	add.w	r3, r7, #10
 80077aa:	4619      	mov	r1, r3
 80077ac:	6978      	ldr	r0, [r7, #20]
 80077ae:	f000 fbe6 	bl	8007f7e <USBD_GetNextDesc>
 80077b2:	6178      	str	r0, [r7, #20]
      if ((pdesc->bDescriptorType == AUDIO_INTERFACE_DESCRIPTOR_TYPE) &&
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	785b      	ldrb	r3, [r3, #1]
 80077b8:	2b24      	cmp	r3, #36	; 0x24
 80077ba:	d106      	bne.n	80077ca <USBD_AUDIO_GetAudioHeaderDesc+0x52>
          (pdesc->bDescriptorSubType == AUDIO_CONTROL_HEADER))
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	789b      	ldrb	r3, [r3, #2]
      if ((pdesc->bDescriptorType == AUDIO_INTERFACE_DESCRIPTOR_TYPE) &&
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d102      	bne.n	80077ca <USBD_AUDIO_GetAudioHeaderDesc+0x52>
      {
        pAudioDesc = (uint8_t *)pdesc;
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	613b      	str	r3, [r7, #16]
        break;
 80077c8:	e005      	b.n	80077d6 <USBD_AUDIO_GetAudioHeaderDesc+0x5e>
    while (ptr < desc->wTotalLength)
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	885b      	ldrh	r3, [r3, #2]
 80077ce:	b29a      	uxth	r2, r3
 80077d0:	897b      	ldrh	r3, [r7, #10]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d8e7      	bhi.n	80077a6 <USBD_AUDIO_GetAudioHeaderDesc+0x2e>
      }
    }
  }
  return pAudioDesc;
 80077d6:	693b      	ldr	r3, [r7, #16]
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3718      	adds	r7, #24
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b086      	sub	sp, #24
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	4613      	mov	r3, r2
 80077ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d101      	bne.n	80077f8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80077f4:	2303      	movs	r3, #3
 80077f6:	e01f      	b.n	8007838 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2200      	movs	r2, #0
 80077fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2200      	movs	r2, #0
 8007804:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2200      	movs	r2, #0
 800780c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d003      	beq.n	800781e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	68ba      	ldr	r2, [r7, #8]
 800781a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2201      	movs	r2, #1
 8007822:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	79fa      	ldrb	r2, [r7, #7]
 800782a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800782c:	68f8      	ldr	r0, [r7, #12]
 800782e:	f001 fd6b 	bl	8009308 <USBD_LL_Init>
 8007832:	4603      	mov	r3, r0
 8007834:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007836:	7dfb      	ldrb	r3, [r7, #23]
}
 8007838:	4618      	mov	r0, r3
 800783a:	3718      	adds	r7, #24
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800784a:	2300      	movs	r3, #0
 800784c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d101      	bne.n	8007858 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007854:	2303      	movs	r3, #3
 8007856:	e025      	b.n	80078a4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	683a      	ldr	r2, [r7, #0]
 800785c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	32ae      	adds	r2, #174	; 0xae
 800786a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800786e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007870:	2b00      	cmp	r3, #0
 8007872:	d00f      	beq.n	8007894 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	32ae      	adds	r2, #174	; 0xae
 800787e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007884:	f107 020e 	add.w	r2, r7, #14
 8007888:	4610      	mov	r0, r2
 800788a:	4798      	blx	r3
 800788c:	4602      	mov	r2, r0
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800789a:	1c5a      	adds	r2, r3, #1
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80078a2:	2300      	movs	r3, #0
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3710      	adds	r7, #16
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f001 fd73 	bl	80093a0 <USBD_LL_Start>
 80078ba:	4603      	mov	r3, r0
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3708      	adds	r7, #8
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80078cc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	370c      	adds	r7, #12
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr

080078da <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078da:	b580      	push	{r7, lr}
 80078dc:	b084      	sub	sp, #16
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
 80078e2:	460b      	mov	r3, r1
 80078e4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80078e6:	2300      	movs	r3, #0
 80078e8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d009      	beq.n	8007908 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	78fa      	ldrb	r2, [r7, #3]
 80078fe:	4611      	mov	r1, r2
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	4798      	blx	r3
 8007904:	4603      	mov	r3, r0
 8007906:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007908:	7bfb      	ldrb	r3, [r7, #15]
}
 800790a:	4618      	mov	r0, r3
 800790c:	3710      	adds	r7, #16
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}

08007912 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007912:	b580      	push	{r7, lr}
 8007914:	b084      	sub	sp, #16
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
 800791a:	460b      	mov	r3, r1
 800791c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800791e:	2300      	movs	r3, #0
 8007920:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	78fa      	ldrb	r2, [r7, #3]
 800792c:	4611      	mov	r1, r2
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	4798      	blx	r3
 8007932:	4603      	mov	r3, r0
 8007934:	2b00      	cmp	r3, #0
 8007936:	d001      	beq.n	800793c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007938:	2303      	movs	r3, #3
 800793a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800793c:	7bfb      	ldrb	r3, [r7, #15]
}
 800793e:	4618      	mov	r0, r3
 8007940:	3710      	adds	r7, #16
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}

08007946 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007946:	b580      	push	{r7, lr}
 8007948:	b084      	sub	sp, #16
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
 800794e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007956:	6839      	ldr	r1, [r7, #0]
 8007958:	4618      	mov	r0, r3
 800795a:	f001 f8d4 	bl	8008b06 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2201      	movs	r2, #1
 8007962:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800796c:	461a      	mov	r2, r3
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800797a:	f003 031f 	and.w	r3, r3, #31
 800797e:	2b02      	cmp	r3, #2
 8007980:	d01a      	beq.n	80079b8 <USBD_LL_SetupStage+0x72>
 8007982:	2b02      	cmp	r3, #2
 8007984:	d822      	bhi.n	80079cc <USBD_LL_SetupStage+0x86>
 8007986:	2b00      	cmp	r3, #0
 8007988:	d002      	beq.n	8007990 <USBD_LL_SetupStage+0x4a>
 800798a:	2b01      	cmp	r3, #1
 800798c:	d00a      	beq.n	80079a4 <USBD_LL_SetupStage+0x5e>
 800798e:	e01d      	b.n	80079cc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007996:	4619      	mov	r1, r3
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 fb2b 	bl	8007ff4 <USBD_StdDevReq>
 800799e:	4603      	mov	r3, r0
 80079a0:	73fb      	strb	r3, [r7, #15]
      break;
 80079a2:	e020      	b.n	80079e6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80079aa:	4619      	mov	r1, r3
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 fb93 	bl	80080d8 <USBD_StdItfReq>
 80079b2:	4603      	mov	r3, r0
 80079b4:	73fb      	strb	r3, [r7, #15]
      break;
 80079b6:	e016      	b.n	80079e6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80079be:	4619      	mov	r1, r3
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 fbf5 	bl	80081b0 <USBD_StdEPReq>
 80079c6:	4603      	mov	r3, r0
 80079c8:	73fb      	strb	r3, [r7, #15]
      break;
 80079ca:	e00c      	b.n	80079e6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80079d2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	4619      	mov	r1, r3
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f001 fd40 	bl	8009460 <USBD_LL_StallEP>
 80079e0:	4603      	mov	r3, r0
 80079e2:	73fb      	strb	r3, [r7, #15]
      break;
 80079e4:	bf00      	nop
  }

  return ret;
 80079e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3710      	adds	r7, #16
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b086      	sub	sp, #24
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	460b      	mov	r3, r1
 80079fa:	607a      	str	r2, [r7, #4]
 80079fc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80079fe:	2300      	movs	r3, #0
 8007a00:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007a02:	7afb      	ldrb	r3, [r7, #11]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d16e      	bne.n	8007ae6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007a0e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007a16:	2b03      	cmp	r3, #3
 8007a18:	f040 8098 	bne.w	8007b4c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	689a      	ldr	r2, [r3, #8]
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	68db      	ldr	r3, [r3, #12]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d913      	bls.n	8007a50 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	689a      	ldr	r2, [r3, #8]
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	1ad2      	subs	r2, r2, r3
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	68da      	ldr	r2, [r3, #12]
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	bf28      	it	cs
 8007a42:	4613      	movcs	r3, r2
 8007a44:	461a      	mov	r2, r3
 8007a46:	6879      	ldr	r1, [r7, #4]
 8007a48:	68f8      	ldr	r0, [r7, #12]
 8007a4a:	f001 f950 	bl	8008cee <USBD_CtlContinueRx>
 8007a4e:	e07d      	b.n	8007b4c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007a56:	f003 031f 	and.w	r3, r3, #31
 8007a5a:	2b02      	cmp	r3, #2
 8007a5c:	d014      	beq.n	8007a88 <USBD_LL_DataOutStage+0x98>
 8007a5e:	2b02      	cmp	r3, #2
 8007a60:	d81d      	bhi.n	8007a9e <USBD_LL_DataOutStage+0xae>
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d002      	beq.n	8007a6c <USBD_LL_DataOutStage+0x7c>
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d003      	beq.n	8007a72 <USBD_LL_DataOutStage+0x82>
 8007a6a:	e018      	b.n	8007a9e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	75bb      	strb	r3, [r7, #22]
            break;
 8007a70:	e018      	b.n	8007aa4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	68f8      	ldr	r0, [r7, #12]
 8007a7e:	f000 fa64 	bl	8007f4a <USBD_CoreFindIF>
 8007a82:	4603      	mov	r3, r0
 8007a84:	75bb      	strb	r3, [r7, #22]
            break;
 8007a86:	e00d      	b.n	8007aa4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	4619      	mov	r1, r3
 8007a92:	68f8      	ldr	r0, [r7, #12]
 8007a94:	f000 fa66 	bl	8007f64 <USBD_CoreFindEP>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	75bb      	strb	r3, [r7, #22]
            break;
 8007a9c:	e002      	b.n	8007aa4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	75bb      	strb	r3, [r7, #22]
            break;
 8007aa2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007aa4:	7dbb      	ldrb	r3, [r7, #22]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d119      	bne.n	8007ade <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	2b03      	cmp	r3, #3
 8007ab4:	d113      	bne.n	8007ade <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007ab6:	7dba      	ldrb	r2, [r7, #22]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	32ae      	adds	r2, #174	; 0xae
 8007abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d00b      	beq.n	8007ade <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007ac6:	7dba      	ldrb	r2, [r7, #22]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007ace:	7dba      	ldrb	r2, [r7, #22]
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	32ae      	adds	r2, #174	; 0xae
 8007ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	68f8      	ldr	r0, [r7, #12]
 8007adc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007ade:	68f8      	ldr	r0, [r7, #12]
 8007ae0:	f001 f916 	bl	8008d10 <USBD_CtlSendStatus>
 8007ae4:	e032      	b.n	8007b4c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007ae6:	7afb      	ldrb	r3, [r7, #11]
 8007ae8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	4619      	mov	r1, r3
 8007af0:	68f8      	ldr	r0, [r7, #12]
 8007af2:	f000 fa37 	bl	8007f64 <USBD_CoreFindEP>
 8007af6:	4603      	mov	r3, r0
 8007af8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007afa:	7dbb      	ldrb	r3, [r7, #22]
 8007afc:	2bff      	cmp	r3, #255	; 0xff
 8007afe:	d025      	beq.n	8007b4c <USBD_LL_DataOutStage+0x15c>
 8007b00:	7dbb      	ldrb	r3, [r7, #22]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d122      	bne.n	8007b4c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	2b03      	cmp	r3, #3
 8007b10:	d117      	bne.n	8007b42 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007b12:	7dba      	ldrb	r2, [r7, #22]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	32ae      	adds	r2, #174	; 0xae
 8007b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b1c:	699b      	ldr	r3, [r3, #24]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d00f      	beq.n	8007b42 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007b22:	7dba      	ldrb	r2, [r7, #22]
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007b2a:	7dba      	ldrb	r2, [r7, #22]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	32ae      	adds	r2, #174	; 0xae
 8007b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b34:	699b      	ldr	r3, [r3, #24]
 8007b36:	7afa      	ldrb	r2, [r7, #11]
 8007b38:	4611      	mov	r1, r2
 8007b3a:	68f8      	ldr	r0, [r7, #12]
 8007b3c:	4798      	blx	r3
 8007b3e:	4603      	mov	r3, r0
 8007b40:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007b42:	7dfb      	ldrb	r3, [r7, #23]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d001      	beq.n	8007b4c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007b48:	7dfb      	ldrb	r3, [r7, #23]
 8007b4a:	e000      	b.n	8007b4e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007b4c:	2300      	movs	r3, #0
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3718      	adds	r7, #24
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}

08007b56 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007b56:	b580      	push	{r7, lr}
 8007b58:	b086      	sub	sp, #24
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	60f8      	str	r0, [r7, #12]
 8007b5e:	460b      	mov	r3, r1
 8007b60:	607a      	str	r2, [r7, #4]
 8007b62:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007b64:	7afb      	ldrb	r3, [r7, #11]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d16f      	bne.n	8007c4a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	3314      	adds	r3, #20
 8007b6e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b76:	2b02      	cmp	r3, #2
 8007b78:	d15a      	bne.n	8007c30 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	689a      	ldr	r2, [r3, #8]
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	68db      	ldr	r3, [r3, #12]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d914      	bls.n	8007bb0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	689a      	ldr	r2, [r3, #8]
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	68db      	ldr	r3, [r3, #12]
 8007b8e:	1ad2      	subs	r2, r2, r3
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	461a      	mov	r2, r3
 8007b9a:	6879      	ldr	r1, [r7, #4]
 8007b9c:	68f8      	ldr	r0, [r7, #12]
 8007b9e:	f001 f878 	bl	8008c92 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	2100      	movs	r1, #0
 8007ba8:	68f8      	ldr	r0, [r7, #12]
 8007baa:	f001 fd03 	bl	80095b4 <USBD_LL_PrepareReceive>
 8007bae:	e03f      	b.n	8007c30 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	68da      	ldr	r2, [r3, #12]
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d11c      	bne.n	8007bf6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	685a      	ldr	r2, [r3, #4]
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d316      	bcc.n	8007bf6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	685a      	ldr	r2, [r3, #4]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d20f      	bcs.n	8007bf6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	2100      	movs	r1, #0
 8007bda:	68f8      	ldr	r0, [r7, #12]
 8007bdc:	f001 f859 	bl	8008c92 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2200      	movs	r2, #0
 8007be4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007be8:	2300      	movs	r3, #0
 8007bea:	2200      	movs	r2, #0
 8007bec:	2100      	movs	r1, #0
 8007bee:	68f8      	ldr	r0, [r7, #12]
 8007bf0:	f001 fce0 	bl	80095b4 <USBD_LL_PrepareReceive>
 8007bf4:	e01c      	b.n	8007c30 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	2b03      	cmp	r3, #3
 8007c00:	d10f      	bne.n	8007c22 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c08:	68db      	ldr	r3, [r3, #12]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d009      	beq.n	8007c22 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2200      	movs	r2, #0
 8007c12:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c1c:	68db      	ldr	r3, [r3, #12]
 8007c1e:	68f8      	ldr	r0, [r7, #12]
 8007c20:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c22:	2180      	movs	r1, #128	; 0x80
 8007c24:	68f8      	ldr	r0, [r7, #12]
 8007c26:	f001 fc1b 	bl	8009460 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007c2a:	68f8      	ldr	r0, [r7, #12]
 8007c2c:	f001 f883 	bl	8008d36 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d03a      	beq.n	8007cb0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007c3a:	68f8      	ldr	r0, [r7, #12]
 8007c3c:	f7ff fe42 	bl	80078c4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2200      	movs	r2, #0
 8007c44:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007c48:	e032      	b.n	8007cb0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007c4a:	7afb      	ldrb	r3, [r7, #11]
 8007c4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	4619      	mov	r1, r3
 8007c54:	68f8      	ldr	r0, [r7, #12]
 8007c56:	f000 f985 	bl	8007f64 <USBD_CoreFindEP>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c5e:	7dfb      	ldrb	r3, [r7, #23]
 8007c60:	2bff      	cmp	r3, #255	; 0xff
 8007c62:	d025      	beq.n	8007cb0 <USBD_LL_DataInStage+0x15a>
 8007c64:	7dfb      	ldrb	r3, [r7, #23]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d122      	bne.n	8007cb0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	2b03      	cmp	r3, #3
 8007c74:	d11c      	bne.n	8007cb0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007c76:	7dfa      	ldrb	r2, [r7, #23]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	32ae      	adds	r2, #174	; 0xae
 8007c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c80:	695b      	ldr	r3, [r3, #20]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d014      	beq.n	8007cb0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007c86:	7dfa      	ldrb	r2, [r7, #23]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007c8e:	7dfa      	ldrb	r2, [r7, #23]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	32ae      	adds	r2, #174	; 0xae
 8007c94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c98:	695b      	ldr	r3, [r3, #20]
 8007c9a:	7afa      	ldrb	r2, [r7, #11]
 8007c9c:	4611      	mov	r1, r2
 8007c9e:	68f8      	ldr	r0, [r7, #12]
 8007ca0:	4798      	blx	r3
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007ca6:	7dbb      	ldrb	r3, [r7, #22]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d001      	beq.n	8007cb0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007cac:	7dbb      	ldrb	r3, [r7, #22]
 8007cae:	e000      	b.n	8007cb2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007cb0:	2300      	movs	r3, #0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3718      	adds	r7, #24
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}

08007cba <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007cba:	b580      	push	{r7, lr}
 8007cbc:	b084      	sub	sp, #16
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2201      	movs	r2, #1
 8007cca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d014      	beq.n	8007d20 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d00e      	beq.n	8007d20 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	6852      	ldr	r2, [r2, #4]
 8007d0e:	b2d2      	uxtb	r2, r2
 8007d10:	4611      	mov	r1, r2
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	4798      	blx	r3
 8007d16:	4603      	mov	r3, r0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d001      	beq.n	8007d20 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007d1c:	2303      	movs	r3, #3
 8007d1e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d20:	2340      	movs	r3, #64	; 0x40
 8007d22:	2200      	movs	r2, #0
 8007d24:	2100      	movs	r1, #0
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f001 fb55 	bl	80093d6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2240      	movs	r2, #64	; 0x40
 8007d38:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d3c:	2340      	movs	r3, #64	; 0x40
 8007d3e:	2200      	movs	r2, #0
 8007d40:	2180      	movs	r1, #128	; 0x80
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f001 fb47 	bl	80093d6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2240      	movs	r2, #64	; 0x40
 8007d52:	621a      	str	r2, [r3, #32]

  return ret;
 8007d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}

08007d5e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007d5e:	b480      	push	{r7}
 8007d60:	b083      	sub	sp, #12
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
 8007d66:	460b      	mov	r3, r1
 8007d68:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	78fa      	ldrb	r2, [r7, #3]
 8007d6e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007d70:	2300      	movs	r3, #0
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	370c      	adds	r7, #12
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr

08007d7e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007d7e:	b480      	push	{r7}
 8007d80:	b083      	sub	sp, #12
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	2b04      	cmp	r3, #4
 8007d90:	d006      	beq.n	8007da0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d98:	b2da      	uxtb	r2, r3
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2204      	movs	r2, #4
 8007da4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	370c      	adds	r7, #12
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr

08007db6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007db6:	b480      	push	{r7}
 8007db8:	b083      	sub	sp, #12
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	2b04      	cmp	r3, #4
 8007dc8:	d106      	bne.n	8007dd8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007dd0:	b2da      	uxtb	r2, r3
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007dd8:	2300      	movs	r3, #0
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	370c      	adds	r7, #12
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr

08007de6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007de6:	b580      	push	{r7, lr}
 8007de8:	b082      	sub	sp, #8
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	2b03      	cmp	r3, #3
 8007df8:	d110      	bne.n	8007e1c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d00b      	beq.n	8007e1c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e0a:	69db      	ldr	r3, [r3, #28]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d005      	beq.n	8007e1c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e16:	69db      	ldr	r3, [r3, #28]
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007e1c:	2300      	movs	r3, #0
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3708      	adds	r7, #8
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}

08007e26 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007e26:	b580      	push	{r7, lr}
 8007e28:	b082      	sub	sp, #8
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
 8007e2e:	460b      	mov	r3, r1
 8007e30:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	32ae      	adds	r2, #174	; 0xae
 8007e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d101      	bne.n	8007e48 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007e44:	2303      	movs	r3, #3
 8007e46:	e01c      	b.n	8007e82 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	2b03      	cmp	r3, #3
 8007e52:	d115      	bne.n	8007e80 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	32ae      	adds	r2, #174	; 0xae
 8007e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e62:	6a1b      	ldr	r3, [r3, #32]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d00b      	beq.n	8007e80 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	32ae      	adds	r2, #174	; 0xae
 8007e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e76:	6a1b      	ldr	r3, [r3, #32]
 8007e78:	78fa      	ldrb	r2, [r7, #3]
 8007e7a:	4611      	mov	r1, r2
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e80:	2300      	movs	r3, #0
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3708      	adds	r7, #8
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007e8a:	b580      	push	{r7, lr}
 8007e8c:	b082      	sub	sp, #8
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
 8007e92:	460b      	mov	r3, r1
 8007e94:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	32ae      	adds	r2, #174	; 0xae
 8007ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d101      	bne.n	8007eac <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007ea8:	2303      	movs	r3, #3
 8007eaa:	e01c      	b.n	8007ee6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	2b03      	cmp	r3, #3
 8007eb6:	d115      	bne.n	8007ee4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	32ae      	adds	r2, #174	; 0xae
 8007ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d00b      	beq.n	8007ee4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	32ae      	adds	r2, #174	; 0xae
 8007ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007edc:	78fa      	ldrb	r2, [r7, #3]
 8007ede:	4611      	mov	r1, r2
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3708      	adds	r7, #8
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007eee:	b480      	push	{r7}
 8007ef0:	b083      	sub	sp, #12
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007ef6:	2300      	movs	r3, #0
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	370c      	adds	r7, #12
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr

08007f04 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b084      	sub	sp, #16
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2201      	movs	r2, #1
 8007f14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d00e      	beq.n	8007f40 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	6852      	ldr	r2, [r2, #4]
 8007f2e:	b2d2      	uxtb	r2, r2
 8007f30:	4611      	mov	r1, r2
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	4798      	blx	r3
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d001      	beq.n	8007f40 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007f3c:	2303      	movs	r3, #3
 8007f3e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3710      	adds	r7, #16
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}

08007f4a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007f4a:	b480      	push	{r7}
 8007f4c:	b083      	sub	sp, #12
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
 8007f52:	460b      	mov	r3, r1
 8007f54:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007f56:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	370c      	adds	r7, #12
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr

08007f64 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b083      	sub	sp, #12
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	460b      	mov	r3, r1
 8007f6e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007f70:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	370c      	adds	r7, #12
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr

08007f7e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007f7e:	b480      	push	{r7}
 8007f80:	b085      	sub	sp, #20
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
 8007f86:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	881a      	ldrh	r2, [r3, #0]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	4413      	add	r3, r2
 8007f98:	b29a      	uxth	r2, r3
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	4413      	add	r3, r2
 8007fa8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007faa:	68fb      	ldr	r3, [r7, #12]
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3714      	adds	r7, #20
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr

08007fb8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b087      	sub	sp, #28
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	3301      	adds	r3, #1
 8007fce:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007fd6:	8a3b      	ldrh	r3, [r7, #16]
 8007fd8:	021b      	lsls	r3, r3, #8
 8007fda:	b21a      	sxth	r2, r3
 8007fdc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	b21b      	sxth	r3, r3
 8007fe4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007fe6:	89fb      	ldrh	r3, [r7, #14]
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	371c      	adds	r7, #28
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr

08007ff4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ffe:	2300      	movs	r3, #0
 8008000:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800800a:	2b40      	cmp	r3, #64	; 0x40
 800800c:	d005      	beq.n	800801a <USBD_StdDevReq+0x26>
 800800e:	2b40      	cmp	r3, #64	; 0x40
 8008010:	d857      	bhi.n	80080c2 <USBD_StdDevReq+0xce>
 8008012:	2b00      	cmp	r3, #0
 8008014:	d00f      	beq.n	8008036 <USBD_StdDevReq+0x42>
 8008016:	2b20      	cmp	r3, #32
 8008018:	d153      	bne.n	80080c2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	32ae      	adds	r2, #174	; 0xae
 8008024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008028:	689b      	ldr	r3, [r3, #8]
 800802a:	6839      	ldr	r1, [r7, #0]
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	4798      	blx	r3
 8008030:	4603      	mov	r3, r0
 8008032:	73fb      	strb	r3, [r7, #15]
      break;
 8008034:	e04a      	b.n	80080cc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	785b      	ldrb	r3, [r3, #1]
 800803a:	2b09      	cmp	r3, #9
 800803c:	d83b      	bhi.n	80080b6 <USBD_StdDevReq+0xc2>
 800803e:	a201      	add	r2, pc, #4	; (adr r2, 8008044 <USBD_StdDevReq+0x50>)
 8008040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008044:	08008099 	.word	0x08008099
 8008048:	080080ad 	.word	0x080080ad
 800804c:	080080b7 	.word	0x080080b7
 8008050:	080080a3 	.word	0x080080a3
 8008054:	080080b7 	.word	0x080080b7
 8008058:	08008077 	.word	0x08008077
 800805c:	0800806d 	.word	0x0800806d
 8008060:	080080b7 	.word	0x080080b7
 8008064:	0800808f 	.word	0x0800808f
 8008068:	08008081 	.word	0x08008081
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800806c:	6839      	ldr	r1, [r7, #0]
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 fa3c 	bl	80084ec <USBD_GetDescriptor>
          break;
 8008074:	e024      	b.n	80080c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008076:	6839      	ldr	r1, [r7, #0]
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 fba1 	bl	80087c0 <USBD_SetAddress>
          break;
 800807e:	e01f      	b.n	80080c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008080:	6839      	ldr	r1, [r7, #0]
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 fbe0 	bl	8008848 <USBD_SetConfig>
 8008088:	4603      	mov	r3, r0
 800808a:	73fb      	strb	r3, [r7, #15]
          break;
 800808c:	e018      	b.n	80080c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800808e:	6839      	ldr	r1, [r7, #0]
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 fc83 	bl	800899c <USBD_GetConfig>
          break;
 8008096:	e013      	b.n	80080c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008098:	6839      	ldr	r1, [r7, #0]
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 fcb4 	bl	8008a08 <USBD_GetStatus>
          break;
 80080a0:	e00e      	b.n	80080c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80080a2:	6839      	ldr	r1, [r7, #0]
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 fce3 	bl	8008a70 <USBD_SetFeature>
          break;
 80080aa:	e009      	b.n	80080c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80080ac:	6839      	ldr	r1, [r7, #0]
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 fd07 	bl	8008ac2 <USBD_ClrFeature>
          break;
 80080b4:	e004      	b.n	80080c0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80080b6:	6839      	ldr	r1, [r7, #0]
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 fd5e 	bl	8008b7a <USBD_CtlError>
          break;
 80080be:	bf00      	nop
      }
      break;
 80080c0:	e004      	b.n	80080cc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80080c2:	6839      	ldr	r1, [r7, #0]
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 fd58 	bl	8008b7a <USBD_CtlError>
      break;
 80080ca:	bf00      	nop
  }

  return ret;
 80080cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3710      	adds	r7, #16
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}
 80080d6:	bf00      	nop

080080d8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080e2:	2300      	movs	r3, #0
 80080e4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080ee:	2b40      	cmp	r3, #64	; 0x40
 80080f0:	d005      	beq.n	80080fe <USBD_StdItfReq+0x26>
 80080f2:	2b40      	cmp	r3, #64	; 0x40
 80080f4:	d852      	bhi.n	800819c <USBD_StdItfReq+0xc4>
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d001      	beq.n	80080fe <USBD_StdItfReq+0x26>
 80080fa:	2b20      	cmp	r3, #32
 80080fc:	d14e      	bne.n	800819c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008104:	b2db      	uxtb	r3, r3
 8008106:	3b01      	subs	r3, #1
 8008108:	2b02      	cmp	r3, #2
 800810a:	d840      	bhi.n	800818e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	889b      	ldrh	r3, [r3, #4]
 8008110:	b2db      	uxtb	r3, r3
 8008112:	2b01      	cmp	r3, #1
 8008114:	d836      	bhi.n	8008184 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	889b      	ldrh	r3, [r3, #4]
 800811a:	b2db      	uxtb	r3, r3
 800811c:	4619      	mov	r1, r3
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f7ff ff13 	bl	8007f4a <USBD_CoreFindIF>
 8008124:	4603      	mov	r3, r0
 8008126:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008128:	7bbb      	ldrb	r3, [r7, #14]
 800812a:	2bff      	cmp	r3, #255	; 0xff
 800812c:	d01d      	beq.n	800816a <USBD_StdItfReq+0x92>
 800812e:	7bbb      	ldrb	r3, [r7, #14]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d11a      	bne.n	800816a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008134:	7bba      	ldrb	r2, [r7, #14]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	32ae      	adds	r2, #174	; 0xae
 800813a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d00f      	beq.n	8008164 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008144:	7bba      	ldrb	r2, [r7, #14]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800814c:	7bba      	ldrb	r2, [r7, #14]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	32ae      	adds	r2, #174	; 0xae
 8008152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008156:	689b      	ldr	r3, [r3, #8]
 8008158:	6839      	ldr	r1, [r7, #0]
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	4798      	blx	r3
 800815e:	4603      	mov	r3, r0
 8008160:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008162:	e004      	b.n	800816e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008164:	2303      	movs	r3, #3
 8008166:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008168:	e001      	b.n	800816e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800816a:	2303      	movs	r3, #3
 800816c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	88db      	ldrh	r3, [r3, #6]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d110      	bne.n	8008198 <USBD_StdItfReq+0xc0>
 8008176:	7bfb      	ldrb	r3, [r7, #15]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d10d      	bne.n	8008198 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 fdc7 	bl	8008d10 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008182:	e009      	b.n	8008198 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008184:	6839      	ldr	r1, [r7, #0]
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 fcf7 	bl	8008b7a <USBD_CtlError>
          break;
 800818c:	e004      	b.n	8008198 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800818e:	6839      	ldr	r1, [r7, #0]
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 fcf2 	bl	8008b7a <USBD_CtlError>
          break;
 8008196:	e000      	b.n	800819a <USBD_StdItfReq+0xc2>
          break;
 8008198:	bf00      	nop
      }
      break;
 800819a:	e004      	b.n	80081a6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800819c:	6839      	ldr	r1, [r7, #0]
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 fceb 	bl	8008b7a <USBD_CtlError>
      break;
 80081a4:	bf00      	nop
  }

  return ret;
 80081a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3710      	adds	r7, #16
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80081ba:	2300      	movs	r3, #0
 80081bc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	889b      	ldrh	r3, [r3, #4]
 80081c2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80081cc:	2b40      	cmp	r3, #64	; 0x40
 80081ce:	d007      	beq.n	80081e0 <USBD_StdEPReq+0x30>
 80081d0:	2b40      	cmp	r3, #64	; 0x40
 80081d2:	f200 817f 	bhi.w	80084d4 <USBD_StdEPReq+0x324>
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d02a      	beq.n	8008230 <USBD_StdEPReq+0x80>
 80081da:	2b20      	cmp	r3, #32
 80081dc:	f040 817a 	bne.w	80084d4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80081e0:	7bbb      	ldrb	r3, [r7, #14]
 80081e2:	4619      	mov	r1, r3
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f7ff febd 	bl	8007f64 <USBD_CoreFindEP>
 80081ea:	4603      	mov	r3, r0
 80081ec:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80081ee:	7b7b      	ldrb	r3, [r7, #13]
 80081f0:	2bff      	cmp	r3, #255	; 0xff
 80081f2:	f000 8174 	beq.w	80084de <USBD_StdEPReq+0x32e>
 80081f6:	7b7b      	ldrb	r3, [r7, #13]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	f040 8170 	bne.w	80084de <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80081fe:	7b7a      	ldrb	r2, [r7, #13]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008206:	7b7a      	ldrb	r2, [r7, #13]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	32ae      	adds	r2, #174	; 0xae
 800820c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	2b00      	cmp	r3, #0
 8008214:	f000 8163 	beq.w	80084de <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008218:	7b7a      	ldrb	r2, [r7, #13]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	32ae      	adds	r2, #174	; 0xae
 800821e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	6839      	ldr	r1, [r7, #0]
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	4798      	blx	r3
 800822a:	4603      	mov	r3, r0
 800822c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800822e:	e156      	b.n	80084de <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	785b      	ldrb	r3, [r3, #1]
 8008234:	2b03      	cmp	r3, #3
 8008236:	d008      	beq.n	800824a <USBD_StdEPReq+0x9a>
 8008238:	2b03      	cmp	r3, #3
 800823a:	f300 8145 	bgt.w	80084c8 <USBD_StdEPReq+0x318>
 800823e:	2b00      	cmp	r3, #0
 8008240:	f000 809b 	beq.w	800837a <USBD_StdEPReq+0x1ca>
 8008244:	2b01      	cmp	r3, #1
 8008246:	d03c      	beq.n	80082c2 <USBD_StdEPReq+0x112>
 8008248:	e13e      	b.n	80084c8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008250:	b2db      	uxtb	r3, r3
 8008252:	2b02      	cmp	r3, #2
 8008254:	d002      	beq.n	800825c <USBD_StdEPReq+0xac>
 8008256:	2b03      	cmp	r3, #3
 8008258:	d016      	beq.n	8008288 <USBD_StdEPReq+0xd8>
 800825a:	e02c      	b.n	80082b6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800825c:	7bbb      	ldrb	r3, [r7, #14]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d00d      	beq.n	800827e <USBD_StdEPReq+0xce>
 8008262:	7bbb      	ldrb	r3, [r7, #14]
 8008264:	2b80      	cmp	r3, #128	; 0x80
 8008266:	d00a      	beq.n	800827e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008268:	7bbb      	ldrb	r3, [r7, #14]
 800826a:	4619      	mov	r1, r3
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f001 f8f7 	bl	8009460 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008272:	2180      	movs	r1, #128	; 0x80
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f001 f8f3 	bl	8009460 <USBD_LL_StallEP>
 800827a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800827c:	e020      	b.n	80082c0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800827e:	6839      	ldr	r1, [r7, #0]
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 fc7a 	bl	8008b7a <USBD_CtlError>
              break;
 8008286:	e01b      	b.n	80082c0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	885b      	ldrh	r3, [r3, #2]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d10e      	bne.n	80082ae <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008290:	7bbb      	ldrb	r3, [r7, #14]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d00b      	beq.n	80082ae <USBD_StdEPReq+0xfe>
 8008296:	7bbb      	ldrb	r3, [r7, #14]
 8008298:	2b80      	cmp	r3, #128	; 0x80
 800829a:	d008      	beq.n	80082ae <USBD_StdEPReq+0xfe>
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	88db      	ldrh	r3, [r3, #6]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d104      	bne.n	80082ae <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80082a4:	7bbb      	ldrb	r3, [r7, #14]
 80082a6:	4619      	mov	r1, r3
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f001 f8d9 	bl	8009460 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 fd2e 	bl	8008d10 <USBD_CtlSendStatus>

              break;
 80082b4:	e004      	b.n	80082c0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80082b6:	6839      	ldr	r1, [r7, #0]
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 fc5e 	bl	8008b7a <USBD_CtlError>
              break;
 80082be:	bf00      	nop
          }
          break;
 80082c0:	e107      	b.n	80084d2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082c8:	b2db      	uxtb	r3, r3
 80082ca:	2b02      	cmp	r3, #2
 80082cc:	d002      	beq.n	80082d4 <USBD_StdEPReq+0x124>
 80082ce:	2b03      	cmp	r3, #3
 80082d0:	d016      	beq.n	8008300 <USBD_StdEPReq+0x150>
 80082d2:	e04b      	b.n	800836c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082d4:	7bbb      	ldrb	r3, [r7, #14]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d00d      	beq.n	80082f6 <USBD_StdEPReq+0x146>
 80082da:	7bbb      	ldrb	r3, [r7, #14]
 80082dc:	2b80      	cmp	r3, #128	; 0x80
 80082de:	d00a      	beq.n	80082f6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80082e0:	7bbb      	ldrb	r3, [r7, #14]
 80082e2:	4619      	mov	r1, r3
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f001 f8bb 	bl	8009460 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80082ea:	2180      	movs	r1, #128	; 0x80
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f001 f8b7 	bl	8009460 <USBD_LL_StallEP>
 80082f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80082f4:	e040      	b.n	8008378 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80082f6:	6839      	ldr	r1, [r7, #0]
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 fc3e 	bl	8008b7a <USBD_CtlError>
              break;
 80082fe:	e03b      	b.n	8008378 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	885b      	ldrh	r3, [r3, #2]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d136      	bne.n	8008376 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008308:	7bbb      	ldrb	r3, [r7, #14]
 800830a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800830e:	2b00      	cmp	r3, #0
 8008310:	d004      	beq.n	800831c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008312:	7bbb      	ldrb	r3, [r7, #14]
 8008314:	4619      	mov	r1, r3
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f001 f8c1 	bl	800949e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 fcf7 	bl	8008d10 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008322:	7bbb      	ldrb	r3, [r7, #14]
 8008324:	4619      	mov	r1, r3
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f7ff fe1c 	bl	8007f64 <USBD_CoreFindEP>
 800832c:	4603      	mov	r3, r0
 800832e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008330:	7b7b      	ldrb	r3, [r7, #13]
 8008332:	2bff      	cmp	r3, #255	; 0xff
 8008334:	d01f      	beq.n	8008376 <USBD_StdEPReq+0x1c6>
 8008336:	7b7b      	ldrb	r3, [r7, #13]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d11c      	bne.n	8008376 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800833c:	7b7a      	ldrb	r2, [r7, #13]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008344:	7b7a      	ldrb	r2, [r7, #13]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	32ae      	adds	r2, #174	; 0xae
 800834a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d010      	beq.n	8008376 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008354:	7b7a      	ldrb	r2, [r7, #13]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	32ae      	adds	r2, #174	; 0xae
 800835a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800835e:	689b      	ldr	r3, [r3, #8]
 8008360:	6839      	ldr	r1, [r7, #0]
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	4798      	blx	r3
 8008366:	4603      	mov	r3, r0
 8008368:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800836a:	e004      	b.n	8008376 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800836c:	6839      	ldr	r1, [r7, #0]
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 fc03 	bl	8008b7a <USBD_CtlError>
              break;
 8008374:	e000      	b.n	8008378 <USBD_StdEPReq+0x1c8>
              break;
 8008376:	bf00      	nop
          }
          break;
 8008378:	e0ab      	b.n	80084d2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008380:	b2db      	uxtb	r3, r3
 8008382:	2b02      	cmp	r3, #2
 8008384:	d002      	beq.n	800838c <USBD_StdEPReq+0x1dc>
 8008386:	2b03      	cmp	r3, #3
 8008388:	d032      	beq.n	80083f0 <USBD_StdEPReq+0x240>
 800838a:	e097      	b.n	80084bc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800838c:	7bbb      	ldrb	r3, [r7, #14]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d007      	beq.n	80083a2 <USBD_StdEPReq+0x1f2>
 8008392:	7bbb      	ldrb	r3, [r7, #14]
 8008394:	2b80      	cmp	r3, #128	; 0x80
 8008396:	d004      	beq.n	80083a2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008398:	6839      	ldr	r1, [r7, #0]
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 fbed 	bl	8008b7a <USBD_CtlError>
                break;
 80083a0:	e091      	b.n	80084c6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	da0b      	bge.n	80083c2 <USBD_StdEPReq+0x212>
 80083aa:	7bbb      	ldrb	r3, [r7, #14]
 80083ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083b0:	4613      	mov	r3, r2
 80083b2:	009b      	lsls	r3, r3, #2
 80083b4:	4413      	add	r3, r2
 80083b6:	009b      	lsls	r3, r3, #2
 80083b8:	3310      	adds	r3, #16
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	4413      	add	r3, r2
 80083be:	3304      	adds	r3, #4
 80083c0:	e00b      	b.n	80083da <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80083c2:	7bbb      	ldrb	r3, [r7, #14]
 80083c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083c8:	4613      	mov	r3, r2
 80083ca:	009b      	lsls	r3, r3, #2
 80083cc:	4413      	add	r3, r2
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	4413      	add	r3, r2
 80083d8:	3304      	adds	r3, #4
 80083da:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	2200      	movs	r2, #0
 80083e0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	2202      	movs	r2, #2
 80083e6:	4619      	mov	r1, r3
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 fc37 	bl	8008c5c <USBD_CtlSendData>
              break;
 80083ee:	e06a      	b.n	80084c6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80083f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	da11      	bge.n	800841c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80083f8:	7bbb      	ldrb	r3, [r7, #14]
 80083fa:	f003 020f 	and.w	r2, r3, #15
 80083fe:	6879      	ldr	r1, [r7, #4]
 8008400:	4613      	mov	r3, r2
 8008402:	009b      	lsls	r3, r3, #2
 8008404:	4413      	add	r3, r2
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	440b      	add	r3, r1
 800840a:	3324      	adds	r3, #36	; 0x24
 800840c:	881b      	ldrh	r3, [r3, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d117      	bne.n	8008442 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008412:	6839      	ldr	r1, [r7, #0]
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 fbb0 	bl	8008b7a <USBD_CtlError>
                  break;
 800841a:	e054      	b.n	80084c6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800841c:	7bbb      	ldrb	r3, [r7, #14]
 800841e:	f003 020f 	and.w	r2, r3, #15
 8008422:	6879      	ldr	r1, [r7, #4]
 8008424:	4613      	mov	r3, r2
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	4413      	add	r3, r2
 800842a:	009b      	lsls	r3, r3, #2
 800842c:	440b      	add	r3, r1
 800842e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008432:	881b      	ldrh	r3, [r3, #0]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d104      	bne.n	8008442 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008438:	6839      	ldr	r1, [r7, #0]
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 fb9d 	bl	8008b7a <USBD_CtlError>
                  break;
 8008440:	e041      	b.n	80084c6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008442:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008446:	2b00      	cmp	r3, #0
 8008448:	da0b      	bge.n	8008462 <USBD_StdEPReq+0x2b2>
 800844a:	7bbb      	ldrb	r3, [r7, #14]
 800844c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008450:	4613      	mov	r3, r2
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	4413      	add	r3, r2
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	3310      	adds	r3, #16
 800845a:	687a      	ldr	r2, [r7, #4]
 800845c:	4413      	add	r3, r2
 800845e:	3304      	adds	r3, #4
 8008460:	e00b      	b.n	800847a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008462:	7bbb      	ldrb	r3, [r7, #14]
 8008464:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008468:	4613      	mov	r3, r2
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	4413      	add	r3, r2
 800846e:	009b      	lsls	r3, r3, #2
 8008470:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	4413      	add	r3, r2
 8008478:	3304      	adds	r3, #4
 800847a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800847c:	7bbb      	ldrb	r3, [r7, #14]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d002      	beq.n	8008488 <USBD_StdEPReq+0x2d8>
 8008482:	7bbb      	ldrb	r3, [r7, #14]
 8008484:	2b80      	cmp	r3, #128	; 0x80
 8008486:	d103      	bne.n	8008490 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	2200      	movs	r2, #0
 800848c:	601a      	str	r2, [r3, #0]
 800848e:	e00e      	b.n	80084ae <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008490:	7bbb      	ldrb	r3, [r7, #14]
 8008492:	4619      	mov	r1, r3
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f001 f821 	bl	80094dc <USBD_LL_IsStallEP>
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d003      	beq.n	80084a8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	2201      	movs	r2, #1
 80084a4:	601a      	str	r2, [r3, #0]
 80084a6:	e002      	b.n	80084ae <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	2200      	movs	r2, #0
 80084ac:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	2202      	movs	r2, #2
 80084b2:	4619      	mov	r1, r3
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 fbd1 	bl	8008c5c <USBD_CtlSendData>
              break;
 80084ba:	e004      	b.n	80084c6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80084bc:	6839      	ldr	r1, [r7, #0]
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 fb5b 	bl	8008b7a <USBD_CtlError>
              break;
 80084c4:	bf00      	nop
          }
          break;
 80084c6:	e004      	b.n	80084d2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80084c8:	6839      	ldr	r1, [r7, #0]
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 fb55 	bl	8008b7a <USBD_CtlError>
          break;
 80084d0:	bf00      	nop
      }
      break;
 80084d2:	e005      	b.n	80084e0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80084d4:	6839      	ldr	r1, [r7, #0]
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 fb4f 	bl	8008b7a <USBD_CtlError>
      break;
 80084dc:	e000      	b.n	80084e0 <USBD_StdEPReq+0x330>
      break;
 80084de:	bf00      	nop
  }

  return ret;
 80084e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3710      	adds	r7, #16
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
	...

080084ec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80084f6:	2300      	movs	r3, #0
 80084f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80084fa:	2300      	movs	r3, #0
 80084fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80084fe:	2300      	movs	r3, #0
 8008500:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	885b      	ldrh	r3, [r3, #2]
 8008506:	0a1b      	lsrs	r3, r3, #8
 8008508:	b29b      	uxth	r3, r3
 800850a:	3b01      	subs	r3, #1
 800850c:	2b06      	cmp	r3, #6
 800850e:	f200 8128 	bhi.w	8008762 <USBD_GetDescriptor+0x276>
 8008512:	a201      	add	r2, pc, #4	; (adr r2, 8008518 <USBD_GetDescriptor+0x2c>)
 8008514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008518:	08008535 	.word	0x08008535
 800851c:	0800854d 	.word	0x0800854d
 8008520:	0800858d 	.word	0x0800858d
 8008524:	08008763 	.word	0x08008763
 8008528:	08008763 	.word	0x08008763
 800852c:	08008703 	.word	0x08008703
 8008530:	0800872f 	.word	0x0800872f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	7c12      	ldrb	r2, [r2, #16]
 8008540:	f107 0108 	add.w	r1, r7, #8
 8008544:	4610      	mov	r0, r2
 8008546:	4798      	blx	r3
 8008548:	60f8      	str	r0, [r7, #12]
      break;
 800854a:	e112      	b.n	8008772 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	7c1b      	ldrb	r3, [r3, #16]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d10d      	bne.n	8008570 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800855a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800855c:	f107 0208 	add.w	r2, r7, #8
 8008560:	4610      	mov	r0, r2
 8008562:	4798      	blx	r3
 8008564:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	3301      	adds	r3, #1
 800856a:	2202      	movs	r2, #2
 800856c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800856e:	e100      	b.n	8008772 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008578:	f107 0208 	add.w	r2, r7, #8
 800857c:	4610      	mov	r0, r2
 800857e:	4798      	blx	r3
 8008580:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	3301      	adds	r3, #1
 8008586:	2202      	movs	r2, #2
 8008588:	701a      	strb	r2, [r3, #0]
      break;
 800858a:	e0f2      	b.n	8008772 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	885b      	ldrh	r3, [r3, #2]
 8008590:	b2db      	uxtb	r3, r3
 8008592:	2b05      	cmp	r3, #5
 8008594:	f200 80ac 	bhi.w	80086f0 <USBD_GetDescriptor+0x204>
 8008598:	a201      	add	r2, pc, #4	; (adr r2, 80085a0 <USBD_GetDescriptor+0xb4>)
 800859a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800859e:	bf00      	nop
 80085a0:	080085b9 	.word	0x080085b9
 80085a4:	080085ed 	.word	0x080085ed
 80085a8:	08008621 	.word	0x08008621
 80085ac:	08008655 	.word	0x08008655
 80085b0:	08008689 	.word	0x08008689
 80085b4:	080086bd 	.word	0x080086bd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d00b      	beq.n	80085dc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	7c12      	ldrb	r2, [r2, #16]
 80085d0:	f107 0108 	add.w	r1, r7, #8
 80085d4:	4610      	mov	r0, r2
 80085d6:	4798      	blx	r3
 80085d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085da:	e091      	b.n	8008700 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085dc:	6839      	ldr	r1, [r7, #0]
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 facb 	bl	8008b7a <USBD_CtlError>
            err++;
 80085e4:	7afb      	ldrb	r3, [r7, #11]
 80085e6:	3301      	adds	r3, #1
 80085e8:	72fb      	strb	r3, [r7, #11]
          break;
 80085ea:	e089      	b.n	8008700 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d00b      	beq.n	8008610 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	7c12      	ldrb	r2, [r2, #16]
 8008604:	f107 0108 	add.w	r1, r7, #8
 8008608:	4610      	mov	r0, r2
 800860a:	4798      	blx	r3
 800860c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800860e:	e077      	b.n	8008700 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008610:	6839      	ldr	r1, [r7, #0]
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 fab1 	bl	8008b7a <USBD_CtlError>
            err++;
 8008618:	7afb      	ldrb	r3, [r7, #11]
 800861a:	3301      	adds	r3, #1
 800861c:	72fb      	strb	r3, [r7, #11]
          break;
 800861e:	e06f      	b.n	8008700 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d00b      	beq.n	8008644 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008632:	68db      	ldr	r3, [r3, #12]
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	7c12      	ldrb	r2, [r2, #16]
 8008638:	f107 0108 	add.w	r1, r7, #8
 800863c:	4610      	mov	r0, r2
 800863e:	4798      	blx	r3
 8008640:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008642:	e05d      	b.n	8008700 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008644:	6839      	ldr	r1, [r7, #0]
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 fa97 	bl	8008b7a <USBD_CtlError>
            err++;
 800864c:	7afb      	ldrb	r3, [r7, #11]
 800864e:	3301      	adds	r3, #1
 8008650:	72fb      	strb	r3, [r7, #11]
          break;
 8008652:	e055      	b.n	8008700 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800865a:	691b      	ldr	r3, [r3, #16]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d00b      	beq.n	8008678 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008666:	691b      	ldr	r3, [r3, #16]
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	7c12      	ldrb	r2, [r2, #16]
 800866c:	f107 0108 	add.w	r1, r7, #8
 8008670:	4610      	mov	r0, r2
 8008672:	4798      	blx	r3
 8008674:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008676:	e043      	b.n	8008700 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008678:	6839      	ldr	r1, [r7, #0]
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 fa7d 	bl	8008b7a <USBD_CtlError>
            err++;
 8008680:	7afb      	ldrb	r3, [r7, #11]
 8008682:	3301      	adds	r3, #1
 8008684:	72fb      	strb	r3, [r7, #11]
          break;
 8008686:	e03b      	b.n	8008700 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800868e:	695b      	ldr	r3, [r3, #20]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d00b      	beq.n	80086ac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800869a:	695b      	ldr	r3, [r3, #20]
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	7c12      	ldrb	r2, [r2, #16]
 80086a0:	f107 0108 	add.w	r1, r7, #8
 80086a4:	4610      	mov	r0, r2
 80086a6:	4798      	blx	r3
 80086a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086aa:	e029      	b.n	8008700 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086ac:	6839      	ldr	r1, [r7, #0]
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 fa63 	bl	8008b7a <USBD_CtlError>
            err++;
 80086b4:	7afb      	ldrb	r3, [r7, #11]
 80086b6:	3301      	adds	r3, #1
 80086b8:	72fb      	strb	r3, [r7, #11]
          break;
 80086ba:	e021      	b.n	8008700 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086c2:	699b      	ldr	r3, [r3, #24]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d00b      	beq.n	80086e0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086ce:	699b      	ldr	r3, [r3, #24]
 80086d0:	687a      	ldr	r2, [r7, #4]
 80086d2:	7c12      	ldrb	r2, [r2, #16]
 80086d4:	f107 0108 	add.w	r1, r7, #8
 80086d8:	4610      	mov	r0, r2
 80086da:	4798      	blx	r3
 80086dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086de:	e00f      	b.n	8008700 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086e0:	6839      	ldr	r1, [r7, #0]
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 fa49 	bl	8008b7a <USBD_CtlError>
            err++;
 80086e8:	7afb      	ldrb	r3, [r7, #11]
 80086ea:	3301      	adds	r3, #1
 80086ec:	72fb      	strb	r3, [r7, #11]
          break;
 80086ee:	e007      	b.n	8008700 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80086f0:	6839      	ldr	r1, [r7, #0]
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 fa41 	bl	8008b7a <USBD_CtlError>
          err++;
 80086f8:	7afb      	ldrb	r3, [r7, #11]
 80086fa:	3301      	adds	r3, #1
 80086fc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80086fe:	bf00      	nop
      }
      break;
 8008700:	e037      	b.n	8008772 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	7c1b      	ldrb	r3, [r3, #16]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d109      	bne.n	800871e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008712:	f107 0208 	add.w	r2, r7, #8
 8008716:	4610      	mov	r0, r2
 8008718:	4798      	blx	r3
 800871a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800871c:	e029      	b.n	8008772 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800871e:	6839      	ldr	r1, [r7, #0]
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 fa2a 	bl	8008b7a <USBD_CtlError>
        err++;
 8008726:	7afb      	ldrb	r3, [r7, #11]
 8008728:	3301      	adds	r3, #1
 800872a:	72fb      	strb	r3, [r7, #11]
      break;
 800872c:	e021      	b.n	8008772 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	7c1b      	ldrb	r3, [r3, #16]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d10d      	bne.n	8008752 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800873c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800873e:	f107 0208 	add.w	r2, r7, #8
 8008742:	4610      	mov	r0, r2
 8008744:	4798      	blx	r3
 8008746:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	3301      	adds	r3, #1
 800874c:	2207      	movs	r2, #7
 800874e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008750:	e00f      	b.n	8008772 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008752:	6839      	ldr	r1, [r7, #0]
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 fa10 	bl	8008b7a <USBD_CtlError>
        err++;
 800875a:	7afb      	ldrb	r3, [r7, #11]
 800875c:	3301      	adds	r3, #1
 800875e:	72fb      	strb	r3, [r7, #11]
      break;
 8008760:	e007      	b.n	8008772 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008762:	6839      	ldr	r1, [r7, #0]
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 fa08 	bl	8008b7a <USBD_CtlError>
      err++;
 800876a:	7afb      	ldrb	r3, [r7, #11]
 800876c:	3301      	adds	r3, #1
 800876e:	72fb      	strb	r3, [r7, #11]
      break;
 8008770:	bf00      	nop
  }

  if (err != 0U)
 8008772:	7afb      	ldrb	r3, [r7, #11]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d11e      	bne.n	80087b6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	88db      	ldrh	r3, [r3, #6]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d016      	beq.n	80087ae <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008780:	893b      	ldrh	r3, [r7, #8]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d00e      	beq.n	80087a4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	88da      	ldrh	r2, [r3, #6]
 800878a:	893b      	ldrh	r3, [r7, #8]
 800878c:	4293      	cmp	r3, r2
 800878e:	bf28      	it	cs
 8008790:	4613      	movcs	r3, r2
 8008792:	b29b      	uxth	r3, r3
 8008794:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008796:	893b      	ldrh	r3, [r7, #8]
 8008798:	461a      	mov	r2, r3
 800879a:	68f9      	ldr	r1, [r7, #12]
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 fa5d 	bl	8008c5c <USBD_CtlSendData>
 80087a2:	e009      	b.n	80087b8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80087a4:	6839      	ldr	r1, [r7, #0]
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 f9e7 	bl	8008b7a <USBD_CtlError>
 80087ac:	e004      	b.n	80087b8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 faae 	bl	8008d10 <USBD_CtlSendStatus>
 80087b4:	e000      	b.n	80087b8 <USBD_GetDescriptor+0x2cc>
    return;
 80087b6:	bf00      	nop
  }
}
 80087b8:	3710      	adds	r7, #16
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop

080087c0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	889b      	ldrh	r3, [r3, #4]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d131      	bne.n	8008836 <USBD_SetAddress+0x76>
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	88db      	ldrh	r3, [r3, #6]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d12d      	bne.n	8008836 <USBD_SetAddress+0x76>
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	885b      	ldrh	r3, [r3, #2]
 80087de:	2b7f      	cmp	r3, #127	; 0x7f
 80087e0:	d829      	bhi.n	8008836 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	885b      	ldrh	r3, [r3, #2]
 80087e6:	b2db      	uxtb	r3, r3
 80087e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087f4:	b2db      	uxtb	r3, r3
 80087f6:	2b03      	cmp	r3, #3
 80087f8:	d104      	bne.n	8008804 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80087fa:	6839      	ldr	r1, [r7, #0]
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 f9bc 	bl	8008b7a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008802:	e01d      	b.n	8008840 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	7bfa      	ldrb	r2, [r7, #15]
 8008808:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800880c:	7bfb      	ldrb	r3, [r7, #15]
 800880e:	4619      	mov	r1, r3
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 fe8f 	bl	8009534 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 fa7a 	bl	8008d10 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800881c:	7bfb      	ldrb	r3, [r7, #15]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d004      	beq.n	800882c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2202      	movs	r2, #2
 8008826:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800882a:	e009      	b.n	8008840 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2201      	movs	r2, #1
 8008830:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008834:	e004      	b.n	8008840 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008836:	6839      	ldr	r1, [r7, #0]
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f000 f99e 	bl	8008b7a <USBD_CtlError>
  }
}
 800883e:	bf00      	nop
 8008840:	bf00      	nop
 8008842:	3710      	adds	r7, #16
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008852:	2300      	movs	r3, #0
 8008854:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	885b      	ldrh	r3, [r3, #2]
 800885a:	b2da      	uxtb	r2, r3
 800885c:	4b4e      	ldr	r3, [pc, #312]	; (8008998 <USBD_SetConfig+0x150>)
 800885e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008860:	4b4d      	ldr	r3, [pc, #308]	; (8008998 <USBD_SetConfig+0x150>)
 8008862:	781b      	ldrb	r3, [r3, #0]
 8008864:	2b01      	cmp	r3, #1
 8008866:	d905      	bls.n	8008874 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008868:	6839      	ldr	r1, [r7, #0]
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 f985 	bl	8008b7a <USBD_CtlError>
    return USBD_FAIL;
 8008870:	2303      	movs	r3, #3
 8008872:	e08c      	b.n	800898e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800887a:	b2db      	uxtb	r3, r3
 800887c:	2b02      	cmp	r3, #2
 800887e:	d002      	beq.n	8008886 <USBD_SetConfig+0x3e>
 8008880:	2b03      	cmp	r3, #3
 8008882:	d029      	beq.n	80088d8 <USBD_SetConfig+0x90>
 8008884:	e075      	b.n	8008972 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008886:	4b44      	ldr	r3, [pc, #272]	; (8008998 <USBD_SetConfig+0x150>)
 8008888:	781b      	ldrb	r3, [r3, #0]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d020      	beq.n	80088d0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800888e:	4b42      	ldr	r3, [pc, #264]	; (8008998 <USBD_SetConfig+0x150>)
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	461a      	mov	r2, r3
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008898:	4b3f      	ldr	r3, [pc, #252]	; (8008998 <USBD_SetConfig+0x150>)
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	4619      	mov	r1, r3
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f7ff f81b 	bl	80078da <USBD_SetClassConfig>
 80088a4:	4603      	mov	r3, r0
 80088a6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80088a8:	7bfb      	ldrb	r3, [r7, #15]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d008      	beq.n	80088c0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80088ae:	6839      	ldr	r1, [r7, #0]
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f000 f962 	bl	8008b7a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2202      	movs	r2, #2
 80088ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80088be:	e065      	b.n	800898c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 fa25 	bl	8008d10 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2203      	movs	r2, #3
 80088ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80088ce:	e05d      	b.n	800898c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 fa1d 	bl	8008d10 <USBD_CtlSendStatus>
      break;
 80088d6:	e059      	b.n	800898c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80088d8:	4b2f      	ldr	r3, [pc, #188]	; (8008998 <USBD_SetConfig+0x150>)
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d112      	bne.n	8008906 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2202      	movs	r2, #2
 80088e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80088e8:	4b2b      	ldr	r3, [pc, #172]	; (8008998 <USBD_SetConfig+0x150>)
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	461a      	mov	r2, r3
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80088f2:	4b29      	ldr	r3, [pc, #164]	; (8008998 <USBD_SetConfig+0x150>)
 80088f4:	781b      	ldrb	r3, [r3, #0]
 80088f6:	4619      	mov	r1, r3
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f7ff f80a 	bl	8007912 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 fa06 	bl	8008d10 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008904:	e042      	b.n	800898c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008906:	4b24      	ldr	r3, [pc, #144]	; (8008998 <USBD_SetConfig+0x150>)
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	461a      	mov	r2, r3
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	429a      	cmp	r2, r3
 8008912:	d02a      	beq.n	800896a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	b2db      	uxtb	r3, r3
 800891a:	4619      	mov	r1, r3
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f7fe fff8 	bl	8007912 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008922:	4b1d      	ldr	r3, [pc, #116]	; (8008998 <USBD_SetConfig+0x150>)
 8008924:	781b      	ldrb	r3, [r3, #0]
 8008926:	461a      	mov	r2, r3
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800892c:	4b1a      	ldr	r3, [pc, #104]	; (8008998 <USBD_SetConfig+0x150>)
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	4619      	mov	r1, r3
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f7fe ffd1 	bl	80078da <USBD_SetClassConfig>
 8008938:	4603      	mov	r3, r0
 800893a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800893c:	7bfb      	ldrb	r3, [r7, #15]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d00f      	beq.n	8008962 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008942:	6839      	ldr	r1, [r7, #0]
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 f918 	bl	8008b7a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	b2db      	uxtb	r3, r3
 8008950:	4619      	mov	r1, r3
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f7fe ffdd 	bl	8007912 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2202      	movs	r2, #2
 800895c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008960:	e014      	b.n	800898c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f000 f9d4 	bl	8008d10 <USBD_CtlSendStatus>
      break;
 8008968:	e010      	b.n	800898c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f000 f9d0 	bl	8008d10 <USBD_CtlSendStatus>
      break;
 8008970:	e00c      	b.n	800898c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008972:	6839      	ldr	r1, [r7, #0]
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 f900 	bl	8008b7a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800897a:	4b07      	ldr	r3, [pc, #28]	; (8008998 <USBD_SetConfig+0x150>)
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	4619      	mov	r1, r3
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f7fe ffc6 	bl	8007912 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008986:	2303      	movs	r3, #3
 8008988:	73fb      	strb	r3, [r7, #15]
      break;
 800898a:	bf00      	nop
  }

  return ret;
 800898c:	7bfb      	ldrb	r3, [r7, #15]
}
 800898e:	4618      	mov	r0, r3
 8008990:	3710      	adds	r7, #16
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	20000374 	.word	0x20000374

0800899c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b082      	sub	sp, #8
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	88db      	ldrh	r3, [r3, #6]
 80089aa:	2b01      	cmp	r3, #1
 80089ac:	d004      	beq.n	80089b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80089ae:	6839      	ldr	r1, [r7, #0]
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f000 f8e2 	bl	8008b7a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80089b6:	e023      	b.n	8008a00 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089be:	b2db      	uxtb	r3, r3
 80089c0:	2b02      	cmp	r3, #2
 80089c2:	dc02      	bgt.n	80089ca <USBD_GetConfig+0x2e>
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	dc03      	bgt.n	80089d0 <USBD_GetConfig+0x34>
 80089c8:	e015      	b.n	80089f6 <USBD_GetConfig+0x5a>
 80089ca:	2b03      	cmp	r3, #3
 80089cc:	d00b      	beq.n	80089e6 <USBD_GetConfig+0x4a>
 80089ce:	e012      	b.n	80089f6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2200      	movs	r2, #0
 80089d4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	3308      	adds	r3, #8
 80089da:	2201      	movs	r2, #1
 80089dc:	4619      	mov	r1, r3
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 f93c 	bl	8008c5c <USBD_CtlSendData>
        break;
 80089e4:	e00c      	b.n	8008a00 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	3304      	adds	r3, #4
 80089ea:	2201      	movs	r2, #1
 80089ec:	4619      	mov	r1, r3
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 f934 	bl	8008c5c <USBD_CtlSendData>
        break;
 80089f4:	e004      	b.n	8008a00 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80089f6:	6839      	ldr	r1, [r7, #0]
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f000 f8be 	bl	8008b7a <USBD_CtlError>
        break;
 80089fe:	bf00      	nop
}
 8008a00:	bf00      	nop
 8008a02:	3708      	adds	r7, #8
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	3b01      	subs	r3, #1
 8008a1c:	2b02      	cmp	r3, #2
 8008a1e:	d81e      	bhi.n	8008a5e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	88db      	ldrh	r3, [r3, #6]
 8008a24:	2b02      	cmp	r3, #2
 8008a26:	d004      	beq.n	8008a32 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008a28:	6839      	ldr	r1, [r7, #0]
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 f8a5 	bl	8008b7a <USBD_CtlError>
        break;
 8008a30:	e01a      	b.n	8008a68 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2201      	movs	r2, #1
 8008a36:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d005      	beq.n	8008a4e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	68db      	ldr	r3, [r3, #12]
 8008a46:	f043 0202 	orr.w	r2, r3, #2
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	330c      	adds	r3, #12
 8008a52:	2202      	movs	r2, #2
 8008a54:	4619      	mov	r1, r3
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 f900 	bl	8008c5c <USBD_CtlSendData>
      break;
 8008a5c:	e004      	b.n	8008a68 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008a5e:	6839      	ldr	r1, [r7, #0]
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f000 f88a 	bl	8008b7a <USBD_CtlError>
      break;
 8008a66:	bf00      	nop
  }
}
 8008a68:	bf00      	nop
 8008a6a:	3708      	adds	r7, #8
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}

08008a70 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b082      	sub	sp, #8
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	885b      	ldrh	r3, [r3, #2]
 8008a7e:	2b01      	cmp	r3, #1
 8008a80:	d107      	bne.n	8008a92 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2201      	movs	r2, #1
 8008a86:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 f940 	bl	8008d10 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008a90:	e013      	b.n	8008aba <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	885b      	ldrh	r3, [r3, #2]
 8008a96:	2b02      	cmp	r3, #2
 8008a98:	d10b      	bne.n	8008ab2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	889b      	ldrh	r3, [r3, #4]
 8008a9e:	0a1b      	lsrs	r3, r3, #8
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	b2da      	uxtb	r2, r3
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 f930 	bl	8008d10 <USBD_CtlSendStatus>
}
 8008ab0:	e003      	b.n	8008aba <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008ab2:	6839      	ldr	r1, [r7, #0]
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f000 f860 	bl	8008b7a <USBD_CtlError>
}
 8008aba:	bf00      	nop
 8008abc:	3708      	adds	r7, #8
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}

08008ac2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ac2:	b580      	push	{r7, lr}
 8008ac4:	b082      	sub	sp, #8
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
 8008aca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ad2:	b2db      	uxtb	r3, r3
 8008ad4:	3b01      	subs	r3, #1
 8008ad6:	2b02      	cmp	r3, #2
 8008ad8:	d80b      	bhi.n	8008af2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	885b      	ldrh	r3, [r3, #2]
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	d10c      	bne.n	8008afc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 f910 	bl	8008d10 <USBD_CtlSendStatus>
      }
      break;
 8008af0:	e004      	b.n	8008afc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008af2:	6839      	ldr	r1, [r7, #0]
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f000 f840 	bl	8008b7a <USBD_CtlError>
      break;
 8008afa:	e000      	b.n	8008afe <USBD_ClrFeature+0x3c>
      break;
 8008afc:	bf00      	nop
  }
}
 8008afe:	bf00      	nop
 8008b00:	3708      	adds	r7, #8
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}

08008b06 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008b06:	b580      	push	{r7, lr}
 8008b08:	b084      	sub	sp, #16
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	6078      	str	r0, [r7, #4]
 8008b0e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	781a      	ldrb	r2, [r3, #0]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	3301      	adds	r3, #1
 8008b20:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	781a      	ldrb	r2, [r3, #0]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008b30:	68f8      	ldr	r0, [r7, #12]
 8008b32:	f7ff fa41 	bl	8007fb8 <SWAPBYTE>
 8008b36:	4603      	mov	r3, r0
 8008b38:	461a      	mov	r2, r3
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	3301      	adds	r3, #1
 8008b42:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	3301      	adds	r3, #1
 8008b48:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008b4a:	68f8      	ldr	r0, [r7, #12]
 8008b4c:	f7ff fa34 	bl	8007fb8 <SWAPBYTE>
 8008b50:	4603      	mov	r3, r0
 8008b52:	461a      	mov	r2, r3
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	3301      	adds	r3, #1
 8008b62:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008b64:	68f8      	ldr	r0, [r7, #12]
 8008b66:	f7ff fa27 	bl	8007fb8 <SWAPBYTE>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	80da      	strh	r2, [r3, #6]
}
 8008b72:	bf00      	nop
 8008b74:	3710      	adds	r7, #16
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}

08008b7a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b7a:	b580      	push	{r7, lr}
 8008b7c:	b082      	sub	sp, #8
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
 8008b82:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b84:	2180      	movs	r1, #128	; 0x80
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 fc6a 	bl	8009460 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008b8c:	2100      	movs	r1, #0
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 fc66 	bl	8009460 <USBD_LL_StallEP>
}
 8008b94:	bf00      	nop
 8008b96:	3708      	adds	r7, #8
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b086      	sub	sp, #24
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	60f8      	str	r0, [r7, #12]
 8008ba4:	60b9      	str	r1, [r7, #8]
 8008ba6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d036      	beq.n	8008c20 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008bb6:	6938      	ldr	r0, [r7, #16]
 8008bb8:	f000 f836 	bl	8008c28 <USBD_GetLen>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	b29b      	uxth	r3, r3
 8008bc2:	005b      	lsls	r3, r3, #1
 8008bc4:	b29a      	uxth	r2, r3
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008bca:	7dfb      	ldrb	r3, [r7, #23]
 8008bcc:	68ba      	ldr	r2, [r7, #8]
 8008bce:	4413      	add	r3, r2
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	7812      	ldrb	r2, [r2, #0]
 8008bd4:	701a      	strb	r2, [r3, #0]
  idx++;
 8008bd6:	7dfb      	ldrb	r3, [r7, #23]
 8008bd8:	3301      	adds	r3, #1
 8008bda:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008bdc:	7dfb      	ldrb	r3, [r7, #23]
 8008bde:	68ba      	ldr	r2, [r7, #8]
 8008be0:	4413      	add	r3, r2
 8008be2:	2203      	movs	r2, #3
 8008be4:	701a      	strb	r2, [r3, #0]
  idx++;
 8008be6:	7dfb      	ldrb	r3, [r7, #23]
 8008be8:	3301      	adds	r3, #1
 8008bea:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008bec:	e013      	b.n	8008c16 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008bee:	7dfb      	ldrb	r3, [r7, #23]
 8008bf0:	68ba      	ldr	r2, [r7, #8]
 8008bf2:	4413      	add	r3, r2
 8008bf4:	693a      	ldr	r2, [r7, #16]
 8008bf6:	7812      	ldrb	r2, [r2, #0]
 8008bf8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	3301      	adds	r3, #1
 8008bfe:	613b      	str	r3, [r7, #16]
    idx++;
 8008c00:	7dfb      	ldrb	r3, [r7, #23]
 8008c02:	3301      	adds	r3, #1
 8008c04:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008c06:	7dfb      	ldrb	r3, [r7, #23]
 8008c08:	68ba      	ldr	r2, [r7, #8]
 8008c0a:	4413      	add	r3, r2
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	701a      	strb	r2, [r3, #0]
    idx++;
 8008c10:	7dfb      	ldrb	r3, [r7, #23]
 8008c12:	3301      	adds	r3, #1
 8008c14:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d1e7      	bne.n	8008bee <USBD_GetString+0x52>
 8008c1e:	e000      	b.n	8008c22 <USBD_GetString+0x86>
    return;
 8008c20:	bf00      	nop
  }
}
 8008c22:	3718      	adds	r7, #24
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b085      	sub	sp, #20
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008c30:	2300      	movs	r3, #0
 8008c32:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008c38:	e005      	b.n	8008c46 <USBD_GetLen+0x1e>
  {
    len++;
 8008c3a:	7bfb      	ldrb	r3, [r7, #15]
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	3301      	adds	r3, #1
 8008c44:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d1f5      	bne.n	8008c3a <USBD_GetLen+0x12>
  }

  return len;
 8008c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3714      	adds	r7, #20
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr

08008c5c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b084      	sub	sp, #16
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	60f8      	str	r0, [r7, #12]
 8008c64:	60b9      	str	r1, [r7, #8]
 8008c66:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2202      	movs	r2, #2
 8008c6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	68ba      	ldr	r2, [r7, #8]
 8008c80:	2100      	movs	r1, #0
 8008c82:	68f8      	ldr	r0, [r7, #12]
 8008c84:	f000 fc75 	bl	8009572 <USBD_LL_Transmit>

  return USBD_OK;
 8008c88:	2300      	movs	r3, #0
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3710      	adds	r7, #16
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}

08008c92 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008c92:	b580      	push	{r7, lr}
 8008c94:	b084      	sub	sp, #16
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	60f8      	str	r0, [r7, #12]
 8008c9a:	60b9      	str	r1, [r7, #8]
 8008c9c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	68ba      	ldr	r2, [r7, #8]
 8008ca2:	2100      	movs	r1, #0
 8008ca4:	68f8      	ldr	r0, [r7, #12]
 8008ca6:	f000 fc64 	bl	8009572 <USBD_LL_Transmit>

  return USBD_OK;
 8008caa:	2300      	movs	r3, #0
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3710      	adds	r7, #16
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	60b9      	str	r1, [r7, #8]
 8008cbe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2203      	movs	r2, #3
 8008cc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	687a      	ldr	r2, [r7, #4]
 8008ccc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	687a      	ldr	r2, [r7, #4]
 8008cd4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	68ba      	ldr	r2, [r7, #8]
 8008cdc:	2100      	movs	r1, #0
 8008cde:	68f8      	ldr	r0, [r7, #12]
 8008ce0:	f000 fc68 	bl	80095b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ce4:	2300      	movs	r3, #0
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3710      	adds	r7, #16
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}

08008cee <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008cee:	b580      	push	{r7, lr}
 8008cf0:	b084      	sub	sp, #16
 8008cf2:	af00      	add	r7, sp, #0
 8008cf4:	60f8      	str	r0, [r7, #12]
 8008cf6:	60b9      	str	r1, [r7, #8]
 8008cf8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	68ba      	ldr	r2, [r7, #8]
 8008cfe:	2100      	movs	r1, #0
 8008d00:	68f8      	ldr	r0, [r7, #12]
 8008d02:	f000 fc57 	bl	80095b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d06:	2300      	movs	r3, #0
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3710      	adds	r7, #16
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2204      	movs	r2, #4
 8008d1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008d20:	2300      	movs	r3, #0
 8008d22:	2200      	movs	r2, #0
 8008d24:	2100      	movs	r1, #0
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 fc23 	bl	8009572 <USBD_LL_Transmit>

  return USBD_OK;
 8008d2c:	2300      	movs	r3, #0
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3708      	adds	r7, #8
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}

08008d36 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008d36:	b580      	push	{r7, lr}
 8008d38:	b082      	sub	sp, #8
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2205      	movs	r2, #5
 8008d42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d46:	2300      	movs	r3, #0
 8008d48:	2200      	movs	r2, #0
 8008d4a:	2100      	movs	r1, #0
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f000 fc31 	bl	80095b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d52:	2300      	movs	r3, #0
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3708      	adds	r7, #8
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008d60:	2200      	movs	r2, #0
 8008d62:	4912      	ldr	r1, [pc, #72]	; (8008dac <MX_USB_DEVICE_Init+0x50>)
 8008d64:	4812      	ldr	r0, [pc, #72]	; (8008db0 <MX_USB_DEVICE_Init+0x54>)
 8008d66:	f7fe fd3b 	bl	80077e0 <USBD_Init>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d001      	beq.n	8008d74 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008d70:	f7f7 ffc4 	bl	8000cfc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_AUDIO) != USBD_OK)
 8008d74:	490f      	ldr	r1, [pc, #60]	; (8008db4 <MX_USB_DEVICE_Init+0x58>)
 8008d76:	480e      	ldr	r0, [pc, #56]	; (8008db0 <MX_USB_DEVICE_Init+0x54>)
 8008d78:	f7fe fd62 	bl	8007840 <USBD_RegisterClass>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d001      	beq.n	8008d86 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008d82:	f7f7 ffbb 	bl	8000cfc <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceFS, &USBD_AUDIO_fops_FS) != USBD_OK)
 8008d86:	490c      	ldr	r1, [pc, #48]	; (8008db8 <MX_USB_DEVICE_Init+0x5c>)
 8008d88:	4809      	ldr	r0, [pc, #36]	; (8008db0 <MX_USB_DEVICE_Init+0x54>)
 8008d8a:	f7fe fcdb 	bl	8007744 <USBD_AUDIO_RegisterInterface>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d001      	beq.n	8008d98 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008d94:	f7f7 ffb2 	bl	8000cfc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008d98:	4805      	ldr	r0, [pc, #20]	; (8008db0 <MX_USB_DEVICE_Init+0x54>)
 8008d9a:	f7fe fd87 	bl	80078ac <USBD_Start>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d001      	beq.n	8008da8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008da4:	f7f7 ffaa 	bl	8000cfc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008da8:	bf00      	nop
 8008daa:	bd80      	pop	{r7, pc}
 8008dac:	200000dc 	.word	0x200000dc
 8008db0:	20000378 	.word	0x20000378
 8008db4:	2000000c 	.word	0x2000000c
 8008db8:	200000c0 	.word	0x200000c0

08008dbc <AUDIO_Init_FS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_Init_FS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b085      	sub	sp, #20
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	60f8      	str	r0, [r7, #12]
 8008dc4:	60b9      	str	r1, [r7, #8]
 8008dc6:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 0 */
  UNUSED(AudioFreq);
  UNUSED(Volume);
  UNUSED(options);
  return (USBD_OK);
 8008dc8:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3714      	adds	r7, #20
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd4:	4770      	bx	lr

08008dd6 <AUDIO_DeInit_FS>:
  * @brief  De-Initializes the AUDIO media low layer
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_DeInit_FS(uint32_t options)
{
 8008dd6:	b480      	push	{r7}
 8008dd8:	b083      	sub	sp, #12
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 1 */
  UNUSED(options);
  return (USBD_OK);
 8008dde:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	370c      	adds	r7, #12
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr

08008dec <AUDIO_AudioCmd_FS>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd_FS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b085      	sub	sp, #20
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	60f8      	str	r0, [r7, #12]
 8008df4:	60b9      	str	r1, [r7, #8]
 8008df6:	4613      	mov	r3, r2
 8008df8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  switch(cmd)
 8008dfa:	79fb      	ldrb	r3, [r7, #7]
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	d001      	beq.n	8008e04 <AUDIO_AudioCmd_FS+0x18>
 8008e00:	2b02      	cmp	r3, #2
  {
    case AUDIO_CMD_START:
    break;

    case AUDIO_CMD_PLAY:
    break;
 8008e02:	e000      	b.n	8008e06 <AUDIO_AudioCmd_FS+0x1a>
    break;
 8008e04:	bf00      	nop
  }
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 8008e06:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3714      	adds	r7, #20
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr

08008e14 <AUDIO_VolumeCtl_FS>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: volume level (0..100)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_VolumeCtl_FS(uint8_t vol)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b083      	sub	sp, #12
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */
  UNUSED(vol);
  return (USBD_OK);
 8008e1e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	370c      	adds	r7, #12
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr

08008e2c <AUDIO_MuteCtl_FS>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_MuteCtl_FS(uint8_t cmd)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b083      	sub	sp, #12
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	4603      	mov	r3, r0
 8008e34:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(cmd);
  return (USBD_OK);
 8008e36:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	370c      	adds	r7, #12
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr

08008e44 <AUDIO_PeriodicTC_FS>:
  * @brief  AUDIO_PeriodicT_FS
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_PeriodicTC_FS(uint8_t *pbuf, uint32_t size, uint8_t cmd)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b085      	sub	sp, #20
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	60f8      	str	r0, [r7, #12]
 8008e4c:	60b9      	str	r1, [r7, #8]
 8008e4e:	4613      	mov	r3, r2
 8008e50:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 8008e52:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3714      	adds	r7, #20
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr

08008e60 <AUDIO_GetState_FS>:
/**
  * @brief  Gets AUDIO State.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_GetState_FS(void)
{
 8008e60:	b480      	push	{r7}
 8008e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8008e64:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr

08008e70 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b083      	sub	sp, #12
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	4603      	mov	r3, r0
 8008e78:	6039      	str	r1, [r7, #0]
 8008e7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	2212      	movs	r2, #18
 8008e80:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008e82:	4b03      	ldr	r3, [pc, #12]	; (8008e90 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	370c      	adds	r7, #12
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr
 8008e90:	200000f8 	.word	0x200000f8

08008e94 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b083      	sub	sp, #12
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	6039      	str	r1, [r7, #0]
 8008e9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	2204      	movs	r2, #4
 8008ea4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008ea6:	4b03      	ldr	r3, [pc, #12]	; (8008eb4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	370c      	adds	r7, #12
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr
 8008eb4:	2000010c 	.word	0x2000010c

08008eb8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b082      	sub	sp, #8
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	6039      	str	r1, [r7, #0]
 8008ec2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ec4:	79fb      	ldrb	r3, [r7, #7]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d105      	bne.n	8008ed6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008eca:	683a      	ldr	r2, [r7, #0]
 8008ecc:	4907      	ldr	r1, [pc, #28]	; (8008eec <USBD_FS_ProductStrDescriptor+0x34>)
 8008ece:	4808      	ldr	r0, [pc, #32]	; (8008ef0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008ed0:	f7ff fe64 	bl	8008b9c <USBD_GetString>
 8008ed4:	e004      	b.n	8008ee0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008ed6:	683a      	ldr	r2, [r7, #0]
 8008ed8:	4904      	ldr	r1, [pc, #16]	; (8008eec <USBD_FS_ProductStrDescriptor+0x34>)
 8008eda:	4805      	ldr	r0, [pc, #20]	; (8008ef0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008edc:	f7ff fe5e 	bl	8008b9c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ee0:	4b02      	ldr	r3, [pc, #8]	; (8008eec <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3708      	adds	r7, #8
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}
 8008eea:	bf00      	nop
 8008eec:	20000654 	.word	0x20000654
 8008ef0:	0800a1a4 	.word	0x0800a1a4

08008ef4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b082      	sub	sp, #8
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	4603      	mov	r3, r0
 8008efc:	6039      	str	r1, [r7, #0]
 8008efe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008f00:	683a      	ldr	r2, [r7, #0]
 8008f02:	4904      	ldr	r1, [pc, #16]	; (8008f14 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008f04:	4804      	ldr	r0, [pc, #16]	; (8008f18 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008f06:	f7ff fe49 	bl	8008b9c <USBD_GetString>
  return USBD_StrDesc;
 8008f0a:	4b02      	ldr	r3, [pc, #8]	; (8008f14 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3708      	adds	r7, #8
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}
 8008f14:	20000654 	.word	0x20000654
 8008f18:	0800a1b8 	.word	0x0800a1b8

08008f1c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b082      	sub	sp, #8
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	4603      	mov	r3, r0
 8008f24:	6039      	str	r1, [r7, #0]
 8008f26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	221a      	movs	r2, #26
 8008f2c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008f2e:	f000 f843 	bl	8008fb8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008f32:	4b02      	ldr	r3, [pc, #8]	; (8008f3c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3708      	adds	r7, #8
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}
 8008f3c:	20000110 	.word	0x20000110

08008f40 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b082      	sub	sp, #8
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	4603      	mov	r3, r0
 8008f48:	6039      	str	r1, [r7, #0]
 8008f4a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008f4c:	79fb      	ldrb	r3, [r7, #7]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d105      	bne.n	8008f5e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008f52:	683a      	ldr	r2, [r7, #0]
 8008f54:	4907      	ldr	r1, [pc, #28]	; (8008f74 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008f56:	4808      	ldr	r0, [pc, #32]	; (8008f78 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008f58:	f7ff fe20 	bl	8008b9c <USBD_GetString>
 8008f5c:	e004      	b.n	8008f68 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008f5e:	683a      	ldr	r2, [r7, #0]
 8008f60:	4904      	ldr	r1, [pc, #16]	; (8008f74 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008f62:	4805      	ldr	r0, [pc, #20]	; (8008f78 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008f64:	f7ff fe1a 	bl	8008b9c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f68:	4b02      	ldr	r3, [pc, #8]	; (8008f74 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3708      	adds	r7, #8
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}
 8008f72:	bf00      	nop
 8008f74:	20000654 	.word	0x20000654
 8008f78:	0800a1cc 	.word	0x0800a1cc

08008f7c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b082      	sub	sp, #8
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	4603      	mov	r3, r0
 8008f84:	6039      	str	r1, [r7, #0]
 8008f86:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f88:	79fb      	ldrb	r3, [r7, #7]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d105      	bne.n	8008f9a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008f8e:	683a      	ldr	r2, [r7, #0]
 8008f90:	4907      	ldr	r1, [pc, #28]	; (8008fb0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008f92:	4808      	ldr	r0, [pc, #32]	; (8008fb4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008f94:	f7ff fe02 	bl	8008b9c <USBD_GetString>
 8008f98:	e004      	b.n	8008fa4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008f9a:	683a      	ldr	r2, [r7, #0]
 8008f9c:	4904      	ldr	r1, [pc, #16]	; (8008fb0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008f9e:	4805      	ldr	r0, [pc, #20]	; (8008fb4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008fa0:	f7ff fdfc 	bl	8008b9c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008fa4:	4b02      	ldr	r3, [pc, #8]	; (8008fb0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3708      	adds	r7, #8
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}
 8008fae:	bf00      	nop
 8008fb0:	20000654 	.word	0x20000654
 8008fb4:	0800a1dc 	.word	0x0800a1dc

08008fb8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b084      	sub	sp, #16
 8008fbc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008fbe:	4b0f      	ldr	r3, [pc, #60]	; (8008ffc <Get_SerialNum+0x44>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008fc4:	4b0e      	ldr	r3, [pc, #56]	; (8009000 <Get_SerialNum+0x48>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008fca:	4b0e      	ldr	r3, [pc, #56]	; (8009004 <Get_SerialNum+0x4c>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008fd0:	68fa      	ldr	r2, [r7, #12]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	4413      	add	r3, r2
 8008fd6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d009      	beq.n	8008ff2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008fde:	2208      	movs	r2, #8
 8008fe0:	4909      	ldr	r1, [pc, #36]	; (8009008 <Get_SerialNum+0x50>)
 8008fe2:	68f8      	ldr	r0, [r7, #12]
 8008fe4:	f000 f814 	bl	8009010 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008fe8:	2204      	movs	r2, #4
 8008fea:	4908      	ldr	r1, [pc, #32]	; (800900c <Get_SerialNum+0x54>)
 8008fec:	68b8      	ldr	r0, [r7, #8]
 8008fee:	f000 f80f 	bl	8009010 <IntToUnicode>
  }
}
 8008ff2:	bf00      	nop
 8008ff4:	3710      	adds	r7, #16
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
 8008ffa:	bf00      	nop
 8008ffc:	1fff7a10 	.word	0x1fff7a10
 8009000:	1fff7a14 	.word	0x1fff7a14
 8009004:	1fff7a18 	.word	0x1fff7a18
 8009008:	20000112 	.word	0x20000112
 800900c:	20000122 	.word	0x20000122

08009010 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009010:	b480      	push	{r7}
 8009012:	b087      	sub	sp, #28
 8009014:	af00      	add	r7, sp, #0
 8009016:	60f8      	str	r0, [r7, #12]
 8009018:	60b9      	str	r1, [r7, #8]
 800901a:	4613      	mov	r3, r2
 800901c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800901e:	2300      	movs	r3, #0
 8009020:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009022:	2300      	movs	r3, #0
 8009024:	75fb      	strb	r3, [r7, #23]
 8009026:	e027      	b.n	8009078 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	0f1b      	lsrs	r3, r3, #28
 800902c:	2b09      	cmp	r3, #9
 800902e:	d80b      	bhi.n	8009048 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	0f1b      	lsrs	r3, r3, #28
 8009034:	b2da      	uxtb	r2, r3
 8009036:	7dfb      	ldrb	r3, [r7, #23]
 8009038:	005b      	lsls	r3, r3, #1
 800903a:	4619      	mov	r1, r3
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	440b      	add	r3, r1
 8009040:	3230      	adds	r2, #48	; 0x30
 8009042:	b2d2      	uxtb	r2, r2
 8009044:	701a      	strb	r2, [r3, #0]
 8009046:	e00a      	b.n	800905e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	0f1b      	lsrs	r3, r3, #28
 800904c:	b2da      	uxtb	r2, r3
 800904e:	7dfb      	ldrb	r3, [r7, #23]
 8009050:	005b      	lsls	r3, r3, #1
 8009052:	4619      	mov	r1, r3
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	440b      	add	r3, r1
 8009058:	3237      	adds	r2, #55	; 0x37
 800905a:	b2d2      	uxtb	r2, r2
 800905c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	011b      	lsls	r3, r3, #4
 8009062:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009064:	7dfb      	ldrb	r3, [r7, #23]
 8009066:	005b      	lsls	r3, r3, #1
 8009068:	3301      	adds	r3, #1
 800906a:	68ba      	ldr	r2, [r7, #8]
 800906c:	4413      	add	r3, r2
 800906e:	2200      	movs	r2, #0
 8009070:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009072:	7dfb      	ldrb	r3, [r7, #23]
 8009074:	3301      	adds	r3, #1
 8009076:	75fb      	strb	r3, [r7, #23]
 8009078:	7dfa      	ldrb	r2, [r7, #23]
 800907a:	79fb      	ldrb	r3, [r7, #7]
 800907c:	429a      	cmp	r2, r3
 800907e:	d3d3      	bcc.n	8009028 <IntToUnicode+0x18>
  }
}
 8009080:	bf00      	nop
 8009082:	bf00      	nop
 8009084:	371c      	adds	r7, #28
 8009086:	46bd      	mov	sp, r7
 8009088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908c:	4770      	bx	lr
	...

08009090 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b08a      	sub	sp, #40	; 0x28
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009098:	f107 0314 	add.w	r3, r7, #20
 800909c:	2200      	movs	r2, #0
 800909e:	601a      	str	r2, [r3, #0]
 80090a0:	605a      	str	r2, [r3, #4]
 80090a2:	609a      	str	r2, [r3, #8]
 80090a4:	60da      	str	r2, [r3, #12]
 80090a6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80090b0:	d13a      	bne.n	8009128 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80090b2:	2300      	movs	r3, #0
 80090b4:	613b      	str	r3, [r7, #16]
 80090b6:	4b1e      	ldr	r3, [pc, #120]	; (8009130 <HAL_PCD_MspInit+0xa0>)
 80090b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ba:	4a1d      	ldr	r2, [pc, #116]	; (8009130 <HAL_PCD_MspInit+0xa0>)
 80090bc:	f043 0301 	orr.w	r3, r3, #1
 80090c0:	6313      	str	r3, [r2, #48]	; 0x30
 80090c2:	4b1b      	ldr	r3, [pc, #108]	; (8009130 <HAL_PCD_MspInit+0xa0>)
 80090c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090c6:	f003 0301 	and.w	r3, r3, #1
 80090ca:	613b      	str	r3, [r7, #16]
 80090cc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80090ce:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80090d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090d4:	2302      	movs	r3, #2
 80090d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090d8:	2300      	movs	r3, #0
 80090da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80090dc:	2303      	movs	r3, #3
 80090de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80090e0:	230a      	movs	r3, #10
 80090e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80090e4:	f107 0314 	add.w	r3, r7, #20
 80090e8:	4619      	mov	r1, r3
 80090ea:	4812      	ldr	r0, [pc, #72]	; (8009134 <HAL_PCD_MspInit+0xa4>)
 80090ec:	f7f8 fce2 	bl	8001ab4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80090f0:	4b0f      	ldr	r3, [pc, #60]	; (8009130 <HAL_PCD_MspInit+0xa0>)
 80090f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090f4:	4a0e      	ldr	r2, [pc, #56]	; (8009130 <HAL_PCD_MspInit+0xa0>)
 80090f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090fa:	6353      	str	r3, [r2, #52]	; 0x34
 80090fc:	2300      	movs	r3, #0
 80090fe:	60fb      	str	r3, [r7, #12]
 8009100:	4b0b      	ldr	r3, [pc, #44]	; (8009130 <HAL_PCD_MspInit+0xa0>)
 8009102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009104:	4a0a      	ldr	r2, [pc, #40]	; (8009130 <HAL_PCD_MspInit+0xa0>)
 8009106:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800910a:	6453      	str	r3, [r2, #68]	; 0x44
 800910c:	4b08      	ldr	r3, [pc, #32]	; (8009130 <HAL_PCD_MspInit+0xa0>)
 800910e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009110:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009114:	60fb      	str	r3, [r7, #12]
 8009116:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009118:	2200      	movs	r2, #0
 800911a:	2100      	movs	r1, #0
 800911c:	2043      	movs	r0, #67	; 0x43
 800911e:	f7f8 f922 	bl	8001366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009122:	2043      	movs	r0, #67	; 0x43
 8009124:	f7f8 f93b 	bl	800139e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009128:	bf00      	nop
 800912a:	3728      	adds	r7, #40	; 0x28
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}
 8009130:	40023800 	.word	0x40023800
 8009134:	40020000 	.word	0x40020000

08009138 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b082      	sub	sp, #8
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800914c:	4619      	mov	r1, r3
 800914e:	4610      	mov	r0, r2
 8009150:	f7fe fbf9 	bl	8007946 <USBD_LL_SetupStage>
}
 8009154:	bf00      	nop
 8009156:	3708      	adds	r7, #8
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b082      	sub	sp, #8
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	460b      	mov	r3, r1
 8009166:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800916e:	78fa      	ldrb	r2, [r7, #3]
 8009170:	6879      	ldr	r1, [r7, #4]
 8009172:	4613      	mov	r3, r2
 8009174:	00db      	lsls	r3, r3, #3
 8009176:	4413      	add	r3, r2
 8009178:	009b      	lsls	r3, r3, #2
 800917a:	440b      	add	r3, r1
 800917c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8009180:	681a      	ldr	r2, [r3, #0]
 8009182:	78fb      	ldrb	r3, [r7, #3]
 8009184:	4619      	mov	r1, r3
 8009186:	f7fe fc33 	bl	80079f0 <USBD_LL_DataOutStage>
}
 800918a:	bf00      	nop
 800918c:	3708      	adds	r7, #8
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}

08009192 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009192:	b580      	push	{r7, lr}
 8009194:	b082      	sub	sp, #8
 8009196:	af00      	add	r7, sp, #0
 8009198:	6078      	str	r0, [r7, #4]
 800919a:	460b      	mov	r3, r1
 800919c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 80091a4:	78fa      	ldrb	r2, [r7, #3]
 80091a6:	6879      	ldr	r1, [r7, #4]
 80091a8:	4613      	mov	r3, r2
 80091aa:	00db      	lsls	r3, r3, #3
 80091ac:	4413      	add	r3, r2
 80091ae:	009b      	lsls	r3, r3, #2
 80091b0:	440b      	add	r3, r1
 80091b2:	3320      	adds	r3, #32
 80091b4:	681a      	ldr	r2, [r3, #0]
 80091b6:	78fb      	ldrb	r3, [r7, #3]
 80091b8:	4619      	mov	r1, r3
 80091ba:	f7fe fccc 	bl	8007b56 <USBD_LL_DataInStage>
}
 80091be:	bf00      	nop
 80091c0:	3708      	adds	r7, #8
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}

080091c6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091c6:	b580      	push	{r7, lr}
 80091c8:	b082      	sub	sp, #8
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80091d4:	4618      	mov	r0, r3
 80091d6:	f7fe fe06 	bl	8007de6 <USBD_LL_SOF>
}
 80091da:	bf00      	nop
 80091dc:	3708      	adds	r7, #8
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}

080091e2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091e2:	b580      	push	{r7, lr}
 80091e4:	b084      	sub	sp, #16
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80091ea:	2301      	movs	r3, #1
 80091ec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	79db      	ldrb	r3, [r3, #7]
 80091f2:	2b02      	cmp	r3, #2
 80091f4:	d001      	beq.n	80091fa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80091f6:	f7f7 fd81 	bl	8000cfc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009200:	7bfa      	ldrb	r2, [r7, #15]
 8009202:	4611      	mov	r1, r2
 8009204:	4618      	mov	r0, r3
 8009206:	f7fe fdaa 	bl	8007d5e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009210:	4618      	mov	r0, r3
 8009212:	f7fe fd52 	bl	8007cba <USBD_LL_Reset>
}
 8009216:	bf00      	nop
 8009218:	3710      	adds	r7, #16
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}
	...

08009220 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b082      	sub	sp, #8
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800922e:	4618      	mov	r0, r3
 8009230:	f7fe fda5 	bl	8007d7e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	687a      	ldr	r2, [r7, #4]
 8009240:	6812      	ldr	r2, [r2, #0]
 8009242:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009246:	f043 0301 	orr.w	r3, r3, #1
 800924a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	7adb      	ldrb	r3, [r3, #11]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d005      	beq.n	8009260 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009254:	4b04      	ldr	r3, [pc, #16]	; (8009268 <HAL_PCD_SuspendCallback+0x48>)
 8009256:	691b      	ldr	r3, [r3, #16]
 8009258:	4a03      	ldr	r2, [pc, #12]	; (8009268 <HAL_PCD_SuspendCallback+0x48>)
 800925a:	f043 0306 	orr.w	r3, r3, #6
 800925e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009260:	bf00      	nop
 8009262:	3708      	adds	r7, #8
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}
 8009268:	e000ed00 	.word	0xe000ed00

0800926c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b082      	sub	sp, #8
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800927a:	4618      	mov	r0, r3
 800927c:	f7fe fd9b 	bl	8007db6 <USBD_LL_Resume>
}
 8009280:	bf00      	nop
 8009282:	3708      	adds	r7, #8
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}

08009288 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b082      	sub	sp, #8
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	460b      	mov	r3, r1
 8009292:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800929a:	78fa      	ldrb	r2, [r7, #3]
 800929c:	4611      	mov	r1, r2
 800929e:	4618      	mov	r0, r3
 80092a0:	f7fe fdf3 	bl	8007e8a <USBD_LL_IsoOUTIncomplete>
}
 80092a4:	bf00      	nop
 80092a6:	3708      	adds	r7, #8
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b082      	sub	sp, #8
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	460b      	mov	r3, r1
 80092b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80092be:	78fa      	ldrb	r2, [r7, #3]
 80092c0:	4611      	mov	r1, r2
 80092c2:	4618      	mov	r0, r3
 80092c4:	f7fe fdaf 	bl	8007e26 <USBD_LL_IsoINIncomplete>
}
 80092c8:	bf00      	nop
 80092ca:	3708      	adds	r7, #8
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}

080092d0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b082      	sub	sp, #8
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80092de:	4618      	mov	r0, r3
 80092e0:	f7fe fe05 	bl	8007eee <USBD_LL_DevConnected>
}
 80092e4:	bf00      	nop
 80092e6:	3708      	adds	r7, #8
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b082      	sub	sp, #8
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80092fa:	4618      	mov	r0, r3
 80092fc:	f7fe fe02 	bl	8007f04 <USBD_LL_DevDisconnected>
}
 8009300:	bf00      	nop
 8009302:	3708      	adds	r7, #8
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b082      	sub	sp, #8
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	781b      	ldrb	r3, [r3, #0]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d13c      	bne.n	8009392 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009318:	4a20      	ldr	r2, [pc, #128]	; (800939c <USBD_LL_Init+0x94>)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	4a1e      	ldr	r2, [pc, #120]	; (800939c <USBD_LL_Init+0x94>)
 8009324:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009328:	4b1c      	ldr	r3, [pc, #112]	; (800939c <USBD_LL_Init+0x94>)
 800932a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800932e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009330:	4b1a      	ldr	r3, [pc, #104]	; (800939c <USBD_LL_Init+0x94>)
 8009332:	2204      	movs	r2, #4
 8009334:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009336:	4b19      	ldr	r3, [pc, #100]	; (800939c <USBD_LL_Init+0x94>)
 8009338:	2202      	movs	r2, #2
 800933a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800933c:	4b17      	ldr	r3, [pc, #92]	; (800939c <USBD_LL_Init+0x94>)
 800933e:	2200      	movs	r2, #0
 8009340:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009342:	4b16      	ldr	r3, [pc, #88]	; (800939c <USBD_LL_Init+0x94>)
 8009344:	2202      	movs	r2, #2
 8009346:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009348:	4b14      	ldr	r3, [pc, #80]	; (800939c <USBD_LL_Init+0x94>)
 800934a:	2200      	movs	r2, #0
 800934c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800934e:	4b13      	ldr	r3, [pc, #76]	; (800939c <USBD_LL_Init+0x94>)
 8009350:	2200      	movs	r2, #0
 8009352:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009354:	4b11      	ldr	r3, [pc, #68]	; (800939c <USBD_LL_Init+0x94>)
 8009356:	2200      	movs	r2, #0
 8009358:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800935a:	4b10      	ldr	r3, [pc, #64]	; (800939c <USBD_LL_Init+0x94>)
 800935c:	2200      	movs	r2, #0
 800935e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009360:	4b0e      	ldr	r3, [pc, #56]	; (800939c <USBD_LL_Init+0x94>)
 8009362:	2200      	movs	r2, #0
 8009364:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009366:	480d      	ldr	r0, [pc, #52]	; (800939c <USBD_LL_Init+0x94>)
 8009368:	f7fa faee 	bl	8003948 <HAL_PCD_Init>
 800936c:	4603      	mov	r3, r0
 800936e:	2b00      	cmp	r3, #0
 8009370:	d001      	beq.n	8009376 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009372:	f7f7 fcc3 	bl	8000cfc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009376:	2180      	movs	r1, #128	; 0x80
 8009378:	4808      	ldr	r0, [pc, #32]	; (800939c <USBD_LL_Init+0x94>)
 800937a:	f7fb fd18 	bl	8004dae <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800937e:	2240      	movs	r2, #64	; 0x40
 8009380:	2100      	movs	r1, #0
 8009382:	4806      	ldr	r0, [pc, #24]	; (800939c <USBD_LL_Init+0x94>)
 8009384:	f7fb fccc 	bl	8004d20 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009388:	2280      	movs	r2, #128	; 0x80
 800938a:	2101      	movs	r1, #1
 800938c:	4803      	ldr	r0, [pc, #12]	; (800939c <USBD_LL_Init+0x94>)
 800938e:	f7fb fcc7 	bl	8004d20 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009392:	2300      	movs	r3, #0
}
 8009394:	4618      	mov	r0, r3
 8009396:	3708      	adds	r7, #8
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}
 800939c:	20000854 	.word	0x20000854

080093a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b084      	sub	sp, #16
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093a8:	2300      	movs	r3, #0
 80093aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093ac:	2300      	movs	r3, #0
 80093ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80093b6:	4618      	mov	r0, r3
 80093b8:	f7fa fbd5 	bl	8003b66 <HAL_PCD_Start>
 80093bc:	4603      	mov	r3, r0
 80093be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093c0:	7bfb      	ldrb	r3, [r7, #15]
 80093c2:	4618      	mov	r0, r3
 80093c4:	f000 f942 	bl	800964c <USBD_Get_USB_Status>
 80093c8:	4603      	mov	r3, r0
 80093ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3710      	adds	r7, #16
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}

080093d6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80093d6:	b580      	push	{r7, lr}
 80093d8:	b084      	sub	sp, #16
 80093da:	af00      	add	r7, sp, #0
 80093dc:	6078      	str	r0, [r7, #4]
 80093de:	4608      	mov	r0, r1
 80093e0:	4611      	mov	r1, r2
 80093e2:	461a      	mov	r2, r3
 80093e4:	4603      	mov	r3, r0
 80093e6:	70fb      	strb	r3, [r7, #3]
 80093e8:	460b      	mov	r3, r1
 80093ea:	70bb      	strb	r3, [r7, #2]
 80093ec:	4613      	mov	r3, r2
 80093ee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093f0:	2300      	movs	r3, #0
 80093f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093f4:	2300      	movs	r3, #0
 80093f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80093fe:	78bb      	ldrb	r3, [r7, #2]
 8009400:	883a      	ldrh	r2, [r7, #0]
 8009402:	78f9      	ldrb	r1, [r7, #3]
 8009404:	f7fb f8a9 	bl	800455a <HAL_PCD_EP_Open>
 8009408:	4603      	mov	r3, r0
 800940a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800940c:	7bfb      	ldrb	r3, [r7, #15]
 800940e:	4618      	mov	r0, r3
 8009410:	f000 f91c 	bl	800964c <USBD_Get_USB_Status>
 8009414:	4603      	mov	r3, r0
 8009416:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009418:	7bbb      	ldrb	r3, [r7, #14]
}
 800941a:	4618      	mov	r0, r3
 800941c:	3710      	adds	r7, #16
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}

08009422 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009422:	b580      	push	{r7, lr}
 8009424:	b084      	sub	sp, #16
 8009426:	af00      	add	r7, sp, #0
 8009428:	6078      	str	r0, [r7, #4]
 800942a:	460b      	mov	r3, r1
 800942c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800942e:	2300      	movs	r3, #0
 8009430:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009432:	2300      	movs	r3, #0
 8009434:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800943c:	78fa      	ldrb	r2, [r7, #3]
 800943e:	4611      	mov	r1, r2
 8009440:	4618      	mov	r0, r3
 8009442:	f7fb f8f2 	bl	800462a <HAL_PCD_EP_Close>
 8009446:	4603      	mov	r3, r0
 8009448:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800944a:	7bfb      	ldrb	r3, [r7, #15]
 800944c:	4618      	mov	r0, r3
 800944e:	f000 f8fd 	bl	800964c <USBD_Get_USB_Status>
 8009452:	4603      	mov	r3, r0
 8009454:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009456:	7bbb      	ldrb	r3, [r7, #14]
}
 8009458:	4618      	mov	r0, r3
 800945a:	3710      	adds	r7, #16
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}

08009460 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b084      	sub	sp, #16
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
 8009468:	460b      	mov	r3, r1
 800946a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800946c:	2300      	movs	r3, #0
 800946e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009470:	2300      	movs	r3, #0
 8009472:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800947a:	78fa      	ldrb	r2, [r7, #3]
 800947c:	4611      	mov	r1, r2
 800947e:	4618      	mov	r0, r3
 8009480:	f7fb f9aa 	bl	80047d8 <HAL_PCD_EP_SetStall>
 8009484:	4603      	mov	r3, r0
 8009486:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009488:	7bfb      	ldrb	r3, [r7, #15]
 800948a:	4618      	mov	r0, r3
 800948c:	f000 f8de 	bl	800964c <USBD_Get_USB_Status>
 8009490:	4603      	mov	r3, r0
 8009492:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009494:	7bbb      	ldrb	r3, [r7, #14]
}
 8009496:	4618      	mov	r0, r3
 8009498:	3710      	adds	r7, #16
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}

0800949e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800949e:	b580      	push	{r7, lr}
 80094a0:	b084      	sub	sp, #16
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	6078      	str	r0, [r7, #4]
 80094a6:	460b      	mov	r3, r1
 80094a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094aa:	2300      	movs	r3, #0
 80094ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094ae:	2300      	movs	r3, #0
 80094b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80094b8:	78fa      	ldrb	r2, [r7, #3]
 80094ba:	4611      	mov	r1, r2
 80094bc:	4618      	mov	r0, r3
 80094be:	f7fb f9ee 	bl	800489e <HAL_PCD_EP_ClrStall>
 80094c2:	4603      	mov	r3, r0
 80094c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094c6:	7bfb      	ldrb	r3, [r7, #15]
 80094c8:	4618      	mov	r0, r3
 80094ca:	f000 f8bf 	bl	800964c <USBD_Get_USB_Status>
 80094ce:	4603      	mov	r3, r0
 80094d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3710      	adds	r7, #16
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}

080094dc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094dc:	b480      	push	{r7}
 80094de:	b085      	sub	sp, #20
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	460b      	mov	r3, r1
 80094e6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80094ee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80094f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	da0b      	bge.n	8009510 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80094f8:	78fb      	ldrb	r3, [r7, #3]
 80094fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094fe:	68f9      	ldr	r1, [r7, #12]
 8009500:	4613      	mov	r3, r2
 8009502:	00db      	lsls	r3, r3, #3
 8009504:	4413      	add	r3, r2
 8009506:	009b      	lsls	r3, r3, #2
 8009508:	440b      	add	r3, r1
 800950a:	3316      	adds	r3, #22
 800950c:	781b      	ldrb	r3, [r3, #0]
 800950e:	e00b      	b.n	8009528 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009510:	78fb      	ldrb	r3, [r7, #3]
 8009512:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009516:	68f9      	ldr	r1, [r7, #12]
 8009518:	4613      	mov	r3, r2
 800951a:	00db      	lsls	r3, r3, #3
 800951c:	4413      	add	r3, r2
 800951e:	009b      	lsls	r3, r3, #2
 8009520:	440b      	add	r3, r1
 8009522:	f203 2356 	addw	r3, r3, #598	; 0x256
 8009526:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009528:	4618      	mov	r0, r3
 800952a:	3714      	adds	r7, #20
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr

08009534 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b084      	sub	sp, #16
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	460b      	mov	r3, r1
 800953e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009540:	2300      	movs	r3, #0
 8009542:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009544:	2300      	movs	r3, #0
 8009546:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800954e:	78fa      	ldrb	r2, [r7, #3]
 8009550:	4611      	mov	r1, r2
 8009552:	4618      	mov	r0, r3
 8009554:	f7fa ffdd 	bl	8004512 <HAL_PCD_SetAddress>
 8009558:	4603      	mov	r3, r0
 800955a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800955c:	7bfb      	ldrb	r3, [r7, #15]
 800955e:	4618      	mov	r0, r3
 8009560:	f000 f874 	bl	800964c <USBD_Get_USB_Status>
 8009564:	4603      	mov	r3, r0
 8009566:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009568:	7bbb      	ldrb	r3, [r7, #14]
}
 800956a:	4618      	mov	r0, r3
 800956c:	3710      	adds	r7, #16
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}

08009572 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009572:	b580      	push	{r7, lr}
 8009574:	b086      	sub	sp, #24
 8009576:	af00      	add	r7, sp, #0
 8009578:	60f8      	str	r0, [r7, #12]
 800957a:	607a      	str	r2, [r7, #4]
 800957c:	603b      	str	r3, [r7, #0]
 800957e:	460b      	mov	r3, r1
 8009580:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009582:	2300      	movs	r3, #0
 8009584:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009586:	2300      	movs	r3, #0
 8009588:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009590:	7af9      	ldrb	r1, [r7, #11]
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	f7fb f8e5 	bl	8004764 <HAL_PCD_EP_Transmit>
 800959a:	4603      	mov	r3, r0
 800959c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800959e:	7dfb      	ldrb	r3, [r7, #23]
 80095a0:	4618      	mov	r0, r3
 80095a2:	f000 f853 	bl	800964c <USBD_Get_USB_Status>
 80095a6:	4603      	mov	r3, r0
 80095a8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80095aa:	7dbb      	ldrb	r3, [r7, #22]
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3718      	adds	r7, #24
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}

080095b4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b086      	sub	sp, #24
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	60f8      	str	r0, [r7, #12]
 80095bc:	607a      	str	r2, [r7, #4]
 80095be:	603b      	str	r3, [r7, #0]
 80095c0:	460b      	mov	r3, r1
 80095c2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095c4:	2300      	movs	r3, #0
 80095c6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095c8:	2300      	movs	r3, #0
 80095ca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80095d2:	7af9      	ldrb	r1, [r7, #11]
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	687a      	ldr	r2, [r7, #4]
 80095d8:	f7fb f871 	bl	80046be <HAL_PCD_EP_Receive>
 80095dc:	4603      	mov	r3, r0
 80095de:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095e0:	7dfb      	ldrb	r3, [r7, #23]
 80095e2:	4618      	mov	r0, r3
 80095e4:	f000 f832 	bl	800964c <USBD_Get_USB_Status>
 80095e8:	4603      	mov	r3, r0
 80095ea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80095ec:	7dbb      	ldrb	r3, [r7, #22]
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	3718      	adds	r7, #24
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}

080095f6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095f6:	b580      	push	{r7, lr}
 80095f8:	b082      	sub	sp, #8
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	6078      	str	r0, [r7, #4]
 80095fe:	460b      	mov	r3, r1
 8009600:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009608:	78fa      	ldrb	r2, [r7, #3]
 800960a:	4611      	mov	r1, r2
 800960c:	4618      	mov	r0, r3
 800960e:	f7fb f891 	bl	8004734 <HAL_PCD_EP_GetRxCount>
 8009612:	4603      	mov	r3, r0
}
 8009614:	4618      	mov	r0, r3
 8009616:	3708      	adds	r7, #8
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800961c:	b480      	push	{r7}
 800961e:	b083      	sub	sp, #12
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_AUDIO_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009624:	4b03      	ldr	r3, [pc, #12]	; (8009634 <USBD_static_malloc+0x18>)
}
 8009626:	4618      	mov	r0, r3
 8009628:	370c      	adds	r7, #12
 800962a:	46bd      	mov	sp, r7
 800962c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009630:	4770      	bx	lr
 8009632:	bf00      	nop
 8009634:	20000d38 	.word	0x20000d38

08009638 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009638:	b480      	push	{r7}
 800963a:	b083      	sub	sp, #12
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]

}
 8009640:	bf00      	nop
 8009642:	370c      	adds	r7, #12
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr

0800964c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800964c:	b480      	push	{r7}
 800964e:	b085      	sub	sp, #20
 8009650:	af00      	add	r7, sp, #0
 8009652:	4603      	mov	r3, r0
 8009654:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009656:	2300      	movs	r3, #0
 8009658:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800965a:	79fb      	ldrb	r3, [r7, #7]
 800965c:	2b03      	cmp	r3, #3
 800965e:	d817      	bhi.n	8009690 <USBD_Get_USB_Status+0x44>
 8009660:	a201      	add	r2, pc, #4	; (adr r2, 8009668 <USBD_Get_USB_Status+0x1c>)
 8009662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009666:	bf00      	nop
 8009668:	08009679 	.word	0x08009679
 800966c:	0800967f 	.word	0x0800967f
 8009670:	08009685 	.word	0x08009685
 8009674:	0800968b 	.word	0x0800968b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009678:	2300      	movs	r3, #0
 800967a:	73fb      	strb	r3, [r7, #15]
    break;
 800967c:	e00b      	b.n	8009696 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800967e:	2303      	movs	r3, #3
 8009680:	73fb      	strb	r3, [r7, #15]
    break;
 8009682:	e008      	b.n	8009696 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009684:	2301      	movs	r3, #1
 8009686:	73fb      	strb	r3, [r7, #15]
    break;
 8009688:	e005      	b.n	8009696 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800968a:	2303      	movs	r3, #3
 800968c:	73fb      	strb	r3, [r7, #15]
    break;
 800968e:	e002      	b.n	8009696 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009690:	2303      	movs	r3, #3
 8009692:	73fb      	strb	r3, [r7, #15]
    break;
 8009694:	bf00      	nop
  }
  return usb_status;
 8009696:	7bfb      	ldrb	r3, [r7, #15]
}
 8009698:	4618      	mov	r0, r3
 800969a:	3714      	adds	r7, #20
 800969c:	46bd      	mov	sp, r7
 800969e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a2:	4770      	bx	lr

080096a4 <memset>:
 80096a4:	4402      	add	r2, r0
 80096a6:	4603      	mov	r3, r0
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d100      	bne.n	80096ae <memset+0xa>
 80096ac:	4770      	bx	lr
 80096ae:	f803 1b01 	strb.w	r1, [r3], #1
 80096b2:	e7f9      	b.n	80096a8 <memset+0x4>

080096b4 <__libc_init_array>:
 80096b4:	b570      	push	{r4, r5, r6, lr}
 80096b6:	4d0d      	ldr	r5, [pc, #52]	; (80096ec <__libc_init_array+0x38>)
 80096b8:	4c0d      	ldr	r4, [pc, #52]	; (80096f0 <__libc_init_array+0x3c>)
 80096ba:	1b64      	subs	r4, r4, r5
 80096bc:	10a4      	asrs	r4, r4, #2
 80096be:	2600      	movs	r6, #0
 80096c0:	42a6      	cmp	r6, r4
 80096c2:	d109      	bne.n	80096d8 <__libc_init_array+0x24>
 80096c4:	4d0b      	ldr	r5, [pc, #44]	; (80096f4 <__libc_init_array+0x40>)
 80096c6:	4c0c      	ldr	r4, [pc, #48]	; (80096f8 <__libc_init_array+0x44>)
 80096c8:	f000 fd60 	bl	800a18c <_init>
 80096cc:	1b64      	subs	r4, r4, r5
 80096ce:	10a4      	asrs	r4, r4, #2
 80096d0:	2600      	movs	r6, #0
 80096d2:	42a6      	cmp	r6, r4
 80096d4:	d105      	bne.n	80096e2 <__libc_init_array+0x2e>
 80096d6:	bd70      	pop	{r4, r5, r6, pc}
 80096d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80096dc:	4798      	blx	r3
 80096de:	3601      	adds	r6, #1
 80096e0:	e7ee      	b.n	80096c0 <__libc_init_array+0xc>
 80096e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80096e6:	4798      	blx	r3
 80096e8:	3601      	adds	r6, #1
 80096ea:	e7f2      	b.n	80096d2 <__libc_init_array+0x1e>
 80096ec:	0800a5e4 	.word	0x0800a5e4
 80096f0:	0800a5e4 	.word	0x0800a5e4
 80096f4:	0800a5e4 	.word	0x0800a5e4
 80096f8:	0800a5e8 	.word	0x0800a5e8

080096fc <memcpy>:
 80096fc:	440a      	add	r2, r1
 80096fe:	4291      	cmp	r1, r2
 8009700:	f100 33ff 	add.w	r3, r0, #4294967295
 8009704:	d100      	bne.n	8009708 <memcpy+0xc>
 8009706:	4770      	bx	lr
 8009708:	b510      	push	{r4, lr}
 800970a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800970e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009712:	4291      	cmp	r1, r2
 8009714:	d1f9      	bne.n	800970a <memcpy+0xe>
 8009716:	bd10      	pop	{r4, pc}

08009718 <sinf>:
 8009718:	ee10 3a10 	vmov	r3, s0
 800971c:	b507      	push	{r0, r1, r2, lr}
 800971e:	4a1f      	ldr	r2, [pc, #124]	; (800979c <sinf+0x84>)
 8009720:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009724:	4293      	cmp	r3, r2
 8009726:	dc07      	bgt.n	8009738 <sinf+0x20>
 8009728:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80097a0 <sinf+0x88>
 800972c:	2000      	movs	r0, #0
 800972e:	b003      	add	sp, #12
 8009730:	f85d eb04 	ldr.w	lr, [sp], #4
 8009734:	f000 b894 	b.w	8009860 <__kernel_sinf>
 8009738:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800973c:	db04      	blt.n	8009748 <sinf+0x30>
 800973e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8009742:	b003      	add	sp, #12
 8009744:	f85d fb04 	ldr.w	pc, [sp], #4
 8009748:	4668      	mov	r0, sp
 800974a:	f000 f8d1 	bl	80098f0 <__ieee754_rem_pio2f>
 800974e:	f000 0003 	and.w	r0, r0, #3
 8009752:	2801      	cmp	r0, #1
 8009754:	d00a      	beq.n	800976c <sinf+0x54>
 8009756:	2802      	cmp	r0, #2
 8009758:	d00f      	beq.n	800977a <sinf+0x62>
 800975a:	b9c0      	cbnz	r0, 800978e <sinf+0x76>
 800975c:	eddd 0a01 	vldr	s1, [sp, #4]
 8009760:	ed9d 0a00 	vldr	s0, [sp]
 8009764:	2001      	movs	r0, #1
 8009766:	f000 f87b 	bl	8009860 <__kernel_sinf>
 800976a:	e7ea      	b.n	8009742 <sinf+0x2a>
 800976c:	eddd 0a01 	vldr	s1, [sp, #4]
 8009770:	ed9d 0a00 	vldr	s0, [sp]
 8009774:	f000 f816 	bl	80097a4 <__kernel_cosf>
 8009778:	e7e3      	b.n	8009742 <sinf+0x2a>
 800977a:	eddd 0a01 	vldr	s1, [sp, #4]
 800977e:	ed9d 0a00 	vldr	s0, [sp]
 8009782:	2001      	movs	r0, #1
 8009784:	f000 f86c 	bl	8009860 <__kernel_sinf>
 8009788:	eeb1 0a40 	vneg.f32	s0, s0
 800978c:	e7d9      	b.n	8009742 <sinf+0x2a>
 800978e:	eddd 0a01 	vldr	s1, [sp, #4]
 8009792:	ed9d 0a00 	vldr	s0, [sp]
 8009796:	f000 f805 	bl	80097a4 <__kernel_cosf>
 800979a:	e7f5      	b.n	8009788 <sinf+0x70>
 800979c:	3f490fd8 	.word	0x3f490fd8
 80097a0:	00000000 	.word	0x00000000

080097a4 <__kernel_cosf>:
 80097a4:	ee10 3a10 	vmov	r3, s0
 80097a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80097ac:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80097b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097b4:	da05      	bge.n	80097c2 <__kernel_cosf+0x1e>
 80097b6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80097ba:	ee17 2a90 	vmov	r2, s15
 80097be:	2a00      	cmp	r2, #0
 80097c0:	d03b      	beq.n	800983a <__kernel_cosf+0x96>
 80097c2:	ee20 7a00 	vmul.f32	s14, s0, s0
 80097c6:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8009840 <__kernel_cosf+0x9c>
 80097ca:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8009844 <__kernel_cosf+0xa0>
 80097ce:	4a1e      	ldr	r2, [pc, #120]	; (8009848 <__kernel_cosf+0xa4>)
 80097d0:	eea7 6a27 	vfma.f32	s12, s14, s15
 80097d4:	4293      	cmp	r3, r2
 80097d6:	eddf 7a1d 	vldr	s15, [pc, #116]	; 800984c <__kernel_cosf+0xa8>
 80097da:	eee6 7a07 	vfma.f32	s15, s12, s14
 80097de:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8009850 <__kernel_cosf+0xac>
 80097e2:	eea7 6a87 	vfma.f32	s12, s15, s14
 80097e6:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8009854 <__kernel_cosf+0xb0>
 80097ea:	eee6 7a07 	vfma.f32	s15, s12, s14
 80097ee:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8009858 <__kernel_cosf+0xb4>
 80097f2:	eea7 6a87 	vfma.f32	s12, s15, s14
 80097f6:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 80097fa:	ee26 6a07 	vmul.f32	s12, s12, s14
 80097fe:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8009802:	eee7 0a06 	vfma.f32	s1, s14, s12
 8009806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800980a:	dc04      	bgt.n	8009816 <__kernel_cosf+0x72>
 800980c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8009810:	ee36 0ae7 	vsub.f32	s0, s13, s15
 8009814:	4770      	bx	lr
 8009816:	4a11      	ldr	r2, [pc, #68]	; (800985c <__kernel_cosf+0xb8>)
 8009818:	4293      	cmp	r3, r2
 800981a:	bfda      	itte	le
 800981c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8009820:	ee07 3a10 	vmovle	s14, r3
 8009824:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8009828:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800982c:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8009830:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8009834:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009838:	4770      	bx	lr
 800983a:	eeb0 0a66 	vmov.f32	s0, s13
 800983e:	4770      	bx	lr
 8009840:	ad47d74e 	.word	0xad47d74e
 8009844:	310f74f6 	.word	0x310f74f6
 8009848:	3e999999 	.word	0x3e999999
 800984c:	b493f27c 	.word	0xb493f27c
 8009850:	37d00d01 	.word	0x37d00d01
 8009854:	bab60b61 	.word	0xbab60b61
 8009858:	3d2aaaab 	.word	0x3d2aaaab
 800985c:	3f480000 	.word	0x3f480000

08009860 <__kernel_sinf>:
 8009860:	ee10 3a10 	vmov	r3, s0
 8009864:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009868:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800986c:	da04      	bge.n	8009878 <__kernel_sinf+0x18>
 800986e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8009872:	ee17 3a90 	vmov	r3, s15
 8009876:	b35b      	cbz	r3, 80098d0 <__kernel_sinf+0x70>
 8009878:	ee20 7a00 	vmul.f32	s14, s0, s0
 800987c:	eddf 7a15 	vldr	s15, [pc, #84]	; 80098d4 <__kernel_sinf+0x74>
 8009880:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80098d8 <__kernel_sinf+0x78>
 8009884:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009888:	eddf 7a14 	vldr	s15, [pc, #80]	; 80098dc <__kernel_sinf+0x7c>
 800988c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009890:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80098e0 <__kernel_sinf+0x80>
 8009894:	eea7 6a87 	vfma.f32	s12, s15, s14
 8009898:	eddf 7a12 	vldr	s15, [pc, #72]	; 80098e4 <__kernel_sinf+0x84>
 800989c:	ee60 6a07 	vmul.f32	s13, s0, s14
 80098a0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80098a4:	b930      	cbnz	r0, 80098b4 <__kernel_sinf+0x54>
 80098a6:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80098e8 <__kernel_sinf+0x88>
 80098aa:	eea7 6a27 	vfma.f32	s12, s14, s15
 80098ae:	eea6 0a26 	vfma.f32	s0, s12, s13
 80098b2:	4770      	bx	lr
 80098b4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80098b8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80098bc:	eee0 7a86 	vfma.f32	s15, s1, s12
 80098c0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80098c4:	eddf 7a09 	vldr	s15, [pc, #36]	; 80098ec <__kernel_sinf+0x8c>
 80098c8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80098cc:	ee30 0a60 	vsub.f32	s0, s0, s1
 80098d0:	4770      	bx	lr
 80098d2:	bf00      	nop
 80098d4:	2f2ec9d3 	.word	0x2f2ec9d3
 80098d8:	b2d72f34 	.word	0xb2d72f34
 80098dc:	3638ef1b 	.word	0x3638ef1b
 80098e0:	b9500d01 	.word	0xb9500d01
 80098e4:	3c088889 	.word	0x3c088889
 80098e8:	be2aaaab 	.word	0xbe2aaaab
 80098ec:	3e2aaaab 	.word	0x3e2aaaab

080098f0 <__ieee754_rem_pio2f>:
 80098f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098f2:	ee10 6a10 	vmov	r6, s0
 80098f6:	4b86      	ldr	r3, [pc, #536]	; (8009b10 <__ieee754_rem_pio2f+0x220>)
 80098f8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80098fc:	429d      	cmp	r5, r3
 80098fe:	b087      	sub	sp, #28
 8009900:	4604      	mov	r4, r0
 8009902:	dc05      	bgt.n	8009910 <__ieee754_rem_pio2f+0x20>
 8009904:	2300      	movs	r3, #0
 8009906:	ed80 0a00 	vstr	s0, [r0]
 800990a:	6043      	str	r3, [r0, #4]
 800990c:	2000      	movs	r0, #0
 800990e:	e020      	b.n	8009952 <__ieee754_rem_pio2f+0x62>
 8009910:	4b80      	ldr	r3, [pc, #512]	; (8009b14 <__ieee754_rem_pio2f+0x224>)
 8009912:	429d      	cmp	r5, r3
 8009914:	dc38      	bgt.n	8009988 <__ieee754_rem_pio2f+0x98>
 8009916:	2e00      	cmp	r6, #0
 8009918:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8009b18 <__ieee754_rem_pio2f+0x228>
 800991c:	4b7f      	ldr	r3, [pc, #508]	; (8009b1c <__ieee754_rem_pio2f+0x22c>)
 800991e:	f025 050f 	bic.w	r5, r5, #15
 8009922:	dd18      	ble.n	8009956 <__ieee754_rem_pio2f+0x66>
 8009924:	429d      	cmp	r5, r3
 8009926:	ee70 7a47 	vsub.f32	s15, s0, s14
 800992a:	bf09      	itett	eq
 800992c:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8009b20 <__ieee754_rem_pio2f+0x230>
 8009930:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8009b24 <__ieee754_rem_pio2f+0x234>
 8009934:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8009938:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8009b28 <__ieee754_rem_pio2f+0x238>
 800993c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8009940:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009944:	edc0 6a00 	vstr	s13, [r0]
 8009948:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800994c:	edc0 7a01 	vstr	s15, [r0, #4]
 8009950:	2001      	movs	r0, #1
 8009952:	b007      	add	sp, #28
 8009954:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009956:	429d      	cmp	r5, r3
 8009958:	ee70 7a07 	vadd.f32	s15, s0, s14
 800995c:	bf09      	itett	eq
 800995e:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8009b20 <__ieee754_rem_pio2f+0x230>
 8009962:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8009b24 <__ieee754_rem_pio2f+0x234>
 8009966:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800996a:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8009b28 <__ieee754_rem_pio2f+0x238>
 800996e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8009972:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009976:	edc0 6a00 	vstr	s13, [r0]
 800997a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800997e:	edc0 7a01 	vstr	s15, [r0, #4]
 8009982:	f04f 30ff 	mov.w	r0, #4294967295
 8009986:	e7e4      	b.n	8009952 <__ieee754_rem_pio2f+0x62>
 8009988:	4b68      	ldr	r3, [pc, #416]	; (8009b2c <__ieee754_rem_pio2f+0x23c>)
 800998a:	429d      	cmp	r5, r3
 800998c:	dc71      	bgt.n	8009a72 <__ieee754_rem_pio2f+0x182>
 800998e:	f000 f8db 	bl	8009b48 <fabsf>
 8009992:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8009b30 <__ieee754_rem_pio2f+0x240>
 8009996:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800999a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800999e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80099a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80099a6:	ee17 0a90 	vmov	r0, s15
 80099aa:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8009b18 <__ieee754_rem_pio2f+0x228>
 80099ae:	eea7 0a67 	vfms.f32	s0, s14, s15
 80099b2:	281f      	cmp	r0, #31
 80099b4:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8009b24 <__ieee754_rem_pio2f+0x234>
 80099b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099bc:	eeb1 6a47 	vneg.f32	s12, s14
 80099c0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80099c4:	ee16 2a90 	vmov	r2, s13
 80099c8:	dc1c      	bgt.n	8009a04 <__ieee754_rem_pio2f+0x114>
 80099ca:	495a      	ldr	r1, [pc, #360]	; (8009b34 <__ieee754_rem_pio2f+0x244>)
 80099cc:	1e47      	subs	r7, r0, #1
 80099ce:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80099d2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80099d6:	428b      	cmp	r3, r1
 80099d8:	d014      	beq.n	8009a04 <__ieee754_rem_pio2f+0x114>
 80099da:	6022      	str	r2, [r4, #0]
 80099dc:	ed94 7a00 	vldr	s14, [r4]
 80099e0:	ee30 0a47 	vsub.f32	s0, s0, s14
 80099e4:	2e00      	cmp	r6, #0
 80099e6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80099ea:	ed84 0a01 	vstr	s0, [r4, #4]
 80099ee:	dab0      	bge.n	8009952 <__ieee754_rem_pio2f+0x62>
 80099f0:	eeb1 7a47 	vneg.f32	s14, s14
 80099f4:	eeb1 0a40 	vneg.f32	s0, s0
 80099f8:	ed84 7a00 	vstr	s14, [r4]
 80099fc:	ed84 0a01 	vstr	s0, [r4, #4]
 8009a00:	4240      	negs	r0, r0
 8009a02:	e7a6      	b.n	8009952 <__ieee754_rem_pio2f+0x62>
 8009a04:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8009a08:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 8009a0c:	2908      	cmp	r1, #8
 8009a0e:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8009a12:	dde2      	ble.n	80099da <__ieee754_rem_pio2f+0xea>
 8009a14:	eddf 5a42 	vldr	s11, [pc, #264]	; 8009b20 <__ieee754_rem_pio2f+0x230>
 8009a18:	eef0 6a40 	vmov.f32	s13, s0
 8009a1c:	eee6 6a25 	vfma.f32	s13, s12, s11
 8009a20:	ee70 7a66 	vsub.f32	s15, s0, s13
 8009a24:	eee6 7a25 	vfma.f32	s15, s12, s11
 8009a28:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009b28 <__ieee754_rem_pio2f+0x238>
 8009a2c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8009a30:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8009a34:	ee15 2a90 	vmov	r2, s11
 8009a38:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8009a3c:	1a5b      	subs	r3, r3, r1
 8009a3e:	2b19      	cmp	r3, #25
 8009a40:	dc04      	bgt.n	8009a4c <__ieee754_rem_pio2f+0x15c>
 8009a42:	edc4 5a00 	vstr	s11, [r4]
 8009a46:	eeb0 0a66 	vmov.f32	s0, s13
 8009a4a:	e7c7      	b.n	80099dc <__ieee754_rem_pio2f+0xec>
 8009a4c:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8009b38 <__ieee754_rem_pio2f+0x248>
 8009a50:	eeb0 0a66 	vmov.f32	s0, s13
 8009a54:	eea6 0a25 	vfma.f32	s0, s12, s11
 8009a58:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8009a5c:	eddf 6a37 	vldr	s13, [pc, #220]	; 8009b3c <__ieee754_rem_pio2f+0x24c>
 8009a60:	eee6 7a25 	vfma.f32	s15, s12, s11
 8009a64:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8009a68:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009a6c:	ed84 7a00 	vstr	s14, [r4]
 8009a70:	e7b4      	b.n	80099dc <__ieee754_rem_pio2f+0xec>
 8009a72:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8009a76:	db06      	blt.n	8009a86 <__ieee754_rem_pio2f+0x196>
 8009a78:	ee70 7a40 	vsub.f32	s15, s0, s0
 8009a7c:	edc0 7a01 	vstr	s15, [r0, #4]
 8009a80:	edc0 7a00 	vstr	s15, [r0]
 8009a84:	e742      	b.n	800990c <__ieee754_rem_pio2f+0x1c>
 8009a86:	15ea      	asrs	r2, r5, #23
 8009a88:	3a86      	subs	r2, #134	; 0x86
 8009a8a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8009a8e:	ee07 3a90 	vmov	s15, r3
 8009a92:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009a96:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8009b40 <__ieee754_rem_pio2f+0x250>
 8009a9a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009a9e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009aa2:	ed8d 7a03 	vstr	s14, [sp, #12]
 8009aa6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009aaa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009aae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009ab2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009ab6:	ed8d 7a04 	vstr	s14, [sp, #16]
 8009aba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009abe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ac6:	edcd 7a05 	vstr	s15, [sp, #20]
 8009aca:	d11e      	bne.n	8009b0a <__ieee754_rem_pio2f+0x21a>
 8009acc:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8009ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ad4:	bf14      	ite	ne
 8009ad6:	2302      	movne	r3, #2
 8009ad8:	2301      	moveq	r3, #1
 8009ada:	491a      	ldr	r1, [pc, #104]	; (8009b44 <__ieee754_rem_pio2f+0x254>)
 8009adc:	9101      	str	r1, [sp, #4]
 8009ade:	2102      	movs	r1, #2
 8009ae0:	9100      	str	r1, [sp, #0]
 8009ae2:	a803      	add	r0, sp, #12
 8009ae4:	4621      	mov	r1, r4
 8009ae6:	f000 f837 	bl	8009b58 <__kernel_rem_pio2f>
 8009aea:	2e00      	cmp	r6, #0
 8009aec:	f6bf af31 	bge.w	8009952 <__ieee754_rem_pio2f+0x62>
 8009af0:	edd4 7a00 	vldr	s15, [r4]
 8009af4:	eef1 7a67 	vneg.f32	s15, s15
 8009af8:	edc4 7a00 	vstr	s15, [r4]
 8009afc:	edd4 7a01 	vldr	s15, [r4, #4]
 8009b00:	eef1 7a67 	vneg.f32	s15, s15
 8009b04:	edc4 7a01 	vstr	s15, [r4, #4]
 8009b08:	e77a      	b.n	8009a00 <__ieee754_rem_pio2f+0x110>
 8009b0a:	2303      	movs	r3, #3
 8009b0c:	e7e5      	b.n	8009ada <__ieee754_rem_pio2f+0x1ea>
 8009b0e:	bf00      	nop
 8009b10:	3f490fd8 	.word	0x3f490fd8
 8009b14:	4016cbe3 	.word	0x4016cbe3
 8009b18:	3fc90f80 	.word	0x3fc90f80
 8009b1c:	3fc90fd0 	.word	0x3fc90fd0
 8009b20:	37354400 	.word	0x37354400
 8009b24:	37354443 	.word	0x37354443
 8009b28:	2e85a308 	.word	0x2e85a308
 8009b2c:	43490f80 	.word	0x43490f80
 8009b30:	3f22f984 	.word	0x3f22f984
 8009b34:	0800a20c 	.word	0x0800a20c
 8009b38:	2e85a300 	.word	0x2e85a300
 8009b3c:	248d3132 	.word	0x248d3132
 8009b40:	43800000 	.word	0x43800000
 8009b44:	0800a28c 	.word	0x0800a28c

08009b48 <fabsf>:
 8009b48:	ee10 3a10 	vmov	r3, s0
 8009b4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009b50:	ee00 3a10 	vmov	s0, r3
 8009b54:	4770      	bx	lr
	...

08009b58 <__kernel_rem_pio2f>:
 8009b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b5c:	ed2d 8b04 	vpush	{d8-d9}
 8009b60:	b0d9      	sub	sp, #356	; 0x164
 8009b62:	4688      	mov	r8, r1
 8009b64:	9002      	str	r0, [sp, #8]
 8009b66:	49b8      	ldr	r1, [pc, #736]	; (8009e48 <__kernel_rem_pio2f+0x2f0>)
 8009b68:	9866      	ldr	r0, [sp, #408]	; 0x198
 8009b6a:	9301      	str	r3, [sp, #4]
 8009b6c:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8009b70:	9901      	ldr	r1, [sp, #4]
 8009b72:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 8009b74:	f101 3bff 	add.w	fp, r1, #4294967295
 8009b78:	1d11      	adds	r1, r2, #4
 8009b7a:	db25      	blt.n	8009bc8 <__kernel_rem_pio2f+0x70>
 8009b7c:	1ed0      	subs	r0, r2, #3
 8009b7e:	bf48      	it	mi
 8009b80:	1d10      	addmi	r0, r2, #4
 8009b82:	10c0      	asrs	r0, r0, #3
 8009b84:	1c45      	adds	r5, r0, #1
 8009b86:	00e9      	lsls	r1, r5, #3
 8009b88:	eba0 070b 	sub.w	r7, r0, fp
 8009b8c:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8009e58 <__kernel_rem_pio2f+0x300>
 8009b90:	9103      	str	r1, [sp, #12]
 8009b92:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8009b96:	eb0a 0c0b 	add.w	ip, sl, fp
 8009b9a:	ae1c      	add	r6, sp, #112	; 0x70
 8009b9c:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 8009ba0:	2400      	movs	r4, #0
 8009ba2:	4564      	cmp	r4, ip
 8009ba4:	dd12      	ble.n	8009bcc <__kernel_rem_pio2f+0x74>
 8009ba6:	9901      	ldr	r1, [sp, #4]
 8009ba8:	ac1c      	add	r4, sp, #112	; 0x70
 8009baa:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8009bae:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8009bb2:	f04f 0c00 	mov.w	ip, #0
 8009bb6:	45d4      	cmp	ip, sl
 8009bb8:	dc27      	bgt.n	8009c0a <__kernel_rem_pio2f+0xb2>
 8009bba:	f8dd e008 	ldr.w	lr, [sp, #8]
 8009bbe:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8009e58 <__kernel_rem_pio2f+0x300>
 8009bc2:	4627      	mov	r7, r4
 8009bc4:	2600      	movs	r6, #0
 8009bc6:	e016      	b.n	8009bf6 <__kernel_rem_pio2f+0x9e>
 8009bc8:	2000      	movs	r0, #0
 8009bca:	e7db      	b.n	8009b84 <__kernel_rem_pio2f+0x2c>
 8009bcc:	42e7      	cmn	r7, r4
 8009bce:	bf5d      	ittte	pl
 8009bd0:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 8009bd4:	ee07 1a90 	vmovpl	s15, r1
 8009bd8:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8009bdc:	eef0 7a47 	vmovmi.f32	s15, s14
 8009be0:	ece6 7a01 	vstmia	r6!, {s15}
 8009be4:	3401      	adds	r4, #1
 8009be6:	e7dc      	b.n	8009ba2 <__kernel_rem_pio2f+0x4a>
 8009be8:	ecfe 6a01 	vldmia	lr!, {s13}
 8009bec:	ed97 7a00 	vldr	s14, [r7]
 8009bf0:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009bf4:	3601      	adds	r6, #1
 8009bf6:	455e      	cmp	r6, fp
 8009bf8:	f1a7 0704 	sub.w	r7, r7, #4
 8009bfc:	ddf4      	ble.n	8009be8 <__kernel_rem_pio2f+0x90>
 8009bfe:	ece9 7a01 	vstmia	r9!, {s15}
 8009c02:	f10c 0c01 	add.w	ip, ip, #1
 8009c06:	3404      	adds	r4, #4
 8009c08:	e7d5      	b.n	8009bb6 <__kernel_rem_pio2f+0x5e>
 8009c0a:	a908      	add	r1, sp, #32
 8009c0c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009c10:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8009c14:	eddf 8a8f 	vldr	s17, [pc, #572]	; 8009e54 <__kernel_rem_pio2f+0x2fc>
 8009c18:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 8009e50 <__kernel_rem_pio2f+0x2f8>
 8009c1c:	9105      	str	r1, [sp, #20]
 8009c1e:	9304      	str	r3, [sp, #16]
 8009c20:	4656      	mov	r6, sl
 8009c22:	00b3      	lsls	r3, r6, #2
 8009c24:	9306      	str	r3, [sp, #24]
 8009c26:	ab58      	add	r3, sp, #352	; 0x160
 8009c28:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8009c2c:	ac08      	add	r4, sp, #32
 8009c2e:	ab44      	add	r3, sp, #272	; 0x110
 8009c30:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8009c34:	46a4      	mov	ip, r4
 8009c36:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8009c3a:	4637      	mov	r7, r6
 8009c3c:	2f00      	cmp	r7, #0
 8009c3e:	f1a0 0004 	sub.w	r0, r0, #4
 8009c42:	dc4a      	bgt.n	8009cda <__kernel_rem_pio2f+0x182>
 8009c44:	4628      	mov	r0, r5
 8009c46:	9207      	str	r2, [sp, #28]
 8009c48:	f000 f9f8 	bl	800a03c <scalbnf>
 8009c4c:	eeb0 8a40 	vmov.f32	s16, s0
 8009c50:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8009c54:	ee28 0a00 	vmul.f32	s0, s16, s0
 8009c58:	f000 fa56 	bl	800a108 <floorf>
 8009c5c:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8009c60:	eea0 8a67 	vfms.f32	s16, s0, s15
 8009c64:	2d00      	cmp	r5, #0
 8009c66:	9a07      	ldr	r2, [sp, #28]
 8009c68:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8009c6c:	ee17 9a90 	vmov	r9, s15
 8009c70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c74:	ee38 8a67 	vsub.f32	s16, s16, s15
 8009c78:	dd41      	ble.n	8009cfe <__kernel_rem_pio2f+0x1a6>
 8009c7a:	f106 3cff 	add.w	ip, r6, #4294967295
 8009c7e:	ab08      	add	r3, sp, #32
 8009c80:	f1c5 0e08 	rsb	lr, r5, #8
 8009c84:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8009c88:	fa47 f00e 	asr.w	r0, r7, lr
 8009c8c:	4481      	add	r9, r0
 8009c8e:	fa00 f00e 	lsl.w	r0, r0, lr
 8009c92:	1a3f      	subs	r7, r7, r0
 8009c94:	f1c5 0007 	rsb	r0, r5, #7
 8009c98:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8009c9c:	4107      	asrs	r7, r0
 8009c9e:	2f00      	cmp	r7, #0
 8009ca0:	dd3c      	ble.n	8009d1c <__kernel_rem_pio2f+0x1c4>
 8009ca2:	f04f 0e00 	mov.w	lr, #0
 8009ca6:	f109 0901 	add.w	r9, r9, #1
 8009caa:	4671      	mov	r1, lr
 8009cac:	4576      	cmp	r6, lr
 8009cae:	dc67      	bgt.n	8009d80 <__kernel_rem_pio2f+0x228>
 8009cb0:	2d00      	cmp	r5, #0
 8009cb2:	dd03      	ble.n	8009cbc <__kernel_rem_pio2f+0x164>
 8009cb4:	2d01      	cmp	r5, #1
 8009cb6:	d074      	beq.n	8009da2 <__kernel_rem_pio2f+0x24a>
 8009cb8:	2d02      	cmp	r5, #2
 8009cba:	d07b      	beq.n	8009db4 <__kernel_rem_pio2f+0x25c>
 8009cbc:	2f02      	cmp	r7, #2
 8009cbe:	d12d      	bne.n	8009d1c <__kernel_rem_pio2f+0x1c4>
 8009cc0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009cc4:	ee30 8a48 	vsub.f32	s16, s0, s16
 8009cc8:	b341      	cbz	r1, 8009d1c <__kernel_rem_pio2f+0x1c4>
 8009cca:	4628      	mov	r0, r5
 8009ccc:	9207      	str	r2, [sp, #28]
 8009cce:	f000 f9b5 	bl	800a03c <scalbnf>
 8009cd2:	9a07      	ldr	r2, [sp, #28]
 8009cd4:	ee38 8a40 	vsub.f32	s16, s16, s0
 8009cd8:	e020      	b.n	8009d1c <__kernel_rem_pio2f+0x1c4>
 8009cda:	ee60 7a28 	vmul.f32	s15, s0, s17
 8009cde:	3f01      	subs	r7, #1
 8009ce0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009ce4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ce8:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8009cec:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009cf0:	ecac 0a01 	vstmia	ip!, {s0}
 8009cf4:	ed90 0a00 	vldr	s0, [r0]
 8009cf8:	ee37 0a80 	vadd.f32	s0, s15, s0
 8009cfc:	e79e      	b.n	8009c3c <__kernel_rem_pio2f+0xe4>
 8009cfe:	d105      	bne.n	8009d0c <__kernel_rem_pio2f+0x1b4>
 8009d00:	1e70      	subs	r0, r6, #1
 8009d02:	ab08      	add	r3, sp, #32
 8009d04:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8009d08:	11ff      	asrs	r7, r7, #7
 8009d0a:	e7c8      	b.n	8009c9e <__kernel_rem_pio2f+0x146>
 8009d0c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8009d10:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8009d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d18:	da30      	bge.n	8009d7c <__kernel_rem_pio2f+0x224>
 8009d1a:	2700      	movs	r7, #0
 8009d1c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8009d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d24:	f040 809a 	bne.w	8009e5c <__kernel_rem_pio2f+0x304>
 8009d28:	1e74      	subs	r4, r6, #1
 8009d2a:	46a4      	mov	ip, r4
 8009d2c:	2100      	movs	r1, #0
 8009d2e:	45d4      	cmp	ip, sl
 8009d30:	da47      	bge.n	8009dc2 <__kernel_rem_pio2f+0x26a>
 8009d32:	2900      	cmp	r1, #0
 8009d34:	d063      	beq.n	8009dfe <__kernel_rem_pio2f+0x2a6>
 8009d36:	ab08      	add	r3, sp, #32
 8009d38:	3d08      	subs	r5, #8
 8009d3a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d07f      	beq.n	8009e42 <__kernel_rem_pio2f+0x2ea>
 8009d42:	4628      	mov	r0, r5
 8009d44:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009d48:	f000 f978 	bl	800a03c <scalbnf>
 8009d4c:	1c63      	adds	r3, r4, #1
 8009d4e:	aa44      	add	r2, sp, #272	; 0x110
 8009d50:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8009e54 <__kernel_rem_pio2f+0x2fc>
 8009d54:	0099      	lsls	r1, r3, #2
 8009d56:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8009d5a:	4623      	mov	r3, r4
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	f280 80ad 	bge.w	8009ebc <__kernel_rem_pio2f+0x364>
 8009d62:	4623      	mov	r3, r4
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	f2c0 80cb 	blt.w	8009f00 <__kernel_rem_pio2f+0x3a8>
 8009d6a:	aa44      	add	r2, sp, #272	; 0x110
 8009d6c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8009d70:	4e36      	ldr	r6, [pc, #216]	; (8009e4c <__kernel_rem_pio2f+0x2f4>)
 8009d72:	eddf 7a39 	vldr	s15, [pc, #228]	; 8009e58 <__kernel_rem_pio2f+0x300>
 8009d76:	2000      	movs	r0, #0
 8009d78:	1ae2      	subs	r2, r4, r3
 8009d7a:	e0b6      	b.n	8009eea <__kernel_rem_pio2f+0x392>
 8009d7c:	2702      	movs	r7, #2
 8009d7e:	e790      	b.n	8009ca2 <__kernel_rem_pio2f+0x14a>
 8009d80:	6820      	ldr	r0, [r4, #0]
 8009d82:	b949      	cbnz	r1, 8009d98 <__kernel_rem_pio2f+0x240>
 8009d84:	b118      	cbz	r0, 8009d8e <__kernel_rem_pio2f+0x236>
 8009d86:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8009d8a:	6020      	str	r0, [r4, #0]
 8009d8c:	2001      	movs	r0, #1
 8009d8e:	f10e 0e01 	add.w	lr, lr, #1
 8009d92:	3404      	adds	r4, #4
 8009d94:	4601      	mov	r1, r0
 8009d96:	e789      	b.n	8009cac <__kernel_rem_pio2f+0x154>
 8009d98:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8009d9c:	6020      	str	r0, [r4, #0]
 8009d9e:	4608      	mov	r0, r1
 8009da0:	e7f5      	b.n	8009d8e <__kernel_rem_pio2f+0x236>
 8009da2:	1e74      	subs	r4, r6, #1
 8009da4:	ab08      	add	r3, sp, #32
 8009da6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8009daa:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8009dae:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009db2:	e783      	b.n	8009cbc <__kernel_rem_pio2f+0x164>
 8009db4:	1e74      	subs	r4, r6, #1
 8009db6:	ab08      	add	r3, sp, #32
 8009db8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8009dbc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8009dc0:	e7f5      	b.n	8009dae <__kernel_rem_pio2f+0x256>
 8009dc2:	ab08      	add	r3, sp, #32
 8009dc4:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8009dc8:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009dcc:	4301      	orrs	r1, r0
 8009dce:	e7ae      	b.n	8009d2e <__kernel_rem_pio2f+0x1d6>
 8009dd0:	3001      	adds	r0, #1
 8009dd2:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 8009dd6:	2f00      	cmp	r7, #0
 8009dd8:	d0fa      	beq.n	8009dd0 <__kernel_rem_pio2f+0x278>
 8009dda:	9b06      	ldr	r3, [sp, #24]
 8009ddc:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8009de0:	eb0d 0403 	add.w	r4, sp, r3
 8009de4:	9b01      	ldr	r3, [sp, #4]
 8009de6:	18f7      	adds	r7, r6, r3
 8009de8:	ab1c      	add	r3, sp, #112	; 0x70
 8009dea:	f106 0c01 	add.w	ip, r6, #1
 8009dee:	3c4c      	subs	r4, #76	; 0x4c
 8009df0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009df4:	4430      	add	r0, r6
 8009df6:	4560      	cmp	r0, ip
 8009df8:	da04      	bge.n	8009e04 <__kernel_rem_pio2f+0x2ac>
 8009dfa:	4606      	mov	r6, r0
 8009dfc:	e711      	b.n	8009c22 <__kernel_rem_pio2f+0xca>
 8009dfe:	9c05      	ldr	r4, [sp, #20]
 8009e00:	2001      	movs	r0, #1
 8009e02:	e7e6      	b.n	8009dd2 <__kernel_rem_pio2f+0x27a>
 8009e04:	9b04      	ldr	r3, [sp, #16]
 8009e06:	f8dd e008 	ldr.w	lr, [sp, #8]
 8009e0a:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8009e0e:	9306      	str	r3, [sp, #24]
 8009e10:	ee07 3a90 	vmov	s15, r3
 8009e14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e18:	2600      	movs	r6, #0
 8009e1a:	ece7 7a01 	vstmia	r7!, {s15}
 8009e1e:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8009e58 <__kernel_rem_pio2f+0x300>
 8009e22:	46b9      	mov	r9, r7
 8009e24:	455e      	cmp	r6, fp
 8009e26:	dd04      	ble.n	8009e32 <__kernel_rem_pio2f+0x2da>
 8009e28:	ece4 7a01 	vstmia	r4!, {s15}
 8009e2c:	f10c 0c01 	add.w	ip, ip, #1
 8009e30:	e7e1      	b.n	8009df6 <__kernel_rem_pio2f+0x29e>
 8009e32:	ecfe 6a01 	vldmia	lr!, {s13}
 8009e36:	ed39 7a01 	vldmdb	r9!, {s14}
 8009e3a:	3601      	adds	r6, #1
 8009e3c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009e40:	e7f0      	b.n	8009e24 <__kernel_rem_pio2f+0x2cc>
 8009e42:	3c01      	subs	r4, #1
 8009e44:	e777      	b.n	8009d36 <__kernel_rem_pio2f+0x1de>
 8009e46:	bf00      	nop
 8009e48:	0800a5d0 	.word	0x0800a5d0
 8009e4c:	0800a5a4 	.word	0x0800a5a4
 8009e50:	43800000 	.word	0x43800000
 8009e54:	3b800000 	.word	0x3b800000
 8009e58:	00000000 	.word	0x00000000
 8009e5c:	9b03      	ldr	r3, [sp, #12]
 8009e5e:	eeb0 0a48 	vmov.f32	s0, s16
 8009e62:	1a98      	subs	r0, r3, r2
 8009e64:	f000 f8ea 	bl	800a03c <scalbnf>
 8009e68:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8009e50 <__kernel_rem_pio2f+0x2f8>
 8009e6c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8009e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e74:	db19      	blt.n	8009eaa <__kernel_rem_pio2f+0x352>
 8009e76:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8009e54 <__kernel_rem_pio2f+0x2fc>
 8009e7a:	ee60 7a27 	vmul.f32	s15, s0, s15
 8009e7e:	aa08      	add	r2, sp, #32
 8009e80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009e84:	1c74      	adds	r4, r6, #1
 8009e86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e8a:	3508      	adds	r5, #8
 8009e8c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8009e90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009e94:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009e98:	ee10 3a10 	vmov	r3, s0
 8009e9c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8009ea0:	ee17 3a90 	vmov	r3, s15
 8009ea4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8009ea8:	e74b      	b.n	8009d42 <__kernel_rem_pio2f+0x1ea>
 8009eaa:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009eae:	aa08      	add	r2, sp, #32
 8009eb0:	ee10 3a10 	vmov	r3, s0
 8009eb4:	4634      	mov	r4, r6
 8009eb6:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8009eba:	e742      	b.n	8009d42 <__kernel_rem_pio2f+0x1ea>
 8009ebc:	a808      	add	r0, sp, #32
 8009ebe:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8009ec2:	9001      	str	r0, [sp, #4]
 8009ec4:	ee07 0a90 	vmov	s15, r0
 8009ec8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ecc:	3b01      	subs	r3, #1
 8009ece:	ee67 7a80 	vmul.f32	s15, s15, s0
 8009ed2:	ee20 0a07 	vmul.f32	s0, s0, s14
 8009ed6:	ed62 7a01 	vstmdb	r2!, {s15}
 8009eda:	e73f      	b.n	8009d5c <__kernel_rem_pio2f+0x204>
 8009edc:	ecf6 6a01 	vldmia	r6!, {s13}
 8009ee0:	ecb5 7a01 	vldmia	r5!, {s14}
 8009ee4:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009ee8:	3001      	adds	r0, #1
 8009eea:	4550      	cmp	r0, sl
 8009eec:	dc01      	bgt.n	8009ef2 <__kernel_rem_pio2f+0x39a>
 8009eee:	4290      	cmp	r0, r2
 8009ef0:	ddf4      	ble.n	8009edc <__kernel_rem_pio2f+0x384>
 8009ef2:	a858      	add	r0, sp, #352	; 0x160
 8009ef4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8009ef8:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 8009efc:	3b01      	subs	r3, #1
 8009efe:	e731      	b.n	8009d64 <__kernel_rem_pio2f+0x20c>
 8009f00:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8009f02:	2b02      	cmp	r3, #2
 8009f04:	dc09      	bgt.n	8009f1a <__kernel_rem_pio2f+0x3c2>
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	dc2b      	bgt.n	8009f62 <__kernel_rem_pio2f+0x40a>
 8009f0a:	d044      	beq.n	8009f96 <__kernel_rem_pio2f+0x43e>
 8009f0c:	f009 0007 	and.w	r0, r9, #7
 8009f10:	b059      	add	sp, #356	; 0x164
 8009f12:	ecbd 8b04 	vpop	{d8-d9}
 8009f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f1a:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8009f1c:	2b03      	cmp	r3, #3
 8009f1e:	d1f5      	bne.n	8009f0c <__kernel_rem_pio2f+0x3b4>
 8009f20:	aa30      	add	r2, sp, #192	; 0xc0
 8009f22:	1f0b      	subs	r3, r1, #4
 8009f24:	4413      	add	r3, r2
 8009f26:	461a      	mov	r2, r3
 8009f28:	4620      	mov	r0, r4
 8009f2a:	2800      	cmp	r0, #0
 8009f2c:	f1a2 0204 	sub.w	r2, r2, #4
 8009f30:	dc52      	bgt.n	8009fd8 <__kernel_rem_pio2f+0x480>
 8009f32:	4622      	mov	r2, r4
 8009f34:	2a01      	cmp	r2, #1
 8009f36:	f1a3 0304 	sub.w	r3, r3, #4
 8009f3a:	dc5d      	bgt.n	8009ff8 <__kernel_rem_pio2f+0x4a0>
 8009f3c:	ab30      	add	r3, sp, #192	; 0xc0
 8009f3e:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8009e58 <__kernel_rem_pio2f+0x300>
 8009f42:	440b      	add	r3, r1
 8009f44:	2c01      	cmp	r4, #1
 8009f46:	dc67      	bgt.n	800a018 <__kernel_rem_pio2f+0x4c0>
 8009f48:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8009f4c:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8009f50:	2f00      	cmp	r7, #0
 8009f52:	d167      	bne.n	800a024 <__kernel_rem_pio2f+0x4cc>
 8009f54:	edc8 6a00 	vstr	s13, [r8]
 8009f58:	ed88 7a01 	vstr	s14, [r8, #4]
 8009f5c:	edc8 7a02 	vstr	s15, [r8, #8]
 8009f60:	e7d4      	b.n	8009f0c <__kernel_rem_pio2f+0x3b4>
 8009f62:	ab30      	add	r3, sp, #192	; 0xc0
 8009f64:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 8009e58 <__kernel_rem_pio2f+0x300>
 8009f68:	440b      	add	r3, r1
 8009f6a:	4622      	mov	r2, r4
 8009f6c:	2a00      	cmp	r2, #0
 8009f6e:	da24      	bge.n	8009fba <__kernel_rem_pio2f+0x462>
 8009f70:	b34f      	cbz	r7, 8009fc6 <__kernel_rem_pio2f+0x46e>
 8009f72:	eef1 7a47 	vneg.f32	s15, s14
 8009f76:	edc8 7a00 	vstr	s15, [r8]
 8009f7a:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8009f7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009f82:	aa31      	add	r2, sp, #196	; 0xc4
 8009f84:	2301      	movs	r3, #1
 8009f86:	429c      	cmp	r4, r3
 8009f88:	da20      	bge.n	8009fcc <__kernel_rem_pio2f+0x474>
 8009f8a:	b10f      	cbz	r7, 8009f90 <__kernel_rem_pio2f+0x438>
 8009f8c:	eef1 7a67 	vneg.f32	s15, s15
 8009f90:	edc8 7a01 	vstr	s15, [r8, #4]
 8009f94:	e7ba      	b.n	8009f0c <__kernel_rem_pio2f+0x3b4>
 8009f96:	ab30      	add	r3, sp, #192	; 0xc0
 8009f98:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 8009e58 <__kernel_rem_pio2f+0x300>
 8009f9c:	440b      	add	r3, r1
 8009f9e:	2c00      	cmp	r4, #0
 8009fa0:	da05      	bge.n	8009fae <__kernel_rem_pio2f+0x456>
 8009fa2:	b10f      	cbz	r7, 8009fa8 <__kernel_rem_pio2f+0x450>
 8009fa4:	eef1 7a67 	vneg.f32	s15, s15
 8009fa8:	edc8 7a00 	vstr	s15, [r8]
 8009fac:	e7ae      	b.n	8009f0c <__kernel_rem_pio2f+0x3b4>
 8009fae:	ed33 7a01 	vldmdb	r3!, {s14}
 8009fb2:	3c01      	subs	r4, #1
 8009fb4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009fb8:	e7f1      	b.n	8009f9e <__kernel_rem_pio2f+0x446>
 8009fba:	ed73 7a01 	vldmdb	r3!, {s15}
 8009fbe:	3a01      	subs	r2, #1
 8009fc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009fc4:	e7d2      	b.n	8009f6c <__kernel_rem_pio2f+0x414>
 8009fc6:	eef0 7a47 	vmov.f32	s15, s14
 8009fca:	e7d4      	b.n	8009f76 <__kernel_rem_pio2f+0x41e>
 8009fcc:	ecb2 7a01 	vldmia	r2!, {s14}
 8009fd0:	3301      	adds	r3, #1
 8009fd2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009fd6:	e7d6      	b.n	8009f86 <__kernel_rem_pio2f+0x42e>
 8009fd8:	edd2 7a00 	vldr	s15, [r2]
 8009fdc:	edd2 6a01 	vldr	s13, [r2, #4]
 8009fe0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009fe4:	3801      	subs	r0, #1
 8009fe6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009fea:	ed82 7a00 	vstr	s14, [r2]
 8009fee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ff2:	edc2 7a01 	vstr	s15, [r2, #4]
 8009ff6:	e798      	b.n	8009f2a <__kernel_rem_pio2f+0x3d2>
 8009ff8:	edd3 7a00 	vldr	s15, [r3]
 8009ffc:	edd3 6a01 	vldr	s13, [r3, #4]
 800a000:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a004:	3a01      	subs	r2, #1
 800a006:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a00a:	ed83 7a00 	vstr	s14, [r3]
 800a00e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a012:	edc3 7a01 	vstr	s15, [r3, #4]
 800a016:	e78d      	b.n	8009f34 <__kernel_rem_pio2f+0x3dc>
 800a018:	ed33 7a01 	vldmdb	r3!, {s14}
 800a01c:	3c01      	subs	r4, #1
 800a01e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a022:	e78f      	b.n	8009f44 <__kernel_rem_pio2f+0x3ec>
 800a024:	eef1 6a66 	vneg.f32	s13, s13
 800a028:	eeb1 7a47 	vneg.f32	s14, s14
 800a02c:	edc8 6a00 	vstr	s13, [r8]
 800a030:	ed88 7a01 	vstr	s14, [r8, #4]
 800a034:	eef1 7a67 	vneg.f32	s15, s15
 800a038:	e790      	b.n	8009f5c <__kernel_rem_pio2f+0x404>
 800a03a:	bf00      	nop

0800a03c <scalbnf>:
 800a03c:	ee10 3a10 	vmov	r3, s0
 800a040:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800a044:	d02b      	beq.n	800a09e <scalbnf+0x62>
 800a046:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800a04a:	d302      	bcc.n	800a052 <scalbnf+0x16>
 800a04c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a050:	4770      	bx	lr
 800a052:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800a056:	d123      	bne.n	800a0a0 <scalbnf+0x64>
 800a058:	4b24      	ldr	r3, [pc, #144]	; (800a0ec <scalbnf+0xb0>)
 800a05a:	eddf 7a25 	vldr	s15, [pc, #148]	; 800a0f0 <scalbnf+0xb4>
 800a05e:	4298      	cmp	r0, r3
 800a060:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a064:	db17      	blt.n	800a096 <scalbnf+0x5a>
 800a066:	ee10 3a10 	vmov	r3, s0
 800a06a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a06e:	3a19      	subs	r2, #25
 800a070:	f24c 3150 	movw	r1, #50000	; 0xc350
 800a074:	4288      	cmp	r0, r1
 800a076:	dd15      	ble.n	800a0a4 <scalbnf+0x68>
 800a078:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800a0f4 <scalbnf+0xb8>
 800a07c:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800a0f8 <scalbnf+0xbc>
 800a080:	ee10 3a10 	vmov	r3, s0
 800a084:	eeb0 7a67 	vmov.f32	s14, s15
 800a088:	2b00      	cmp	r3, #0
 800a08a:	bfb8      	it	lt
 800a08c:	eef0 7a66 	vmovlt.f32	s15, s13
 800a090:	ee27 0a87 	vmul.f32	s0, s15, s14
 800a094:	4770      	bx	lr
 800a096:	eddf 7a19 	vldr	s15, [pc, #100]	; 800a0fc <scalbnf+0xc0>
 800a09a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a09e:	4770      	bx	lr
 800a0a0:	0dd2      	lsrs	r2, r2, #23
 800a0a2:	e7e5      	b.n	800a070 <scalbnf+0x34>
 800a0a4:	4410      	add	r0, r2
 800a0a6:	28fe      	cmp	r0, #254	; 0xfe
 800a0a8:	dce6      	bgt.n	800a078 <scalbnf+0x3c>
 800a0aa:	2800      	cmp	r0, #0
 800a0ac:	dd06      	ble.n	800a0bc <scalbnf+0x80>
 800a0ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a0b2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800a0b6:	ee00 3a10 	vmov	s0, r3
 800a0ba:	4770      	bx	lr
 800a0bc:	f110 0f16 	cmn.w	r0, #22
 800a0c0:	da09      	bge.n	800a0d6 <scalbnf+0x9a>
 800a0c2:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800a0fc <scalbnf+0xc0>
 800a0c6:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800a100 <scalbnf+0xc4>
 800a0ca:	ee10 3a10 	vmov	r3, s0
 800a0ce:	eeb0 7a67 	vmov.f32	s14, s15
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	e7d9      	b.n	800a08a <scalbnf+0x4e>
 800a0d6:	3019      	adds	r0, #25
 800a0d8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a0dc:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800a0e0:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800a104 <scalbnf+0xc8>
 800a0e4:	ee07 3a90 	vmov	s15, r3
 800a0e8:	e7d7      	b.n	800a09a <scalbnf+0x5e>
 800a0ea:	bf00      	nop
 800a0ec:	ffff3cb0 	.word	0xffff3cb0
 800a0f0:	4c000000 	.word	0x4c000000
 800a0f4:	7149f2ca 	.word	0x7149f2ca
 800a0f8:	f149f2ca 	.word	0xf149f2ca
 800a0fc:	0da24260 	.word	0x0da24260
 800a100:	8da24260 	.word	0x8da24260
 800a104:	33000000 	.word	0x33000000

0800a108 <floorf>:
 800a108:	ee10 3a10 	vmov	r3, s0
 800a10c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a110:	3a7f      	subs	r2, #127	; 0x7f
 800a112:	2a16      	cmp	r2, #22
 800a114:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a118:	dc2a      	bgt.n	800a170 <floorf+0x68>
 800a11a:	2a00      	cmp	r2, #0
 800a11c:	da11      	bge.n	800a142 <floorf+0x3a>
 800a11e:	eddf 7a18 	vldr	s15, [pc, #96]	; 800a180 <floorf+0x78>
 800a122:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a126:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a12a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a12e:	dd05      	ble.n	800a13c <floorf+0x34>
 800a130:	2b00      	cmp	r3, #0
 800a132:	da23      	bge.n	800a17c <floorf+0x74>
 800a134:	4a13      	ldr	r2, [pc, #76]	; (800a184 <floorf+0x7c>)
 800a136:	2900      	cmp	r1, #0
 800a138:	bf18      	it	ne
 800a13a:	4613      	movne	r3, r2
 800a13c:	ee00 3a10 	vmov	s0, r3
 800a140:	4770      	bx	lr
 800a142:	4911      	ldr	r1, [pc, #68]	; (800a188 <floorf+0x80>)
 800a144:	4111      	asrs	r1, r2
 800a146:	420b      	tst	r3, r1
 800a148:	d0fa      	beq.n	800a140 <floorf+0x38>
 800a14a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800a180 <floorf+0x78>
 800a14e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a152:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a15a:	ddef      	ble.n	800a13c <floorf+0x34>
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	bfbe      	ittt	lt
 800a160:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800a164:	fa40 f202 	asrlt.w	r2, r0, r2
 800a168:	189b      	addlt	r3, r3, r2
 800a16a:	ea23 0301 	bic.w	r3, r3, r1
 800a16e:	e7e5      	b.n	800a13c <floorf+0x34>
 800a170:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a174:	d3e4      	bcc.n	800a140 <floorf+0x38>
 800a176:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a17a:	4770      	bx	lr
 800a17c:	2300      	movs	r3, #0
 800a17e:	e7dd      	b.n	800a13c <floorf+0x34>
 800a180:	7149f2ca 	.word	0x7149f2ca
 800a184:	bf800000 	.word	0xbf800000
 800a188:	007fffff 	.word	0x007fffff

0800a18c <_init>:
 800a18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a18e:	bf00      	nop
 800a190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a192:	bc08      	pop	{r3}
 800a194:	469e      	mov	lr, r3
 800a196:	4770      	bx	lr

0800a198 <_fini>:
 800a198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a19a:	bf00      	nop
 800a19c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a19e:	bc08      	pop	{r3}
 800a1a0:	469e      	mov	lr, r3
 800a1a2:	4770      	bx	lr
