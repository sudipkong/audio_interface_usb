
Audio_interface_usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005aa4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  08005c3c  08005c3c  00015c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800608c  0800608c  00020044  2**0
                  CONTENTS
  4 .ARM          00000008  0800608c  0800608c  0001608c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006094  08006094  00020044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006094  08006094  00016094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006098  08006098  00016098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  0800609c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  20000044  080060e0  00020044  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  080060e0  00020338  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c414  00000000  00000000  000200b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002451  00000000  00000000  0002c4cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000af0  00000000  00000000  0002e920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000085b  00000000  00000000  0002f410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001679c  00000000  00000000  0002fc6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ef71  00000000  00000000  00046407  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088d4e  00000000  00000000  00055378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002d44  00000000  00000000  000de0c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  000e0e0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000044 	.word	0x20000044
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005c24 	.word	0x08005c24

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000048 	.word	0x20000048
 80001d4:	08005c24 	.word	0x08005c24

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <AUDIO_OUT_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{    
 80004d4:	b590      	push	{r4, r7, lr}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	603a      	str	r2, [r7, #0]
 80004de:	80fb      	strh	r3, [r7, #6]
 80004e0:	460b      	mov	r3, r1
 80004e2:	717b      	strb	r3, [r7, #5]
  uint8_t ret = AUDIO_OK;
 80004e4:	2300      	movs	r3, #0
 80004e6:	73fb      	strb	r3, [r7, #15]
  
  /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */ 
  AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 80004e8:	2200      	movs	r2, #0
 80004ea:	6839      	ldr	r1, [r7, #0]
 80004ec:	481c      	ldr	r0, [pc, #112]	; (8000560 <AUDIO_OUT_Init+0x8c>)
 80004ee:	f000 f88d 	bl	800060c <AUDIO_OUT_ClockConfig>
  
  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  hAudioOutI2s.Instance = I2S3;
 80004f2:	4b1b      	ldr	r3, [pc, #108]	; (8000560 <AUDIO_OUT_Init+0x8c>)
 80004f4:	4a1b      	ldr	r2, [pc, #108]	; (8000564 <AUDIO_OUT_Init+0x90>)
 80004f6:	601a      	str	r2, [r3, #0]
  if(HAL_I2S_GetState(&hAudioOutI2s) == HAL_I2S_STATE_RESET)
 80004f8:	4819      	ldr	r0, [pc, #100]	; (8000560 <AUDIO_OUT_Init+0x8c>)
 80004fa:	f003 fc71 	bl	8003de0 <HAL_I2S_GetState>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d103      	bne.n	800050c <AUDIO_OUT_Init+0x38>
  {
    /* Init the I2S MSP: this __weak function can be redefined by the application*/
    AUDIO_OUT_MspInit(&hAudioOutI2s, NULL);
 8000504:	2100      	movs	r1, #0
 8000506:	4816      	ldr	r0, [pc, #88]	; (8000560 <AUDIO_OUT_Init+0x8c>)
 8000508:	f000 f8de 	bl	80006c8 <AUDIO_OUT_MspInit>
  }

  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  /* Configure the I2S peripheral */
  if(I2S3_Init(AudioFreq) != AUDIO_OK)
 800050c:	6838      	ldr	r0, [r7, #0]
 800050e:	f000 f9b1 	bl	8000874 <I2S3_Init>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <AUDIO_OUT_Init+0x48>
  {
    ret = AUDIO_ERROR;
 8000518:	2301      	movs	r3, #1
 800051a:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == AUDIO_OK)
 800051c:	7bfb      	ldrb	r3, [r7, #15]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d10e      	bne.n	8000540 <AUDIO_OUT_Init+0x6c>
  {
    /* Retieve audio codec identifier */
    if(((cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS)) & CS43L22_ID_MASK) == CS43L22_ID)
 8000522:	4b11      	ldr	r3, [pc, #68]	; (8000568 <AUDIO_OUT_Init+0x94>)
 8000524:	689b      	ldr	r3, [r3, #8]
 8000526:	2094      	movs	r0, #148	; 0x94
 8000528:	4798      	blx	r3
 800052a:	4603      	mov	r3, r0
 800052c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8000530:	2be0      	cmp	r3, #224	; 0xe0
 8000532:	d103      	bne.n	800053c <AUDIO_OUT_Init+0x68>
    {  
      /* Initialize the audio driver structure */
      pAudioDrv = &cs43l22_drv; 
 8000534:	4b0d      	ldr	r3, [pc, #52]	; (800056c <AUDIO_OUT_Init+0x98>)
 8000536:	4a0c      	ldr	r2, [pc, #48]	; (8000568 <AUDIO_OUT_Init+0x94>)
 8000538:	601a      	str	r2, [r3, #0]
 800053a:	e001      	b.n	8000540 <AUDIO_OUT_Init+0x6c>
    }
    else
    {
      ret = AUDIO_ERROR;
 800053c:	2301      	movs	r3, #1
 800053e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  if(ret == AUDIO_OK)
 8000540:	7bfb      	ldrb	r3, [r7, #15]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d107      	bne.n	8000556 <AUDIO_OUT_Init+0x82>
  {
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 8000546:	4b09      	ldr	r3, [pc, #36]	; (800056c <AUDIO_OUT_Init+0x98>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	681c      	ldr	r4, [r3, #0]
 800054c:	797a      	ldrb	r2, [r7, #5]
 800054e:	88f9      	ldrh	r1, [r7, #6]
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	2094      	movs	r0, #148	; 0x94
 8000554:	47a0      	blx	r4
  }
  
  return ret;
 8000556:	7bfb      	ldrb	r3, [r7, #15]
}
 8000558:	4618      	mov	r0, r3
 800055a:	3714      	adds	r7, #20
 800055c:	46bd      	mov	sp, r7
 800055e:	bd90      	pop	{r4, r7, pc}
 8000560:	20000064 	.word	0x20000064
 8000564:	40003c00 	.word	0x40003c00
 8000568:	20000004 	.word	0x20000004
 800056c:	20000060 	.word	0x20000060

08000570 <AUDIO_OUT_Play>:
  * @param  pBuffer: Pointer to the buffer 
  * @param  Size: Number of audio data BYTES.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
  /* Call the audio Codec Play function */
  if(pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 800057a:	4b10      	ldr	r3, [pc, #64]	; (80005bc <AUDIO_OUT_Play+0x4c>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	68db      	ldr	r3, [r3, #12]
 8000580:	683a      	ldr	r2, [r7, #0]
 8000582:	b292      	uxth	r2, r2
 8000584:	6879      	ldr	r1, [r7, #4]
 8000586:	2094      	movs	r0, #148	; 0x94
 8000588:	4798      	blx	r3
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <AUDIO_OUT_Play+0x24>
  {
    return AUDIO_ERROR;
 8000590:	2301      	movs	r3, #1
 8000592:	e00f      	b.n	80005b4 <AUDIO_OUT_Play+0x44>
  }
  else 
  {
    /* Update the Media layer and enable it for play */  
    HAL_I2S_Transmit_DMA(&hAudioOutI2s, pBuffer, DMA_MAX(Size/AUDIODATA_SIZE)); 
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800059a:	d203      	bcs.n	80005a4 <AUDIO_OUT_Play+0x34>
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	085b      	lsrs	r3, r3, #1
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	e001      	b.n	80005a8 <AUDIO_OUT_Play+0x38>
 80005a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005a8:	461a      	mov	r2, r3
 80005aa:	6879      	ldr	r1, [r7, #4]
 80005ac:	4804      	ldr	r0, [pc, #16]	; (80005c0 <AUDIO_OUT_Play+0x50>)
 80005ae:	f003 fb59 	bl	8003c64 <HAL_I2S_Transmit_DMA>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 80005b2:	2300      	movs	r3, #0
  }
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20000060 	.word	0x20000060
 80005c0:	20000064 	.word	0x20000064

080005c4 <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a04      	ldr	r2, [pc, #16]	; (80005e4 <HAL_I2S_TxCpltCallback+0x20>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d101      	bne.n	80005da <HAL_I2S_TxCpltCallback+0x16>
  {
    /* Call the user function which will manage directly transfer complete */  
    AUDIO_OUT_TransferComplete_CallBack();
 80005d6:	f000 f937 	bl	8000848 <AUDIO_OUT_TransferComplete_CallBack>
  }
}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40003c00 	.word	0x40003c00

080005e8 <HAL_I2S_TxHalfCpltCallback>:
/**
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a04      	ldr	r2, [pc, #16]	; (8000608 <HAL_I2S_TxHalfCpltCallback+0x20>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d101      	bne.n	80005fe <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    /* Manage the remaining file size and new address offset: This function should
       be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
    AUDIO_OUT_HalfTransfer_CallBack();
 80005fa:	f000 f92c 	bl	8000856 <AUDIO_OUT_HalfTransfer_CallBack>
  }
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40003c00 	.word	0x40003c00

0800060c <AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void AUDIO_OUT_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t AudioFreq, void *Params)
{ 
 800060c:	b580      	push	{r7, lr}
 800060e:	b08c      	sub	sp, #48	; 0x30
 8000610:	af00      	add	r7, sp, #0
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 8000618:	2300      	movs	r3, #0
 800061a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800061e:	23ff      	movs	r3, #255	; 0xff
 8000620:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  
  for(index = 0; index < 8; index++)
 8000624:	2300      	movs	r3, #0
 8000626:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800062a:	e010      	b.n	800064e <AUDIO_OUT_ClockConfig+0x42>
  {
    if(I2SFreq[index] == AudioFreq)
 800062c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000630:	4a22      	ldr	r2, [pc, #136]	; (80006bc <AUDIO_OUT_ClockConfig+0xb0>)
 8000632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000636:	68ba      	ldr	r2, [r7, #8]
 8000638:	429a      	cmp	r2, r3
 800063a:	d103      	bne.n	8000644 <AUDIO_OUT_ClockConfig+0x38>
    {
      freqindex = index;
 800063c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000640:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  for(index = 0; index < 8; index++)
 8000644:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000648:	3301      	adds	r3, #1
 800064a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800064e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000652:	2b07      	cmp	r3, #7
 8000654:	d9ea      	bls.n	800062c <AUDIO_OUT_ClockConfig+0x20>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 8000656:	f107 0314 	add.w	r3, r7, #20
 800065a:	4618      	mov	r0, r3
 800065c:	f004 fcd8 	bl	8005010 <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 8000660:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000664:	f003 0307 	and.w	r3, r3, #7
 8000668:	2b00      	cmp	r3, #0
 800066a:	d115      	bne.n	8000698 <AUDIO_OUT_ClockConfig+0x8c>
  {
    /* I2S clock config 
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) � (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800066c:	2301      	movs	r3, #1
 800066e:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SM = 8;
 8000670:	2308      	movs	r3, #8
 8000672:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 8000674:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000678:	4a11      	ldr	r2, [pc, #68]	; (80006c0 <AUDIO_OUT_ClockConfig+0xb4>)
 800067a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800067e:	61fb      	str	r3, [r7, #28]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8000680:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000684:	4a0f      	ldr	r2, [pc, #60]	; (80006c4 <AUDIO_OUT_ClockConfig+0xb8>)
 8000686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800068a:	623b      	str	r3, [r7, #32]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 800068c:	f107 0314 	add.w	r3, r7, #20
 8000690:	4618      	mov	r0, r3
 8000692:	f004 fbcd 	bl	8004e30 <HAL_RCCEx_PeriphCLKConfig>
    rccclkinit.PLLI2S.PLLI2SM = 8;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 8000696:	e00d      	b.n	80006b4 <AUDIO_OUT_ClockConfig+0xa8>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000698:	2301      	movs	r3, #1
 800069a:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SM = 8;
 800069c:	2308      	movs	r3, #8
 800069e:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 80006a0:	f44f 7381 	mov.w	r3, #258	; 0x102
 80006a4:	61fb      	str	r3, [r7, #28]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 80006a6:	2303      	movs	r3, #3
 80006a8:	623b      	str	r3, [r7, #32]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80006aa:	f107 0314 	add.w	r3, r7, #20
 80006ae:	4618      	mov	r0, r3
 80006b0:	f004 fbbe 	bl	8004e30 <HAL_RCCEx_PeriphCLKConfig>
}
 80006b4:	bf00      	nop
 80006b6:	3730      	adds	r7, #48	; 0x30
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	08005c3c 	.word	0x08005c3c
 80006c0:	08005c5c 	.word	0x08005c5c
 80006c4:	08005c7c 	.word	0x08005c7c

080006c8 <AUDIO_OUT_MspInit>:
  * @brief  AUDIO OUT I2S MSP Init.
  * @param  hi2s: might be required to set audio peripheral predivider if any.
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void AUDIO_OUT_MspInit(I2S_HandleTypeDef *hi2s, void *Params)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08c      	sub	sp, #48	; 0x30
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_i2sTx;
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable I2S3 clock */
  I2S3_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	61bb      	str	r3, [r7, #24]
 80006d6:	4b56      	ldr	r3, [pc, #344]	; (8000830 <AUDIO_OUT_MspInit+0x168>)
 80006d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006da:	4a55      	ldr	r2, [pc, #340]	; (8000830 <AUDIO_OUT_MspInit+0x168>)
 80006dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006e0:	6413      	str	r3, [r2, #64]	; 0x40
 80006e2:	4b53      	ldr	r3, [pc, #332]	; (8000830 <AUDIO_OUT_MspInit+0x168>)
 80006e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80006ea:	61bb      	str	r3, [r7, #24]
 80006ec:	69bb      	ldr	r3, [r7, #24]

  /*** Configure the GPIOs ***/  
  /* Enable I2S GPIO clocks */
  I2S3_SCK_SD_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]
 80006f2:	4b4f      	ldr	r3, [pc, #316]	; (8000830 <AUDIO_OUT_MspInit+0x168>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a4e      	ldr	r2, [pc, #312]	; (8000830 <AUDIO_OUT_MspInit+0x168>)
 80006f8:	f043 0304 	orr.w	r3, r3, #4
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b4c      	ldr	r3, [pc, #304]	; (8000830 <AUDIO_OUT_MspInit+0x168>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0304 	and.w	r3, r3, #4
 8000706:	617b      	str	r3, [r7, #20]
 8000708:	697b      	ldr	r3, [r7, #20]
  I2S3_WS_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	613b      	str	r3, [r7, #16]
 800070e:	4b48      	ldr	r3, [pc, #288]	; (8000830 <AUDIO_OUT_MspInit+0x168>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a47      	ldr	r2, [pc, #284]	; (8000830 <AUDIO_OUT_MspInit+0x168>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b45      	ldr	r3, [pc, #276]	; (8000830 <AUDIO_OUT_MspInit+0x168>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	613b      	str	r3, [r7, #16]
 8000724:	693b      	ldr	r3, [r7, #16]

  /* I2S3 pins configuration: WS, SCK and SD pins ----------------------------*/
  GPIO_InitStruct.Pin         = I2S3_SCK_PIN | I2S3_SD_PIN; 
 8000726:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800072a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 800072c:	2302      	movs	r3, #2
 800072e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull        = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed       = GPIO_SPEED_FAST;
 8000734:	2302      	movs	r3, #2
 8000736:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 8000738:	2306      	movs	r3, #6
 800073a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 800073c:	f107 031c 	add.w	r3, r7, #28
 8000740:	4619      	mov	r1, r3
 8000742:	483c      	ldr	r0, [pc, #240]	; (8000834 <AUDIO_OUT_MspInit+0x16c>)
 8000744:	f001 fe6a 	bl	800241c <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 8000748:	2310      	movs	r3, #16
 800074a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 800074c:	f107 031c 	add.w	r3, r7, #28
 8000750:	4619      	mov	r1, r3
 8000752:	4839      	ldr	r0, [pc, #228]	; (8000838 <AUDIO_OUT_MspInit+0x170>)
 8000754:	f001 fe62 	bl	800241c <HAL_GPIO_Init>

  /* I2S3 pins configuration: MCK pin */
  I2S3_MCK_CLK_ENABLE();
 8000758:	2300      	movs	r3, #0
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	4b34      	ldr	r3, [pc, #208]	; (8000830 <AUDIO_OUT_MspInit+0x168>)
 800075e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000760:	4a33      	ldr	r2, [pc, #204]	; (8000830 <AUDIO_OUT_MspInit+0x168>)
 8000762:	f043 0304 	orr.w	r3, r3, #4
 8000766:	6313      	str	r3, [r2, #48]	; 0x30
 8000768:	4b31      	ldr	r3, [pc, #196]	; (8000830 <AUDIO_OUT_MspInit+0x168>)
 800076a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076c:	f003 0304 	and.w	r3, r3, #4
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	68fb      	ldr	r3, [r7, #12]
  GPIO_InitStruct.Pin         = I2S3_MCK_PIN; 
 8000774:	2380      	movs	r3, #128	; 0x80
 8000776:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 8000778:	f107 031c 	add.w	r3, r7, #28
 800077c:	4619      	mov	r1, r3
 800077e:	482d      	ldr	r0, [pc, #180]	; (8000834 <AUDIO_OUT_MspInit+0x16c>)
 8000780:	f001 fe4c 	bl	800241c <HAL_GPIO_Init>

  /* Enable the I2S DMA clock */
  I2S3_DMAx_CLK_ENABLE(); 
 8000784:	2300      	movs	r3, #0
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	4b29      	ldr	r3, [pc, #164]	; (8000830 <AUDIO_OUT_MspInit+0x168>)
 800078a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078c:	4a28      	ldr	r2, [pc, #160]	; (8000830 <AUDIO_OUT_MspInit+0x168>)
 800078e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000792:	6313      	str	r3, [r2, #48]	; 0x30
 8000794:	4b26      	ldr	r3, [pc, #152]	; (8000830 <AUDIO_OUT_MspInit+0x168>)
 8000796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000798:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	68bb      	ldr	r3, [r7, #8]
  
  if(hi2s->Instance == I2S3)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a25      	ldr	r2, [pc, #148]	; (800083c <AUDIO_OUT_MspInit+0x174>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d136      	bne.n	8000818 <AUDIO_OUT_MspInit+0x150>
  {
    /* Configure the hdma_i2sTx handle parameters */   
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 80007aa:	4b25      	ldr	r3, [pc, #148]	; (8000840 <AUDIO_OUT_MspInit+0x178>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	605a      	str	r2, [r3, #4]
    hdma_i2sTx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80007b0:	4b23      	ldr	r3, [pc, #140]	; (8000840 <AUDIO_OUT_MspInit+0x178>)
 80007b2:	2240      	movs	r2, #64	; 0x40
 80007b4:	609a      	str	r2, [r3, #8]
    hdma_i2sTx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80007b6:	4b22      	ldr	r3, [pc, #136]	; (8000840 <AUDIO_OUT_MspInit+0x178>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	60da      	str	r2, [r3, #12]
    hdma_i2sTx.Init.MemInc              = DMA_MINC_ENABLE;
 80007bc:	4b20      	ldr	r3, [pc, #128]	; (8000840 <AUDIO_OUT_MspInit+0x178>)
 80007be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007c2:	611a      	str	r2, [r3, #16]
    hdma_i2sTx.Init.PeriphDataAlignment = I2S3_DMAx_PERIPH_DATA_SIZE;
 80007c4:	4b1e      	ldr	r3, [pc, #120]	; (8000840 <AUDIO_OUT_MspInit+0x178>)
 80007c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007ca:	615a      	str	r2, [r3, #20]
    hdma_i2sTx.Init.MemDataAlignment    = I2S3_DMAx_MEM_DATA_SIZE;
 80007cc:	4b1c      	ldr	r3, [pc, #112]	; (8000840 <AUDIO_OUT_MspInit+0x178>)
 80007ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007d2:	619a      	str	r2, [r3, #24]
    hdma_i2sTx.Init.Mode                = DMA_NORMAL;
 80007d4:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <AUDIO_OUT_MspInit+0x178>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
    hdma_i2sTx.Init.Priority            = DMA_PRIORITY_HIGH;
 80007da:	4b19      	ldr	r3, [pc, #100]	; (8000840 <AUDIO_OUT_MspInit+0x178>)
 80007dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80007e0:	621a      	str	r2, [r3, #32]
    hdma_i2sTx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 80007e2:	4b17      	ldr	r3, [pc, #92]	; (8000840 <AUDIO_OUT_MspInit+0x178>)
 80007e4:	2204      	movs	r2, #4
 80007e6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2sTx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80007e8:	4b15      	ldr	r3, [pc, #84]	; (8000840 <AUDIO_OUT_MspInit+0x178>)
 80007ea:	2203      	movs	r2, #3
 80007ec:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2sTx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80007ee:	4b14      	ldr	r3, [pc, #80]	; (8000840 <AUDIO_OUT_MspInit+0x178>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2sTx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80007f4:	4b12      	ldr	r3, [pc, #72]	; (8000840 <AUDIO_OUT_MspInit+0x178>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	631a      	str	r2, [r3, #48]	; 0x30

    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 80007fa:	4b11      	ldr	r3, [pc, #68]	; (8000840 <AUDIO_OUT_MspInit+0x178>)
 80007fc:	4a11      	ldr	r2, [pc, #68]	; (8000844 <AUDIO_OUT_MspInit+0x17c>)
 80007fe:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	4a0f      	ldr	r2, [pc, #60]	; (8000840 <AUDIO_OUT_MspInit+0x178>)
 8000804:	639a      	str	r2, [r3, #56]	; 0x38
 8000806:	4a0e      	ldr	r2, [pc, #56]	; (8000840 <AUDIO_OUT_MspInit+0x178>)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_i2sTx);
 800080c:	480c      	ldr	r0, [pc, #48]	; (8000840 <AUDIO_OUT_MspInit+0x178>)
 800080e:	f001 fae5 	bl	8001ddc <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_i2sTx);
 8000812:	480b      	ldr	r0, [pc, #44]	; (8000840 <AUDIO_OUT_MspInit+0x178>)
 8000814:	f001 fa34 	bl	8001c80 <HAL_DMA_Init>
  }
  
  /* I2S DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(I2S3_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8000818:	2200      	movs	r2, #0
 800081a:	210e      	movs	r1, #14
 800081c:	202f      	movs	r0, #47	; 0x2f
 800081e:	f001 f9f8 	bl	8001c12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S3_DMAx_IRQ);  
 8000822:	202f      	movs	r0, #47	; 0x2f
 8000824:	f001 fa11 	bl	8001c4a <HAL_NVIC_EnableIRQ>
}
 8000828:	bf00      	nop
 800082a:	3730      	adds	r7, #48	; 0x30
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40023800 	.word	0x40023800
 8000834:	40020800 	.word	0x40020800
 8000838:	40020000 	.word	0x40020000
 800083c:	40003c00 	.word	0x40003c00
 8000840:	200000ac 	.word	0x200000ac
 8000844:	400260b8 	.word	0x400260b8

08000848 <AUDIO_OUT_TransferComplete_CallBack>:

/**
  * @brief  Manages the DMA full Transfer complete event.
  */
__weak void AUDIO_OUT_TransferComplete_CallBack(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr

08000856 <AUDIO_OUT_HalfTransfer_CallBack>:

/**
  * @brief  Manages the DMA Half Transfer complete event.
  */
__weak void AUDIO_OUT_HalfTransfer_CallBack(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0
}
 800085a:	bf00      	nop
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void AUDIO_OUT_Error_CallBack(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
	...

08000874 <I2S3_Init>:
/**
  * @brief  Initializes the Audio Codec audio interface (I2S).
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  */
static uint8_t I2S3_Init(uint32_t AudioFreq)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioOutI2s.Instance         = I2S3;
 800087c:	4b17      	ldr	r3, [pc, #92]	; (80008dc <I2S3_Init+0x68>)
 800087e:	4a18      	ldr	r2, [pc, #96]	; (80008e0 <I2S3_Init+0x6c>)
 8000880:	601a      	str	r2, [r3, #0]
  
  /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 8000882:	4b16      	ldr	r3, [pc, #88]	; (80008dc <I2S3_Init+0x68>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	69da      	ldr	r2, [r3, #28]
 8000888:	4b14      	ldr	r3, [pc, #80]	; (80008dc <I2S3_Init+0x68>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000890:	61da      	str	r2, [r3, #28]
  
  /* I2S3 peripheral configuration */
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
 8000892:	4a12      	ldr	r2, [pc, #72]	; (80008dc <I2S3_Init+0x68>)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	6153      	str	r3, [r2, #20]
  hAudioOutI2s.Init.ClockSource = I2S_CLOCK_PLL;
 8000898:	4b10      	ldr	r3, [pc, #64]	; (80008dc <I2S3_Init+0x68>)
 800089a:	2200      	movs	r2, #0
 800089c:	61da      	str	r2, [r3, #28]
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
 800089e:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <I2S3_Init+0x68>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	619a      	str	r2, [r3, #24]
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
 80008a4:	4b0d      	ldr	r3, [pc, #52]	; (80008dc <I2S3_Init+0x68>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 80008aa:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <I2S3_Init+0x68>)
 80008ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008b0:	611a      	str	r2, [r3, #16]
  hAudioOutI2s.Init.Mode        = I2S_MODE_MASTER_TX;
 80008b2:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <I2S3_Init+0x68>)
 80008b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008b8:	605a      	str	r2, [r3, #4]
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;
 80008ba:	4b08      	ldr	r3, [pc, #32]	; (80008dc <I2S3_Init+0x68>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]

  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 80008c0:	4806      	ldr	r0, [pc, #24]	; (80008dc <I2S3_Init+0x68>)
 80008c2:	f003 f88f 	bl	80039e4 <HAL_I2S_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <I2S3_Init+0x5c>
  {
    return AUDIO_ERROR;
 80008cc:	2301      	movs	r3, #1
 80008ce:	e000      	b.n	80008d2 <I2S3_Init+0x5e>
  }
  else
  {
    return AUDIO_OK;
 80008d0:	2300      	movs	r3, #0
  }
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000064 	.word	0x20000064
 80008e0:	40003c00 	.word	0x40003c00

080008e4 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f411e_discovery_audio.h) */ 
  if(hi2s->Instance == I2S3)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a04      	ldr	r2, [pc, #16]	; (8000904 <HAL_I2S_ErrorCallback+0x20>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d101      	bne.n	80008fa <HAL_I2S_ErrorCallback+0x16>
  {
    AUDIO_OUT_Error_CallBack();
 80008f6:	f7ff ffb5 	bl	8000864 <AUDIO_OUT_Error_CallBack>
  }
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40003c00 	.word	0x40003c00

08000908 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 800090c:	4814      	ldr	r0, [pc, #80]	; (8000960 <I2Cx_Init+0x58>)
 800090e:	f002 fca7 	bl	8003260 <HAL_I2C_GetState>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d121      	bne.n	800095c <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = AUDIO_I2Cx;
 8000918:	4b11      	ldr	r3, [pc, #68]	; (8000960 <I2Cx_Init+0x58>)
 800091a:	4a12      	ldr	r2, [pc, #72]	; (8000964 <I2Cx_Init+0x5c>)
 800091c:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 800091e:	4b10      	ldr	r3, [pc, #64]	; (8000960 <I2Cx_Init+0x58>)
 8000920:	2243      	movs	r2, #67	; 0x43
 8000922:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 8000924:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <I2Cx_Init+0x58>)
 8000926:	4a10      	ldr	r2, [pc, #64]	; (8000968 <I2Cx_Init+0x60>)
 8000928:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800092a:	4b0d      	ldr	r3, [pc, #52]	; (8000960 <I2Cx_Init+0x58>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000930:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <I2Cx_Init+0x58>)
 8000932:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000936:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8000938:	4b09      	ldr	r3, [pc, #36]	; (8000960 <I2Cx_Init+0x58>)
 800093a:	2200      	movs	r2, #0
 800093c:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 800093e:	4b08      	ldr	r3, [pc, #32]	; (8000960 <I2Cx_Init+0x58>)
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <I2Cx_Init+0x58>)
 8000946:	2200      	movs	r2, #0
 8000948:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 800094a:	4b05      	ldr	r3, [pc, #20]	; (8000960 <I2Cx_Init+0x58>)
 800094c:	2200      	movs	r2, #0
 800094e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8000950:	4803      	ldr	r0, [pc, #12]	; (8000960 <I2Cx_Init+0x58>)
 8000952:	f000 f86b 	bl	8000a2c <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8000956:	4802      	ldr	r0, [pc, #8]	; (8000960 <I2Cx_Init+0x58>)
 8000958:	f001 ffe2 	bl	8002920 <HAL_I2C_Init>
  }
}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	2000010c 	.word	0x2000010c
 8000964:	40005400 	.word	0x40005400
 8000968:	000186a0 	.word	0x000186a0

0800096c <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b088      	sub	sp, #32
 8000970:	af04      	add	r7, sp, #16
 8000972:	4603      	mov	r3, r0
 8000974:	80fb      	strh	r3, [r7, #6]
 8000976:	460b      	mov	r3, r1
 8000978:	717b      	strb	r3, [r7, #5]
 800097a:	4613      	mov	r3, r2
 800097c:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800097e:	2300      	movs	r3, #0
 8000980:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8000982:	797b      	ldrb	r3, [r7, #5]
 8000984:	b29a      	uxth	r2, r3
 8000986:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <I2Cx_WriteData+0x48>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	88f9      	ldrh	r1, [r7, #6]
 800098c:	9302      	str	r3, [sp, #8]
 800098e:	2301      	movs	r3, #1
 8000990:	9301      	str	r3, [sp, #4]
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	9300      	str	r3, [sp, #0]
 8000996:	2301      	movs	r3, #1
 8000998:	4807      	ldr	r0, [pc, #28]	; (80009b8 <I2Cx_WriteData+0x4c>)
 800099a:	f002 f935 	bl	8002c08 <HAL_I2C_Mem_Write>
 800099e:	4603      	mov	r3, r0
 80009a0:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80009a2:	7bfb      	ldrb	r3, [r7, #15]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 80009a8:	f000 f834 	bl	8000a14 <I2Cx_Error>
  }
}
 80009ac:	bf00      	nop
 80009ae:	3710      	adds	r7, #16
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000000 	.word	0x20000000
 80009b8:	2000010c 	.word	0x2000010c

080009bc <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b088      	sub	sp, #32
 80009c0:	af04      	add	r7, sp, #16
 80009c2:	4603      	mov	r3, r0
 80009c4:	460a      	mov	r2, r1
 80009c6:	80fb      	strh	r3, [r7, #6]
 80009c8:	4613      	mov	r3, r2
 80009ca:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80009cc:	2300      	movs	r3, #0
 80009ce:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 80009d4:	797b      	ldrb	r3, [r7, #5]
 80009d6:	b29a      	uxth	r2, r3
 80009d8:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <I2Cx_ReadData+0x50>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	88f9      	ldrh	r1, [r7, #6]
 80009de:	9302      	str	r3, [sp, #8]
 80009e0:	2301      	movs	r3, #1
 80009e2:	9301      	str	r3, [sp, #4]
 80009e4:	f107 030e 	add.w	r3, r7, #14
 80009e8:	9300      	str	r3, [sp, #0]
 80009ea:	2301      	movs	r3, #1
 80009ec:	4808      	ldr	r0, [pc, #32]	; (8000a10 <I2Cx_ReadData+0x54>)
 80009ee:	f002 fa05 	bl	8002dfc <HAL_I2C_Mem_Read>
 80009f2:	4603      	mov	r3, r0
 80009f4:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80009f6:	7bfb      	ldrb	r3, [r7, #15]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 80009fc:	f000 f80a 	bl	8000a14 <I2Cx_Error>
  }
  return value;
 8000a00:	7bbb      	ldrb	r3, [r7, #14]
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3710      	adds	r7, #16
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000000 	.word	0x20000000
 8000a10:	2000010c 	.word	0x2000010c

08000a14 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8000a18:	4803      	ldr	r0, [pc, #12]	; (8000a28 <I2Cx_Error+0x14>)
 8000a1a:	f002 f8c5 	bl	8002ba8 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 8000a1e:	f7ff ff73 	bl	8000908 <I2Cx_Init>
}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	2000010c 	.word	0x2000010c

08000a2c <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08a      	sub	sp, #40	; 0x28
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the I2C peripheral */
  AUDIO_I2Cx_CLOCK_ENABLE();
 8000a34:	2300      	movs	r3, #0
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	4b25      	ldr	r3, [pc, #148]	; (8000ad0 <I2Cx_MspInit+0xa4>)
 8000a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3c:	4a24      	ldr	r2, [pc, #144]	; (8000ad0 <I2Cx_MspInit+0xa4>)
 8000a3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a42:	6413      	str	r3, [r2, #64]	; 0x40
 8000a44:	4b22      	ldr	r3, [pc, #136]	; (8000ad0 <I2Cx_MspInit+0xa4>)
 8000a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  AUDIO_I2Cx_GPIO_CLK_ENABLE();
 8000a50:	2300      	movs	r3, #0
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	4b1e      	ldr	r3, [pc, #120]	; (8000ad0 <I2Cx_MspInit+0xa4>)
 8000a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a58:	4a1d      	ldr	r2, [pc, #116]	; (8000ad0 <I2Cx_MspInit+0xa4>)
 8000a5a:	f043 0302 	orr.w	r3, r3, #2
 8000a5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a60:	4b1b      	ldr	r3, [pc, #108]	; (8000ad0 <I2Cx_MspInit+0xa4>)
 8000a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a64:	f003 0302 	and.w	r3, r3, #2
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = AUDIO_I2Cx_SDA_PIN | AUDIO_I2Cx_SCL_PIN;
 8000a6c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8000a72:	2312      	movs	r3, #18
 8000a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = AUDIO_I2Cx_AF;
 8000a7e:	2304      	movs	r3, #4
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(AUDIO_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	4619      	mov	r1, r3
 8000a88:	4812      	ldr	r0, [pc, #72]	; (8000ad4 <I2Cx_MspInit+0xa8>)
 8000a8a:	f001 fcc7 	bl	800241c <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  AUDIO_I2Cx_FORCE_RESET();
 8000a8e:	4b10      	ldr	r3, [pc, #64]	; (8000ad0 <I2Cx_MspInit+0xa4>)
 8000a90:	6a1b      	ldr	r3, [r3, #32]
 8000a92:	4a0f      	ldr	r2, [pc, #60]	; (8000ad0 <I2Cx_MspInit+0xa4>)
 8000a94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a98:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  AUDIO_I2Cx_RELEASE_RESET();
 8000a9a:	4b0d      	ldr	r3, [pc, #52]	; (8000ad0 <I2Cx_MspInit+0xa4>)
 8000a9c:	6a1b      	ldr	r3, [r3, #32]
 8000a9e:	4a0c      	ldr	r2, [pc, #48]	; (8000ad0 <I2Cx_MspInit+0xa4>)
 8000aa0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000aa4:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	210f      	movs	r1, #15
 8000aaa:	201f      	movs	r0, #31
 8000aac:	f001 f8b1 	bl	8001c12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_EV_IRQn);
 8000ab0:	201f      	movs	r0, #31
 8000ab2:	f001 f8ca 	bl	8001c4a <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	210f      	movs	r1, #15
 8000aba:	2020      	movs	r0, #32
 8000abc:	f001 f8a9 	bl	8001c12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_ER_IRQn);
 8000ac0:	2020      	movs	r0, #32
 8000ac2:	f001 f8c2 	bl	8001c4a <HAL_NVIC_EnableIRQ>
}
 8000ac6:	bf00      	nop
 8000ac8:	3728      	adds	r7, #40	; 0x28
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40020400 	.word	0x40020400

08000ad8 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void) 
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b086      	sub	sp, #24
 8000adc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	603b      	str	r3, [r7, #0]
 8000ae2:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <AUDIO_IO_Init+0x68>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a16      	ldr	r2, [pc, #88]	; (8000b40 <AUDIO_IO_Init+0x68>)
 8000ae8:	f043 0308 	orr.w	r3, r3, #8
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <AUDIO_IO_Init+0x68>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0308 	and.w	r3, r3, #8
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	683b      	ldr	r3, [r7, #0]
  
  /* Audio reset pin configuration -------------------------------------------*/
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN;
 8000afa:	2310      	movs	r3, #16
 8000afc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afe:	2301      	movs	r3, #1
 8000b00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000b02:	2302      	movs	r3, #2
 8000b04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	480d      	ldr	r0, [pc, #52]	; (8000b44 <AUDIO_IO_Init+0x6c>)
 8000b10:	f001 fc84 	bl	800241c <HAL_GPIO_Init>
  
  I2Cx_Init();
 8000b14:	f7ff fef8 	bl	8000908 <I2Cx_Init>
  
  /* Power Down the codec */
  CODEC_AUDIO_POWER_OFF();
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2110      	movs	r1, #16
 8000b1c:	4809      	ldr	r0, [pc, #36]	; (8000b44 <AUDIO_IO_Init+0x6c>)
 8000b1e:	f001 fee5 	bl	80028ec <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000b22:	2005      	movs	r0, #5
 8000b24:	f000 ff76 	bl	8001a14 <HAL_Delay>
  
  /* Power on the codec */
  CODEC_AUDIO_POWER_ON();
 8000b28:	2201      	movs	r2, #1
 8000b2a:	2110      	movs	r1, #16
 8000b2c:	4805      	ldr	r0, [pc, #20]	; (8000b44 <AUDIO_IO_Init+0x6c>)
 8000b2e:	f001 fedd 	bl	80028ec <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000b32:	2005      	movs	r0, #5
 8000b34:	f000 ff6e 	bl	8001a14 <HAL_Delay>
}
 8000b38:	bf00      	nop
 8000b3a:	3718      	adds	r7, #24
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40020c00 	.word	0x40020c00

08000b48 <AUDIO_IO_DeInit>:

/**
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void) 
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr

08000b56 <AUDIO_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b082      	sub	sp, #8
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	71fb      	strb	r3, [r7, #7]
 8000b60:	460b      	mov	r3, r1
 8000b62:	71bb      	strb	r3, [r7, #6]
 8000b64:	4613      	mov	r3, r2
 8000b66:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	b29b      	uxth	r3, r3
 8000b6c:	797a      	ldrb	r2, [r7, #5]
 8000b6e:	79b9      	ldrb	r1, [r7, #6]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff fefb 	bl	800096c <I2Cx_WriteData>
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read (uint8_t Addr, uint8_t Reg)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b082      	sub	sp, #8
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	4603      	mov	r3, r0
 8000b86:	460a      	mov	r2, r1
 8000b88:	71fb      	strb	r3, [r7, #7]
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	79ba      	ldrb	r2, [r7, #6]
 8000b94:	4611      	mov	r1, r2
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff ff10 	bl	80009bc <I2Cx_ReadData>
 8000b9c:	4603      	mov	r3, r0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
	...

08000ba8 <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	81fb      	strh	r3, [r7, #14]
 8000bb4:	460b      	mov	r3, r1
 8000bb6:	81bb      	strh	r3, [r7, #12]
 8000bb8:	4613      	mov	r3, r2
 8000bba:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();     
 8000bc0:	f7ff ff8a 	bl	8000ad8 <AUDIO_IO_Init>
    
  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 8000bc4:	89fb      	ldrh	r3, [r7, #14]
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	2201      	movs	r2, #1
 8000bca:	2102      	movs	r1, #2
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f000 fb01 	bl	80011d4 <CODEC_IO_Write>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	4413      	add	r3, r2
 8000bda:	617b      	str	r3, [r7, #20]
  
  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 8000bdc:	89bb      	ldrh	r3, [r7, #12]
 8000bde:	3b01      	subs	r3, #1
 8000be0:	2b03      	cmp	r3, #3
 8000be2:	d81b      	bhi.n	8000c1c <cs43l22_Init+0x74>
 8000be4:	a201      	add	r2, pc, #4	; (adr r2, 8000bec <cs43l22_Init+0x44>)
 8000be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bea:	bf00      	nop
 8000bec:	08000bfd 	.word	0x08000bfd
 8000bf0:	08000c05 	.word	0x08000c05
 8000bf4:	08000c0d 	.word	0x08000c0d
 8000bf8:	08000c15 	.word	0x08000c15
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 8000bfc:	4b5b      	ldr	r3, [pc, #364]	; (8000d6c <cs43l22_Init+0x1c4>)
 8000bfe:	22fa      	movs	r2, #250	; 0xfa
 8000c00:	701a      	strb	r2, [r3, #0]
    break;
 8000c02:	e00f      	b.n	8000c24 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 8000c04:	4b59      	ldr	r3, [pc, #356]	; (8000d6c <cs43l22_Init+0x1c4>)
 8000c06:	22af      	movs	r2, #175	; 0xaf
 8000c08:	701a      	strb	r2, [r3, #0]
    break;
 8000c0a:	e00b      	b.n	8000c24 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 8000c0c:	4b57      	ldr	r3, [pc, #348]	; (8000d6c <cs43l22_Init+0x1c4>)
 8000c0e:	22aa      	movs	r2, #170	; 0xaa
 8000c10:	701a      	strb	r2, [r3, #0]
    break;
 8000c12:	e007      	b.n	8000c24 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 8000c14:	4b55      	ldr	r3, [pc, #340]	; (8000d6c <cs43l22_Init+0x1c4>)
 8000c16:	2205      	movs	r2, #5
 8000c18:	701a      	strb	r2, [r3, #0]
    break;    
 8000c1a:	e003      	b.n	8000c24 <cs43l22_Init+0x7c>
    
  default:
    OutputDev = 0x05;
 8000c1c:	4b53      	ldr	r3, [pc, #332]	; (8000d6c <cs43l22_Init+0x1c4>)
 8000c1e:	2205      	movs	r2, #5
 8000c20:	701a      	strb	r2, [r3, #0]
    break;    
 8000c22:	bf00      	nop
  }
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000c24:	89fb      	ldrh	r3, [r7, #14]
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	4a50      	ldr	r2, [pc, #320]	; (8000d6c <cs43l22_Init+0x1c4>)
 8000c2a:	7812      	ldrb	r2, [r2, #0]
 8000c2c:	b2d2      	uxtb	r2, r2
 8000c2e:	2104      	movs	r1, #4
 8000c30:	4618      	mov	r0, r3
 8000c32:	f000 facf 	bl	80011d4 <CODEC_IO_Write>
 8000c36:	4603      	mov	r3, r0
 8000c38:	461a      	mov	r2, r3
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	617b      	str	r3, [r7, #20]
  
  /* Clock configuration: Auto detection */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 8000c40:	89fb      	ldrh	r3, [r7, #14]
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	2281      	movs	r2, #129	; 0x81
 8000c46:	2105      	movs	r1, #5
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f000 fac3 	bl	80011d4 <CODEC_IO_Write>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	461a      	mov	r2, r3
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	4413      	add	r3, r2
 8000c56:	617b      	str	r3, [r7, #20]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 8000c58:	89fb      	ldrh	r3, [r7, #14]
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	2204      	movs	r2, #4
 8000c5e:	2106      	movs	r1, #6
 8000c60:	4618      	mov	r0, r3
 8000c62:	f000 fab7 	bl	80011d4 <CODEC_IO_Write>
 8000c66:	4603      	mov	r3, r0
 8000c68:	461a      	mov	r2, r3
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	617b      	str	r3, [r7, #20]
  
  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8000c70:	7afa      	ldrb	r2, [r7, #11]
 8000c72:	89fb      	ldrh	r3, [r7, #14]
 8000c74:	4611      	mov	r1, r2
 8000c76:	4618      	mov	r0, r3
 8000c78:	f000 f964 	bl	8000f44 <cs43l22_SetVolume>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	4413      	add	r3, r2
 8000c82:	617b      	str	r3, [r7, #20]
  
  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8000c84:	89bb      	ldrh	r3, [r7, #12]
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	d023      	beq.n	8000cd2 <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 8000c8a:	89fb      	ldrh	r3, [r7, #14]
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	2206      	movs	r2, #6
 8000c90:	210f      	movs	r1, #15
 8000c92:	4618      	mov	r0, r3
 8000c94:	f000 fa9e 	bl	80011d4 <CODEC_IO_Write>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	617b      	str	r3, [r7, #20]
    
    /* Set the Speaker attenuation level */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 8000ca2:	89fb      	ldrh	r3, [r7, #14]
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2124      	movs	r1, #36	; 0x24
 8000caa:	4618      	mov	r0, r3
 8000cac:	f000 fa92 	bl	80011d4 <CODEC_IO_Write>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 8000cba:	89fb      	ldrh	r3, [r7, #14]
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2125      	movs	r1, #37	; 0x25
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f000 fa86 	bl	80011d4 <CODEC_IO_Write>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	461a      	mov	r2, r3
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	4413      	add	r3, r2
 8000cd0:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 8000cd2:	89fb      	ldrh	r3, [r7, #14]
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	210a      	movs	r1, #10
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f000 fa7a 	bl	80011d4 <CODEC_IO_Write>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8000cea:	89fb      	ldrh	r3, [r7, #14]
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	2204      	movs	r2, #4
 8000cf0:	210e      	movs	r1, #14
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f000 fa6e 	bl	80011d4 <CODEC_IO_Write>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	4413      	add	r3, r2
 8000d00:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 8000d02:	89fb      	ldrh	r3, [r7, #14]
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	2200      	movs	r2, #0
 8000d08:	2127      	movs	r1, #39	; 0x27
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f000 fa62 	bl	80011d4 <CODEC_IO_Write>
 8000d10:	4603      	mov	r3, r0
 8000d12:	461a      	mov	r2, r3
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	4413      	add	r3, r2
 8000d18:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 8000d1a:	89fb      	ldrh	r3, [r7, #14]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	220f      	movs	r2, #15
 8000d20:	211f      	movs	r1, #31
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 fa56 	bl	80011d4 <CODEC_IO_Write>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	4413      	add	r3, r2
 8000d30:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 8000d32:	89fb      	ldrh	r3, [r7, #14]
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	220a      	movs	r2, #10
 8000d38:	211a      	movs	r1, #26
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f000 fa4a 	bl	80011d4 <CODEC_IO_Write>
 8000d40:	4603      	mov	r3, r0
 8000d42:	461a      	mov	r2, r3
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	4413      	add	r3, r2
 8000d48:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 8000d4a:	89fb      	ldrh	r3, [r7, #14]
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	220a      	movs	r2, #10
 8000d50:	211b      	movs	r1, #27
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 fa3e 	bl	80011d4 <CODEC_IO_Write>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	4413      	add	r3, r2
 8000d60:	617b      	str	r3, [r7, #20]
  
  /* Return communication control value */
  return counter;  
 8000d62:	697b      	ldr	r3, [r7, #20]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3718      	adds	r7, #24
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000160 	.word	0x20000160

08000d70 <cs43l22_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void cs43l22_DeInit(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8000d74:	f7ff fee8 	bl	8000b48 <AUDIO_IO_DeInit>
}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <cs43l22_ReadID>:
  * @brief  Get the CS43L22 ID.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval The CS43L22 ID 
  */
uint32_t cs43l22_ReadID(uint16_t DeviceAddr)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	80fb      	strh	r3, [r7, #6]
  uint8_t Value;
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init(); 
 8000d86:	f7ff fea7 	bl	8000ad8 <AUDIO_IO_Init>
  
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 8000d8a:	88fb      	ldrh	r3, [r7, #6]
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	2101      	movs	r1, #1
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fef4 	bl	8000b7e <AUDIO_IO_Read>
 8000d96:	4603      	mov	r3, r0
 8000d98:	73fb      	strb	r3, [r7, #15]
  Value = (Value & CS43L22_ID_MASK);
 8000d9a:	7bfb      	ldrb	r3, [r7, #15]
 8000d9c:	f023 0307 	bic.w	r3, r3, #7
 8000da0:	73fb      	strb	r3, [r7, #15]
  
  return((uint32_t) Value);
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	6039      	str	r1, [r7, #0]
 8000db6:	80fb      	strh	r3, [r7, #6]
 8000db8:	4613      	mov	r3, r2
 8000dba:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60fb      	str	r3, [r7, #12]
  
  if(Is_cs43l22_Stop == 1)
 8000dc0:	4b16      	ldr	r3, [pc, #88]	; (8000e1c <cs43l22_Play+0x70>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d123      	bne.n	8000e10 <cs43l22_Play+0x64>
  {
    /* Enable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 8000dc8:	88fb      	ldrh	r3, [r7, #6]
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	2206      	movs	r2, #6
 8000dce:	210e      	movs	r1, #14
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f000 f9ff 	bl	80011d4 <CODEC_IO_Write>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	461a      	mov	r2, r3
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	4413      	add	r3, r2
 8000dde:	60fb      	str	r3, [r7, #12]
  
    /* Enable Output device */  
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000de0:	88fb      	ldrh	r3, [r7, #6]
 8000de2:	2100      	movs	r1, #0
 8000de4:	4618      	mov	r0, r3
 8000de6:	f000 f919 	bl	800101c <cs43l22_SetMute>
 8000dea:	4602      	mov	r2, r0
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	4413      	add	r3, r2
 8000df0:	60fb      	str	r3, [r7, #12]
    
    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);  
 8000df2:	88fb      	ldrh	r3, [r7, #6]
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	229e      	movs	r2, #158	; 0x9e
 8000df8:	2102      	movs	r1, #2
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f000 f9ea 	bl	80011d4 <CODEC_IO_Write>
 8000e00:	4603      	mov	r3, r0
 8000e02:	461a      	mov	r2, r3
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	4413      	add	r3, r2
 8000e08:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 8000e0a:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <cs43l22_Play+0x70>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return communication control value */
  return counter;  
 8000e10:	68fb      	ldr	r3, [r7, #12]
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000034 	.word	0x20000034

08000e20 <cs43l22_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Pause(uint16_t DeviceAddr)
{  
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8000e2e:	88fb      	ldrh	r3, [r7, #6]
 8000e30:	2101      	movs	r1, #1
 8000e32:	4618      	mov	r0, r3
 8000e34:	f000 f8f2 	bl	800101c <cs43l22_SetMute>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */    
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 8000e40:	88fb      	ldrh	r3, [r7, #6]
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	2201      	movs	r2, #1
 8000e46:	2102      	movs	r1, #2
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f000 f9c3 	bl	80011d4 <CODEC_IO_Write>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	461a      	mov	r2, r3
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	4413      	add	r3, r2
 8000e56:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8000e58:	68fb      	ldr	r3, [r7, #12]
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <cs43l22_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Resume(uint16_t DeviceAddr)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
  volatile uint32_t index = 0x00;
 8000e72:	2300      	movs	r3, #0
 8000e74:	60bb      	str	r3, [r7, #8]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000e76:	88fb      	ldrh	r3, [r7, #6]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f000 f8ce 	bl	800101c <cs43l22_SetMute>
 8000e80:	4602      	mov	r2, r0
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	4413      	add	r3, r2
 8000e86:	60fb      	str	r3, [r7, #12]

  for(index = 0x00; index < 0xFF; index++);
 8000e88:	2300      	movs	r3, #0
 8000e8a:	60bb      	str	r3, [r7, #8]
 8000e8c:	e002      	b.n	8000e94 <cs43l22_Resume+0x30>
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	3301      	adds	r3, #1
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	2bfe      	cmp	r3, #254	; 0xfe
 8000e98:	d9f9      	bls.n	8000e8e <cs43l22_Resume+0x2a>
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000e9a:	88fb      	ldrh	r3, [r7, #6]
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	4a0e      	ldr	r2, [pc, #56]	; (8000ed8 <cs43l22_Resume+0x74>)
 8000ea0:	7812      	ldrb	r2, [r2, #0]
 8000ea2:	b2d2      	uxtb	r2, r2
 8000ea4:	2104      	movs	r1, #4
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f000 f994 	bl	80011d4 <CODEC_IO_Write>
 8000eac:	4603      	mov	r3, r0
 8000eae:	461a      	mov	r2, r3
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	60fb      	str	r3, [r7, #12]

  /* Exit the Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E); 
 8000eb6:	88fb      	ldrh	r3, [r7, #6]
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	229e      	movs	r2, #158	; 0x9e
 8000ebc:	2102      	movs	r1, #2
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 f988 	bl	80011d4 <CODEC_IO_Write>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	4413      	add	r3, r2
 8000ecc:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8000ece:	68fb      	ldr	r3, [r7, #12]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3710      	adds	r7, #16
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000160 	.word	0x20000160

08000edc <cs43l22_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	6039      	str	r1, [r7, #0]
 8000ee6:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60fb      	str	r3, [r7, #12]
  
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8000eec:	88fb      	ldrh	r3, [r7, #6]
 8000eee:	2101      	movs	r1, #1
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f000 f893 	bl	800101c <cs43l22_SetMute>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	4413      	add	r3, r2
 8000efc:	60fb      	str	r3, [r7, #12]

  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8000efe:	88fb      	ldrh	r3, [r7, #6]
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	2204      	movs	r2, #4
 8000f04:	210e      	movs	r1, #14
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 f964 	bl	80011d4 <CODEC_IO_Write>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	461a      	mov	r2, r3
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	4413      	add	r3, r2
 8000f14:	60fb      	str	r3, [r7, #12]
  
  /* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9F);
 8000f16:	88fb      	ldrh	r3, [r7, #6]
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	229f      	movs	r2, #159	; 0x9f
 8000f1c:	2102      	movs	r1, #2
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 f958 	bl	80011d4 <CODEC_IO_Write>
 8000f24:	4603      	mov	r3, r0
 8000f26:	461a      	mov	r2, r3
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	60fb      	str	r3, [r7, #12]
  
  Is_cs43l22_Stop = 1;
 8000f2e:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <cs43l22_Stop+0x64>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	701a      	strb	r2, [r3, #0]
  return counter;    
 8000f34:	68fb      	ldr	r3, [r7, #12]
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000034 	.word	0x20000034

08000f44 <cs43l22_SetVolume>:
  *                description for more details).
  *         
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	460a      	mov	r2, r1
 8000f4e:	80fb      	strh	r3, [r7, #6]
 8000f50:	4613      	mov	r3, r2
 8000f52:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8000f58:	797b      	ldrb	r3, [r7, #5]
 8000f5a:	2b64      	cmp	r3, #100	; 0x64
 8000f5c:	d80b      	bhi.n	8000f76 <cs43l22_SetVolume+0x32>
 8000f5e:	797a      	ldrb	r2, [r7, #5]
 8000f60:	4613      	mov	r3, r2
 8000f62:	021b      	lsls	r3, r3, #8
 8000f64:	1a9b      	subs	r3, r3, r2
 8000f66:	4a25      	ldr	r2, [pc, #148]	; (8000ffc <cs43l22_SetVolume+0xb8>)
 8000f68:	fb82 1203 	smull	r1, r2, r2, r3
 8000f6c:	1152      	asrs	r2, r2, #5
 8000f6e:	17db      	asrs	r3, r3, #31
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	e000      	b.n	8000f78 <cs43l22_SetVolume+0x34>
 8000f76:	23ff      	movs	r3, #255	; 0xff
 8000f78:	72fb      	strb	r3, [r7, #11]

  if(convertedvol > 0xE6)
 8000f7a:	7afb      	ldrb	r3, [r7, #11]
 8000f7c:	2be6      	cmp	r3, #230	; 0xe6
 8000f7e:	d91c      	bls.n	8000fba <cs43l22_SetVolume+0x76>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
 8000f80:	88fb      	ldrh	r3, [r7, #6]
 8000f82:	b2d8      	uxtb	r0, r3
 8000f84:	7afb      	ldrb	r3, [r7, #11]
 8000f86:	3319      	adds	r3, #25
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	2120      	movs	r1, #32
 8000f8e:	f000 f921 	bl	80011d4 <CODEC_IO_Write>
 8000f92:	4603      	mov	r3, r0
 8000f94:	461a      	mov	r2, r3
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	4413      	add	r3, r2
 8000f9a:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);     
 8000f9c:	88fb      	ldrh	r3, [r7, #6]
 8000f9e:	b2d8      	uxtb	r0, r3
 8000fa0:	7afb      	ldrb	r3, [r7, #11]
 8000fa2:	3319      	adds	r3, #25
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	2121      	movs	r1, #33	; 0x21
 8000faa:	f000 f913 	bl	80011d4 <CODEC_IO_Write>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	e01b      	b.n	8000ff2 <cs43l22_SetVolume+0xae>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 8000fba:	88fb      	ldrh	r3, [r7, #6]
 8000fbc:	b2d8      	uxtb	r0, r3
 8000fbe:	7afb      	ldrb	r3, [r7, #11]
 8000fc0:	3319      	adds	r3, #25
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	2120      	movs	r1, #32
 8000fc8:	f000 f904 	bl	80011d4 <CODEC_IO_Write>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	461a      	mov	r2, r3
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19); 
 8000fd6:	88fb      	ldrh	r3, [r7, #6]
 8000fd8:	b2d8      	uxtb	r0, r3
 8000fda:	7afb      	ldrb	r3, [r7, #11]
 8000fdc:	3319      	adds	r3, #25
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	2121      	movs	r1, #33	; 0x21
 8000fe4:	f000 f8f6 	bl	80011d4 <CODEC_IO_Write>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	461a      	mov	r2, r3
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4413      	add	r3, r2
 8000ff0:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	51eb851f 	.word	0x51eb851f

08001000 <cs43l22_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.   
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	6039      	str	r1, [r7, #0]
 800100a:	80fb      	strh	r3, [r7, #6]
  return 0;
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
	...

0800101c <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	6039      	str	r1, [r7, #0]
 8001026:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d124      	bne.n	800107c <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 8001032:	88fb      	ldrh	r3, [r7, #6]
 8001034:	b2db      	uxtb	r3, r3
 8001036:	22ff      	movs	r2, #255	; 0xff
 8001038:	2104      	movs	r1, #4
 800103a:	4618      	mov	r0, r3
 800103c:	f000 f8ca 	bl	80011d4 <CODEC_IO_Write>
 8001040:	4603      	mov	r3, r0
 8001042:	461a      	mov	r2, r3
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	4413      	add	r3, r2
 8001048:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 800104a:	88fb      	ldrh	r3, [r7, #6]
 800104c:	b2db      	uxtb	r3, r3
 800104e:	2201      	movs	r2, #1
 8001050:	2122      	movs	r1, #34	; 0x22
 8001052:	4618      	mov	r0, r3
 8001054:	f000 f8be 	bl	80011d4 <CODEC_IO_Write>
 8001058:	4603      	mov	r3, r0
 800105a:	461a      	mov	r2, r3
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	4413      	add	r3, r2
 8001060:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 8001062:	88fb      	ldrh	r3, [r7, #6]
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2201      	movs	r2, #1
 8001068:	2123      	movs	r1, #35	; 0x23
 800106a:	4618      	mov	r0, r3
 800106c:	f000 f8b2 	bl	80011d4 <CODEC_IO_Write>
 8001070:	4603      	mov	r3, r0
 8001072:	461a      	mov	r2, r3
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	4413      	add	r3, r2
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	e025      	b.n	80010c8 <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 800107c:	88fb      	ldrh	r3, [r7, #6]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	2200      	movs	r2, #0
 8001082:	2122      	movs	r1, #34	; 0x22
 8001084:	4618      	mov	r0, r3
 8001086:	f000 f8a5 	bl	80011d4 <CODEC_IO_Write>
 800108a:	4603      	mov	r3, r0
 800108c:	461a      	mov	r2, r3
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	4413      	add	r3, r2
 8001092:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 8001094:	88fb      	ldrh	r3, [r7, #6]
 8001096:	b2db      	uxtb	r3, r3
 8001098:	2200      	movs	r2, #0
 800109a:	2123      	movs	r1, #35	; 0x23
 800109c:	4618      	mov	r0, r3
 800109e:	f000 f899 	bl	80011d4 <CODEC_IO_Write>
 80010a2:	4603      	mov	r3, r0
 80010a4:	461a      	mov	r2, r3
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	4413      	add	r3, r2
 80010aa:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80010ac:	88fb      	ldrh	r3, [r7, #6]
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	4a08      	ldr	r2, [pc, #32]	; (80010d4 <cs43l22_SetMute+0xb8>)
 80010b2:	7812      	ldrb	r2, [r2, #0]
 80010b4:	b2d2      	uxtb	r2, r2
 80010b6:	2104      	movs	r1, #4
 80010b8:	4618      	mov	r0, r3
 80010ba:	f000 f88b 	bl	80011d4 <CODEC_IO_Write>
 80010be:	4603      	mov	r3, r0
 80010c0:	461a      	mov	r2, r3
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	4413      	add	r3, r2
 80010c6:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 80010c8:	68fb      	ldr	r3, [r7, #12]
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000160 	.word	0x20000160

080010d8 <cs43l22_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	460a      	mov	r2, r1
 80010e2:	80fb      	strh	r3, [r7, #6]
 80010e4:	4613      	mov	r3, r2
 80010e6:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 80010e8:	2300      	movs	r3, #0
 80010ea:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 80010ec:	797b      	ldrb	r3, [r7, #5]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	2b03      	cmp	r3, #3
 80010f2:	d84b      	bhi.n	800118c <cs43l22_SetOutputMode+0xb4>
 80010f4:	a201      	add	r2, pc, #4	; (adr r2, 80010fc <cs43l22_SetOutputMode+0x24>)
 80010f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010fa:	bf00      	nop
 80010fc:	0800110d 	.word	0x0800110d
 8001100:	0800112d 	.word	0x0800112d
 8001104:	0800114d 	.word	0x0800114d
 8001108:	0800116d 	.word	0x0800116d
  {
    case OUTPUT_DEVICE_SPEAKER:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFA); /* SPK always ON & HP always OFF */
 800110c:	88fb      	ldrh	r3, [r7, #6]
 800110e:	b2db      	uxtb	r3, r3
 8001110:	22fa      	movs	r2, #250	; 0xfa
 8001112:	2104      	movs	r1, #4
 8001114:	4618      	mov	r0, r3
 8001116:	f000 f85d 	bl	80011d4 <CODEC_IO_Write>
 800111a:	4603      	mov	r3, r0
 800111c:	461a      	mov	r2, r3
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	4413      	add	r3, r2
 8001122:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xFA;
 8001124:	4b24      	ldr	r3, [pc, #144]	; (80011b8 <cs43l22_SetOutputMode+0xe0>)
 8001126:	22fa      	movs	r2, #250	; 0xfa
 8001128:	701a      	strb	r2, [r3, #0]
      break;
 800112a:	e03f      	b.n	80011ac <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_HEADPHONE:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAF); /* SPK always OFF & HP always ON */
 800112c:	88fb      	ldrh	r3, [r7, #6]
 800112e:	b2db      	uxtb	r3, r3
 8001130:	22af      	movs	r2, #175	; 0xaf
 8001132:	2104      	movs	r1, #4
 8001134:	4618      	mov	r0, r3
 8001136:	f000 f84d 	bl	80011d4 <CODEC_IO_Write>
 800113a:	4603      	mov	r3, r0
 800113c:	461a      	mov	r2, r3
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	4413      	add	r3, r2
 8001142:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAF;
 8001144:	4b1c      	ldr	r3, [pc, #112]	; (80011b8 <cs43l22_SetOutputMode+0xe0>)
 8001146:	22af      	movs	r2, #175	; 0xaf
 8001148:	701a      	strb	r2, [r3, #0]
      break;
 800114a:	e02f      	b.n	80011ac <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_BOTH:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAA); /* SPK always ON & HP always ON */
 800114c:	88fb      	ldrh	r3, [r7, #6]
 800114e:	b2db      	uxtb	r3, r3
 8001150:	22aa      	movs	r2, #170	; 0xaa
 8001152:	2104      	movs	r1, #4
 8001154:	4618      	mov	r0, r3
 8001156:	f000 f83d 	bl	80011d4 <CODEC_IO_Write>
 800115a:	4603      	mov	r3, r0
 800115c:	461a      	mov	r2, r3
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	4413      	add	r3, r2
 8001162:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAA;
 8001164:	4b14      	ldr	r3, [pc, #80]	; (80011b8 <cs43l22_SetOutputMode+0xe0>)
 8001166:	22aa      	movs	r2, #170	; 0xaa
 8001168:	701a      	strb	r2, [r3, #0]
      break;
 800116a:	e01f      	b.n	80011ac <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_AUTO:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 800116c:	88fb      	ldrh	r3, [r7, #6]
 800116e:	b2db      	uxtb	r3, r3
 8001170:	2205      	movs	r2, #5
 8001172:	2104      	movs	r1, #4
 8001174:	4618      	mov	r0, r3
 8001176:	f000 f82d 	bl	80011d4 <CODEC_IO_Write>
 800117a:	4603      	mov	r3, r0
 800117c:	461a      	mov	r2, r3
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	4413      	add	r3, r2
 8001182:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 8001184:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <cs43l22_SetOutputMode+0xe0>)
 8001186:	2205      	movs	r2, #5
 8001188:	701a      	strb	r2, [r3, #0]
      break;    
 800118a:	e00f      	b.n	80011ac <cs43l22_SetOutputMode+0xd4>
      
    default:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 800118c:	88fb      	ldrh	r3, [r7, #6]
 800118e:	b2db      	uxtb	r3, r3
 8001190:	2205      	movs	r2, #5
 8001192:	2104      	movs	r1, #4
 8001194:	4618      	mov	r0, r3
 8001196:	f000 f81d 	bl	80011d4 <CODEC_IO_Write>
 800119a:	4603      	mov	r3, r0
 800119c:	461a      	mov	r2, r3
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	4413      	add	r3, r2
 80011a2:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 80011a4:	4b04      	ldr	r3, [pc, #16]	; (80011b8 <cs43l22_SetOutputMode+0xe0>)
 80011a6:	2205      	movs	r2, #5
 80011a8:	701a      	strb	r2, [r3, #0]
      break;
 80011aa:	bf00      	nop
  }  
  return counter;
 80011ac:	68fb      	ldr	r3, [r7, #12]
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000160 	.word	0x20000160

080011bc <cs43l22_Reset>:
  * @brief Resets cs43l22 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	80fb      	strh	r3, [r7, #6]
  return 0;
 80011c6:	2300      	movs	r3, #0
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
 80011de:	460b      	mov	r3, r1
 80011e0:	71bb      	strb	r3, [r7, #6]
 80011e2:	4613      	mov	r3, r2
 80011e4:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
  
  AUDIO_IO_Write(Addr, Reg, Value);
 80011ea:	797a      	ldrb	r2, [r7, #5]
 80011ec:	79b9      	ldrb	r1, [r7, #6]
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff fcb0 	bl	8000b56 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	b2db      	uxtb	r3, r3
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	sample_dt = F_OUT/F_SAMPLE;
 800120a:	4b33      	ldr	r3, [pc, #204]	; (80012d8 <main+0xd4>)
 800120c:	f04f 5274 	mov.w	r2, #1023410176	; 0x3d000000
 8001210:	601a      	str	r2, [r3, #0]
	sample_N = F_SAMPLE/F_OUT;
 8001212:	4b32      	ldr	r3, [pc, #200]	; (80012dc <main+0xd8>)
 8001214:	2220      	movs	r2, #32
 8001216:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001218:	f000 fb8a 	bl	8001930 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800121c:	f000 f868 	bl	80012f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001220:	f000 f94a 	bl	80014b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001224:	f000 f928 	bl	8001478 <MX_DMA_Init>
  MX_I2C1_Init();
 8001228:	f000 f8ca 	bl	80013c0 <MX_I2C1_Init>
  MX_I2S3_Init();
 800122c:	f000 f8f6 	bl	800141c <MX_I2S3_Init>
	// CS43_Start();


//--stm--lib- codec initialization
//cs43l22_Init(CS43L22_CHIPID_ADDR,OUTPUT_DEVICE_HEADPHONE,50,AUDIO_FREQUENCY_48K);
 AUDIO_OUT_Init(OUTPUT_DEVICE_HEADPHONE,50,AUDIO_FREQUENCY_48K);
 8001230:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001234:	2132      	movs	r1, #50	; 0x32
 8001236:	2002      	movs	r0, #2
 8001238:	f7ff f94c 	bl	80004d4 <AUDIO_OUT_Init>


//Build Sine wave
	for(uint16_t i=0; i<sample_N; i++)
 800123c:	2300      	movs	r3, #0
 800123e:	80fb      	strh	r3, [r7, #6]
 8001240:	e03d      	b.n	80012be <main+0xba>
	{
		mySinVal = sinf(i*2*PI*sample_dt);
 8001242:	88fb      	ldrh	r3, [r7, #6]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	ee07 3a90 	vmov	s15, r3
 800124a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800124e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80012e0 <main+0xdc>
 8001252:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001256:	4b20      	ldr	r3, [pc, #128]	; (80012d8 <main+0xd4>)
 8001258:	edd3 7a00 	vldr	s15, [r3]
 800125c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001260:	eeb0 0a67 	vmov.f32	s0, s15
 8001264:	f003 ffa4 	bl	80051b0 <sinf>
 8001268:	eef0 7a40 	vmov.f32	s15, s0
 800126c:	4b1d      	ldr	r3, [pc, #116]	; (80012e4 <main+0xe0>)
 800126e:	edc3 7a00 	vstr	s15, [r3]
		dataI2S[i*2] = (mySinVal )*8000;    //Right data (0 2 4 6 8 10 12)
 8001272:	4b1c      	ldr	r3, [pc, #112]	; (80012e4 <main+0xe0>)
 8001274:	edd3 7a00 	vldr	s15, [r3]
 8001278:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80012e8 <main+0xe4>
 800127c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001280:	88fb      	ldrh	r3, [r7, #6]
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001288:	ee17 2a90 	vmov	r2, s15
 800128c:	b211      	sxth	r1, r2
 800128e:	4a17      	ldr	r2, [pc, #92]	; (80012ec <main+0xe8>)
 8001290:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		dataI2S[i*2 + 1] =(mySinVal )*8000; //Left data  (1 3 5 7 9 11 13)
 8001294:	4b13      	ldr	r3, [pc, #76]	; (80012e4 <main+0xe0>)
 8001296:	edd3 7a00 	vldr	s15, [r3]
 800129a:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80012e8 <main+0xe4>
 800129e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012a2:	88fb      	ldrh	r3, [r7, #6]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	3301      	adds	r3, #1
 80012a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012ac:	ee17 2a90 	vmov	r2, s15
 80012b0:	b211      	sxth	r1, r2
 80012b2:	4a0e      	ldr	r2, [pc, #56]	; (80012ec <main+0xe8>)
 80012b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint16_t i=0; i<sample_N; i++)
 80012b8:	88fb      	ldrh	r3, [r7, #6]
 80012ba:	3301      	adds	r3, #1
 80012bc:	80fb      	strh	r3, [r7, #6]
 80012be:	4b07      	ldr	r3, [pc, #28]	; (80012dc <main+0xd8>)
 80012c0:	881b      	ldrh	r3, [r3, #0]
 80012c2:	88fa      	ldrh	r2, [r7, #6]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d3bc      	bcc.n	8001242 <main+0x3e>
	
	//HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)dataI2S, sample_N*2);

  //cs43l22_Play(AUDIO_I2C_ADDRESS,NULL,NULL);
 
  AUDIO_OUT_Play((uint16_t *)dataI2S,sample_N*2);
 80012c8:	4b04      	ldr	r3, [pc, #16]	; (80012dc <main+0xd8>)
 80012ca:	881b      	ldrh	r3, [r3, #0]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	4619      	mov	r1, r3
 80012d0:	4806      	ldr	r0, [pc, #24]	; (80012ec <main+0xe8>)
 80012d2:	f7ff f94d 	bl	8000570 <AUDIO_OUT_Play>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012d6:	e7fe      	b.n	80012d6 <main+0xd2>
 80012d8:	20000264 	.word	0x20000264
 80012dc:	20000268 	.word	0x20000268
 80012e0:	40490fd0 	.word	0x40490fd0
 80012e4:	20000260 	.word	0x20000260
 80012e8:	45fa0000 	.word	0x45fa0000
 80012ec:	2000026c 	.word	0x2000026c

080012f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b094      	sub	sp, #80	; 0x50
 80012f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012f6:	f107 0320 	add.w	r3, r7, #32
 80012fa:	2230      	movs	r2, #48	; 0x30
 80012fc:	2100      	movs	r1, #0
 80012fe:	4618      	mov	r0, r3
 8001300:	f003 ff2a 	bl	8005158 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001304:	f107 030c 	add.w	r3, r7, #12
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001314:	2300      	movs	r3, #0
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	4b27      	ldr	r3, [pc, #156]	; (80013b8 <SystemClock_Config+0xc8>)
 800131a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131c:	4a26      	ldr	r2, [pc, #152]	; (80013b8 <SystemClock_Config+0xc8>)
 800131e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001322:	6413      	str	r3, [r2, #64]	; 0x40
 8001324:	4b24      	ldr	r3, [pc, #144]	; (80013b8 <SystemClock_Config+0xc8>)
 8001326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001330:	2300      	movs	r3, #0
 8001332:	607b      	str	r3, [r7, #4]
 8001334:	4b21      	ldr	r3, [pc, #132]	; (80013bc <SystemClock_Config+0xcc>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a20      	ldr	r2, [pc, #128]	; (80013bc <SystemClock_Config+0xcc>)
 800133a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800133e:	6013      	str	r3, [r2, #0]
 8001340:	4b1e      	ldr	r3, [pc, #120]	; (80013bc <SystemClock_Config+0xcc>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001348:	607b      	str	r3, [r7, #4]
 800134a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800134c:	2302      	movs	r3, #2
 800134e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001350:	2301      	movs	r3, #1
 8001352:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001354:	2310      	movs	r3, #16
 8001356:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001358:	2302      	movs	r3, #2
 800135a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800135c:	2300      	movs	r3, #0
 800135e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001360:	2308      	movs	r3, #8
 8001362:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001364:	2364      	movs	r3, #100	; 0x64
 8001366:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001368:	2302      	movs	r3, #2
 800136a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800136c:	2308      	movs	r3, #8
 800136e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001370:	f107 0320 	add.w	r3, r7, #32
 8001374:	4618      	mov	r0, r3
 8001376:	f003 f8d7 	bl	8004528 <HAL_RCC_OscConfig>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001380:	f000 f8fa 	bl	8001578 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001384:	230f      	movs	r3, #15
 8001386:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001388:	2302      	movs	r3, #2
 800138a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001394:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001396:	2300      	movs	r3, #0
 8001398:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800139a:	f107 030c 	add.w	r3, r7, #12
 800139e:	2103      	movs	r1, #3
 80013a0:	4618      	mov	r0, r3
 80013a2:	f003 fb39 	bl	8004a18 <HAL_RCC_ClockConfig>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80013ac:	f000 f8e4 	bl	8001578 <Error_Handler>
  }
}
 80013b0:	bf00      	nop
 80013b2:	3750      	adds	r7, #80	; 0x50
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40007000 	.word	0x40007000

080013c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013c4:	4b12      	ldr	r3, [pc, #72]	; (8001410 <MX_I2C1_Init+0x50>)
 80013c6:	4a13      	ldr	r2, [pc, #76]	; (8001414 <MX_I2C1_Init+0x54>)
 80013c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013ca:	4b11      	ldr	r3, [pc, #68]	; (8001410 <MX_I2C1_Init+0x50>)
 80013cc:	4a12      	ldr	r2, [pc, #72]	; (8001418 <MX_I2C1_Init+0x58>)
 80013ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013d0:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <MX_I2C1_Init+0x50>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013d6:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <MX_I2C1_Init+0x50>)
 80013d8:	2200      	movs	r2, #0
 80013da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013dc:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <MX_I2C1_Init+0x50>)
 80013de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013e4:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <MX_I2C1_Init+0x50>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <MX_I2C1_Init+0x50>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013f0:	4b07      	ldr	r3, [pc, #28]	; (8001410 <MX_I2C1_Init+0x50>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <MX_I2C1_Init+0x50>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013fc:	4804      	ldr	r0, [pc, #16]	; (8001410 <MX_I2C1_Init+0x50>)
 80013fe:	f001 fa8f 	bl	8002920 <HAL_I2C_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001408:	f000 f8b6 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000164 	.word	0x20000164
 8001414:	40005400 	.word	0x40005400
 8001418:	000186a0 	.word	0x000186a0

0800141c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001420:	4b13      	ldr	r3, [pc, #76]	; (8001470 <MX_I2S3_Init+0x54>)
 8001422:	4a14      	ldr	r2, [pc, #80]	; (8001474 <MX_I2S3_Init+0x58>)
 8001424:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001426:	4b12      	ldr	r3, [pc, #72]	; (8001470 <MX_I2S3_Init+0x54>)
 8001428:	f44f 7200 	mov.w	r2, #512	; 0x200
 800142c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800142e:	4b10      	ldr	r3, [pc, #64]	; (8001470 <MX_I2S3_Init+0x54>)
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001434:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <MX_I2S3_Init+0x54>)
 8001436:	2200      	movs	r2, #0
 8001438:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800143a:	4b0d      	ldr	r3, [pc, #52]	; (8001470 <MX_I2S3_Init+0x54>)
 800143c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001440:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8001442:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <MX_I2S3_Init+0x54>)
 8001444:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001448:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800144a:	4b09      	ldr	r3, [pc, #36]	; (8001470 <MX_I2S3_Init+0x54>)
 800144c:	2200      	movs	r2, #0
 800144e:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001450:	4b07      	ldr	r3, [pc, #28]	; (8001470 <MX_I2S3_Init+0x54>)
 8001452:	2200      	movs	r2, #0
 8001454:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001456:	4b06      	ldr	r3, [pc, #24]	; (8001470 <MX_I2S3_Init+0x54>)
 8001458:	2200      	movs	r2, #0
 800145a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800145c:	4804      	ldr	r0, [pc, #16]	; (8001470 <MX_I2S3_Init+0x54>)
 800145e:	f002 fac1 	bl	80039e4 <HAL_I2S_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8001468:	f000 f886 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}
 8001470:	200001b8 	.word	0x200001b8
 8001474:	40003c00 	.word	0x40003c00

08001478 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <MX_DMA_Init+0x3c>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a0b      	ldr	r2, [pc, #44]	; (80014b4 <MX_DMA_Init+0x3c>)
 8001488:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <MX_DMA_Init+0x3c>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800149a:	2200      	movs	r2, #0
 800149c:	2100      	movs	r1, #0
 800149e:	2010      	movs	r0, #16
 80014a0:	f000 fbb7 	bl	8001c12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80014a4:	2010      	movs	r0, #16
 80014a6:	f000 fbd0 	bl	8001c4a <HAL_NVIC_EnableIRQ>

}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40023800 	.word	0x40023800

080014b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08a      	sub	sp, #40	; 0x28
 80014bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014be:	f107 0314 	add.w	r3, r7, #20
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	60da      	str	r2, [r3, #12]
 80014cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	4b27      	ldr	r3, [pc, #156]	; (8001570 <MX_GPIO_Init+0xb8>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a26      	ldr	r2, [pc, #152]	; (8001570 <MX_GPIO_Init+0xb8>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b24      	ldr	r3, [pc, #144]	; (8001570 <MX_GPIO_Init+0xb8>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	4b20      	ldr	r3, [pc, #128]	; (8001570 <MX_GPIO_Init+0xb8>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a1f      	ldr	r2, [pc, #124]	; (8001570 <MX_GPIO_Init+0xb8>)
 80014f4:	f043 0308 	orr.w	r3, r3, #8
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b1d      	ldr	r3, [pc, #116]	; (8001570 <MX_GPIO_Init+0xb8>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0308 	and.w	r3, r3, #8
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	4b19      	ldr	r3, [pc, #100]	; (8001570 <MX_GPIO_Init+0xb8>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	4a18      	ldr	r2, [pc, #96]	; (8001570 <MX_GPIO_Init+0xb8>)
 8001510:	f043 0304 	orr.w	r3, r3, #4
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
 8001516:	4b16      	ldr	r3, [pc, #88]	; (8001570 <MX_GPIO_Init+0xb8>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f003 0304 	and.w	r3, r3, #4
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	4b12      	ldr	r3, [pc, #72]	; (8001570 <MX_GPIO_Init+0xb8>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4a11      	ldr	r2, [pc, #68]	; (8001570 <MX_GPIO_Init+0xb8>)
 800152c:	f043 0302 	orr.w	r3, r3, #2
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <MX_GPIO_Init+0xb8>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800153e:	2200      	movs	r2, #0
 8001540:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001544:	480b      	ldr	r0, [pc, #44]	; (8001574 <MX_GPIO_Init+0xbc>)
 8001546:	f001 f9d1 	bl	80028ec <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800154a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800154e:	617b      	str	r3, [r7, #20]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001550:	2301      	movs	r3, #1
 8001552:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001558:	2300      	movs	r3, #0
 800155a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800155c:	f107 0314 	add.w	r3, r7, #20
 8001560:	4619      	mov	r1, r3
 8001562:	4804      	ldr	r0, [pc, #16]	; (8001574 <MX_GPIO_Init+0xbc>)
 8001564:	f000 ff5a 	bl	800241c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001568:	bf00      	nop
 800156a:	3728      	adds	r7, #40	; 0x28
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40023800 	.word	0x40023800
 8001574:	40020c00 	.word	0x40020c00

08001578 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800157c:	b672      	cpsid	i
}
 800157e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001580:	e7fe      	b.n	8001580 <Error_Handler+0x8>
	...

08001584 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	607b      	str	r3, [r7, #4]
 800158e:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <HAL_MspInit+0x4c>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	4a0f      	ldr	r2, [pc, #60]	; (80015d0 <HAL_MspInit+0x4c>)
 8001594:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001598:	6453      	str	r3, [r2, #68]	; 0x44
 800159a:	4b0d      	ldr	r3, [pc, #52]	; (80015d0 <HAL_MspInit+0x4c>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	603b      	str	r3, [r7, #0]
 80015aa:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <HAL_MspInit+0x4c>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	4a08      	ldr	r2, [pc, #32]	; (80015d0 <HAL_MspInit+0x4c>)
 80015b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b4:	6413      	str	r3, [r2, #64]	; 0x40
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <HAL_MspInit+0x4c>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015be:	603b      	str	r3, [r7, #0]
 80015c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015c2:	2007      	movs	r0, #7
 80015c4:	f000 fb1a 	bl	8001bfc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40023800 	.word	0x40023800

080015d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08a      	sub	sp, #40	; 0x28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a19      	ldr	r2, [pc, #100]	; (8001658 <HAL_I2C_MspInit+0x84>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d12c      	bne.n	8001650 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
 80015fa:	4b18      	ldr	r3, [pc, #96]	; (800165c <HAL_I2C_MspInit+0x88>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	4a17      	ldr	r2, [pc, #92]	; (800165c <HAL_I2C_MspInit+0x88>)
 8001600:	f043 0302 	orr.w	r3, r3, #2
 8001604:	6313      	str	r3, [r2, #48]	; 0x30
 8001606:	4b15      	ldr	r3, [pc, #84]	; (800165c <HAL_I2C_MspInit+0x88>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001612:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001618:	2312      	movs	r3, #18
 800161a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800161c:	2301      	movs	r3, #1
 800161e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001620:	2300      	movs	r3, #0
 8001622:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001624:	2304      	movs	r3, #4
 8001626:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001628:	f107 0314 	add.w	r3, r7, #20
 800162c:	4619      	mov	r1, r3
 800162e:	480c      	ldr	r0, [pc, #48]	; (8001660 <HAL_I2C_MspInit+0x8c>)
 8001630:	f000 fef4 	bl	800241c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001634:	2300      	movs	r3, #0
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	4b08      	ldr	r3, [pc, #32]	; (800165c <HAL_I2C_MspInit+0x88>)
 800163a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163c:	4a07      	ldr	r2, [pc, #28]	; (800165c <HAL_I2C_MspInit+0x88>)
 800163e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001642:	6413      	str	r3, [r2, #64]	; 0x40
 8001644:	4b05      	ldr	r3, [pc, #20]	; (800165c <HAL_I2C_MspInit+0x88>)
 8001646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001648:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001650:	bf00      	nop
 8001652:	3728      	adds	r7, #40	; 0x28
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40005400 	.word	0x40005400
 800165c:	40023800 	.word	0x40023800
 8001660:	40020400 	.word	0x40020400

08001664 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a0a      	ldr	r2, [pc, #40]	; (800169c <HAL_I2C_MspDeInit+0x38>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d10e      	bne.n	8001694 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001676:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <HAL_I2C_MspDeInit+0x3c>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	4a09      	ldr	r2, [pc, #36]	; (80016a0 <HAL_I2C_MspDeInit+0x3c>)
 800167c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001680:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(Audio_SCL_GPIO_Port, Audio_SCL_Pin);
 8001682:	2140      	movs	r1, #64	; 0x40
 8001684:	4807      	ldr	r0, [pc, #28]	; (80016a4 <HAL_I2C_MspDeInit+0x40>)
 8001686:	f001 f84d 	bl	8002724 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(Audio_SDA_GPIO_Port, Audio_SDA_Pin);
 800168a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800168e:	4805      	ldr	r0, [pc, #20]	; (80016a4 <HAL_I2C_MspDeInit+0x40>)
 8001690:	f001 f848 	bl	8002724 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40005400 	.word	0x40005400
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40020400 	.word	0x40020400

080016a8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b090      	sub	sp, #64	; 0x40
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
 80016ce:	611a      	str	r2, [r3, #16]
 80016d0:	615a      	str	r2, [r3, #20]
  if(hi2s->Instance==SPI3)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a53      	ldr	r2, [pc, #332]	; (8001824 <HAL_I2S_MspInit+0x17c>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	f040 809e 	bne.w	800181a <HAL_I2S_MspInit+0x172>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80016de:	2301      	movs	r3, #1
 80016e0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 80016e2:	2364      	movs	r3, #100	; 0x64
 80016e4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 80016e6:	2308      	movs	r3, #8
 80016e8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80016ea:	2302      	movs	r3, #2
 80016ec:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016ee:	f107 0314 	add.w	r3, r7, #20
 80016f2:	4618      	mov	r0, r3
 80016f4:	f003 fb9c 	bl	8004e30 <HAL_RCCEx_PeriphCLKConfig>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <HAL_I2S_MspInit+0x5a>
    {
      Error_Handler();
 80016fe:	f7ff ff3b 	bl	8001578 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	613b      	str	r3, [r7, #16]
 8001706:	4b48      	ldr	r3, [pc, #288]	; (8001828 <HAL_I2S_MspInit+0x180>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	4a47      	ldr	r2, [pc, #284]	; (8001828 <HAL_I2S_MspInit+0x180>)
 800170c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001710:	6413      	str	r3, [r2, #64]	; 0x40
 8001712:	4b45      	ldr	r3, [pc, #276]	; (8001828 <HAL_I2S_MspInit+0x180>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800171a:	613b      	str	r3, [r7, #16]
 800171c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	4b41      	ldr	r3, [pc, #260]	; (8001828 <HAL_I2S_MspInit+0x180>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	4a40      	ldr	r2, [pc, #256]	; (8001828 <HAL_I2S_MspInit+0x180>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	6313      	str	r3, [r2, #48]	; 0x30
 800172e:	4b3e      	ldr	r3, [pc, #248]	; (8001828 <HAL_I2S_MspInit+0x180>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	60bb      	str	r3, [r7, #8]
 800173e:	4b3a      	ldr	r3, [pc, #232]	; (8001828 <HAL_I2S_MspInit+0x180>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a39      	ldr	r2, [pc, #228]	; (8001828 <HAL_I2S_MspInit+0x180>)
 8001744:	f043 0304 	orr.w	r3, r3, #4
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b37      	ldr	r3, [pc, #220]	; (8001828 <HAL_I2S_MspInit+0x180>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f003 0304 	and.w	r3, r3, #4
 8001752:	60bb      	str	r3, [r7, #8]
 8001754:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001756:	2310      	movs	r3, #16
 8001758:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175a:	2302      	movs	r3, #2
 800175c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001762:	2300      	movs	r3, #0
 8001764:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001766:	2306      	movs	r3, #6
 8001768:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800176a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800176e:	4619      	mov	r1, r3
 8001770:	482e      	ldr	r0, [pc, #184]	; (800182c <HAL_I2S_MspInit+0x184>)
 8001772:	f000 fe53 	bl	800241c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001776:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800177a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177c:	2302      	movs	r3, #2
 800177e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001784:	2300      	movs	r3, #0
 8001786:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001788:	2306      	movs	r3, #6
 800178a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800178c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001790:	4619      	mov	r1, r3
 8001792:	4827      	ldr	r0, [pc, #156]	; (8001830 <HAL_I2S_MspInit+0x188>)
 8001794:	f000 fe42 	bl	800241c <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001798:	4b26      	ldr	r3, [pc, #152]	; (8001834 <HAL_I2S_MspInit+0x18c>)
 800179a:	4a27      	ldr	r2, [pc, #156]	; (8001838 <HAL_I2S_MspInit+0x190>)
 800179c:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 800179e:	4b25      	ldr	r3, [pc, #148]	; (8001834 <HAL_I2S_MspInit+0x18c>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017a4:	4b23      	ldr	r3, [pc, #140]	; (8001834 <HAL_I2S_MspInit+0x18c>)
 80017a6:	2240      	movs	r2, #64	; 0x40
 80017a8:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017aa:	4b22      	ldr	r3, [pc, #136]	; (8001834 <HAL_I2S_MspInit+0x18c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017b0:	4b20      	ldr	r3, [pc, #128]	; (8001834 <HAL_I2S_MspInit+0x18c>)
 80017b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017b6:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017b8:	4b1e      	ldr	r3, [pc, #120]	; (8001834 <HAL_I2S_MspInit+0x18c>)
 80017ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017be:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017c0:	4b1c      	ldr	r3, [pc, #112]	; (8001834 <HAL_I2S_MspInit+0x18c>)
 80017c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017c6:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 80017c8:	4b1a      	ldr	r3, [pc, #104]	; (8001834 <HAL_I2S_MspInit+0x18c>)
 80017ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017ce:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017d0:	4b18      	ldr	r3, [pc, #96]	; (8001834 <HAL_I2S_MspInit+0x18c>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80017d6:	4b17      	ldr	r3, [pc, #92]	; (8001834 <HAL_I2S_MspInit+0x18c>)
 80017d8:	2204      	movs	r2, #4
 80017da:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80017dc:	4b15      	ldr	r3, [pc, #84]	; (8001834 <HAL_I2S_MspInit+0x18c>)
 80017de:	2203      	movs	r2, #3
 80017e0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80017e2:	4b14      	ldr	r3, [pc, #80]	; (8001834 <HAL_I2S_MspInit+0x18c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80017e8:	4b12      	ldr	r3, [pc, #72]	; (8001834 <HAL_I2S_MspInit+0x18c>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80017ee:	4811      	ldr	r0, [pc, #68]	; (8001834 <HAL_I2S_MspInit+0x18c>)
 80017f0:	f000 fa46 	bl	8001c80 <HAL_DMA_Init>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <HAL_I2S_MspInit+0x156>
    {
      Error_Handler();
 80017fa:	f7ff febd 	bl	8001578 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a0c      	ldr	r2, [pc, #48]	; (8001834 <HAL_I2S_MspInit+0x18c>)
 8001802:	639a      	str	r2, [r3, #56]	; 0x38
 8001804:	4a0b      	ldr	r2, [pc, #44]	; (8001834 <HAL_I2S_MspInit+0x18c>)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 800180a:	2200      	movs	r2, #0
 800180c:	2100      	movs	r1, #0
 800180e:	2033      	movs	r0, #51	; 0x33
 8001810:	f000 f9ff 	bl	8001c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001814:	2033      	movs	r0, #51	; 0x33
 8001816:	f000 fa18 	bl	8001c4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800181a:	bf00      	nop
 800181c:	3740      	adds	r7, #64	; 0x40
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40003c00 	.word	0x40003c00
 8001828:	40023800 	.word	0x40023800
 800182c:	40020000 	.word	0x40020000
 8001830:	40020800 	.word	0x40020800
 8001834:	20000200 	.word	0x20000200
 8001838:	40026088 	.word	0x40026088

0800183c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001840:	e7fe      	b.n	8001840 <NMI_Handler+0x4>

08001842 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001842:	b480      	push	{r7}
 8001844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001846:	e7fe      	b.n	8001846 <HardFault_Handler+0x4>

08001848 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800184c:	e7fe      	b.n	800184c <MemManage_Handler+0x4>

0800184e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800184e:	b480      	push	{r7}
 8001850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001852:	e7fe      	b.n	8001852 <BusFault_Handler+0x4>

08001854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001858:	e7fe      	b.n	8001858 <UsageFault_Handler+0x4>

0800185a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001888:	f000 f8a4 	bl	80019d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}

08001890 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001894:	4802      	ldr	r0, [pc, #8]	; (80018a0 <DMA1_Stream5_IRQHandler+0x10>)
 8001896:	f000 fb57 	bl	8001f48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000200 	.word	0x20000200

080018a4 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 80018a8:	4802      	ldr	r0, [pc, #8]	; (80018b4 <SPI3_IRQHandler+0x10>)
 80018aa:	f002 fa83 	bl	8003db4 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	200001b8 	.word	0x200001b8

080018b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018bc:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <SystemInit+0x20>)
 80018be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018c2:	4a05      	ldr	r2, [pc, #20]	; (80018d8 <SystemInit+0x20>)
 80018c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <Reset_Handler>:
 80018dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001914 <LoopFillZerobss+0xe>
 80018e0:	f7ff ffea 	bl	80018b8 <SystemInit>
 80018e4:	480c      	ldr	r0, [pc, #48]	; (8001918 <LoopFillZerobss+0x12>)
 80018e6:	490d      	ldr	r1, [pc, #52]	; (800191c <LoopFillZerobss+0x16>)
 80018e8:	4a0d      	ldr	r2, [pc, #52]	; (8001920 <LoopFillZerobss+0x1a>)
 80018ea:	2300      	movs	r3, #0
 80018ec:	e002      	b.n	80018f4 <LoopCopyDataInit>

080018ee <CopyDataInit>:
 80018ee:	58d4      	ldr	r4, [r2, r3]
 80018f0:	50c4      	str	r4, [r0, r3]
 80018f2:	3304      	adds	r3, #4

080018f4 <LoopCopyDataInit>:
 80018f4:	18c4      	adds	r4, r0, r3
 80018f6:	428c      	cmp	r4, r1
 80018f8:	d3f9      	bcc.n	80018ee <CopyDataInit>
 80018fa:	4a0a      	ldr	r2, [pc, #40]	; (8001924 <LoopFillZerobss+0x1e>)
 80018fc:	4c0a      	ldr	r4, [pc, #40]	; (8001928 <LoopFillZerobss+0x22>)
 80018fe:	2300      	movs	r3, #0
 8001900:	e001      	b.n	8001906 <LoopFillZerobss>

08001902 <FillZerobss>:
 8001902:	6013      	str	r3, [r2, #0]
 8001904:	3204      	adds	r2, #4

08001906 <LoopFillZerobss>:
 8001906:	42a2      	cmp	r2, r4
 8001908:	d3fb      	bcc.n	8001902 <FillZerobss>
 800190a:	f003 fc2d 	bl	8005168 <__libc_init_array>
 800190e:	f7ff fc79 	bl	8001204 <main>
 8001912:	4770      	bx	lr
 8001914:	20020000 	.word	0x20020000
 8001918:	20000000 	.word	0x20000000
 800191c:	20000044 	.word	0x20000044
 8001920:	0800609c 	.word	0x0800609c
 8001924:	20000044 	.word	0x20000044
 8001928:	20000338 	.word	0x20000338

0800192c <ADC_IRQHandler>:
 800192c:	e7fe      	b.n	800192c <ADC_IRQHandler>
	...

08001930 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001934:	4b0e      	ldr	r3, [pc, #56]	; (8001970 <HAL_Init+0x40>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a0d      	ldr	r2, [pc, #52]	; (8001970 <HAL_Init+0x40>)
 800193a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800193e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001940:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <HAL_Init+0x40>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <HAL_Init+0x40>)
 8001946:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800194a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800194c:	4b08      	ldr	r3, [pc, #32]	; (8001970 <HAL_Init+0x40>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a07      	ldr	r2, [pc, #28]	; (8001970 <HAL_Init+0x40>)
 8001952:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001956:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001958:	2003      	movs	r0, #3
 800195a:	f000 f94f 	bl	8001bfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800195e:	2000      	movs	r0, #0
 8001960:	f000 f808 	bl	8001974 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001964:	f7ff fe0e 	bl	8001584 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40023c00 	.word	0x40023c00

08001974 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800197c:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <HAL_InitTick+0x54>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	4b12      	ldr	r3, [pc, #72]	; (80019cc <HAL_InitTick+0x58>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	4619      	mov	r1, r3
 8001986:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800198a:	fbb3 f3f1 	udiv	r3, r3, r1
 800198e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001992:	4618      	mov	r0, r3
 8001994:	f000 f967 	bl	8001c66 <HAL_SYSTICK_Config>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e00e      	b.n	80019c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2b0f      	cmp	r3, #15
 80019a6:	d80a      	bhi.n	80019be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019a8:	2200      	movs	r2, #0
 80019aa:	6879      	ldr	r1, [r7, #4]
 80019ac:	f04f 30ff 	mov.w	r0, #4294967295
 80019b0:	f000 f92f 	bl	8001c12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019b4:	4a06      	ldr	r2, [pc, #24]	; (80019d0 <HAL_InitTick+0x5c>)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019ba:	2300      	movs	r3, #0
 80019bc:	e000      	b.n	80019c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20000038 	.word	0x20000038
 80019cc:	20000040 	.word	0x20000040
 80019d0:	2000003c 	.word	0x2000003c

080019d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019d8:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <HAL_IncTick+0x20>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	461a      	mov	r2, r3
 80019de:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <HAL_IncTick+0x24>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4413      	add	r3, r2
 80019e4:	4a04      	ldr	r2, [pc, #16]	; (80019f8 <HAL_IncTick+0x24>)
 80019e6:	6013      	str	r3, [r2, #0]
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	20000040 	.word	0x20000040
 80019f8:	20000334 	.word	0x20000334

080019fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001a00:	4b03      	ldr	r3, [pc, #12]	; (8001a10 <HAL_GetTick+0x14>)
 8001a02:	681b      	ldr	r3, [r3, #0]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	20000334 	.word	0x20000334

08001a14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a1c:	f7ff ffee 	bl	80019fc <HAL_GetTick>
 8001a20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a2c:	d005      	beq.n	8001a3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a2e:	4b0a      	ldr	r3, [pc, #40]	; (8001a58 <HAL_Delay+0x44>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	461a      	mov	r2, r3
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	4413      	add	r3, r2
 8001a38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a3a:	bf00      	nop
 8001a3c:	f7ff ffde 	bl	80019fc <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d8f7      	bhi.n	8001a3c <HAL_Delay+0x28>
  {
  }
}
 8001a4c:	bf00      	nop
 8001a4e:	bf00      	nop
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20000040 	.word	0x20000040

08001a5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a6c:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a72:	68ba      	ldr	r2, [r7, #8]
 8001a74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a78:	4013      	ands	r3, r2
 8001a7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a8e:	4a04      	ldr	r2, [pc, #16]	; (8001aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	60d3      	str	r3, [r2, #12]
}
 8001a94:	bf00      	nop
 8001a96:	3714      	adds	r7, #20
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aa8:	4b04      	ldr	r3, [pc, #16]	; (8001abc <__NVIC_GetPriorityGrouping+0x18>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	0a1b      	lsrs	r3, r3, #8
 8001aae:	f003 0307 	and.w	r3, r3, #7
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	db0b      	blt.n	8001aea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
 8001ad4:	f003 021f 	and.w	r2, r3, #31
 8001ad8:	4907      	ldr	r1, [pc, #28]	; (8001af8 <__NVIC_EnableIRQ+0x38>)
 8001ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ade:	095b      	lsrs	r3, r3, #5
 8001ae0:	2001      	movs	r0, #1
 8001ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	e000e100 	.word	0xe000e100

08001afc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	6039      	str	r1, [r7, #0]
 8001b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	db0a      	blt.n	8001b26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	490c      	ldr	r1, [pc, #48]	; (8001b48 <__NVIC_SetPriority+0x4c>)
 8001b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1a:	0112      	lsls	r2, r2, #4
 8001b1c:	b2d2      	uxtb	r2, r2
 8001b1e:	440b      	add	r3, r1
 8001b20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b24:	e00a      	b.n	8001b3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	4908      	ldr	r1, [pc, #32]	; (8001b4c <__NVIC_SetPriority+0x50>)
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	f003 030f 	and.w	r3, r3, #15
 8001b32:	3b04      	subs	r3, #4
 8001b34:	0112      	lsls	r2, r2, #4
 8001b36:	b2d2      	uxtb	r2, r2
 8001b38:	440b      	add	r3, r1
 8001b3a:	761a      	strb	r2, [r3, #24]
}
 8001b3c:	bf00      	nop
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	e000e100 	.word	0xe000e100
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b089      	sub	sp, #36	; 0x24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	f1c3 0307 	rsb	r3, r3, #7
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	bf28      	it	cs
 8001b6e:	2304      	movcs	r3, #4
 8001b70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	3304      	adds	r3, #4
 8001b76:	2b06      	cmp	r3, #6
 8001b78:	d902      	bls.n	8001b80 <NVIC_EncodePriority+0x30>
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	3b03      	subs	r3, #3
 8001b7e:	e000      	b.n	8001b82 <NVIC_EncodePriority+0x32>
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b84:	f04f 32ff 	mov.w	r2, #4294967295
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	43da      	mvns	r2, r3
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	401a      	ands	r2, r3
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b98:	f04f 31ff 	mov.w	r1, #4294967295
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba2:	43d9      	mvns	r1, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba8:	4313      	orrs	r3, r2
         );
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3724      	adds	r7, #36	; 0x24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
	...

08001bb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bc8:	d301      	bcc.n	8001bce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e00f      	b.n	8001bee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bce:	4a0a      	ldr	r2, [pc, #40]	; (8001bf8 <SysTick_Config+0x40>)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bd6:	210f      	movs	r1, #15
 8001bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bdc:	f7ff ff8e 	bl	8001afc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001be0:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <SysTick_Config+0x40>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001be6:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <SysTick_Config+0x40>)
 8001be8:	2207      	movs	r2, #7
 8001bea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	e000e010 	.word	0xe000e010

08001bfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f7ff ff29 	bl	8001a5c <__NVIC_SetPriorityGrouping>
}
 8001c0a:	bf00      	nop
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b086      	sub	sp, #24
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	4603      	mov	r3, r0
 8001c1a:	60b9      	str	r1, [r7, #8]
 8001c1c:	607a      	str	r2, [r7, #4]
 8001c1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c24:	f7ff ff3e 	bl	8001aa4 <__NVIC_GetPriorityGrouping>
 8001c28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	68b9      	ldr	r1, [r7, #8]
 8001c2e:	6978      	ldr	r0, [r7, #20]
 8001c30:	f7ff ff8e 	bl	8001b50 <NVIC_EncodePriority>
 8001c34:	4602      	mov	r2, r0
 8001c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c3a:	4611      	mov	r1, r2
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff ff5d 	bl	8001afc <__NVIC_SetPriority>
}
 8001c42:	bf00      	nop
 8001c44:	3718      	adds	r7, #24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b082      	sub	sp, #8
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	4603      	mov	r3, r0
 8001c52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff ff31 	bl	8001ac0 <__NVIC_EnableIRQ>
}
 8001c5e:	bf00      	nop
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b082      	sub	sp, #8
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff ffa2 	bl	8001bb8 <SysTick_Config>
 8001c74:	4603      	mov	r3, r0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
	...

08001c80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c8c:	f7ff feb6 	bl	80019fc <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d101      	bne.n	8001c9c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e099      	b.n	8001dd0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 0201 	bic.w	r2, r2, #1
 8001cba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cbc:	e00f      	b.n	8001cde <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cbe:	f7ff fe9d 	bl	80019fc <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b05      	cmp	r3, #5
 8001cca:	d908      	bls.n	8001cde <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2220      	movs	r2, #32
 8001cd0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2203      	movs	r2, #3
 8001cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e078      	b.n	8001dd0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1e8      	bne.n	8001cbe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cf4:	697a      	ldr	r2, [r7, #20]
 8001cf6:	4b38      	ldr	r3, [pc, #224]	; (8001dd8 <HAL_DMA_Init+0x158>)
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685a      	ldr	r2, [r3, #4]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a1b      	ldr	r3, [r3, #32]
 8001d28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d34:	2b04      	cmp	r3, #4
 8001d36:	d107      	bne.n	8001d48 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d40:	4313      	orrs	r3, r2
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	f023 0307 	bic.w	r3, r3, #7
 8001d5e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d64:	697a      	ldr	r2, [r7, #20]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	d117      	bne.n	8001da2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d00e      	beq.n	8001da2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 facd 	bl	8002324 <DMA_CheckFifoParam>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d008      	beq.n	8001da2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2240      	movs	r2, #64	; 0x40
 8001d94:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e016      	b.n	8001dd0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	697a      	ldr	r2, [r7, #20]
 8001da8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 fa84 	bl	80022b8 <DMA_CalcBaseAndBitshift>
 8001db0:	4603      	mov	r3, r0
 8001db2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db8:	223f      	movs	r2, #63	; 0x3f
 8001dba:	409a      	lsls	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3718      	adds	r7, #24
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	f010803f 	.word	0xf010803f

08001ddc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e050      	b.n	8001e90 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d101      	bne.n	8001dfe <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	e048      	b.n	8001e90 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f022 0201 	bic.w	r2, r2, #1
 8001e0c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2200      	movs	r2, #0
 8001e24:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2200      	movs	r2, #0
 8001e34:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2221      	movs	r2, #33	; 0x21
 8001e3c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 fa3a 	bl	80022b8 <DMA_CalcBaseAndBitshift>
 8001e44:	4603      	mov	r3, r0
 8001e46:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e70:	223f      	movs	r2, #63	; 0x3f
 8001e72:	409a      	lsls	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
 8001ea4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d101      	bne.n	8001ebe <HAL_DMA_Start_IT+0x26>
 8001eba:	2302      	movs	r3, #2
 8001ebc:	e040      	b.n	8001f40 <HAL_DMA_Start_IT+0xa8>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d12f      	bne.n	8001f32 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2202      	movs	r2, #2
 8001ed6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2200      	movs	r2, #0
 8001ede:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	68b9      	ldr	r1, [r7, #8]
 8001ee6:	68f8      	ldr	r0, [r7, #12]
 8001ee8:	f000 f9b8 	bl	800225c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef0:	223f      	movs	r2, #63	; 0x3f
 8001ef2:	409a      	lsls	r2, r3
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f042 0216 	orr.w	r2, r2, #22
 8001f06:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d007      	beq.n	8001f20 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f042 0208 	orr.w	r2, r2, #8
 8001f1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f042 0201 	orr.w	r2, r2, #1
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	e005      	b.n	8001f3e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3718      	adds	r7, #24
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f54:	4b8e      	ldr	r3, [pc, #568]	; (8002190 <HAL_DMA_IRQHandler+0x248>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a8e      	ldr	r2, [pc, #568]	; (8002194 <HAL_DMA_IRQHandler+0x24c>)
 8001f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5e:	0a9b      	lsrs	r3, r3, #10
 8001f60:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f66:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f72:	2208      	movs	r2, #8
 8001f74:	409a      	lsls	r2, r3
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d01a      	beq.n	8001fb4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d013      	beq.n	8001fb4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f022 0204 	bic.w	r2, r2, #4
 8001f9a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa0:	2208      	movs	r2, #8
 8001fa2:	409a      	lsls	r2, r3
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fac:	f043 0201 	orr.w	r2, r3, #1
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb8:	2201      	movs	r2, #1
 8001fba:	409a      	lsls	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d012      	beq.n	8001fea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00b      	beq.n	8001fea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	409a      	lsls	r2, r3
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe2:	f043 0202 	orr.w	r2, r3, #2
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fee:	2204      	movs	r2, #4
 8001ff0:	409a      	lsls	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d012      	beq.n	8002020 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d00b      	beq.n	8002020 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200c:	2204      	movs	r2, #4
 800200e:	409a      	lsls	r2, r3
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002018:	f043 0204 	orr.w	r2, r3, #4
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002024:	2210      	movs	r2, #16
 8002026:	409a      	lsls	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4013      	ands	r3, r2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d043      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0308 	and.w	r3, r3, #8
 800203a:	2b00      	cmp	r3, #0
 800203c:	d03c      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002042:	2210      	movs	r2, #16
 8002044:	409a      	lsls	r2, r3
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d018      	beq.n	800208a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d108      	bne.n	8002078 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	2b00      	cmp	r3, #0
 800206c:	d024      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	4798      	blx	r3
 8002076:	e01f      	b.n	80020b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800207c:	2b00      	cmp	r3, #0
 800207e:	d01b      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	4798      	blx	r3
 8002088:	e016      	b.n	80020b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002094:	2b00      	cmp	r3, #0
 8002096:	d107      	bne.n	80020a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 0208 	bic.w	r2, r2, #8
 80020a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d003      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020bc:	2220      	movs	r2, #32
 80020be:	409a      	lsls	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	4013      	ands	r3, r2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f000 808f 	beq.w	80021e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0310 	and.w	r3, r3, #16
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f000 8087 	beq.w	80021e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020de:	2220      	movs	r2, #32
 80020e0:	409a      	lsls	r2, r3
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b05      	cmp	r3, #5
 80020f0:	d136      	bne.n	8002160 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 0216 	bic.w	r2, r2, #22
 8002100:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	695a      	ldr	r2, [r3, #20]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002110:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	2b00      	cmp	r3, #0
 8002118:	d103      	bne.n	8002122 <HAL_DMA_IRQHandler+0x1da>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800211e:	2b00      	cmp	r3, #0
 8002120:	d007      	beq.n	8002132 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f022 0208 	bic.w	r2, r2, #8
 8002130:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002136:	223f      	movs	r2, #63	; 0x3f
 8002138:	409a      	lsls	r2, r3
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2201      	movs	r2, #1
 8002142:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002152:	2b00      	cmp	r3, #0
 8002154:	d07e      	beq.n	8002254 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	4798      	blx	r3
        }
        return;
 800215e:	e079      	b.n	8002254 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d01d      	beq.n	80021aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d10d      	bne.n	8002198 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002180:	2b00      	cmp	r3, #0
 8002182:	d031      	beq.n	80021e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	4798      	blx	r3
 800218c:	e02c      	b.n	80021e8 <HAL_DMA_IRQHandler+0x2a0>
 800218e:	bf00      	nop
 8002190:	20000038 	.word	0x20000038
 8002194:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800219c:	2b00      	cmp	r3, #0
 800219e:	d023      	beq.n	80021e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	4798      	blx	r3
 80021a8:	e01e      	b.n	80021e8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d10f      	bne.n	80021d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f022 0210 	bic.w	r2, r2, #16
 80021c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d003      	beq.n	80021e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d032      	beq.n	8002256 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d022      	beq.n	8002242 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2205      	movs	r2, #5
 8002200:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f022 0201 	bic.w	r2, r2, #1
 8002212:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	3301      	adds	r3, #1
 8002218:	60bb      	str	r3, [r7, #8]
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	429a      	cmp	r2, r3
 800221e:	d307      	bcc.n	8002230 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1f2      	bne.n	8002214 <HAL_DMA_IRQHandler+0x2cc>
 800222e:	e000      	b.n	8002232 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002230:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2201      	movs	r2, #1
 8002236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002246:	2b00      	cmp	r3, #0
 8002248:	d005      	beq.n	8002256 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	4798      	blx	r3
 8002252:	e000      	b.n	8002256 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002254:	bf00      	nop
    }
  }
}
 8002256:	3718      	adds	r7, #24
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
 8002268:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002278:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	2b40      	cmp	r3, #64	; 0x40
 8002288:	d108      	bne.n	800229c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800229a:	e007      	b.n	80022ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68ba      	ldr	r2, [r7, #8]
 80022a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	60da      	str	r2, [r3, #12]
}
 80022ac:	bf00      	nop
 80022ae:	3714      	adds	r7, #20
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	3b10      	subs	r3, #16
 80022c8:	4a14      	ldr	r2, [pc, #80]	; (800231c <DMA_CalcBaseAndBitshift+0x64>)
 80022ca:	fba2 2303 	umull	r2, r3, r2, r3
 80022ce:	091b      	lsrs	r3, r3, #4
 80022d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022d2:	4a13      	ldr	r2, [pc, #76]	; (8002320 <DMA_CalcBaseAndBitshift+0x68>)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	4413      	add	r3, r2
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	461a      	mov	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2b03      	cmp	r3, #3
 80022e4:	d909      	bls.n	80022fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022ee:	f023 0303 	bic.w	r3, r3, #3
 80022f2:	1d1a      	adds	r2, r3, #4
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	659a      	str	r2, [r3, #88]	; 0x58
 80022f8:	e007      	b.n	800230a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002302:	f023 0303 	bic.w	r3, r3, #3
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800230e:	4618      	mov	r0, r3
 8002310:	3714      	adds	r7, #20
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	aaaaaaab 	.word	0xaaaaaaab
 8002320:	08005cb4 	.word	0x08005cb4

08002324 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800232c:	2300      	movs	r3, #0
 800232e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002334:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d11f      	bne.n	800237e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	2b03      	cmp	r3, #3
 8002342:	d856      	bhi.n	80023f2 <DMA_CheckFifoParam+0xce>
 8002344:	a201      	add	r2, pc, #4	; (adr r2, 800234c <DMA_CheckFifoParam+0x28>)
 8002346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800234a:	bf00      	nop
 800234c:	0800235d 	.word	0x0800235d
 8002350:	0800236f 	.word	0x0800236f
 8002354:	0800235d 	.word	0x0800235d
 8002358:	080023f3 	.word	0x080023f3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002360:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d046      	beq.n	80023f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800236c:	e043      	b.n	80023f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002372:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002376:	d140      	bne.n	80023fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800237c:	e03d      	b.n	80023fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002386:	d121      	bne.n	80023cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	2b03      	cmp	r3, #3
 800238c:	d837      	bhi.n	80023fe <DMA_CheckFifoParam+0xda>
 800238e:	a201      	add	r2, pc, #4	; (adr r2, 8002394 <DMA_CheckFifoParam+0x70>)
 8002390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002394:	080023a5 	.word	0x080023a5
 8002398:	080023ab 	.word	0x080023ab
 800239c:	080023a5 	.word	0x080023a5
 80023a0:	080023bd 	.word	0x080023bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	73fb      	strb	r3, [r7, #15]
      break;
 80023a8:	e030      	b.n	800240c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d025      	beq.n	8002402 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023ba:	e022      	b.n	8002402 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023c4:	d11f      	bne.n	8002406 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023ca:	e01c      	b.n	8002406 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d903      	bls.n	80023da <DMA_CheckFifoParam+0xb6>
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	2b03      	cmp	r3, #3
 80023d6:	d003      	beq.n	80023e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023d8:	e018      	b.n	800240c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	73fb      	strb	r3, [r7, #15]
      break;
 80023de:	e015      	b.n	800240c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00e      	beq.n	800240a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	73fb      	strb	r3, [r7, #15]
      break;
 80023f0:	e00b      	b.n	800240a <DMA_CheckFifoParam+0xe6>
      break;
 80023f2:	bf00      	nop
 80023f4:	e00a      	b.n	800240c <DMA_CheckFifoParam+0xe8>
      break;
 80023f6:	bf00      	nop
 80023f8:	e008      	b.n	800240c <DMA_CheckFifoParam+0xe8>
      break;
 80023fa:	bf00      	nop
 80023fc:	e006      	b.n	800240c <DMA_CheckFifoParam+0xe8>
      break;
 80023fe:	bf00      	nop
 8002400:	e004      	b.n	800240c <DMA_CheckFifoParam+0xe8>
      break;
 8002402:	bf00      	nop
 8002404:	e002      	b.n	800240c <DMA_CheckFifoParam+0xe8>
      break;   
 8002406:	bf00      	nop
 8002408:	e000      	b.n	800240c <DMA_CheckFifoParam+0xe8>
      break;
 800240a:	bf00      	nop
    }
  } 
  
  return status; 
 800240c:	7bfb      	ldrb	r3, [r7, #15]
}
 800240e:	4618      	mov	r0, r3
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop

0800241c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800241c:	b480      	push	{r7}
 800241e:	b089      	sub	sp, #36	; 0x24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002426:	2300      	movs	r3, #0
 8002428:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800242a:	2300      	movs	r3, #0
 800242c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800242e:	2300      	movs	r3, #0
 8002430:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002432:	2300      	movs	r3, #0
 8002434:	61fb      	str	r3, [r7, #28]
 8002436:	e159      	b.n	80026ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002438:	2201      	movs	r2, #1
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	4013      	ands	r3, r2
 800244a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	429a      	cmp	r2, r3
 8002452:	f040 8148 	bne.w	80026e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f003 0303 	and.w	r3, r3, #3
 800245e:	2b01      	cmp	r3, #1
 8002460:	d005      	beq.n	800246e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800246a:	2b02      	cmp	r3, #2
 800246c:	d130      	bne.n	80024d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	2203      	movs	r2, #3
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43db      	mvns	r3, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4013      	ands	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	68da      	ldr	r2, [r3, #12]
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4313      	orrs	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024a4:	2201      	movs	r2, #1
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	43db      	mvns	r3, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4013      	ands	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	091b      	lsrs	r3, r3, #4
 80024ba:	f003 0201 	and.w	r2, r3, #1
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f003 0303 	and.w	r3, r3, #3
 80024d8:	2b03      	cmp	r3, #3
 80024da:	d017      	beq.n	800250c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	2203      	movs	r2, #3
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	43db      	mvns	r3, r3
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4013      	ands	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4313      	orrs	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 0303 	and.w	r3, r3, #3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d123      	bne.n	8002560 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	08da      	lsrs	r2, r3, #3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3208      	adds	r2, #8
 8002520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002524:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	220f      	movs	r2, #15
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4013      	ands	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	691a      	ldr	r2, [r3, #16]
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4313      	orrs	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	08da      	lsrs	r2, r3, #3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	3208      	adds	r2, #8
 800255a:	69b9      	ldr	r1, [r7, #24]
 800255c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	2203      	movs	r2, #3
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4013      	ands	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 0203 	and.w	r2, r3, #3
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4313      	orrs	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 80a2 	beq.w	80026e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	4b57      	ldr	r3, [pc, #348]	; (8002704 <HAL_GPIO_Init+0x2e8>)
 80025a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025aa:	4a56      	ldr	r2, [pc, #344]	; (8002704 <HAL_GPIO_Init+0x2e8>)
 80025ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025b0:	6453      	str	r3, [r2, #68]	; 0x44
 80025b2:	4b54      	ldr	r3, [pc, #336]	; (8002704 <HAL_GPIO_Init+0x2e8>)
 80025b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025be:	4a52      	ldr	r2, [pc, #328]	; (8002708 <HAL_GPIO_Init+0x2ec>)
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	089b      	lsrs	r3, r3, #2
 80025c4:	3302      	adds	r3, #2
 80025c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	220f      	movs	r2, #15
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	43db      	mvns	r3, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4013      	ands	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a49      	ldr	r2, [pc, #292]	; (800270c <HAL_GPIO_Init+0x2f0>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d019      	beq.n	800261e <HAL_GPIO_Init+0x202>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a48      	ldr	r2, [pc, #288]	; (8002710 <HAL_GPIO_Init+0x2f4>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d013      	beq.n	800261a <HAL_GPIO_Init+0x1fe>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a47      	ldr	r2, [pc, #284]	; (8002714 <HAL_GPIO_Init+0x2f8>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d00d      	beq.n	8002616 <HAL_GPIO_Init+0x1fa>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a46      	ldr	r2, [pc, #280]	; (8002718 <HAL_GPIO_Init+0x2fc>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d007      	beq.n	8002612 <HAL_GPIO_Init+0x1f6>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a45      	ldr	r2, [pc, #276]	; (800271c <HAL_GPIO_Init+0x300>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d101      	bne.n	800260e <HAL_GPIO_Init+0x1f2>
 800260a:	2304      	movs	r3, #4
 800260c:	e008      	b.n	8002620 <HAL_GPIO_Init+0x204>
 800260e:	2307      	movs	r3, #7
 8002610:	e006      	b.n	8002620 <HAL_GPIO_Init+0x204>
 8002612:	2303      	movs	r3, #3
 8002614:	e004      	b.n	8002620 <HAL_GPIO_Init+0x204>
 8002616:	2302      	movs	r3, #2
 8002618:	e002      	b.n	8002620 <HAL_GPIO_Init+0x204>
 800261a:	2301      	movs	r3, #1
 800261c:	e000      	b.n	8002620 <HAL_GPIO_Init+0x204>
 800261e:	2300      	movs	r3, #0
 8002620:	69fa      	ldr	r2, [r7, #28]
 8002622:	f002 0203 	and.w	r2, r2, #3
 8002626:	0092      	lsls	r2, r2, #2
 8002628:	4093      	lsls	r3, r2
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4313      	orrs	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002630:	4935      	ldr	r1, [pc, #212]	; (8002708 <HAL_GPIO_Init+0x2ec>)
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	089b      	lsrs	r3, r3, #2
 8002636:	3302      	adds	r3, #2
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800263e:	4b38      	ldr	r3, [pc, #224]	; (8002720 <HAL_GPIO_Init+0x304>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	43db      	mvns	r3, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4013      	ands	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d003      	beq.n	8002662 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	4313      	orrs	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002662:	4a2f      	ldr	r2, [pc, #188]	; (8002720 <HAL_GPIO_Init+0x304>)
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002668:	4b2d      	ldr	r3, [pc, #180]	; (8002720 <HAL_GPIO_Init+0x304>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	43db      	mvns	r3, r3
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4013      	ands	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	4313      	orrs	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800268c:	4a24      	ldr	r2, [pc, #144]	; (8002720 <HAL_GPIO_Init+0x304>)
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002692:	4b23      	ldr	r3, [pc, #140]	; (8002720 <HAL_GPIO_Init+0x304>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	43db      	mvns	r3, r3
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	4013      	ands	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026b6:	4a1a      	ldr	r2, [pc, #104]	; (8002720 <HAL_GPIO_Init+0x304>)
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026bc:	4b18      	ldr	r3, [pc, #96]	; (8002720 <HAL_GPIO_Init+0x304>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	43db      	mvns	r3, r3
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4013      	ands	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d003      	beq.n	80026e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	4313      	orrs	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026e0:	4a0f      	ldr	r2, [pc, #60]	; (8002720 <HAL_GPIO_Init+0x304>)
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	3301      	adds	r3, #1
 80026ea:	61fb      	str	r3, [r7, #28]
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	2b0f      	cmp	r3, #15
 80026f0:	f67f aea2 	bls.w	8002438 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026f4:	bf00      	nop
 80026f6:	bf00      	nop
 80026f8:	3724      	adds	r7, #36	; 0x24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	40023800 	.word	0x40023800
 8002708:	40013800 	.word	0x40013800
 800270c:	40020000 	.word	0x40020000
 8002710:	40020400 	.word	0x40020400
 8002714:	40020800 	.word	0x40020800
 8002718:	40020c00 	.word	0x40020c00
 800271c:	40021000 	.word	0x40021000
 8002720:	40013c00 	.word	0x40013c00

08002724 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002724:	b480      	push	{r7}
 8002726:	b087      	sub	sp, #28
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800272e:	2300      	movs	r3, #0
 8002730:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002732:	2300      	movs	r3, #0
 8002734:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002736:	2300      	movs	r3, #0
 8002738:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800273a:	2300      	movs	r3, #0
 800273c:	617b      	str	r3, [r7, #20]
 800273e:	e0bb      	b.n	80028b8 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002740:	2201      	movs	r2, #1
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	4013      	ands	r3, r2
 8002750:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	429a      	cmp	r2, r3
 8002758:	f040 80ab 	bne.w	80028b2 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800275c:	4a5c      	ldr	r2, [pc, #368]	; (80028d0 <HAL_GPIO_DeInit+0x1ac>)
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	089b      	lsrs	r3, r3, #2
 8002762:	3302      	adds	r3, #2
 8002764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002768:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	f003 0303 	and.w	r3, r3, #3
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	220f      	movs	r2, #15
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	68ba      	ldr	r2, [r7, #8]
 800277a:	4013      	ands	r3, r2
 800277c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a54      	ldr	r2, [pc, #336]	; (80028d4 <HAL_GPIO_DeInit+0x1b0>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d019      	beq.n	80027ba <HAL_GPIO_DeInit+0x96>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a53      	ldr	r2, [pc, #332]	; (80028d8 <HAL_GPIO_DeInit+0x1b4>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d013      	beq.n	80027b6 <HAL_GPIO_DeInit+0x92>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a52      	ldr	r2, [pc, #328]	; (80028dc <HAL_GPIO_DeInit+0x1b8>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d00d      	beq.n	80027b2 <HAL_GPIO_DeInit+0x8e>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a51      	ldr	r2, [pc, #324]	; (80028e0 <HAL_GPIO_DeInit+0x1bc>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d007      	beq.n	80027ae <HAL_GPIO_DeInit+0x8a>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a50      	ldr	r2, [pc, #320]	; (80028e4 <HAL_GPIO_DeInit+0x1c0>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d101      	bne.n	80027aa <HAL_GPIO_DeInit+0x86>
 80027a6:	2304      	movs	r3, #4
 80027a8:	e008      	b.n	80027bc <HAL_GPIO_DeInit+0x98>
 80027aa:	2307      	movs	r3, #7
 80027ac:	e006      	b.n	80027bc <HAL_GPIO_DeInit+0x98>
 80027ae:	2303      	movs	r3, #3
 80027b0:	e004      	b.n	80027bc <HAL_GPIO_DeInit+0x98>
 80027b2:	2302      	movs	r3, #2
 80027b4:	e002      	b.n	80027bc <HAL_GPIO_DeInit+0x98>
 80027b6:	2301      	movs	r3, #1
 80027b8:	e000      	b.n	80027bc <HAL_GPIO_DeInit+0x98>
 80027ba:	2300      	movs	r3, #0
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	f002 0203 	and.w	r2, r2, #3
 80027c2:	0092      	lsls	r2, r2, #2
 80027c4:	4093      	lsls	r3, r2
 80027c6:	68ba      	ldr	r2, [r7, #8]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d132      	bne.n	8002832 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80027cc:	4b46      	ldr	r3, [pc, #280]	; (80028e8 <HAL_GPIO_DeInit+0x1c4>)
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	43db      	mvns	r3, r3
 80027d4:	4944      	ldr	r1, [pc, #272]	; (80028e8 <HAL_GPIO_DeInit+0x1c4>)
 80027d6:	4013      	ands	r3, r2
 80027d8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80027da:	4b43      	ldr	r3, [pc, #268]	; (80028e8 <HAL_GPIO_DeInit+0x1c4>)
 80027dc:	685a      	ldr	r2, [r3, #4]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	43db      	mvns	r3, r3
 80027e2:	4941      	ldr	r1, [pc, #260]	; (80028e8 <HAL_GPIO_DeInit+0x1c4>)
 80027e4:	4013      	ands	r3, r2
 80027e6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80027e8:	4b3f      	ldr	r3, [pc, #252]	; (80028e8 <HAL_GPIO_DeInit+0x1c4>)
 80027ea:	68da      	ldr	r2, [r3, #12]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	43db      	mvns	r3, r3
 80027f0:	493d      	ldr	r1, [pc, #244]	; (80028e8 <HAL_GPIO_DeInit+0x1c4>)
 80027f2:	4013      	ands	r3, r2
 80027f4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80027f6:	4b3c      	ldr	r3, [pc, #240]	; (80028e8 <HAL_GPIO_DeInit+0x1c4>)
 80027f8:	689a      	ldr	r2, [r3, #8]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	43db      	mvns	r3, r3
 80027fe:	493a      	ldr	r1, [pc, #232]	; (80028e8 <HAL_GPIO_DeInit+0x1c4>)
 8002800:	4013      	ands	r3, r2
 8002802:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	f003 0303 	and.w	r3, r3, #3
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	220f      	movs	r2, #15
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002814:	4a2e      	ldr	r2, [pc, #184]	; (80028d0 <HAL_GPIO_DeInit+0x1ac>)
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	089b      	lsrs	r3, r3, #2
 800281a:	3302      	adds	r3, #2
 800281c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	43da      	mvns	r2, r3
 8002824:	482a      	ldr	r0, [pc, #168]	; (80028d0 <HAL_GPIO_DeInit+0x1ac>)
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	089b      	lsrs	r3, r3, #2
 800282a:	400a      	ands	r2, r1
 800282c:	3302      	adds	r3, #2
 800282e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	2103      	movs	r1, #3
 800283c:	fa01 f303 	lsl.w	r3, r1, r3
 8002840:	43db      	mvns	r3, r3
 8002842:	401a      	ands	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	08da      	lsrs	r2, r3, #3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	3208      	adds	r2, #8
 8002850:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	220f      	movs	r2, #15
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	43db      	mvns	r3, r3
 8002864:	697a      	ldr	r2, [r7, #20]
 8002866:	08d2      	lsrs	r2, r2, #3
 8002868:	4019      	ands	r1, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	3208      	adds	r2, #8
 800286e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	68da      	ldr	r2, [r3, #12]
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	2103      	movs	r1, #3
 800287c:	fa01 f303 	lsl.w	r3, r1, r3
 8002880:	43db      	mvns	r3, r3
 8002882:	401a      	ands	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	2101      	movs	r1, #1
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	fa01 f303 	lsl.w	r3, r1, r3
 8002894:	43db      	mvns	r3, r3
 8002896:	401a      	ands	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689a      	ldr	r2, [r3, #8]
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	2103      	movs	r1, #3
 80028a6:	fa01 f303 	lsl.w	r3, r1, r3
 80028aa:	43db      	mvns	r3, r3
 80028ac:	401a      	ands	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	3301      	adds	r3, #1
 80028b6:	617b      	str	r3, [r7, #20]
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	2b0f      	cmp	r3, #15
 80028bc:	f67f af40 	bls.w	8002740 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80028c0:	bf00      	nop
 80028c2:	bf00      	nop
 80028c4:	371c      	adds	r7, #28
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	40013800 	.word	0x40013800
 80028d4:	40020000 	.word	0x40020000
 80028d8:	40020400 	.word	0x40020400
 80028dc:	40020800 	.word	0x40020800
 80028e0:	40020c00 	.word	0x40020c00
 80028e4:	40021000 	.word	0x40021000
 80028e8:	40013c00 	.word	0x40013c00

080028ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	460b      	mov	r3, r1
 80028f6:	807b      	strh	r3, [r7, #2]
 80028f8:	4613      	mov	r3, r2
 80028fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028fc:	787b      	ldrb	r3, [r7, #1]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002902:	887a      	ldrh	r2, [r7, #2]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002908:	e003      	b.n	8002912 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800290a:	887b      	ldrh	r3, [r7, #2]
 800290c:	041a      	lsls	r2, r3, #16
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	619a      	str	r2, [r3, #24]
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
	...

08002920 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e12b      	b.n	8002b8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d106      	bne.n	800294c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7fe fe44 	bl	80015d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2224      	movs	r2, #36	; 0x24
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f022 0201 	bic.w	r2, r2, #1
 8002962:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002972:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002982:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002984:	f002 fa40 	bl	8004e08 <HAL_RCC_GetPCLK1Freq>
 8002988:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	4a81      	ldr	r2, [pc, #516]	; (8002b94 <HAL_I2C_Init+0x274>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d807      	bhi.n	80029a4 <HAL_I2C_Init+0x84>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	4a80      	ldr	r2, [pc, #512]	; (8002b98 <HAL_I2C_Init+0x278>)
 8002998:	4293      	cmp	r3, r2
 800299a:	bf94      	ite	ls
 800299c:	2301      	movls	r3, #1
 800299e:	2300      	movhi	r3, #0
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	e006      	b.n	80029b2 <HAL_I2C_Init+0x92>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4a7d      	ldr	r2, [pc, #500]	; (8002b9c <HAL_I2C_Init+0x27c>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	bf94      	ite	ls
 80029ac:	2301      	movls	r3, #1
 80029ae:	2300      	movhi	r3, #0
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e0e7      	b.n	8002b8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	4a78      	ldr	r2, [pc, #480]	; (8002ba0 <HAL_I2C_Init+0x280>)
 80029be:	fba2 2303 	umull	r2, r3, r2, r3
 80029c2:	0c9b      	lsrs	r3, r3, #18
 80029c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68ba      	ldr	r2, [r7, #8]
 80029d6:	430a      	orrs	r2, r1
 80029d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	4a6a      	ldr	r2, [pc, #424]	; (8002b94 <HAL_I2C_Init+0x274>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d802      	bhi.n	80029f4 <HAL_I2C_Init+0xd4>
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	3301      	adds	r3, #1
 80029f2:	e009      	b.n	8002a08 <HAL_I2C_Init+0xe8>
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029fa:	fb02 f303 	mul.w	r3, r2, r3
 80029fe:	4a69      	ldr	r2, [pc, #420]	; (8002ba4 <HAL_I2C_Init+0x284>)
 8002a00:	fba2 2303 	umull	r2, r3, r2, r3
 8002a04:	099b      	lsrs	r3, r3, #6
 8002a06:	3301      	adds	r3, #1
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	6812      	ldr	r2, [r2, #0]
 8002a0c:	430b      	orrs	r3, r1
 8002a0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	69db      	ldr	r3, [r3, #28]
 8002a16:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	495c      	ldr	r1, [pc, #368]	; (8002b94 <HAL_I2C_Init+0x274>)
 8002a24:	428b      	cmp	r3, r1
 8002a26:	d819      	bhi.n	8002a5c <HAL_I2C_Init+0x13c>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	1e59      	subs	r1, r3, #1
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a36:	1c59      	adds	r1, r3, #1
 8002a38:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a3c:	400b      	ands	r3, r1
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00a      	beq.n	8002a58 <HAL_I2C_Init+0x138>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	1e59      	subs	r1, r3, #1
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a50:	3301      	adds	r3, #1
 8002a52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a56:	e051      	b.n	8002afc <HAL_I2C_Init+0x1dc>
 8002a58:	2304      	movs	r3, #4
 8002a5a:	e04f      	b.n	8002afc <HAL_I2C_Init+0x1dc>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d111      	bne.n	8002a88 <HAL_I2C_Init+0x168>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	1e58      	subs	r0, r3, #1
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6859      	ldr	r1, [r3, #4]
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	440b      	add	r3, r1
 8002a72:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a76:	3301      	adds	r3, #1
 8002a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	bf0c      	ite	eq
 8002a80:	2301      	moveq	r3, #1
 8002a82:	2300      	movne	r3, #0
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	e012      	b.n	8002aae <HAL_I2C_Init+0x18e>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	1e58      	subs	r0, r3, #1
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6859      	ldr	r1, [r3, #4]
 8002a90:	460b      	mov	r3, r1
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	440b      	add	r3, r1
 8002a96:	0099      	lsls	r1, r3, #2
 8002a98:	440b      	add	r3, r1
 8002a9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	bf0c      	ite	eq
 8002aa8:	2301      	moveq	r3, #1
 8002aaa:	2300      	movne	r3, #0
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <HAL_I2C_Init+0x196>
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e022      	b.n	8002afc <HAL_I2C_Init+0x1dc>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10e      	bne.n	8002adc <HAL_I2C_Init+0x1bc>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	1e58      	subs	r0, r3, #1
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6859      	ldr	r1, [r3, #4]
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	440b      	add	r3, r1
 8002acc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ad6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ada:	e00f      	b.n	8002afc <HAL_I2C_Init+0x1dc>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	1e58      	subs	r0, r3, #1
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6859      	ldr	r1, [r3, #4]
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	440b      	add	r3, r1
 8002aea:	0099      	lsls	r1, r3, #2
 8002aec:	440b      	add	r3, r1
 8002aee:	fbb0 f3f3 	udiv	r3, r0, r3
 8002af2:	3301      	adds	r3, #1
 8002af4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002af8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002afc:	6879      	ldr	r1, [r7, #4]
 8002afe:	6809      	ldr	r1, [r1, #0]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	69da      	ldr	r2, [r3, #28]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	431a      	orrs	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	6911      	ldr	r1, [r2, #16]
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	68d2      	ldr	r2, [r2, #12]
 8002b36:	4311      	orrs	r1, r2
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	6812      	ldr	r2, [r2, #0]
 8002b3c:	430b      	orrs	r3, r1
 8002b3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	695a      	ldr	r2, [r3, #20]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f042 0201 	orr.w	r2, r2, #1
 8002b6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2220      	movs	r2, #32
 8002b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	000186a0 	.word	0x000186a0
 8002b98:	001e847f 	.word	0x001e847f
 8002b9c:	003d08ff 	.word	0x003d08ff
 8002ba0:	431bde83 	.word	0x431bde83
 8002ba4:	10624dd3 	.word	0x10624dd3

08002ba8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e021      	b.n	8002bfe <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2224      	movs	r2, #36	; 0x24
 8002bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 0201 	bic.w	r2, r2, #1
 8002bd0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f7fe fd46 	bl	8001664 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
	...

08002c08 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b088      	sub	sp, #32
 8002c0c:	af02      	add	r7, sp, #8
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	4608      	mov	r0, r1
 8002c12:	4611      	mov	r1, r2
 8002c14:	461a      	mov	r2, r3
 8002c16:	4603      	mov	r3, r0
 8002c18:	817b      	strh	r3, [r7, #10]
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	813b      	strh	r3, [r7, #8]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c22:	f7fe feeb 	bl	80019fc <HAL_GetTick>
 8002c26:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	2b20      	cmp	r3, #32
 8002c32:	f040 80d9 	bne.w	8002de8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	2319      	movs	r3, #25
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	496d      	ldr	r1, [pc, #436]	; (8002df4 <HAL_I2C_Mem_Write+0x1ec>)
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f000 fc99 	bl	8003578 <I2C_WaitOnFlagUntilTimeout>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	e0cc      	b.n	8002dea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d101      	bne.n	8002c5e <HAL_I2C_Mem_Write+0x56>
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	e0c5      	b.n	8002dea <HAL_I2C_Mem_Write+0x1e2>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d007      	beq.n	8002c84 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f042 0201 	orr.w	r2, r2, #1
 8002c82:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c92:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2221      	movs	r2, #33	; 0x21
 8002c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2240      	movs	r2, #64	; 0x40
 8002ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6a3a      	ldr	r2, [r7, #32]
 8002cae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002cb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	4a4d      	ldr	r2, [pc, #308]	; (8002df8 <HAL_I2C_Mem_Write+0x1f0>)
 8002cc4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cc6:	88f8      	ldrh	r0, [r7, #6]
 8002cc8:	893a      	ldrh	r2, [r7, #8]
 8002cca:	8979      	ldrh	r1, [r7, #10]
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	9301      	str	r3, [sp, #4]
 8002cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f000 fad0 	bl	800327c <I2C_RequestMemoryWrite>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d052      	beq.n	8002d88 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e081      	b.n	8002dea <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ce6:	697a      	ldr	r2, [r7, #20]
 8002ce8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f000 fd5e 	bl	80037ac <I2C_WaitOnTXEFlagUntilTimeout>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00d      	beq.n	8002d12 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	d107      	bne.n	8002d0e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d0c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e06b      	b.n	8002dea <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d16:	781a      	ldrb	r2, [r3, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d22:	1c5a      	adds	r2, r3, #1
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	f003 0304 	and.w	r3, r3, #4
 8002d4c:	2b04      	cmp	r3, #4
 8002d4e:	d11b      	bne.n	8002d88 <HAL_I2C_Mem_Write+0x180>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d017      	beq.n	8002d88 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5c:	781a      	ldrb	r2, [r3, #0]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d68:	1c5a      	adds	r2, r3, #1
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d72:	3b01      	subs	r3, #1
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	3b01      	subs	r3, #1
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1aa      	bne.n	8002ce6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f000 fd51 	bl	800383c <I2C_WaitOnBTFFlagUntilTimeout>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00d      	beq.n	8002dbc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da4:	2b04      	cmp	r3, #4
 8002da6:	d107      	bne.n	8002db8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002db6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e016      	b.n	8002dea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002de4:	2300      	movs	r3, #0
 8002de6:	e000      	b.n	8002dea <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002de8:	2302      	movs	r3, #2
  }
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3718      	adds	r7, #24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	00100002 	.word	0x00100002
 8002df8:	ffff0000 	.word	0xffff0000

08002dfc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b08c      	sub	sp, #48	; 0x30
 8002e00:	af02      	add	r7, sp, #8
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	4608      	mov	r0, r1
 8002e06:	4611      	mov	r1, r2
 8002e08:	461a      	mov	r2, r3
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	817b      	strh	r3, [r7, #10]
 8002e0e:	460b      	mov	r3, r1
 8002e10:	813b      	strh	r3, [r7, #8]
 8002e12:	4613      	mov	r3, r2
 8002e14:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e16:	f7fe fdf1 	bl	80019fc <HAL_GetTick>
 8002e1a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b20      	cmp	r3, #32
 8002e26:	f040 8214 	bne.w	8003252 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	9300      	str	r3, [sp, #0]
 8002e2e:	2319      	movs	r3, #25
 8002e30:	2201      	movs	r2, #1
 8002e32:	497b      	ldr	r1, [pc, #492]	; (8003020 <HAL_I2C_Mem_Read+0x224>)
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f000 fb9f 	bl	8003578 <I2C_WaitOnFlagUntilTimeout>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002e40:	2302      	movs	r3, #2
 8002e42:	e207      	b.n	8003254 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d101      	bne.n	8002e52 <HAL_I2C_Mem_Read+0x56>
 8002e4e:	2302      	movs	r3, #2
 8002e50:	e200      	b.n	8003254 <HAL_I2C_Mem_Read+0x458>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d007      	beq.n	8002e78 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f042 0201 	orr.w	r2, r2, #1
 8002e76:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e86:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2222      	movs	r2, #34	; 0x22
 8002e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2240      	movs	r2, #64	; 0x40
 8002e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ea2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002ea8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	4a5b      	ldr	r2, [pc, #364]	; (8003024 <HAL_I2C_Mem_Read+0x228>)
 8002eb8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002eba:	88f8      	ldrh	r0, [r7, #6]
 8002ebc:	893a      	ldrh	r2, [r7, #8]
 8002ebe:	8979      	ldrh	r1, [r7, #10]
 8002ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec2:	9301      	str	r3, [sp, #4]
 8002ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	4603      	mov	r3, r0
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f000 fa6c 	bl	80033a8 <I2C_RequestMemoryRead>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e1bc      	b.n	8003254 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d113      	bne.n	8002f0a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	623b      	str	r3, [r7, #32]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	623b      	str	r3, [r7, #32]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	623b      	str	r3, [r7, #32]
 8002ef6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	e190      	b.n	800322c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d11b      	bne.n	8002f4a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f22:	2300      	movs	r3, #0
 8002f24:	61fb      	str	r3, [r7, #28]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	61fb      	str	r3, [r7, #28]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	61fb      	str	r3, [r7, #28]
 8002f36:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	e170      	b.n	800322c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d11b      	bne.n	8002f8a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f60:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f72:	2300      	movs	r3, #0
 8002f74:	61bb      	str	r3, [r7, #24]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	61bb      	str	r3, [r7, #24]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	61bb      	str	r3, [r7, #24]
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	e150      	b.n	800322c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	617b      	str	r3, [r7, #20]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	617b      	str	r3, [r7, #20]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	617b      	str	r3, [r7, #20]
 8002f9e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002fa0:	e144      	b.n	800322c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa6:	2b03      	cmp	r3, #3
 8002fa8:	f200 80f1 	bhi.w	800318e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d123      	bne.n	8002ffc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fb6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f000 fc87 	bl	80038cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e145      	b.n	8003254 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	691a      	ldr	r2, [r3, #16]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd2:	b2d2      	uxtb	r2, r2
 8002fd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fda:	1c5a      	adds	r2, r3, #1
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ffa:	e117      	b.n	800322c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003000:	2b02      	cmp	r3, #2
 8003002:	d14e      	bne.n	80030a2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800300a:	2200      	movs	r2, #0
 800300c:	4906      	ldr	r1, [pc, #24]	; (8003028 <HAL_I2C_Mem_Read+0x22c>)
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f000 fab2 	bl	8003578 <I2C_WaitOnFlagUntilTimeout>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d008      	beq.n	800302c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e11a      	b.n	8003254 <HAL_I2C_Mem_Read+0x458>
 800301e:	bf00      	nop
 8003020:	00100002 	.word	0x00100002
 8003024:	ffff0000 	.word	0xffff0000
 8003028:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800303a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	691a      	ldr	r2, [r3, #16]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003046:	b2d2      	uxtb	r2, r2
 8003048:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304e:	1c5a      	adds	r2, r3, #1
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003058:	3b01      	subs	r3, #1
 800305a:	b29a      	uxth	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003064:	b29b      	uxth	r3, r3
 8003066:	3b01      	subs	r3, #1
 8003068:	b29a      	uxth	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	691a      	ldr	r2, [r3, #16]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	b2d2      	uxtb	r2, r2
 800307a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003080:	1c5a      	adds	r2, r3, #1
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800308a:	3b01      	subs	r3, #1
 800308c:	b29a      	uxth	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003096:	b29b      	uxth	r3, r3
 8003098:	3b01      	subs	r3, #1
 800309a:	b29a      	uxth	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030a0:	e0c4      	b.n	800322c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a4:	9300      	str	r3, [sp, #0]
 80030a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a8:	2200      	movs	r2, #0
 80030aa:	496c      	ldr	r1, [pc, #432]	; (800325c <HAL_I2C_Mem_Read+0x460>)
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f000 fa63 	bl	8003578 <I2C_WaitOnFlagUntilTimeout>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e0cb      	b.n	8003254 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	691a      	ldr	r2, [r3, #16]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d6:	b2d2      	uxtb	r2, r2
 80030d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030de:	1c5a      	adds	r2, r3, #1
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e8:	3b01      	subs	r3, #1
 80030ea:	b29a      	uxth	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	3b01      	subs	r3, #1
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	9300      	str	r3, [sp, #0]
 8003102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003104:	2200      	movs	r2, #0
 8003106:	4955      	ldr	r1, [pc, #340]	; (800325c <HAL_I2C_Mem_Read+0x460>)
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f000 fa35 	bl	8003578 <I2C_WaitOnFlagUntilTimeout>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e09d      	b.n	8003254 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003126:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	691a      	ldr	r2, [r3, #16]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003132:	b2d2      	uxtb	r2, r2
 8003134:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313a:	1c5a      	adds	r2, r3, #1
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003144:	3b01      	subs	r3, #1
 8003146:	b29a      	uxth	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003150:	b29b      	uxth	r3, r3
 8003152:	3b01      	subs	r3, #1
 8003154:	b29a      	uxth	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	691a      	ldr	r2, [r3, #16]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003164:	b2d2      	uxtb	r2, r2
 8003166:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	1c5a      	adds	r2, r3, #1
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003176:	3b01      	subs	r3, #1
 8003178:	b29a      	uxth	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003182:	b29b      	uxth	r3, r3
 8003184:	3b01      	subs	r3, #1
 8003186:	b29a      	uxth	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800318c:	e04e      	b.n	800322c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800318e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003190:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f000 fb9a 	bl	80038cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e058      	b.n	8003254 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	691a      	ldr	r2, [r3, #16]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ac:	b2d2      	uxtb	r2, r2
 80031ae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b4:	1c5a      	adds	r2, r3, #1
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031be:	3b01      	subs	r3, #1
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	3b01      	subs	r3, #1
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	f003 0304 	and.w	r3, r3, #4
 80031de:	2b04      	cmp	r3, #4
 80031e0:	d124      	bne.n	800322c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e6:	2b03      	cmp	r3, #3
 80031e8:	d107      	bne.n	80031fa <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031f8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	691a      	ldr	r2, [r3, #16]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003204:	b2d2      	uxtb	r2, r2
 8003206:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320c:	1c5a      	adds	r2, r3, #1
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003216:	3b01      	subs	r3, #1
 8003218:	b29a      	uxth	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003222:	b29b      	uxth	r3, r3
 8003224:	3b01      	subs	r3, #1
 8003226:	b29a      	uxth	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003230:	2b00      	cmp	r3, #0
 8003232:	f47f aeb6 	bne.w	8002fa2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2220      	movs	r2, #32
 800323a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800324e:	2300      	movs	r3, #0
 8003250:	e000      	b.n	8003254 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003252:	2302      	movs	r3, #2
  }
}
 8003254:	4618      	mov	r0, r3
 8003256:	3728      	adds	r7, #40	; 0x28
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	00010004 	.word	0x00010004

08003260 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800326e:	b2db      	uxtb	r3, r3
}
 8003270:	4618      	mov	r0, r3
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b088      	sub	sp, #32
 8003280:	af02      	add	r7, sp, #8
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	4608      	mov	r0, r1
 8003286:	4611      	mov	r1, r2
 8003288:	461a      	mov	r2, r3
 800328a:	4603      	mov	r3, r0
 800328c:	817b      	strh	r3, [r7, #10]
 800328e:	460b      	mov	r3, r1
 8003290:	813b      	strh	r3, [r7, #8]
 8003292:	4613      	mov	r3, r2
 8003294:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a8:	9300      	str	r3, [sp, #0]
 80032aa:	6a3b      	ldr	r3, [r7, #32]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f000 f960 	bl	8003578 <I2C_WaitOnFlagUntilTimeout>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00d      	beq.n	80032da <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032cc:	d103      	bne.n	80032d6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e05f      	b.n	800339a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032da:	897b      	ldrh	r3, [r7, #10]
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	461a      	mov	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80032e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ec:	6a3a      	ldr	r2, [r7, #32]
 80032ee:	492d      	ldr	r1, [pc, #180]	; (80033a4 <I2C_RequestMemoryWrite+0x128>)
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	f000 f9bb 	bl	800366c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e04c      	b.n	800339a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003300:	2300      	movs	r3, #0
 8003302:	617b      	str	r3, [r7, #20]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	617b      	str	r3, [r7, #20]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	617b      	str	r3, [r7, #20]
 8003314:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003318:	6a39      	ldr	r1, [r7, #32]
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f000 fa46 	bl	80037ac <I2C_WaitOnTXEFlagUntilTimeout>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00d      	beq.n	8003342 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	2b04      	cmp	r3, #4
 800332c:	d107      	bne.n	800333e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800333c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e02b      	b.n	800339a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003342:	88fb      	ldrh	r3, [r7, #6]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d105      	bne.n	8003354 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003348:	893b      	ldrh	r3, [r7, #8]
 800334a:	b2da      	uxtb	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	611a      	str	r2, [r3, #16]
 8003352:	e021      	b.n	8003398 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003354:	893b      	ldrh	r3, [r7, #8]
 8003356:	0a1b      	lsrs	r3, r3, #8
 8003358:	b29b      	uxth	r3, r3
 800335a:	b2da      	uxtb	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003364:	6a39      	ldr	r1, [r7, #32]
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f000 fa20 	bl	80037ac <I2C_WaitOnTXEFlagUntilTimeout>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00d      	beq.n	800338e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	2b04      	cmp	r3, #4
 8003378:	d107      	bne.n	800338a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003388:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e005      	b.n	800339a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800338e:	893b      	ldrh	r3, [r7, #8]
 8003390:	b2da      	uxtb	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3718      	adds	r7, #24
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	00010002 	.word	0x00010002

080033a8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b088      	sub	sp, #32
 80033ac:	af02      	add	r7, sp, #8
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	4608      	mov	r0, r1
 80033b2:	4611      	mov	r1, r2
 80033b4:	461a      	mov	r2, r3
 80033b6:	4603      	mov	r3, r0
 80033b8:	817b      	strh	r3, [r7, #10]
 80033ba:	460b      	mov	r3, r1
 80033bc:	813b      	strh	r3, [r7, #8]
 80033be:	4613      	mov	r3, r2
 80033c0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033d0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	6a3b      	ldr	r3, [r7, #32]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	f000 f8c2 	bl	8003578 <I2C_WaitOnFlagUntilTimeout>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00d      	beq.n	8003416 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003404:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003408:	d103      	bne.n	8003412 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003410:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e0aa      	b.n	800356c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003416:	897b      	ldrh	r3, [r7, #10]
 8003418:	b2db      	uxtb	r3, r3
 800341a:	461a      	mov	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003424:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003428:	6a3a      	ldr	r2, [r7, #32]
 800342a:	4952      	ldr	r1, [pc, #328]	; (8003574 <I2C_RequestMemoryRead+0x1cc>)
 800342c:	68f8      	ldr	r0, [r7, #12]
 800342e:	f000 f91d 	bl	800366c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d001      	beq.n	800343c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e097      	b.n	800356c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800343c:	2300      	movs	r3, #0
 800343e:	617b      	str	r3, [r7, #20]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	617b      	str	r3, [r7, #20]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	617b      	str	r3, [r7, #20]
 8003450:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003454:	6a39      	ldr	r1, [r7, #32]
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f000 f9a8 	bl	80037ac <I2C_WaitOnTXEFlagUntilTimeout>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00d      	beq.n	800347e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	2b04      	cmp	r3, #4
 8003468:	d107      	bne.n	800347a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003478:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e076      	b.n	800356c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800347e:	88fb      	ldrh	r3, [r7, #6]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d105      	bne.n	8003490 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003484:	893b      	ldrh	r3, [r7, #8]
 8003486:	b2da      	uxtb	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	611a      	str	r2, [r3, #16]
 800348e:	e021      	b.n	80034d4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003490:	893b      	ldrh	r3, [r7, #8]
 8003492:	0a1b      	lsrs	r3, r3, #8
 8003494:	b29b      	uxth	r3, r3
 8003496:	b2da      	uxtb	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800349e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a0:	6a39      	ldr	r1, [r7, #32]
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f000 f982 	bl	80037ac <I2C_WaitOnTXEFlagUntilTimeout>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00d      	beq.n	80034ca <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	2b04      	cmp	r3, #4
 80034b4:	d107      	bne.n	80034c6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e050      	b.n	800356c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034ca:	893b      	ldrh	r3, [r7, #8]
 80034cc:	b2da      	uxtb	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034d6:	6a39      	ldr	r1, [r7, #32]
 80034d8:	68f8      	ldr	r0, [r7, #12]
 80034da:	f000 f967 	bl	80037ac <I2C_WaitOnTXEFlagUntilTimeout>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00d      	beq.n	8003500 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e8:	2b04      	cmp	r3, #4
 80034ea:	d107      	bne.n	80034fc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034fa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e035      	b.n	800356c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800350e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003512:	9300      	str	r3, [sp, #0]
 8003514:	6a3b      	ldr	r3, [r7, #32]
 8003516:	2200      	movs	r2, #0
 8003518:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f000 f82b 	bl	8003578 <I2C_WaitOnFlagUntilTimeout>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d00d      	beq.n	8003544 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003532:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003536:	d103      	bne.n	8003540 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800353e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e013      	b.n	800356c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003544:	897b      	ldrh	r3, [r7, #10]
 8003546:	b2db      	uxtb	r3, r3
 8003548:	f043 0301 	orr.w	r3, r3, #1
 800354c:	b2da      	uxtb	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003556:	6a3a      	ldr	r2, [r7, #32]
 8003558:	4906      	ldr	r1, [pc, #24]	; (8003574 <I2C_RequestMemoryRead+0x1cc>)
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f000 f886 	bl	800366c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e000      	b.n	800356c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	3718      	adds	r7, #24
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	00010002 	.word	0x00010002

08003578 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	603b      	str	r3, [r7, #0]
 8003584:	4613      	mov	r3, r2
 8003586:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003588:	e048      	b.n	800361c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003590:	d044      	beq.n	800361c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003592:	f7fe fa33 	bl	80019fc <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d302      	bcc.n	80035a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d139      	bne.n	800361c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	0c1b      	lsrs	r3, r3, #16
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d10d      	bne.n	80035ce <I2C_WaitOnFlagUntilTimeout+0x56>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	43da      	mvns	r2, r3
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	4013      	ands	r3, r2
 80035be:	b29b      	uxth	r3, r3
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	bf0c      	ite	eq
 80035c4:	2301      	moveq	r3, #1
 80035c6:	2300      	movne	r3, #0
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	461a      	mov	r2, r3
 80035cc:	e00c      	b.n	80035e8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	43da      	mvns	r2, r3
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	4013      	ands	r3, r2
 80035da:	b29b      	uxth	r3, r3
 80035dc:	2b00      	cmp	r3, #0
 80035de:	bf0c      	ite	eq
 80035e0:	2301      	moveq	r3, #1
 80035e2:	2300      	movne	r3, #0
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	461a      	mov	r2, r3
 80035e8:	79fb      	ldrb	r3, [r7, #7]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d116      	bne.n	800361c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2220      	movs	r2, #32
 80035f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003608:	f043 0220 	orr.w	r2, r3, #32
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e023      	b.n	8003664 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	0c1b      	lsrs	r3, r3, #16
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b01      	cmp	r3, #1
 8003624:	d10d      	bne.n	8003642 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	695b      	ldr	r3, [r3, #20]
 800362c:	43da      	mvns	r2, r3
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	4013      	ands	r3, r2
 8003632:	b29b      	uxth	r3, r3
 8003634:	2b00      	cmp	r3, #0
 8003636:	bf0c      	ite	eq
 8003638:	2301      	moveq	r3, #1
 800363a:	2300      	movne	r3, #0
 800363c:	b2db      	uxtb	r3, r3
 800363e:	461a      	mov	r2, r3
 8003640:	e00c      	b.n	800365c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	43da      	mvns	r2, r3
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	4013      	ands	r3, r2
 800364e:	b29b      	uxth	r3, r3
 8003650:	2b00      	cmp	r3, #0
 8003652:	bf0c      	ite	eq
 8003654:	2301      	moveq	r3, #1
 8003656:	2300      	movne	r3, #0
 8003658:	b2db      	uxtb	r3, r3
 800365a:	461a      	mov	r2, r3
 800365c:	79fb      	ldrb	r3, [r7, #7]
 800365e:	429a      	cmp	r2, r3
 8003660:	d093      	beq.n	800358a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
 8003678:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800367a:	e071      	b.n	8003760 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003686:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800368a:	d123      	bne.n	80036d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800369a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2220      	movs	r2, #32
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c0:	f043 0204 	orr.w	r2, r3, #4
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e067      	b.n	80037a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036da:	d041      	beq.n	8003760 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036dc:	f7fe f98e 	bl	80019fc <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d302      	bcc.n	80036f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d136      	bne.n	8003760 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	0c1b      	lsrs	r3, r3, #16
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d10c      	bne.n	8003716 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	43da      	mvns	r2, r3
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	4013      	ands	r3, r2
 8003708:	b29b      	uxth	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	bf14      	ite	ne
 800370e:	2301      	movne	r3, #1
 8003710:	2300      	moveq	r3, #0
 8003712:	b2db      	uxtb	r3, r3
 8003714:	e00b      	b.n	800372e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	43da      	mvns	r2, r3
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	4013      	ands	r3, r2
 8003722:	b29b      	uxth	r3, r3
 8003724:	2b00      	cmp	r3, #0
 8003726:	bf14      	ite	ne
 8003728:	2301      	movne	r3, #1
 800372a:	2300      	moveq	r3, #0
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d016      	beq.n	8003760 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2220      	movs	r2, #32
 800373c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374c:	f043 0220 	orr.w	r2, r3, #32
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e021      	b.n	80037a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	0c1b      	lsrs	r3, r3, #16
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b01      	cmp	r3, #1
 8003768:	d10c      	bne.n	8003784 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	43da      	mvns	r2, r3
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	4013      	ands	r3, r2
 8003776:	b29b      	uxth	r3, r3
 8003778:	2b00      	cmp	r3, #0
 800377a:	bf14      	ite	ne
 800377c:	2301      	movne	r3, #1
 800377e:	2300      	moveq	r3, #0
 8003780:	b2db      	uxtb	r3, r3
 8003782:	e00b      	b.n	800379c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	43da      	mvns	r2, r3
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	4013      	ands	r3, r2
 8003790:	b29b      	uxth	r3, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	bf14      	ite	ne
 8003796:	2301      	movne	r3, #1
 8003798:	2300      	moveq	r3, #0
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b00      	cmp	r3, #0
 800379e:	f47f af6d 	bne.w	800367c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037b8:	e034      	b.n	8003824 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f000 f8e3 	bl	8003986 <I2C_IsAcknowledgeFailed>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e034      	b.n	8003834 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d0:	d028      	beq.n	8003824 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037d2:	f7fe f913 	bl	80019fc <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	68ba      	ldr	r2, [r7, #8]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d302      	bcc.n	80037e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d11d      	bne.n	8003824 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f2:	2b80      	cmp	r3, #128	; 0x80
 80037f4:	d016      	beq.n	8003824 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2220      	movs	r2, #32
 8003800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003810:	f043 0220 	orr.w	r2, r3, #32
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e007      	b.n	8003834 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800382e:	2b80      	cmp	r3, #128	; 0x80
 8003830:	d1c3      	bne.n	80037ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003848:	e034      	b.n	80038b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f000 f89b 	bl	8003986 <I2C_IsAcknowledgeFailed>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e034      	b.n	80038c4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003860:	d028      	beq.n	80038b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003862:	f7fe f8cb 	bl	80019fc <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	68ba      	ldr	r2, [r7, #8]
 800386e:	429a      	cmp	r2, r3
 8003870:	d302      	bcc.n	8003878 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d11d      	bne.n	80038b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	f003 0304 	and.w	r3, r3, #4
 8003882:	2b04      	cmp	r3, #4
 8003884:	d016      	beq.n	80038b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2220      	movs	r2, #32
 8003890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a0:	f043 0220 	orr.w	r2, r3, #32
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e007      	b.n	80038c4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	f003 0304 	and.w	r3, r3, #4
 80038be:	2b04      	cmp	r3, #4
 80038c0:	d1c3      	bne.n	800384a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038d8:	e049      	b.n	800396e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	f003 0310 	and.w	r3, r3, #16
 80038e4:	2b10      	cmp	r3, #16
 80038e6:	d119      	bne.n	800391c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f06f 0210 	mvn.w	r2, #16
 80038f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2220      	movs	r2, #32
 80038fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e030      	b.n	800397e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800391c:	f7fe f86e 	bl	80019fc <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	429a      	cmp	r2, r3
 800392a:	d302      	bcc.n	8003932 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d11d      	bne.n	800396e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	695b      	ldr	r3, [r3, #20]
 8003938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800393c:	2b40      	cmp	r3, #64	; 0x40
 800393e:	d016      	beq.n	800396e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2220      	movs	r2, #32
 800394a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395a:	f043 0220 	orr.w	r2, r3, #32
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e007      	b.n	800397e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	695b      	ldr	r3, [r3, #20]
 8003974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003978:	2b40      	cmp	r3, #64	; 0x40
 800397a:	d1ae      	bne.n	80038da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003986:	b480      	push	{r7}
 8003988:	b083      	sub	sp, #12
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003998:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800399c:	d11b      	bne.n	80039d6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039a6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2220      	movs	r2, #32
 80039b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	f043 0204 	orr.w	r2, r3, #4
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e000      	b.n	80039d8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b088      	sub	sp, #32
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e128      	b.n	8003c48 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d109      	bne.n	8003a16 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a90      	ldr	r2, [pc, #576]	; (8003c50 <HAL_I2S_Init+0x26c>)
 8003a0e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f7fd fe49 	bl	80016a8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2202      	movs	r2, #2
 8003a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	69db      	ldr	r3, [r3, #28]
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	6812      	ldr	r2, [r2, #0]
 8003a28:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003a2c:	f023 030f 	bic.w	r3, r3, #15
 8003a30:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2202      	movs	r2, #2
 8003a38:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d060      	beq.n	8003b04 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d102      	bne.n	8003a50 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003a4a:	2310      	movs	r3, #16
 8003a4c:	617b      	str	r3, [r7, #20]
 8003a4e:	e001      	b.n	8003a54 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003a50:	2320      	movs	r3, #32
 8003a52:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	2b20      	cmp	r3, #32
 8003a5a:	d802      	bhi.n	8003a62 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	005b      	lsls	r3, r3, #1
 8003a60:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003a62:	2001      	movs	r0, #1
 8003a64:	f001 fb16 	bl	8005094 <HAL_RCCEx_GetPeriphCLKFreq>
 8003a68:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a72:	d125      	bne.n	8003ac0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d010      	beq.n	8003a9e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a86:	4613      	mov	r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	4413      	add	r3, r2
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	461a      	mov	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a98:	3305      	adds	r3, #5
 8003a9a:	613b      	str	r3, [r7, #16]
 8003a9c:	e01f      	b.n	8003ade <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	4413      	add	r3, r2
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aba:	3305      	adds	r3, #5
 8003abc:	613b      	str	r3, [r7, #16]
 8003abe:	e00e      	b.n	8003ade <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ac8:	4613      	mov	r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	4413      	add	r3, r2
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ada:	3305      	adds	r3, #5
 8003adc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	4a5c      	ldr	r2, [pc, #368]	; (8003c54 <HAL_I2S_Init+0x270>)
 8003ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae6:	08db      	lsrs	r3, r3, #3
 8003ae8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	f003 0301 	and.w	r3, r3, #1
 8003af0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	085b      	lsrs	r3, r3, #1
 8003afa:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	021b      	lsls	r3, r3, #8
 8003b00:	61bb      	str	r3, [r7, #24]
 8003b02:	e003      	b.n	8003b0c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003b04:	2302      	movs	r3, #2
 8003b06:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d902      	bls.n	8003b18 <HAL_I2S_Init+0x134>
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	2bff      	cmp	r3, #255	; 0xff
 8003b16:	d907      	bls.n	8003b28 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1c:	f043 0210 	orr.w	r2, r3, #16
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e08f      	b.n	8003c48 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	691a      	ldr	r2, [r3, #16]
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	ea42 0103 	orr.w	r1, r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	69fa      	ldr	r2, [r7, #28]
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003b46:	f023 030f 	bic.w	r3, r3, #15
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	6851      	ldr	r1, [r2, #4]
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	6892      	ldr	r2, [r2, #8]
 8003b52:	4311      	orrs	r1, r2
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	68d2      	ldr	r2, [r2, #12]
 8003b58:	4311      	orrs	r1, r2
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	6992      	ldr	r2, [r2, #24]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	431a      	orrs	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b6a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d161      	bne.n	8003c38 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a38      	ldr	r2, [pc, #224]	; (8003c58 <HAL_I2S_Init+0x274>)
 8003b78:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a37      	ldr	r2, [pc, #220]	; (8003c5c <HAL_I2S_Init+0x278>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d101      	bne.n	8003b88 <HAL_I2S_Init+0x1a4>
 8003b84:	4b36      	ldr	r3, [pc, #216]	; (8003c60 <HAL_I2S_Init+0x27c>)
 8003b86:	e001      	b.n	8003b8c <HAL_I2S_Init+0x1a8>
 8003b88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	6812      	ldr	r2, [r2, #0]
 8003b92:	4932      	ldr	r1, [pc, #200]	; (8003c5c <HAL_I2S_Init+0x278>)
 8003b94:	428a      	cmp	r2, r1
 8003b96:	d101      	bne.n	8003b9c <HAL_I2S_Init+0x1b8>
 8003b98:	4a31      	ldr	r2, [pc, #196]	; (8003c60 <HAL_I2S_Init+0x27c>)
 8003b9a:	e001      	b.n	8003ba0 <HAL_I2S_Init+0x1bc>
 8003b9c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003ba0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003ba4:	f023 030f 	bic.w	r3, r3, #15
 8003ba8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a2b      	ldr	r2, [pc, #172]	; (8003c5c <HAL_I2S_Init+0x278>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d101      	bne.n	8003bb8 <HAL_I2S_Init+0x1d4>
 8003bb4:	4b2a      	ldr	r3, [pc, #168]	; (8003c60 <HAL_I2S_Init+0x27c>)
 8003bb6:	e001      	b.n	8003bbc <HAL_I2S_Init+0x1d8>
 8003bb8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bbc:	2202      	movs	r2, #2
 8003bbe:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a25      	ldr	r2, [pc, #148]	; (8003c5c <HAL_I2S_Init+0x278>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d101      	bne.n	8003bce <HAL_I2S_Init+0x1ea>
 8003bca:	4b25      	ldr	r3, [pc, #148]	; (8003c60 <HAL_I2S_Init+0x27c>)
 8003bcc:	e001      	b.n	8003bd2 <HAL_I2S_Init+0x1ee>
 8003bce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bd2:	69db      	ldr	r3, [r3, #28]
 8003bd4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bde:	d003      	beq.n	8003be8 <HAL_I2S_Init+0x204>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d103      	bne.n	8003bf0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003be8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bec:	613b      	str	r3, [r7, #16]
 8003bee:	e001      	b.n	8003bf4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c12:	4313      	orrs	r3, r2
 8003c14:	b29a      	uxth	r2, r3
 8003c16:	897b      	ldrh	r3, [r7, #10]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c20:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a0d      	ldr	r2, [pc, #52]	; (8003c5c <HAL_I2S_Init+0x278>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d101      	bne.n	8003c30 <HAL_I2S_Init+0x24c>
 8003c2c:	4b0c      	ldr	r3, [pc, #48]	; (8003c60 <HAL_I2S_Init+0x27c>)
 8003c2e:	e001      	b.n	8003c34 <HAL_I2S_Init+0x250>
 8003c30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c34:	897a      	ldrh	r2, [r7, #10]
 8003c36:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3720      	adds	r7, #32
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	08003f61 	.word	0x08003f61
 8003c54:	cccccccd 	.word	0xcccccccd
 8003c58:	08004075 	.word	0x08004075
 8003c5c:	40003800 	.word	0x40003800
 8003c60:	40003400 	.word	0x40003400

08003c64 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d002      	beq.n	8003c7e <HAL_I2S_Transmit_DMA+0x1a>
 8003c78:	88fb      	ldrh	r3, [r7, #6]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e08e      	b.n	8003da0 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d101      	bne.n	8003c92 <HAL_I2S_Transmit_DMA+0x2e>
 8003c8e:	2302      	movs	r3, #2
 8003c90:	e086      	b.n	8003da0 <HAL_I2S_Transmit_DMA+0x13c>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d005      	beq.n	8003cb2 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8003cae:	2302      	movs	r3, #2
 8003cb0:	e076      	b.n	8003da0 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2203      	movs	r2, #3
 8003cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	68ba      	ldr	r2, [r7, #8]
 8003cc4:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	69db      	ldr	r3, [r3, #28]
 8003ccc:	f003 0307 	and.w	r3, r3, #7
 8003cd0:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	2b03      	cmp	r3, #3
 8003cd6:	d002      	beq.n	8003cde <HAL_I2S_Transmit_DMA+0x7a>
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	2b05      	cmp	r3, #5
 8003cdc:	d10a      	bne.n	8003cf4 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8003cde:	88fb      	ldrh	r3, [r7, #6]
 8003ce0:	005b      	lsls	r3, r3, #1
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8003ce8:	88fb      	ldrh	r3, [r7, #6]
 8003cea:	005b      	lsls	r3, r3, #1
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003cf2:	e005      	b.n	8003d00 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	88fa      	ldrh	r2, [r7, #6]
 8003cf8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	88fa      	ldrh	r2, [r7, #6]
 8003cfe:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d04:	4a28      	ldr	r2, [pc, #160]	; (8003da8 <HAL_I2S_Transmit_DMA+0x144>)
 8003d06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0c:	4a27      	ldr	r2, [pc, #156]	; (8003dac <HAL_I2S_Transmit_DMA+0x148>)
 8003d0e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d14:	4a26      	ldr	r2, [pc, #152]	; (8003db0 <HAL_I2S_Transmit_DMA+0x14c>)
 8003d16:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003d20:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003d28:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d2e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003d30:	f7fe f8b2 	bl	8001e98 <HAL_DMA_Start_IT>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00f      	beq.n	8003d5a <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3e:	f043 0208 	orr.w	r2, r3, #8
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e022      	b.n	8003da0 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	69db      	ldr	r3, [r3, #28]
 8003d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d107      	bne.n	8003d78 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	69da      	ldr	r2, [r3, #28]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d76:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d107      	bne.n	8003d96 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f042 0202 	orr.w	r2, r2, #2
 8003d94:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3718      	adds	r7, #24
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	08003e3f 	.word	0x08003e3f
 8003dac:	08003dfd 	.word	0x08003dfd
 8003db0:	08003e5b 	.word	0x08003e5b

08003db4 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	4798      	blx	r3
}
 8003dc4:	bf00      	nop
 8003dc6:	3708      	adds	r7, #8
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dee:	b2db      	uxtb	r3, r3
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e08:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10e      	bne.n	8003e30 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	685a      	ldr	r2, [r3, #4]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f022 0202 	bic.w	r2, r2, #2
 8003e20:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	f7fc fbc7 	bl	80005c4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003e36:	bf00      	nop
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b084      	sub	sp, #16
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f7fc fbcb 	bl	80005e8 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003e52:	bf00      	nop
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b084      	sub	sp, #16
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e66:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	685a      	ldr	r2, [r3, #4]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f022 0203 	bic.w	r2, r2, #3
 8003e76:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e90:	f043 0208 	orr.w	r2, r3, #8
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f7fc fd23 	bl	80008e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003e9e:	bf00      	nop
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b082      	sub	sp, #8
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb2:	881a      	ldrh	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebe:	1c9a      	adds	r2, r3, #2
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d10e      	bne.n	8003efa <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	685a      	ldr	r2, [r3, #4]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003eea:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f7fc fb65 	bl	80005c4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003efa:	bf00      	nop
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b082      	sub	sp, #8
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68da      	ldr	r2, [r3, #12]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f14:	b292      	uxth	r2, r2
 8003f16:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1c:	1c9a      	adds	r2, r3, #2
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10e      	bne.n	8003f58 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	685a      	ldr	r2, [r3, #4]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f48:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f7ff ff3a 	bl	8003dcc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003f58:	bf00      	nop
 8003f5a:	3708      	adds	r7, #8
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	2b04      	cmp	r3, #4
 8003f7a:	d13a      	bne.n	8003ff2 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d109      	bne.n	8003f9a <I2S_IRQHandler+0x3a>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f90:	2b40      	cmp	r3, #64	; 0x40
 8003f92:	d102      	bne.n	8003f9a <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f7ff ffb4 	bl	8003f02 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa0:	2b40      	cmp	r3, #64	; 0x40
 8003fa2:	d126      	bne.n	8003ff2 <I2S_IRQHandler+0x92>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f003 0320 	and.w	r3, r3, #32
 8003fae:	2b20      	cmp	r3, #32
 8003fb0:	d11f      	bne.n	8003ff2 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	685a      	ldr	r2, [r3, #4]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003fc0:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	613b      	str	r3, [r7, #16]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	613b      	str	r3, [r7, #16]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	613b      	str	r3, [r7, #16]
 8003fd6:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe4:	f043 0202 	orr.w	r2, r3, #2
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f7fc fc79 	bl	80008e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b03      	cmp	r3, #3
 8003ffc:	d136      	bne.n	800406c <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b02      	cmp	r3, #2
 8004006:	d109      	bne.n	800401c <I2S_IRQHandler+0xbc>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004012:	2b80      	cmp	r3, #128	; 0x80
 8004014:	d102      	bne.n	800401c <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f7ff ff45 	bl	8003ea6 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	f003 0308 	and.w	r3, r3, #8
 8004022:	2b08      	cmp	r3, #8
 8004024:	d122      	bne.n	800406c <I2S_IRQHandler+0x10c>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f003 0320 	and.w	r3, r3, #32
 8004030:	2b20      	cmp	r3, #32
 8004032:	d11b      	bne.n	800406c <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	685a      	ldr	r2, [r3, #4]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004042:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004044:	2300      	movs	r3, #0
 8004046:	60fb      	str	r3, [r7, #12]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	60fb      	str	r3, [r7, #12]
 8004050:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800405e:	f043 0204 	orr.w	r2, r3, #4
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f7fc fc3c 	bl	80008e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800406c:	bf00      	nop
 800406e:	3718      	adds	r7, #24
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b088      	sub	sp, #32
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a92      	ldr	r2, [pc, #584]	; (80042d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d101      	bne.n	8004092 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800408e:	4b92      	ldr	r3, [pc, #584]	; (80042d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004090:	e001      	b.n	8004096 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004092:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a8b      	ldr	r2, [pc, #556]	; (80042d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d101      	bne.n	80040b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80040ac:	4b8a      	ldr	r3, [pc, #552]	; (80042d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040ae:	e001      	b.n	80040b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80040b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040c0:	d004      	beq.n	80040cc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f040 8099 	bne.w	80041fe <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	f003 0302 	and.w	r3, r3, #2
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d107      	bne.n	80040e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d002      	beq.n	80040e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 f925 	bl	8004330 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	f003 0301 	and.w	r3, r3, #1
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d107      	bne.n	8004100 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d002      	beq.n	8004100 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f9c8 	bl	8004490 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004106:	2b40      	cmp	r3, #64	; 0x40
 8004108:	d13a      	bne.n	8004180 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	f003 0320 	and.w	r3, r3, #32
 8004110:	2b00      	cmp	r3, #0
 8004112:	d035      	beq.n	8004180 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a6e      	ldr	r2, [pc, #440]	; (80042d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d101      	bne.n	8004122 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800411e:	4b6e      	ldr	r3, [pc, #440]	; (80042d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004120:	e001      	b.n	8004126 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004122:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004126:	685a      	ldr	r2, [r3, #4]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4969      	ldr	r1, [pc, #420]	; (80042d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800412e:	428b      	cmp	r3, r1
 8004130:	d101      	bne.n	8004136 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004132:	4b69      	ldr	r3, [pc, #420]	; (80042d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004134:	e001      	b.n	800413a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004136:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800413a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800413e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800414e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004150:	2300      	movs	r3, #0
 8004152:	60fb      	str	r3, [r7, #12]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	60fb      	str	r3, [r7, #12]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	60fb      	str	r3, [r7, #12]
 8004164:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004172:	f043 0202 	orr.w	r2, r3, #2
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f7fc fbb2 	bl	80008e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	f003 0308 	and.w	r3, r3, #8
 8004186:	2b08      	cmp	r3, #8
 8004188:	f040 80c3 	bne.w	8004312 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	f003 0320 	and.w	r3, r3, #32
 8004192:	2b00      	cmp	r3, #0
 8004194:	f000 80bd 	beq.w	8004312 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	685a      	ldr	r2, [r3, #4]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80041a6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a49      	ldr	r2, [pc, #292]	; (80042d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d101      	bne.n	80041b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80041b2:	4b49      	ldr	r3, [pc, #292]	; (80042d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041b4:	e001      	b.n	80041ba <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80041b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4944      	ldr	r1, [pc, #272]	; (80042d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041c2:	428b      	cmp	r3, r1
 80041c4:	d101      	bne.n	80041ca <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80041c6:	4b44      	ldr	r3, [pc, #272]	; (80042d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041c8:	e001      	b.n	80041ce <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80041ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80041d2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80041d4:	2300      	movs	r3, #0
 80041d6:	60bb      	str	r3, [r7, #8]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	60bb      	str	r3, [r7, #8]
 80041e0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2201      	movs	r2, #1
 80041e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ee:	f043 0204 	orr.w	r2, r3, #4
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f7fc fb74 	bl	80008e4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80041fc:	e089      	b.n	8004312 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b02      	cmp	r3, #2
 8004206:	d107      	bne.n	8004218 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800420e:	2b00      	cmp	r3, #0
 8004210:	d002      	beq.n	8004218 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 f8be 	bl	8004394 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b01      	cmp	r3, #1
 8004220:	d107      	bne.n	8004232 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004228:	2b00      	cmp	r3, #0
 800422a:	d002      	beq.n	8004232 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 f8fd 	bl	800442c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004238:	2b40      	cmp	r3, #64	; 0x40
 800423a:	d12f      	bne.n	800429c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	f003 0320 	and.w	r3, r3, #32
 8004242:	2b00      	cmp	r3, #0
 8004244:	d02a      	beq.n	800429c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	685a      	ldr	r2, [r3, #4]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004254:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a1e      	ldr	r2, [pc, #120]	; (80042d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d101      	bne.n	8004264 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004260:	4b1d      	ldr	r3, [pc, #116]	; (80042d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004262:	e001      	b.n	8004268 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004264:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004268:	685a      	ldr	r2, [r3, #4]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4919      	ldr	r1, [pc, #100]	; (80042d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004270:	428b      	cmp	r3, r1
 8004272:	d101      	bne.n	8004278 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004274:	4b18      	ldr	r3, [pc, #96]	; (80042d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004276:	e001      	b.n	800427c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004278:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800427c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004280:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800428e:	f043 0202 	orr.w	r2, r3, #2
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7fc fb24 	bl	80008e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	f003 0308 	and.w	r3, r3, #8
 80042a2:	2b08      	cmp	r3, #8
 80042a4:	d136      	bne.n	8004314 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	f003 0320 	and.w	r3, r3, #32
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d031      	beq.n	8004314 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a07      	ldr	r2, [pc, #28]	; (80042d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d101      	bne.n	80042be <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80042ba:	4b07      	ldr	r3, [pc, #28]	; (80042d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042bc:	e001      	b.n	80042c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80042be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042c2:	685a      	ldr	r2, [r3, #4]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4902      	ldr	r1, [pc, #8]	; (80042d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042ca:	428b      	cmp	r3, r1
 80042cc:	d106      	bne.n	80042dc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80042ce:	4b02      	ldr	r3, [pc, #8]	; (80042d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042d0:	e006      	b.n	80042e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80042d2:	bf00      	nop
 80042d4:	40003800 	.word	0x40003800
 80042d8:	40003400 	.word	0x40003400
 80042dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80042e4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80042f4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004302:	f043 0204 	orr.w	r2, r3, #4
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7fc faea 	bl	80008e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004310:	e000      	b.n	8004314 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004312:	bf00      	nop
}
 8004314:	bf00      	nop
 8004316:	3720      	adds	r7, #32
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433c:	1c99      	adds	r1, r3, #2
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	6251      	str	r1, [r2, #36]	; 0x24
 8004342:	881a      	ldrh	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800434e:	b29b      	uxth	r3, r3
 8004350:	3b01      	subs	r3, #1
 8004352:	b29a      	uxth	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800435c:	b29b      	uxth	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d113      	bne.n	800438a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	685a      	ldr	r2, [r3, #4]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004370:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004376:	b29b      	uxth	r3, r3
 8004378:	2b00      	cmp	r3, #0
 800437a:	d106      	bne.n	800438a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f7ff ffc9 	bl	800431c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800438a:	bf00      	nop
 800438c:	3708      	adds	r7, #8
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
	...

08004394 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a0:	1c99      	adds	r1, r3, #2
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	6251      	str	r1, [r2, #36]	; 0x24
 80043a6:	8819      	ldrh	r1, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a1d      	ldr	r2, [pc, #116]	; (8004424 <I2SEx_TxISR_I2SExt+0x90>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d101      	bne.n	80043b6 <I2SEx_TxISR_I2SExt+0x22>
 80043b2:	4b1d      	ldr	r3, [pc, #116]	; (8004428 <I2SEx_TxISR_I2SExt+0x94>)
 80043b4:	e001      	b.n	80043ba <I2SEx_TxISR_I2SExt+0x26>
 80043b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043ba:	460a      	mov	r2, r1
 80043bc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	3b01      	subs	r3, #1
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d121      	bne.n	800441a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a12      	ldr	r2, [pc, #72]	; (8004424 <I2SEx_TxISR_I2SExt+0x90>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d101      	bne.n	80043e4 <I2SEx_TxISR_I2SExt+0x50>
 80043e0:	4b11      	ldr	r3, [pc, #68]	; (8004428 <I2SEx_TxISR_I2SExt+0x94>)
 80043e2:	e001      	b.n	80043e8 <I2SEx_TxISR_I2SExt+0x54>
 80043e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043e8:	685a      	ldr	r2, [r3, #4]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	490d      	ldr	r1, [pc, #52]	; (8004424 <I2SEx_TxISR_I2SExt+0x90>)
 80043f0:	428b      	cmp	r3, r1
 80043f2:	d101      	bne.n	80043f8 <I2SEx_TxISR_I2SExt+0x64>
 80043f4:	4b0c      	ldr	r3, [pc, #48]	; (8004428 <I2SEx_TxISR_I2SExt+0x94>)
 80043f6:	e001      	b.n	80043fc <I2SEx_TxISR_I2SExt+0x68>
 80043f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004400:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004406:	b29b      	uxth	r3, r3
 8004408:	2b00      	cmp	r3, #0
 800440a:	d106      	bne.n	800441a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f7ff ff81 	bl	800431c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800441a:	bf00      	nop
 800441c:	3708      	adds	r7, #8
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	40003800 	.word	0x40003800
 8004428:	40003400 	.word	0x40003400

0800442c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68d8      	ldr	r0, [r3, #12]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443e:	1c99      	adds	r1, r3, #2
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004444:	b282      	uxth	r2, r0
 8004446:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800444c:	b29b      	uxth	r3, r3
 800444e:	3b01      	subs	r3, #1
 8004450:	b29a      	uxth	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800445a:	b29b      	uxth	r3, r3
 800445c:	2b00      	cmp	r3, #0
 800445e:	d113      	bne.n	8004488 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	685a      	ldr	r2, [r3, #4]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800446e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004474:	b29b      	uxth	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d106      	bne.n	8004488 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f7ff ff4a 	bl	800431c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004488:	bf00      	nop
 800448a:	3708      	adds	r7, #8
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a20      	ldr	r2, [pc, #128]	; (8004520 <I2SEx_RxISR_I2SExt+0x90>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d101      	bne.n	80044a6 <I2SEx_RxISR_I2SExt+0x16>
 80044a2:	4b20      	ldr	r3, [pc, #128]	; (8004524 <I2SEx_RxISR_I2SExt+0x94>)
 80044a4:	e001      	b.n	80044aa <I2SEx_RxISR_I2SExt+0x1a>
 80044a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044aa:	68d8      	ldr	r0, [r3, #12]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b0:	1c99      	adds	r1, r3, #2
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80044b6:	b282      	uxth	r2, r0
 80044b8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80044be:	b29b      	uxth	r3, r3
 80044c0:	3b01      	subs	r3, #1
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d121      	bne.n	8004516 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a12      	ldr	r2, [pc, #72]	; (8004520 <I2SEx_RxISR_I2SExt+0x90>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d101      	bne.n	80044e0 <I2SEx_RxISR_I2SExt+0x50>
 80044dc:	4b11      	ldr	r3, [pc, #68]	; (8004524 <I2SEx_RxISR_I2SExt+0x94>)
 80044de:	e001      	b.n	80044e4 <I2SEx_RxISR_I2SExt+0x54>
 80044e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044e4:	685a      	ldr	r2, [r3, #4]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	490d      	ldr	r1, [pc, #52]	; (8004520 <I2SEx_RxISR_I2SExt+0x90>)
 80044ec:	428b      	cmp	r3, r1
 80044ee:	d101      	bne.n	80044f4 <I2SEx_RxISR_I2SExt+0x64>
 80044f0:	4b0c      	ldr	r3, [pc, #48]	; (8004524 <I2SEx_RxISR_I2SExt+0x94>)
 80044f2:	e001      	b.n	80044f8 <I2SEx_RxISR_I2SExt+0x68>
 80044f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044f8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80044fc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004502:	b29b      	uxth	r3, r3
 8004504:	2b00      	cmp	r3, #0
 8004506:	d106      	bne.n	8004516 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f7ff ff03 	bl	800431c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004516:	bf00      	nop
 8004518:	3708      	adds	r7, #8
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	40003800 	.word	0x40003800
 8004524:	40003400 	.word	0x40003400

08004528 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e267      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b00      	cmp	r3, #0
 8004544:	d075      	beq.n	8004632 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004546:	4b88      	ldr	r3, [pc, #544]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f003 030c 	and.w	r3, r3, #12
 800454e:	2b04      	cmp	r3, #4
 8004550:	d00c      	beq.n	800456c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004552:	4b85      	ldr	r3, [pc, #532]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800455a:	2b08      	cmp	r3, #8
 800455c:	d112      	bne.n	8004584 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800455e:	4b82      	ldr	r3, [pc, #520]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004566:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800456a:	d10b      	bne.n	8004584 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800456c:	4b7e      	ldr	r3, [pc, #504]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d05b      	beq.n	8004630 <HAL_RCC_OscConfig+0x108>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d157      	bne.n	8004630 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e242      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800458c:	d106      	bne.n	800459c <HAL_RCC_OscConfig+0x74>
 800458e:	4b76      	ldr	r3, [pc, #472]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a75      	ldr	r2, [pc, #468]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 8004594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004598:	6013      	str	r3, [r2, #0]
 800459a:	e01d      	b.n	80045d8 <HAL_RCC_OscConfig+0xb0>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045a4:	d10c      	bne.n	80045c0 <HAL_RCC_OscConfig+0x98>
 80045a6:	4b70      	ldr	r3, [pc, #448]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a6f      	ldr	r2, [pc, #444]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 80045ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045b0:	6013      	str	r3, [r2, #0]
 80045b2:	4b6d      	ldr	r3, [pc, #436]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a6c      	ldr	r2, [pc, #432]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 80045b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045bc:	6013      	str	r3, [r2, #0]
 80045be:	e00b      	b.n	80045d8 <HAL_RCC_OscConfig+0xb0>
 80045c0:	4b69      	ldr	r3, [pc, #420]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a68      	ldr	r2, [pc, #416]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 80045c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045ca:	6013      	str	r3, [r2, #0]
 80045cc:	4b66      	ldr	r3, [pc, #408]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a65      	ldr	r2, [pc, #404]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 80045d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d013      	beq.n	8004608 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e0:	f7fd fa0c 	bl	80019fc <HAL_GetTick>
 80045e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045e6:	e008      	b.n	80045fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045e8:	f7fd fa08 	bl	80019fc <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	2b64      	cmp	r3, #100	; 0x64
 80045f4:	d901      	bls.n	80045fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e207      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045fa:	4b5b      	ldr	r3, [pc, #364]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d0f0      	beq.n	80045e8 <HAL_RCC_OscConfig+0xc0>
 8004606:	e014      	b.n	8004632 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004608:	f7fd f9f8 	bl	80019fc <HAL_GetTick>
 800460c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800460e:	e008      	b.n	8004622 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004610:	f7fd f9f4 	bl	80019fc <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b64      	cmp	r3, #100	; 0x64
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e1f3      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004622:	4b51      	ldr	r3, [pc, #324]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1f0      	bne.n	8004610 <HAL_RCC_OscConfig+0xe8>
 800462e:	e000      	b.n	8004632 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004630:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d063      	beq.n	8004706 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800463e:	4b4a      	ldr	r3, [pc, #296]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f003 030c 	and.w	r3, r3, #12
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00b      	beq.n	8004662 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800464a:	4b47      	ldr	r3, [pc, #284]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004652:	2b08      	cmp	r3, #8
 8004654:	d11c      	bne.n	8004690 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004656:	4b44      	ldr	r3, [pc, #272]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d116      	bne.n	8004690 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004662:	4b41      	ldr	r3, [pc, #260]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d005      	beq.n	800467a <HAL_RCC_OscConfig+0x152>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d001      	beq.n	800467a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e1c7      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800467a:	4b3b      	ldr	r3, [pc, #236]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	00db      	lsls	r3, r3, #3
 8004688:	4937      	ldr	r1, [pc, #220]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 800468a:	4313      	orrs	r3, r2
 800468c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800468e:	e03a      	b.n	8004706 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d020      	beq.n	80046da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004698:	4b34      	ldr	r3, [pc, #208]	; (800476c <HAL_RCC_OscConfig+0x244>)
 800469a:	2201      	movs	r2, #1
 800469c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800469e:	f7fd f9ad 	bl	80019fc <HAL_GetTick>
 80046a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046a4:	e008      	b.n	80046b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046a6:	f7fd f9a9 	bl	80019fc <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d901      	bls.n	80046b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e1a8      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046b8:	4b2b      	ldr	r3, [pc, #172]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0302 	and.w	r3, r3, #2
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d0f0      	beq.n	80046a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046c4:	4b28      	ldr	r3, [pc, #160]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	00db      	lsls	r3, r3, #3
 80046d2:	4925      	ldr	r1, [pc, #148]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	600b      	str	r3, [r1, #0]
 80046d8:	e015      	b.n	8004706 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046da:	4b24      	ldr	r3, [pc, #144]	; (800476c <HAL_RCC_OscConfig+0x244>)
 80046dc:	2200      	movs	r2, #0
 80046de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e0:	f7fd f98c 	bl	80019fc <HAL_GetTick>
 80046e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046e6:	e008      	b.n	80046fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046e8:	f7fd f988 	bl	80019fc <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e187      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046fa:	4b1b      	ldr	r3, [pc, #108]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1f0      	bne.n	80046e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0308 	and.w	r3, r3, #8
 800470e:	2b00      	cmp	r3, #0
 8004710:	d036      	beq.n	8004780 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d016      	beq.n	8004748 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800471a:	4b15      	ldr	r3, [pc, #84]	; (8004770 <HAL_RCC_OscConfig+0x248>)
 800471c:	2201      	movs	r2, #1
 800471e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004720:	f7fd f96c 	bl	80019fc <HAL_GetTick>
 8004724:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004726:	e008      	b.n	800473a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004728:	f7fd f968 	bl	80019fc <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b02      	cmp	r3, #2
 8004734:	d901      	bls.n	800473a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e167      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800473a:	4b0b      	ldr	r3, [pc, #44]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 800473c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b00      	cmp	r3, #0
 8004744:	d0f0      	beq.n	8004728 <HAL_RCC_OscConfig+0x200>
 8004746:	e01b      	b.n	8004780 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004748:	4b09      	ldr	r3, [pc, #36]	; (8004770 <HAL_RCC_OscConfig+0x248>)
 800474a:	2200      	movs	r2, #0
 800474c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800474e:	f7fd f955 	bl	80019fc <HAL_GetTick>
 8004752:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004754:	e00e      	b.n	8004774 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004756:	f7fd f951 	bl	80019fc <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	2b02      	cmp	r3, #2
 8004762:	d907      	bls.n	8004774 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e150      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
 8004768:	40023800 	.word	0x40023800
 800476c:	42470000 	.word	0x42470000
 8004770:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004774:	4b88      	ldr	r3, [pc, #544]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 8004776:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1ea      	bne.n	8004756 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0304 	and.w	r3, r3, #4
 8004788:	2b00      	cmp	r3, #0
 800478a:	f000 8097 	beq.w	80048bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800478e:	2300      	movs	r3, #0
 8004790:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004792:	4b81      	ldr	r3, [pc, #516]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 8004794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d10f      	bne.n	80047be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800479e:	2300      	movs	r3, #0
 80047a0:	60bb      	str	r3, [r7, #8]
 80047a2:	4b7d      	ldr	r3, [pc, #500]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	4a7c      	ldr	r2, [pc, #496]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 80047a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047ac:	6413      	str	r3, [r2, #64]	; 0x40
 80047ae:	4b7a      	ldr	r3, [pc, #488]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 80047b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047b6:	60bb      	str	r3, [r7, #8]
 80047b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047ba:	2301      	movs	r3, #1
 80047bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047be:	4b77      	ldr	r3, [pc, #476]	; (800499c <HAL_RCC_OscConfig+0x474>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d118      	bne.n	80047fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047ca:	4b74      	ldr	r3, [pc, #464]	; (800499c <HAL_RCC_OscConfig+0x474>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a73      	ldr	r2, [pc, #460]	; (800499c <HAL_RCC_OscConfig+0x474>)
 80047d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047d6:	f7fd f911 	bl	80019fc <HAL_GetTick>
 80047da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047dc:	e008      	b.n	80047f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047de:	f7fd f90d 	bl	80019fc <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d901      	bls.n	80047f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e10c      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047f0:	4b6a      	ldr	r3, [pc, #424]	; (800499c <HAL_RCC_OscConfig+0x474>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d0f0      	beq.n	80047de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d106      	bne.n	8004812 <HAL_RCC_OscConfig+0x2ea>
 8004804:	4b64      	ldr	r3, [pc, #400]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 8004806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004808:	4a63      	ldr	r2, [pc, #396]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 800480a:	f043 0301 	orr.w	r3, r3, #1
 800480e:	6713      	str	r3, [r2, #112]	; 0x70
 8004810:	e01c      	b.n	800484c <HAL_RCC_OscConfig+0x324>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	2b05      	cmp	r3, #5
 8004818:	d10c      	bne.n	8004834 <HAL_RCC_OscConfig+0x30c>
 800481a:	4b5f      	ldr	r3, [pc, #380]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 800481c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800481e:	4a5e      	ldr	r2, [pc, #376]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 8004820:	f043 0304 	orr.w	r3, r3, #4
 8004824:	6713      	str	r3, [r2, #112]	; 0x70
 8004826:	4b5c      	ldr	r3, [pc, #368]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 8004828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800482a:	4a5b      	ldr	r2, [pc, #364]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 800482c:	f043 0301 	orr.w	r3, r3, #1
 8004830:	6713      	str	r3, [r2, #112]	; 0x70
 8004832:	e00b      	b.n	800484c <HAL_RCC_OscConfig+0x324>
 8004834:	4b58      	ldr	r3, [pc, #352]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 8004836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004838:	4a57      	ldr	r2, [pc, #348]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 800483a:	f023 0301 	bic.w	r3, r3, #1
 800483e:	6713      	str	r3, [r2, #112]	; 0x70
 8004840:	4b55      	ldr	r3, [pc, #340]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 8004842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004844:	4a54      	ldr	r2, [pc, #336]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 8004846:	f023 0304 	bic.w	r3, r3, #4
 800484a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d015      	beq.n	8004880 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004854:	f7fd f8d2 	bl	80019fc <HAL_GetTick>
 8004858:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800485a:	e00a      	b.n	8004872 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800485c:	f7fd f8ce 	bl	80019fc <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	f241 3288 	movw	r2, #5000	; 0x1388
 800486a:	4293      	cmp	r3, r2
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e0cb      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004872:	4b49      	ldr	r3, [pc, #292]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 8004874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d0ee      	beq.n	800485c <HAL_RCC_OscConfig+0x334>
 800487e:	e014      	b.n	80048aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004880:	f7fd f8bc 	bl	80019fc <HAL_GetTick>
 8004884:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004886:	e00a      	b.n	800489e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004888:	f7fd f8b8 	bl	80019fc <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	f241 3288 	movw	r2, #5000	; 0x1388
 8004896:	4293      	cmp	r3, r2
 8004898:	d901      	bls.n	800489e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e0b5      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800489e:	4b3e      	ldr	r3, [pc, #248]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 80048a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1ee      	bne.n	8004888 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048aa:	7dfb      	ldrb	r3, [r7, #23]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d105      	bne.n	80048bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048b0:	4b39      	ldr	r3, [pc, #228]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 80048b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b4:	4a38      	ldr	r2, [pc, #224]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 80048b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f000 80a1 	beq.w	8004a08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048c6:	4b34      	ldr	r3, [pc, #208]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f003 030c 	and.w	r3, r3, #12
 80048ce:	2b08      	cmp	r3, #8
 80048d0:	d05c      	beq.n	800498c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d141      	bne.n	800495e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048da:	4b31      	ldr	r3, [pc, #196]	; (80049a0 <HAL_RCC_OscConfig+0x478>)
 80048dc:	2200      	movs	r2, #0
 80048de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e0:	f7fd f88c 	bl	80019fc <HAL_GetTick>
 80048e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048e6:	e008      	b.n	80048fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048e8:	f7fd f888 	bl	80019fc <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e087      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048fa:	4b27      	ldr	r3, [pc, #156]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1f0      	bne.n	80048e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	69da      	ldr	r2, [r3, #28]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	431a      	orrs	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004914:	019b      	lsls	r3, r3, #6
 8004916:	431a      	orrs	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491c:	085b      	lsrs	r3, r3, #1
 800491e:	3b01      	subs	r3, #1
 8004920:	041b      	lsls	r3, r3, #16
 8004922:	431a      	orrs	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004928:	061b      	lsls	r3, r3, #24
 800492a:	491b      	ldr	r1, [pc, #108]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 800492c:	4313      	orrs	r3, r2
 800492e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004930:	4b1b      	ldr	r3, [pc, #108]	; (80049a0 <HAL_RCC_OscConfig+0x478>)
 8004932:	2201      	movs	r2, #1
 8004934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004936:	f7fd f861 	bl	80019fc <HAL_GetTick>
 800493a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800493c:	e008      	b.n	8004950 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800493e:	f7fd f85d 	bl	80019fc <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	2b02      	cmp	r3, #2
 800494a:	d901      	bls.n	8004950 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e05c      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004950:	4b11      	ldr	r3, [pc, #68]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d0f0      	beq.n	800493e <HAL_RCC_OscConfig+0x416>
 800495c:	e054      	b.n	8004a08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800495e:	4b10      	ldr	r3, [pc, #64]	; (80049a0 <HAL_RCC_OscConfig+0x478>)
 8004960:	2200      	movs	r2, #0
 8004962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004964:	f7fd f84a 	bl	80019fc <HAL_GetTick>
 8004968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800496a:	e008      	b.n	800497e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800496c:	f7fd f846 	bl	80019fc <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	2b02      	cmp	r3, #2
 8004978:	d901      	bls.n	800497e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e045      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800497e:	4b06      	ldr	r3, [pc, #24]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1f0      	bne.n	800496c <HAL_RCC_OscConfig+0x444>
 800498a:	e03d      	b.n	8004a08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d107      	bne.n	80049a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e038      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
 8004998:	40023800 	.word	0x40023800
 800499c:	40007000 	.word	0x40007000
 80049a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049a4:	4b1b      	ldr	r3, [pc, #108]	; (8004a14 <HAL_RCC_OscConfig+0x4ec>)
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d028      	beq.n	8004a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049bc:	429a      	cmp	r2, r3
 80049be:	d121      	bne.n	8004a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d11a      	bne.n	8004a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049d4:	4013      	ands	r3, r2
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049dc:	4293      	cmp	r3, r2
 80049de:	d111      	bne.n	8004a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ea:	085b      	lsrs	r3, r3, #1
 80049ec:	3b01      	subs	r3, #1
 80049ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d107      	bne.n	8004a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d001      	beq.n	8004a08 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e000      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3718      	adds	r7, #24
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	40023800 	.word	0x40023800

08004a18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d101      	bne.n	8004a2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e0cc      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a2c:	4b68      	ldr	r3, [pc, #416]	; (8004bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0307 	and.w	r3, r3, #7
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d90c      	bls.n	8004a54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a3a:	4b65      	ldr	r3, [pc, #404]	; (8004bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a3c:	683a      	ldr	r2, [r7, #0]
 8004a3e:	b2d2      	uxtb	r2, r2
 8004a40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a42:	4b63      	ldr	r3, [pc, #396]	; (8004bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0307 	and.w	r3, r3, #7
 8004a4a:	683a      	ldr	r2, [r7, #0]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d001      	beq.n	8004a54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e0b8      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0302 	and.w	r3, r3, #2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d020      	beq.n	8004aa2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0304 	and.w	r3, r3, #4
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d005      	beq.n	8004a78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a6c:	4b59      	ldr	r3, [pc, #356]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	4a58      	ldr	r2, [pc, #352]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0308 	and.w	r3, r3, #8
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d005      	beq.n	8004a90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a84:	4b53      	ldr	r3, [pc, #332]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	4a52      	ldr	r2, [pc, #328]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a90:	4b50      	ldr	r3, [pc, #320]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	494d      	ldr	r1, [pc, #308]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d044      	beq.n	8004b38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d107      	bne.n	8004ac6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ab6:	4b47      	ldr	r3, [pc, #284]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d119      	bne.n	8004af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e07f      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d003      	beq.n	8004ad6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ad2:	2b03      	cmp	r3, #3
 8004ad4:	d107      	bne.n	8004ae6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ad6:	4b3f      	ldr	r3, [pc, #252]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d109      	bne.n	8004af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e06f      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ae6:	4b3b      	ldr	r3, [pc, #236]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e067      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004af6:	4b37      	ldr	r3, [pc, #220]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f023 0203 	bic.w	r2, r3, #3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	4934      	ldr	r1, [pc, #208]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b08:	f7fc ff78 	bl	80019fc <HAL_GetTick>
 8004b0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b0e:	e00a      	b.n	8004b26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b10:	f7fc ff74 	bl	80019fc <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d901      	bls.n	8004b26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e04f      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b26:	4b2b      	ldr	r3, [pc, #172]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f003 020c 	and.w	r2, r3, #12
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d1eb      	bne.n	8004b10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b38:	4b25      	ldr	r3, [pc, #148]	; (8004bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0307 	and.w	r3, r3, #7
 8004b40:	683a      	ldr	r2, [r7, #0]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d20c      	bcs.n	8004b60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b46:	4b22      	ldr	r3, [pc, #136]	; (8004bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b48:	683a      	ldr	r2, [r7, #0]
 8004b4a:	b2d2      	uxtb	r2, r2
 8004b4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b4e:	4b20      	ldr	r3, [pc, #128]	; (8004bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0307 	and.w	r3, r3, #7
 8004b56:	683a      	ldr	r2, [r7, #0]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d001      	beq.n	8004b60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e032      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0304 	and.w	r3, r3, #4
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d008      	beq.n	8004b7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b6c:	4b19      	ldr	r3, [pc, #100]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	4916      	ldr	r1, [pc, #88]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0308 	and.w	r3, r3, #8
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d009      	beq.n	8004b9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b8a:	4b12      	ldr	r3, [pc, #72]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	00db      	lsls	r3, r3, #3
 8004b98:	490e      	ldr	r1, [pc, #56]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b9e:	f000 f821 	bl	8004be4 <HAL_RCC_GetSysClockFreq>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	4b0b      	ldr	r3, [pc, #44]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	091b      	lsrs	r3, r3, #4
 8004baa:	f003 030f 	and.w	r3, r3, #15
 8004bae:	490a      	ldr	r1, [pc, #40]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8004bb0:	5ccb      	ldrb	r3, [r1, r3]
 8004bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8004bb6:	4a09      	ldr	r2, [pc, #36]	; (8004bdc <HAL_RCC_ClockConfig+0x1c4>)
 8004bb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004bba:	4b09      	ldr	r3, [pc, #36]	; (8004be0 <HAL_RCC_ClockConfig+0x1c8>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7fc fed8 	bl	8001974 <HAL_InitTick>

  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	40023c00 	.word	0x40023c00
 8004bd4:	40023800 	.word	0x40023800
 8004bd8:	08005c9c 	.word	0x08005c9c
 8004bdc:	20000038 	.word	0x20000038
 8004be0:	2000003c 	.word	0x2000003c

08004be4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004be4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004be8:	b094      	sub	sp, #80	; 0x50
 8004bea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004bec:	2300      	movs	r3, #0
 8004bee:	647b      	str	r3, [r7, #68]	; 0x44
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bfc:	4b79      	ldr	r3, [pc, #484]	; (8004de4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f003 030c 	and.w	r3, r3, #12
 8004c04:	2b08      	cmp	r3, #8
 8004c06:	d00d      	beq.n	8004c24 <HAL_RCC_GetSysClockFreq+0x40>
 8004c08:	2b08      	cmp	r3, #8
 8004c0a:	f200 80e1 	bhi.w	8004dd0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d002      	beq.n	8004c18 <HAL_RCC_GetSysClockFreq+0x34>
 8004c12:	2b04      	cmp	r3, #4
 8004c14:	d003      	beq.n	8004c1e <HAL_RCC_GetSysClockFreq+0x3a>
 8004c16:	e0db      	b.n	8004dd0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c18:	4b73      	ldr	r3, [pc, #460]	; (8004de8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c1a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004c1c:	e0db      	b.n	8004dd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c1e:	4b73      	ldr	r3, [pc, #460]	; (8004dec <HAL_RCC_GetSysClockFreq+0x208>)
 8004c20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c22:	e0d8      	b.n	8004dd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c24:	4b6f      	ldr	r3, [pc, #444]	; (8004de4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c2c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c2e:	4b6d      	ldr	r3, [pc, #436]	; (8004de4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d063      	beq.n	8004d02 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c3a:	4b6a      	ldr	r3, [pc, #424]	; (8004de4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	099b      	lsrs	r3, r3, #6
 8004c40:	2200      	movs	r2, #0
 8004c42:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c44:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c4c:	633b      	str	r3, [r7, #48]	; 0x30
 8004c4e:	2300      	movs	r3, #0
 8004c50:	637b      	str	r3, [r7, #52]	; 0x34
 8004c52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004c56:	4622      	mov	r2, r4
 8004c58:	462b      	mov	r3, r5
 8004c5a:	f04f 0000 	mov.w	r0, #0
 8004c5e:	f04f 0100 	mov.w	r1, #0
 8004c62:	0159      	lsls	r1, r3, #5
 8004c64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c68:	0150      	lsls	r0, r2, #5
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	4621      	mov	r1, r4
 8004c70:	1a51      	subs	r1, r2, r1
 8004c72:	6139      	str	r1, [r7, #16]
 8004c74:	4629      	mov	r1, r5
 8004c76:	eb63 0301 	sbc.w	r3, r3, r1
 8004c7a:	617b      	str	r3, [r7, #20]
 8004c7c:	f04f 0200 	mov.w	r2, #0
 8004c80:	f04f 0300 	mov.w	r3, #0
 8004c84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c88:	4659      	mov	r1, fp
 8004c8a:	018b      	lsls	r3, r1, #6
 8004c8c:	4651      	mov	r1, sl
 8004c8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c92:	4651      	mov	r1, sl
 8004c94:	018a      	lsls	r2, r1, #6
 8004c96:	4651      	mov	r1, sl
 8004c98:	ebb2 0801 	subs.w	r8, r2, r1
 8004c9c:	4659      	mov	r1, fp
 8004c9e:	eb63 0901 	sbc.w	r9, r3, r1
 8004ca2:	f04f 0200 	mov.w	r2, #0
 8004ca6:	f04f 0300 	mov.w	r3, #0
 8004caa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cb6:	4690      	mov	r8, r2
 8004cb8:	4699      	mov	r9, r3
 8004cba:	4623      	mov	r3, r4
 8004cbc:	eb18 0303 	adds.w	r3, r8, r3
 8004cc0:	60bb      	str	r3, [r7, #8]
 8004cc2:	462b      	mov	r3, r5
 8004cc4:	eb49 0303 	adc.w	r3, r9, r3
 8004cc8:	60fb      	str	r3, [r7, #12]
 8004cca:	f04f 0200 	mov.w	r2, #0
 8004cce:	f04f 0300 	mov.w	r3, #0
 8004cd2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004cd6:	4629      	mov	r1, r5
 8004cd8:	024b      	lsls	r3, r1, #9
 8004cda:	4621      	mov	r1, r4
 8004cdc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ce0:	4621      	mov	r1, r4
 8004ce2:	024a      	lsls	r2, r1, #9
 8004ce4:	4610      	mov	r0, r2
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cea:	2200      	movs	r2, #0
 8004cec:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cf0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004cf4:	f7fb fa70 	bl	80001d8 <__aeabi_uldivmod>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d00:	e058      	b.n	8004db4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d02:	4b38      	ldr	r3, [pc, #224]	; (8004de4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	099b      	lsrs	r3, r3, #6
 8004d08:	2200      	movs	r2, #0
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	4611      	mov	r1, r2
 8004d0e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d12:	623b      	str	r3, [r7, #32]
 8004d14:	2300      	movs	r3, #0
 8004d16:	627b      	str	r3, [r7, #36]	; 0x24
 8004d18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d1c:	4642      	mov	r2, r8
 8004d1e:	464b      	mov	r3, r9
 8004d20:	f04f 0000 	mov.w	r0, #0
 8004d24:	f04f 0100 	mov.w	r1, #0
 8004d28:	0159      	lsls	r1, r3, #5
 8004d2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d2e:	0150      	lsls	r0, r2, #5
 8004d30:	4602      	mov	r2, r0
 8004d32:	460b      	mov	r3, r1
 8004d34:	4641      	mov	r1, r8
 8004d36:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d3a:	4649      	mov	r1, r9
 8004d3c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d40:	f04f 0200 	mov.w	r2, #0
 8004d44:	f04f 0300 	mov.w	r3, #0
 8004d48:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d4c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d50:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d54:	ebb2 040a 	subs.w	r4, r2, sl
 8004d58:	eb63 050b 	sbc.w	r5, r3, fp
 8004d5c:	f04f 0200 	mov.w	r2, #0
 8004d60:	f04f 0300 	mov.w	r3, #0
 8004d64:	00eb      	lsls	r3, r5, #3
 8004d66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d6a:	00e2      	lsls	r2, r4, #3
 8004d6c:	4614      	mov	r4, r2
 8004d6e:	461d      	mov	r5, r3
 8004d70:	4643      	mov	r3, r8
 8004d72:	18e3      	adds	r3, r4, r3
 8004d74:	603b      	str	r3, [r7, #0]
 8004d76:	464b      	mov	r3, r9
 8004d78:	eb45 0303 	adc.w	r3, r5, r3
 8004d7c:	607b      	str	r3, [r7, #4]
 8004d7e:	f04f 0200 	mov.w	r2, #0
 8004d82:	f04f 0300 	mov.w	r3, #0
 8004d86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d8a:	4629      	mov	r1, r5
 8004d8c:	028b      	lsls	r3, r1, #10
 8004d8e:	4621      	mov	r1, r4
 8004d90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d94:	4621      	mov	r1, r4
 8004d96:	028a      	lsls	r2, r1, #10
 8004d98:	4610      	mov	r0, r2
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d9e:	2200      	movs	r2, #0
 8004da0:	61bb      	str	r3, [r7, #24]
 8004da2:	61fa      	str	r2, [r7, #28]
 8004da4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004da8:	f7fb fa16 	bl	80001d8 <__aeabi_uldivmod>
 8004dac:	4602      	mov	r2, r0
 8004dae:	460b      	mov	r3, r1
 8004db0:	4613      	mov	r3, r2
 8004db2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004db4:	4b0b      	ldr	r3, [pc, #44]	; (8004de4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	0c1b      	lsrs	r3, r3, #16
 8004dba:	f003 0303 	and.w	r3, r3, #3
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	005b      	lsls	r3, r3, #1
 8004dc2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004dc4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004dc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dcc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dce:	e002      	b.n	8004dd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004dd0:	4b05      	ldr	r3, [pc, #20]	; (8004de8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004dd2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004dd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3750      	adds	r7, #80	; 0x50
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004de2:	bf00      	nop
 8004de4:	40023800 	.word	0x40023800
 8004de8:	00f42400 	.word	0x00f42400
 8004dec:	007a1200 	.word	0x007a1200

08004df0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004df0:	b480      	push	{r7}
 8004df2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004df4:	4b03      	ldr	r3, [pc, #12]	; (8004e04 <HAL_RCC_GetHCLKFreq+0x14>)
 8004df6:	681b      	ldr	r3, [r3, #0]
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	20000038 	.word	0x20000038

08004e08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e0c:	f7ff fff0 	bl	8004df0 <HAL_RCC_GetHCLKFreq>
 8004e10:	4602      	mov	r2, r0
 8004e12:	4b05      	ldr	r3, [pc, #20]	; (8004e28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	0a9b      	lsrs	r3, r3, #10
 8004e18:	f003 0307 	and.w	r3, r3, #7
 8004e1c:	4903      	ldr	r1, [pc, #12]	; (8004e2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e1e:	5ccb      	ldrb	r3, [r1, r3]
 8004e20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	40023800 	.word	0x40023800
 8004e2c:	08005cac 	.word	0x08005cac

08004e30 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b086      	sub	sp, #24
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0301 	and.w	r3, r3, #1
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d105      	bne.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d038      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004e58:	4b68      	ldr	r3, [pc, #416]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e5e:	f7fc fdcd 	bl	80019fc <HAL_GetTick>
 8004e62:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e64:	e008      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004e66:	f7fc fdc9 	bl	80019fc <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d901      	bls.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e0bd      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e78:	4b61      	ldr	r3, [pc, #388]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1f0      	bne.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	019b      	lsls	r3, r3, #6
 8004e8e:	431a      	orrs	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	071b      	lsls	r3, r3, #28
 8004e96:	495a      	ldr	r1, [pc, #360]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004e9e:	4b57      	ldr	r3, [pc, #348]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ea4:	f7fc fdaa 	bl	80019fc <HAL_GetTick>
 8004ea8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004eaa:	e008      	b.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004eac:	f7fc fda6 	bl	80019fc <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e09a      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ebe:	4b50      	ldr	r3, [pc, #320]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d0f0      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0302 	and.w	r3, r3, #2
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f000 8083 	beq.w	8004fde <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ed8:	2300      	movs	r3, #0
 8004eda:	60fb      	str	r3, [r7, #12]
 8004edc:	4b48      	ldr	r3, [pc, #288]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee0:	4a47      	ldr	r2, [pc, #284]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ee2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ee6:	6413      	str	r3, [r2, #64]	; 0x40
 8004ee8:	4b45      	ldr	r3, [pc, #276]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ef0:	60fb      	str	r3, [r7, #12]
 8004ef2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004ef4:	4b43      	ldr	r3, [pc, #268]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a42      	ldr	r2, [pc, #264]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004efa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004efe:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f00:	f7fc fd7c 	bl	80019fc <HAL_GetTick>
 8004f04:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004f06:	e008      	b.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004f08:	f7fc fd78 	bl	80019fc <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d901      	bls.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e06c      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004f1a:	4b3a      	ldr	r3, [pc, #232]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d0f0      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f26:	4b36      	ldr	r3, [pc, #216]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f2e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d02f      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f3e:	693a      	ldr	r2, [r7, #16]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d028      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f44:	4b2e      	ldr	r3, [pc, #184]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f4c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f4e:	4b2e      	ldr	r3, [pc, #184]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004f50:	2201      	movs	r2, #1
 8004f52:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f54:	4b2c      	ldr	r3, [pc, #176]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004f56:	2200      	movs	r2, #0
 8004f58:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004f5a:	4a29      	ldr	r2, [pc, #164]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004f60:	4b27      	ldr	r3, [pc, #156]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f64:	f003 0301 	and.w	r3, r3, #1
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d114      	bne.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004f6c:	f7fc fd46 	bl	80019fc <HAL_GetTick>
 8004f70:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f72:	e00a      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f74:	f7fc fd42 	bl	80019fc <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d901      	bls.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e034      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f8a:	4b1d      	ldr	r3, [pc, #116]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f8e:	f003 0302 	and.w	r3, r3, #2
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d0ee      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fa2:	d10d      	bne.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004fa4:	4b16      	ldr	r3, [pc, #88]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004fb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fb8:	4911      	ldr	r1, [pc, #68]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	608b      	str	r3, [r1, #8]
 8004fbe:	e005      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004fc0:	4b0f      	ldr	r3, [pc, #60]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	4a0e      	ldr	r2, [pc, #56]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fc6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004fca:	6093      	str	r3, [r2, #8]
 8004fcc:	4b0c      	ldr	r3, [pc, #48]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fd8:	4909      	ldr	r1, [pc, #36]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0308 	and.w	r3, r3, #8
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d003      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	7d1a      	ldrb	r2, [r3, #20]
 8004fee:	4b07      	ldr	r3, [pc, #28]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004ff0:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3718      	adds	r7, #24
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	42470068 	.word	0x42470068
 8005000:	40023800 	.word	0x40023800
 8005004:	40007000 	.word	0x40007000
 8005008:	42470e40 	.word	0x42470e40
 800500c:	424711e0 	.word	0x424711e0

08005010 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005010:	b480      	push	{r7}
 8005012:	b085      	sub	sp, #20
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2203      	movs	r2, #3
 800501c:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800501e:	4b1c      	ldr	r3, [pc, #112]	; (8005090 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8005020:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005024:	099b      	lsrs	r3, r3, #6
 8005026:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800502e:	4b18      	ldr	r3, [pc, #96]	; (8005090 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8005030:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005034:	0f1b      	lsrs	r3, r3, #28
 8005036:	f003 0207 	and.w	r2, r3, #7
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	60da      	str	r2, [r3, #12]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
 800503e:	4b14      	ldr	r3, [pc, #80]	; (8005090 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8005040:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005044:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	605a      	str	r2, [r3, #4]
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800504c:	4b10      	ldr	r3, [pc, #64]	; (8005090 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8005054:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8005056:	4b0e      	ldr	r3, [pc, #56]	; (8005090 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8005058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800505a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	431a      	orrs	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	611a      	str	r2, [r3, #16]

#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
 8005066:	4b0a      	ldr	r3, [pc, #40]	; (8005090 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8005068:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800506c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d103      	bne.n	800507c <HAL_RCCEx_GetPeriphCLKConfig+0x6c>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	751a      	strb	r2, [r3, #20]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 800507a:	e002      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKConfig+0x72>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	751a      	strb	r2, [r3, #20]
}
 8005082:	bf00      	nop
 8005084:	3714      	adds	r7, #20
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	40023800 	.word	0x40023800

08005094 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005094:	b480      	push	{r7}
 8005096:	b087      	sub	sp, #28
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800509c:	2300      	movs	r3, #0
 800509e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80050a0:	2300      	movs	r3, #0
 80050a2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80050a4:	2300      	movs	r3, #0
 80050a6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80050a8:	2300      	movs	r3, #0
 80050aa:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d141      	bne.n	8005136 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80050b2:	4b25      	ldr	r3, [pc, #148]	; (8005148 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050ba:	60fb      	str	r3, [r7, #12]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d006      	beq.n	80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050c8:	d131      	bne.n	800512e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80050ca:	4b20      	ldr	r3, [pc, #128]	; (800514c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80050cc:	617b      	str	r3, [r7, #20]
          break;
 80050ce:	e031      	b.n	8005134 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80050d0:	4b1d      	ldr	r3, [pc, #116]	; (8005148 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050dc:	d109      	bne.n	80050f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80050de:	4b1a      	ldr	r3, [pc, #104]	; (8005148 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80050e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050e8:	4a19      	ldr	r2, [pc, #100]	; (8005150 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80050ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ee:	613b      	str	r3, [r7, #16]
 80050f0:	e008      	b.n	8005104 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80050f2:	4b15      	ldr	r3, [pc, #84]	; (8005148 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80050f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050fc:	4a15      	ldr	r2, [pc, #84]	; (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 80050fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005102:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005104:	4b10      	ldr	r3, [pc, #64]	; (8005148 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005106:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800510a:	099b      	lsrs	r3, r3, #6
 800510c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	fb02 f303 	mul.w	r3, r2, r3
 8005116:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005118:	4b0b      	ldr	r3, [pc, #44]	; (8005148 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800511a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800511e:	0f1b      	lsrs	r3, r3, #28
 8005120:	f003 0307 	and.w	r3, r3, #7
 8005124:	68ba      	ldr	r2, [r7, #8]
 8005126:	fbb2 f3f3 	udiv	r3, r2, r3
 800512a:	617b      	str	r3, [r7, #20]
          break;
 800512c:	e002      	b.n	8005134 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800512e:	2300      	movs	r3, #0
 8005130:	617b      	str	r3, [r7, #20]
          break;
 8005132:	bf00      	nop
        }
      }
      break;
 8005134:	e000      	b.n	8005138 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
  default:
    {
       break;
 8005136:	bf00      	nop
    }
  }
  return frequency;
 8005138:	697b      	ldr	r3, [r7, #20]
}
 800513a:	4618      	mov	r0, r3
 800513c:	371c      	adds	r7, #28
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	40023800 	.word	0x40023800
 800514c:	00bb8000 	.word	0x00bb8000
 8005150:	007a1200 	.word	0x007a1200
 8005154:	00f42400 	.word	0x00f42400

08005158 <memset>:
 8005158:	4402      	add	r2, r0
 800515a:	4603      	mov	r3, r0
 800515c:	4293      	cmp	r3, r2
 800515e:	d100      	bne.n	8005162 <memset+0xa>
 8005160:	4770      	bx	lr
 8005162:	f803 1b01 	strb.w	r1, [r3], #1
 8005166:	e7f9      	b.n	800515c <memset+0x4>

08005168 <__libc_init_array>:
 8005168:	b570      	push	{r4, r5, r6, lr}
 800516a:	4d0d      	ldr	r5, [pc, #52]	; (80051a0 <__libc_init_array+0x38>)
 800516c:	4c0d      	ldr	r4, [pc, #52]	; (80051a4 <__libc_init_array+0x3c>)
 800516e:	1b64      	subs	r4, r4, r5
 8005170:	10a4      	asrs	r4, r4, #2
 8005172:	2600      	movs	r6, #0
 8005174:	42a6      	cmp	r6, r4
 8005176:	d109      	bne.n	800518c <__libc_init_array+0x24>
 8005178:	4d0b      	ldr	r5, [pc, #44]	; (80051a8 <__libc_init_array+0x40>)
 800517a:	4c0c      	ldr	r4, [pc, #48]	; (80051ac <__libc_init_array+0x44>)
 800517c:	f000 fd52 	bl	8005c24 <_init>
 8005180:	1b64      	subs	r4, r4, r5
 8005182:	10a4      	asrs	r4, r4, #2
 8005184:	2600      	movs	r6, #0
 8005186:	42a6      	cmp	r6, r4
 8005188:	d105      	bne.n	8005196 <__libc_init_array+0x2e>
 800518a:	bd70      	pop	{r4, r5, r6, pc}
 800518c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005190:	4798      	blx	r3
 8005192:	3601      	adds	r6, #1
 8005194:	e7ee      	b.n	8005174 <__libc_init_array+0xc>
 8005196:	f855 3b04 	ldr.w	r3, [r5], #4
 800519a:	4798      	blx	r3
 800519c:	3601      	adds	r6, #1
 800519e:	e7f2      	b.n	8005186 <__libc_init_array+0x1e>
 80051a0:	08006094 	.word	0x08006094
 80051a4:	08006094 	.word	0x08006094
 80051a8:	08006094 	.word	0x08006094
 80051ac:	08006098 	.word	0x08006098

080051b0 <sinf>:
 80051b0:	ee10 3a10 	vmov	r3, s0
 80051b4:	b507      	push	{r0, r1, r2, lr}
 80051b6:	4a1f      	ldr	r2, [pc, #124]	; (8005234 <sinf+0x84>)
 80051b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80051bc:	4293      	cmp	r3, r2
 80051be:	dc07      	bgt.n	80051d0 <sinf+0x20>
 80051c0:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8005238 <sinf+0x88>
 80051c4:	2000      	movs	r0, #0
 80051c6:	b003      	add	sp, #12
 80051c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80051cc:	f000 b894 	b.w	80052f8 <__kernel_sinf>
 80051d0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80051d4:	db04      	blt.n	80051e0 <sinf+0x30>
 80051d6:	ee30 0a40 	vsub.f32	s0, s0, s0
 80051da:	b003      	add	sp, #12
 80051dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80051e0:	4668      	mov	r0, sp
 80051e2:	f000 f8d1 	bl	8005388 <__ieee754_rem_pio2f>
 80051e6:	f000 0003 	and.w	r0, r0, #3
 80051ea:	2801      	cmp	r0, #1
 80051ec:	d00a      	beq.n	8005204 <sinf+0x54>
 80051ee:	2802      	cmp	r0, #2
 80051f0:	d00f      	beq.n	8005212 <sinf+0x62>
 80051f2:	b9c0      	cbnz	r0, 8005226 <sinf+0x76>
 80051f4:	eddd 0a01 	vldr	s1, [sp, #4]
 80051f8:	ed9d 0a00 	vldr	s0, [sp]
 80051fc:	2001      	movs	r0, #1
 80051fe:	f000 f87b 	bl	80052f8 <__kernel_sinf>
 8005202:	e7ea      	b.n	80051da <sinf+0x2a>
 8005204:	eddd 0a01 	vldr	s1, [sp, #4]
 8005208:	ed9d 0a00 	vldr	s0, [sp]
 800520c:	f000 f816 	bl	800523c <__kernel_cosf>
 8005210:	e7e3      	b.n	80051da <sinf+0x2a>
 8005212:	eddd 0a01 	vldr	s1, [sp, #4]
 8005216:	ed9d 0a00 	vldr	s0, [sp]
 800521a:	2001      	movs	r0, #1
 800521c:	f000 f86c 	bl	80052f8 <__kernel_sinf>
 8005220:	eeb1 0a40 	vneg.f32	s0, s0
 8005224:	e7d9      	b.n	80051da <sinf+0x2a>
 8005226:	eddd 0a01 	vldr	s1, [sp, #4]
 800522a:	ed9d 0a00 	vldr	s0, [sp]
 800522e:	f000 f805 	bl	800523c <__kernel_cosf>
 8005232:	e7f5      	b.n	8005220 <sinf+0x70>
 8005234:	3f490fd8 	.word	0x3f490fd8
 8005238:	00000000 	.word	0x00000000

0800523c <__kernel_cosf>:
 800523c:	ee10 3a10 	vmov	r3, s0
 8005240:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005244:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8005248:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800524c:	da05      	bge.n	800525a <__kernel_cosf+0x1e>
 800524e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005252:	ee17 2a90 	vmov	r2, s15
 8005256:	2a00      	cmp	r2, #0
 8005258:	d03b      	beq.n	80052d2 <__kernel_cosf+0x96>
 800525a:	ee20 7a00 	vmul.f32	s14, s0, s0
 800525e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80052d8 <__kernel_cosf+0x9c>
 8005262:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 80052dc <__kernel_cosf+0xa0>
 8005266:	4a1e      	ldr	r2, [pc, #120]	; (80052e0 <__kernel_cosf+0xa4>)
 8005268:	eea7 6a27 	vfma.f32	s12, s14, s15
 800526c:	4293      	cmp	r3, r2
 800526e:	eddf 7a1d 	vldr	s15, [pc, #116]	; 80052e4 <__kernel_cosf+0xa8>
 8005272:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005276:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 80052e8 <__kernel_cosf+0xac>
 800527a:	eea7 6a87 	vfma.f32	s12, s15, s14
 800527e:	eddf 7a1b 	vldr	s15, [pc, #108]	; 80052ec <__kernel_cosf+0xb0>
 8005282:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005286:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 80052f0 <__kernel_cosf+0xb4>
 800528a:	eea7 6a87 	vfma.f32	s12, s15, s14
 800528e:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8005292:	ee26 6a07 	vmul.f32	s12, s12, s14
 8005296:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800529a:	eee7 0a06 	vfma.f32	s1, s14, s12
 800529e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052a2:	dc04      	bgt.n	80052ae <__kernel_cosf+0x72>
 80052a4:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80052a8:	ee36 0ae7 	vsub.f32	s0, s13, s15
 80052ac:	4770      	bx	lr
 80052ae:	4a11      	ldr	r2, [pc, #68]	; (80052f4 <__kernel_cosf+0xb8>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	bfda      	itte	le
 80052b4:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80052b8:	ee07 3a10 	vmovle	s14, r3
 80052bc:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 80052c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80052c4:	ee36 0ac7 	vsub.f32	s0, s13, s14
 80052c8:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80052cc:	ee30 0a67 	vsub.f32	s0, s0, s15
 80052d0:	4770      	bx	lr
 80052d2:	eeb0 0a66 	vmov.f32	s0, s13
 80052d6:	4770      	bx	lr
 80052d8:	ad47d74e 	.word	0xad47d74e
 80052dc:	310f74f6 	.word	0x310f74f6
 80052e0:	3e999999 	.word	0x3e999999
 80052e4:	b493f27c 	.word	0xb493f27c
 80052e8:	37d00d01 	.word	0x37d00d01
 80052ec:	bab60b61 	.word	0xbab60b61
 80052f0:	3d2aaaab 	.word	0x3d2aaaab
 80052f4:	3f480000 	.word	0x3f480000

080052f8 <__kernel_sinf>:
 80052f8:	ee10 3a10 	vmov	r3, s0
 80052fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005300:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8005304:	da04      	bge.n	8005310 <__kernel_sinf+0x18>
 8005306:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800530a:	ee17 3a90 	vmov	r3, s15
 800530e:	b35b      	cbz	r3, 8005368 <__kernel_sinf+0x70>
 8005310:	ee20 7a00 	vmul.f32	s14, s0, s0
 8005314:	eddf 7a15 	vldr	s15, [pc, #84]	; 800536c <__kernel_sinf+0x74>
 8005318:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8005370 <__kernel_sinf+0x78>
 800531c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005320:	eddf 7a14 	vldr	s15, [pc, #80]	; 8005374 <__kernel_sinf+0x7c>
 8005324:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005328:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8005378 <__kernel_sinf+0x80>
 800532c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8005330:	eddf 7a12 	vldr	s15, [pc, #72]	; 800537c <__kernel_sinf+0x84>
 8005334:	ee60 6a07 	vmul.f32	s13, s0, s14
 8005338:	eee6 7a07 	vfma.f32	s15, s12, s14
 800533c:	b930      	cbnz	r0, 800534c <__kernel_sinf+0x54>
 800533e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8005380 <__kernel_sinf+0x88>
 8005342:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005346:	eea6 0a26 	vfma.f32	s0, s12, s13
 800534a:	4770      	bx	lr
 800534c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8005350:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005354:	eee0 7a86 	vfma.f32	s15, s1, s12
 8005358:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800535c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8005384 <__kernel_sinf+0x8c>
 8005360:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8005364:	ee30 0a60 	vsub.f32	s0, s0, s1
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	2f2ec9d3 	.word	0x2f2ec9d3
 8005370:	b2d72f34 	.word	0xb2d72f34
 8005374:	3638ef1b 	.word	0x3638ef1b
 8005378:	b9500d01 	.word	0xb9500d01
 800537c:	3c088889 	.word	0x3c088889
 8005380:	be2aaaab 	.word	0xbe2aaaab
 8005384:	3e2aaaab 	.word	0x3e2aaaab

08005388 <__ieee754_rem_pio2f>:
 8005388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800538a:	ee10 6a10 	vmov	r6, s0
 800538e:	4b86      	ldr	r3, [pc, #536]	; (80055a8 <__ieee754_rem_pio2f+0x220>)
 8005390:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8005394:	429d      	cmp	r5, r3
 8005396:	b087      	sub	sp, #28
 8005398:	4604      	mov	r4, r0
 800539a:	dc05      	bgt.n	80053a8 <__ieee754_rem_pio2f+0x20>
 800539c:	2300      	movs	r3, #0
 800539e:	ed80 0a00 	vstr	s0, [r0]
 80053a2:	6043      	str	r3, [r0, #4]
 80053a4:	2000      	movs	r0, #0
 80053a6:	e020      	b.n	80053ea <__ieee754_rem_pio2f+0x62>
 80053a8:	4b80      	ldr	r3, [pc, #512]	; (80055ac <__ieee754_rem_pio2f+0x224>)
 80053aa:	429d      	cmp	r5, r3
 80053ac:	dc38      	bgt.n	8005420 <__ieee754_rem_pio2f+0x98>
 80053ae:	2e00      	cmp	r6, #0
 80053b0:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 80055b0 <__ieee754_rem_pio2f+0x228>
 80053b4:	4b7f      	ldr	r3, [pc, #508]	; (80055b4 <__ieee754_rem_pio2f+0x22c>)
 80053b6:	f025 050f 	bic.w	r5, r5, #15
 80053ba:	dd18      	ble.n	80053ee <__ieee754_rem_pio2f+0x66>
 80053bc:	429d      	cmp	r5, r3
 80053be:	ee70 7a47 	vsub.f32	s15, s0, s14
 80053c2:	bf09      	itett	eq
 80053c4:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 80055b8 <__ieee754_rem_pio2f+0x230>
 80053c8:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 80055bc <__ieee754_rem_pio2f+0x234>
 80053cc:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80053d0:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 80055c0 <__ieee754_rem_pio2f+0x238>
 80053d4:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80053d8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80053dc:	edc0 6a00 	vstr	s13, [r0]
 80053e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80053e4:	edc0 7a01 	vstr	s15, [r0, #4]
 80053e8:	2001      	movs	r0, #1
 80053ea:	b007      	add	sp, #28
 80053ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053ee:	429d      	cmp	r5, r3
 80053f0:	ee70 7a07 	vadd.f32	s15, s0, s14
 80053f4:	bf09      	itett	eq
 80053f6:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 80055b8 <__ieee754_rem_pio2f+0x230>
 80053fa:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 80055bc <__ieee754_rem_pio2f+0x234>
 80053fe:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8005402:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 80055c0 <__ieee754_rem_pio2f+0x238>
 8005406:	ee77 6a87 	vadd.f32	s13, s15, s14
 800540a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800540e:	edc0 6a00 	vstr	s13, [r0]
 8005412:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005416:	edc0 7a01 	vstr	s15, [r0, #4]
 800541a:	f04f 30ff 	mov.w	r0, #4294967295
 800541e:	e7e4      	b.n	80053ea <__ieee754_rem_pio2f+0x62>
 8005420:	4b68      	ldr	r3, [pc, #416]	; (80055c4 <__ieee754_rem_pio2f+0x23c>)
 8005422:	429d      	cmp	r5, r3
 8005424:	dc71      	bgt.n	800550a <__ieee754_rem_pio2f+0x182>
 8005426:	f000 f8db 	bl	80055e0 <fabsf>
 800542a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80055c8 <__ieee754_rem_pio2f+0x240>
 800542e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005432:	eee0 7a07 	vfma.f32	s15, s0, s14
 8005436:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800543a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800543e:	ee17 0a90 	vmov	r0, s15
 8005442:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80055b0 <__ieee754_rem_pio2f+0x228>
 8005446:	eea7 0a67 	vfms.f32	s0, s14, s15
 800544a:	281f      	cmp	r0, #31
 800544c:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80055bc <__ieee754_rem_pio2f+0x234>
 8005450:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005454:	eeb1 6a47 	vneg.f32	s12, s14
 8005458:	ee70 6a67 	vsub.f32	s13, s0, s15
 800545c:	ee16 2a90 	vmov	r2, s13
 8005460:	dc1c      	bgt.n	800549c <__ieee754_rem_pio2f+0x114>
 8005462:	495a      	ldr	r1, [pc, #360]	; (80055cc <__ieee754_rem_pio2f+0x244>)
 8005464:	1e47      	subs	r7, r0, #1
 8005466:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800546a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800546e:	428b      	cmp	r3, r1
 8005470:	d014      	beq.n	800549c <__ieee754_rem_pio2f+0x114>
 8005472:	6022      	str	r2, [r4, #0]
 8005474:	ed94 7a00 	vldr	s14, [r4]
 8005478:	ee30 0a47 	vsub.f32	s0, s0, s14
 800547c:	2e00      	cmp	r6, #0
 800547e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005482:	ed84 0a01 	vstr	s0, [r4, #4]
 8005486:	dab0      	bge.n	80053ea <__ieee754_rem_pio2f+0x62>
 8005488:	eeb1 7a47 	vneg.f32	s14, s14
 800548c:	eeb1 0a40 	vneg.f32	s0, s0
 8005490:	ed84 7a00 	vstr	s14, [r4]
 8005494:	ed84 0a01 	vstr	s0, [r4, #4]
 8005498:	4240      	negs	r0, r0
 800549a:	e7a6      	b.n	80053ea <__ieee754_rem_pio2f+0x62>
 800549c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80054a0:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 80054a4:	2908      	cmp	r1, #8
 80054a6:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80054aa:	dde2      	ble.n	8005472 <__ieee754_rem_pio2f+0xea>
 80054ac:	eddf 5a42 	vldr	s11, [pc, #264]	; 80055b8 <__ieee754_rem_pio2f+0x230>
 80054b0:	eef0 6a40 	vmov.f32	s13, s0
 80054b4:	eee6 6a25 	vfma.f32	s13, s12, s11
 80054b8:	ee70 7a66 	vsub.f32	s15, s0, s13
 80054bc:	eee6 7a25 	vfma.f32	s15, s12, s11
 80054c0:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80055c0 <__ieee754_rem_pio2f+0x238>
 80054c4:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80054c8:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80054cc:	ee15 2a90 	vmov	r2, s11
 80054d0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80054d4:	1a5b      	subs	r3, r3, r1
 80054d6:	2b19      	cmp	r3, #25
 80054d8:	dc04      	bgt.n	80054e4 <__ieee754_rem_pio2f+0x15c>
 80054da:	edc4 5a00 	vstr	s11, [r4]
 80054de:	eeb0 0a66 	vmov.f32	s0, s13
 80054e2:	e7c7      	b.n	8005474 <__ieee754_rem_pio2f+0xec>
 80054e4:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80055d0 <__ieee754_rem_pio2f+0x248>
 80054e8:	eeb0 0a66 	vmov.f32	s0, s13
 80054ec:	eea6 0a25 	vfma.f32	s0, s12, s11
 80054f0:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80054f4:	eddf 6a37 	vldr	s13, [pc, #220]	; 80055d4 <__ieee754_rem_pio2f+0x24c>
 80054f8:	eee6 7a25 	vfma.f32	s15, s12, s11
 80054fc:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8005500:	ee30 7a67 	vsub.f32	s14, s0, s15
 8005504:	ed84 7a00 	vstr	s14, [r4]
 8005508:	e7b4      	b.n	8005474 <__ieee754_rem_pio2f+0xec>
 800550a:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800550e:	db06      	blt.n	800551e <__ieee754_rem_pio2f+0x196>
 8005510:	ee70 7a40 	vsub.f32	s15, s0, s0
 8005514:	edc0 7a01 	vstr	s15, [r0, #4]
 8005518:	edc0 7a00 	vstr	s15, [r0]
 800551c:	e742      	b.n	80053a4 <__ieee754_rem_pio2f+0x1c>
 800551e:	15ea      	asrs	r2, r5, #23
 8005520:	3a86      	subs	r2, #134	; 0x86
 8005522:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8005526:	ee07 3a90 	vmov	s15, r3
 800552a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800552e:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80055d8 <__ieee754_rem_pio2f+0x250>
 8005532:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005536:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800553a:	ed8d 7a03 	vstr	s14, [sp, #12]
 800553e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005542:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005546:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800554a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800554e:	ed8d 7a04 	vstr	s14, [sp, #16]
 8005552:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005556:	eef5 7a40 	vcmp.f32	s15, #0.0
 800555a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800555e:	edcd 7a05 	vstr	s15, [sp, #20]
 8005562:	d11e      	bne.n	80055a2 <__ieee754_rem_pio2f+0x21a>
 8005564:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8005568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800556c:	bf14      	ite	ne
 800556e:	2302      	movne	r3, #2
 8005570:	2301      	moveq	r3, #1
 8005572:	491a      	ldr	r1, [pc, #104]	; (80055dc <__ieee754_rem_pio2f+0x254>)
 8005574:	9101      	str	r1, [sp, #4]
 8005576:	2102      	movs	r1, #2
 8005578:	9100      	str	r1, [sp, #0]
 800557a:	a803      	add	r0, sp, #12
 800557c:	4621      	mov	r1, r4
 800557e:	f000 f837 	bl	80055f0 <__kernel_rem_pio2f>
 8005582:	2e00      	cmp	r6, #0
 8005584:	f6bf af31 	bge.w	80053ea <__ieee754_rem_pio2f+0x62>
 8005588:	edd4 7a00 	vldr	s15, [r4]
 800558c:	eef1 7a67 	vneg.f32	s15, s15
 8005590:	edc4 7a00 	vstr	s15, [r4]
 8005594:	edd4 7a01 	vldr	s15, [r4, #4]
 8005598:	eef1 7a67 	vneg.f32	s15, s15
 800559c:	edc4 7a01 	vstr	s15, [r4, #4]
 80055a0:	e77a      	b.n	8005498 <__ieee754_rem_pio2f+0x110>
 80055a2:	2303      	movs	r3, #3
 80055a4:	e7e5      	b.n	8005572 <__ieee754_rem_pio2f+0x1ea>
 80055a6:	bf00      	nop
 80055a8:	3f490fd8 	.word	0x3f490fd8
 80055ac:	4016cbe3 	.word	0x4016cbe3
 80055b0:	3fc90f80 	.word	0x3fc90f80
 80055b4:	3fc90fd0 	.word	0x3fc90fd0
 80055b8:	37354400 	.word	0x37354400
 80055bc:	37354443 	.word	0x37354443
 80055c0:	2e85a308 	.word	0x2e85a308
 80055c4:	43490f80 	.word	0x43490f80
 80055c8:	3f22f984 	.word	0x3f22f984
 80055cc:	08005cbc 	.word	0x08005cbc
 80055d0:	2e85a300 	.word	0x2e85a300
 80055d4:	248d3132 	.word	0x248d3132
 80055d8:	43800000 	.word	0x43800000
 80055dc:	08005d3c 	.word	0x08005d3c

080055e0 <fabsf>:
 80055e0:	ee10 3a10 	vmov	r3, s0
 80055e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80055e8:	ee00 3a10 	vmov	s0, r3
 80055ec:	4770      	bx	lr
	...

080055f0 <__kernel_rem_pio2f>:
 80055f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055f4:	ed2d 8b04 	vpush	{d8-d9}
 80055f8:	b0d9      	sub	sp, #356	; 0x164
 80055fa:	4688      	mov	r8, r1
 80055fc:	9002      	str	r0, [sp, #8]
 80055fe:	49b8      	ldr	r1, [pc, #736]	; (80058e0 <__kernel_rem_pio2f+0x2f0>)
 8005600:	9866      	ldr	r0, [sp, #408]	; 0x198
 8005602:	9301      	str	r3, [sp, #4]
 8005604:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8005608:	9901      	ldr	r1, [sp, #4]
 800560a:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 800560c:	f101 3bff 	add.w	fp, r1, #4294967295
 8005610:	1d11      	adds	r1, r2, #4
 8005612:	db25      	blt.n	8005660 <__kernel_rem_pio2f+0x70>
 8005614:	1ed0      	subs	r0, r2, #3
 8005616:	bf48      	it	mi
 8005618:	1d10      	addmi	r0, r2, #4
 800561a:	10c0      	asrs	r0, r0, #3
 800561c:	1c45      	adds	r5, r0, #1
 800561e:	00e9      	lsls	r1, r5, #3
 8005620:	eba0 070b 	sub.w	r7, r0, fp
 8005624:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 80058f0 <__kernel_rem_pio2f+0x300>
 8005628:	9103      	str	r1, [sp, #12]
 800562a:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800562e:	eb0a 0c0b 	add.w	ip, sl, fp
 8005632:	ae1c      	add	r6, sp, #112	; 0x70
 8005634:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 8005638:	2400      	movs	r4, #0
 800563a:	4564      	cmp	r4, ip
 800563c:	dd12      	ble.n	8005664 <__kernel_rem_pio2f+0x74>
 800563e:	9901      	ldr	r1, [sp, #4]
 8005640:	ac1c      	add	r4, sp, #112	; 0x70
 8005642:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8005646:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800564a:	f04f 0c00 	mov.w	ip, #0
 800564e:	45d4      	cmp	ip, sl
 8005650:	dc27      	bgt.n	80056a2 <__kernel_rem_pio2f+0xb2>
 8005652:	f8dd e008 	ldr.w	lr, [sp, #8]
 8005656:	eddf 7aa6 	vldr	s15, [pc, #664]	; 80058f0 <__kernel_rem_pio2f+0x300>
 800565a:	4627      	mov	r7, r4
 800565c:	2600      	movs	r6, #0
 800565e:	e016      	b.n	800568e <__kernel_rem_pio2f+0x9e>
 8005660:	2000      	movs	r0, #0
 8005662:	e7db      	b.n	800561c <__kernel_rem_pio2f+0x2c>
 8005664:	42e7      	cmn	r7, r4
 8005666:	bf5d      	ittte	pl
 8005668:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 800566c:	ee07 1a90 	vmovpl	s15, r1
 8005670:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8005674:	eef0 7a47 	vmovmi.f32	s15, s14
 8005678:	ece6 7a01 	vstmia	r6!, {s15}
 800567c:	3401      	adds	r4, #1
 800567e:	e7dc      	b.n	800563a <__kernel_rem_pio2f+0x4a>
 8005680:	ecfe 6a01 	vldmia	lr!, {s13}
 8005684:	ed97 7a00 	vldr	s14, [r7]
 8005688:	eee6 7a87 	vfma.f32	s15, s13, s14
 800568c:	3601      	adds	r6, #1
 800568e:	455e      	cmp	r6, fp
 8005690:	f1a7 0704 	sub.w	r7, r7, #4
 8005694:	ddf4      	ble.n	8005680 <__kernel_rem_pio2f+0x90>
 8005696:	ece9 7a01 	vstmia	r9!, {s15}
 800569a:	f10c 0c01 	add.w	ip, ip, #1
 800569e:	3404      	adds	r4, #4
 80056a0:	e7d5      	b.n	800564e <__kernel_rem_pio2f+0x5e>
 80056a2:	a908      	add	r1, sp, #32
 80056a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80056a8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80056ac:	eddf 8a8f 	vldr	s17, [pc, #572]	; 80058ec <__kernel_rem_pio2f+0x2fc>
 80056b0:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 80058e8 <__kernel_rem_pio2f+0x2f8>
 80056b4:	9105      	str	r1, [sp, #20]
 80056b6:	9304      	str	r3, [sp, #16]
 80056b8:	4656      	mov	r6, sl
 80056ba:	00b3      	lsls	r3, r6, #2
 80056bc:	9306      	str	r3, [sp, #24]
 80056be:	ab58      	add	r3, sp, #352	; 0x160
 80056c0:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80056c4:	ac08      	add	r4, sp, #32
 80056c6:	ab44      	add	r3, sp, #272	; 0x110
 80056c8:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 80056cc:	46a4      	mov	ip, r4
 80056ce:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80056d2:	4637      	mov	r7, r6
 80056d4:	2f00      	cmp	r7, #0
 80056d6:	f1a0 0004 	sub.w	r0, r0, #4
 80056da:	dc4a      	bgt.n	8005772 <__kernel_rem_pio2f+0x182>
 80056dc:	4628      	mov	r0, r5
 80056de:	9207      	str	r2, [sp, #28]
 80056e0:	f000 f9f8 	bl	8005ad4 <scalbnf>
 80056e4:	eeb0 8a40 	vmov.f32	s16, s0
 80056e8:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80056ec:	ee28 0a00 	vmul.f32	s0, s16, s0
 80056f0:	f000 fa56 	bl	8005ba0 <floorf>
 80056f4:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80056f8:	eea0 8a67 	vfms.f32	s16, s0, s15
 80056fc:	2d00      	cmp	r5, #0
 80056fe:	9a07      	ldr	r2, [sp, #28]
 8005700:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8005704:	ee17 9a90 	vmov	r9, s15
 8005708:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800570c:	ee38 8a67 	vsub.f32	s16, s16, s15
 8005710:	dd41      	ble.n	8005796 <__kernel_rem_pio2f+0x1a6>
 8005712:	f106 3cff 	add.w	ip, r6, #4294967295
 8005716:	ab08      	add	r3, sp, #32
 8005718:	f1c5 0e08 	rsb	lr, r5, #8
 800571c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8005720:	fa47 f00e 	asr.w	r0, r7, lr
 8005724:	4481      	add	r9, r0
 8005726:	fa00 f00e 	lsl.w	r0, r0, lr
 800572a:	1a3f      	subs	r7, r7, r0
 800572c:	f1c5 0007 	rsb	r0, r5, #7
 8005730:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8005734:	4107      	asrs	r7, r0
 8005736:	2f00      	cmp	r7, #0
 8005738:	dd3c      	ble.n	80057b4 <__kernel_rem_pio2f+0x1c4>
 800573a:	f04f 0e00 	mov.w	lr, #0
 800573e:	f109 0901 	add.w	r9, r9, #1
 8005742:	4671      	mov	r1, lr
 8005744:	4576      	cmp	r6, lr
 8005746:	dc67      	bgt.n	8005818 <__kernel_rem_pio2f+0x228>
 8005748:	2d00      	cmp	r5, #0
 800574a:	dd03      	ble.n	8005754 <__kernel_rem_pio2f+0x164>
 800574c:	2d01      	cmp	r5, #1
 800574e:	d074      	beq.n	800583a <__kernel_rem_pio2f+0x24a>
 8005750:	2d02      	cmp	r5, #2
 8005752:	d07b      	beq.n	800584c <__kernel_rem_pio2f+0x25c>
 8005754:	2f02      	cmp	r7, #2
 8005756:	d12d      	bne.n	80057b4 <__kernel_rem_pio2f+0x1c4>
 8005758:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800575c:	ee30 8a48 	vsub.f32	s16, s0, s16
 8005760:	b341      	cbz	r1, 80057b4 <__kernel_rem_pio2f+0x1c4>
 8005762:	4628      	mov	r0, r5
 8005764:	9207      	str	r2, [sp, #28]
 8005766:	f000 f9b5 	bl	8005ad4 <scalbnf>
 800576a:	9a07      	ldr	r2, [sp, #28]
 800576c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8005770:	e020      	b.n	80057b4 <__kernel_rem_pio2f+0x1c4>
 8005772:	ee60 7a28 	vmul.f32	s15, s0, s17
 8005776:	3f01      	subs	r7, #1
 8005778:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800577c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005780:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8005784:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005788:	ecac 0a01 	vstmia	ip!, {s0}
 800578c:	ed90 0a00 	vldr	s0, [r0]
 8005790:	ee37 0a80 	vadd.f32	s0, s15, s0
 8005794:	e79e      	b.n	80056d4 <__kernel_rem_pio2f+0xe4>
 8005796:	d105      	bne.n	80057a4 <__kernel_rem_pio2f+0x1b4>
 8005798:	1e70      	subs	r0, r6, #1
 800579a:	ab08      	add	r3, sp, #32
 800579c:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 80057a0:	11ff      	asrs	r7, r7, #7
 80057a2:	e7c8      	b.n	8005736 <__kernel_rem_pio2f+0x146>
 80057a4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80057a8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80057ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057b0:	da30      	bge.n	8005814 <__kernel_rem_pio2f+0x224>
 80057b2:	2700      	movs	r7, #0
 80057b4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80057b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057bc:	f040 809a 	bne.w	80058f4 <__kernel_rem_pio2f+0x304>
 80057c0:	1e74      	subs	r4, r6, #1
 80057c2:	46a4      	mov	ip, r4
 80057c4:	2100      	movs	r1, #0
 80057c6:	45d4      	cmp	ip, sl
 80057c8:	da47      	bge.n	800585a <__kernel_rem_pio2f+0x26a>
 80057ca:	2900      	cmp	r1, #0
 80057cc:	d063      	beq.n	8005896 <__kernel_rem_pio2f+0x2a6>
 80057ce:	ab08      	add	r3, sp, #32
 80057d0:	3d08      	subs	r5, #8
 80057d2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d07f      	beq.n	80058da <__kernel_rem_pio2f+0x2ea>
 80057da:	4628      	mov	r0, r5
 80057dc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80057e0:	f000 f978 	bl	8005ad4 <scalbnf>
 80057e4:	1c63      	adds	r3, r4, #1
 80057e6:	aa44      	add	r2, sp, #272	; 0x110
 80057e8:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80058ec <__kernel_rem_pio2f+0x2fc>
 80057ec:	0099      	lsls	r1, r3, #2
 80057ee:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80057f2:	4623      	mov	r3, r4
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f280 80ad 	bge.w	8005954 <__kernel_rem_pio2f+0x364>
 80057fa:	4623      	mov	r3, r4
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	f2c0 80cb 	blt.w	8005998 <__kernel_rem_pio2f+0x3a8>
 8005802:	aa44      	add	r2, sp, #272	; 0x110
 8005804:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8005808:	4e36      	ldr	r6, [pc, #216]	; (80058e4 <__kernel_rem_pio2f+0x2f4>)
 800580a:	eddf 7a39 	vldr	s15, [pc, #228]	; 80058f0 <__kernel_rem_pio2f+0x300>
 800580e:	2000      	movs	r0, #0
 8005810:	1ae2      	subs	r2, r4, r3
 8005812:	e0b6      	b.n	8005982 <__kernel_rem_pio2f+0x392>
 8005814:	2702      	movs	r7, #2
 8005816:	e790      	b.n	800573a <__kernel_rem_pio2f+0x14a>
 8005818:	6820      	ldr	r0, [r4, #0]
 800581a:	b949      	cbnz	r1, 8005830 <__kernel_rem_pio2f+0x240>
 800581c:	b118      	cbz	r0, 8005826 <__kernel_rem_pio2f+0x236>
 800581e:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8005822:	6020      	str	r0, [r4, #0]
 8005824:	2001      	movs	r0, #1
 8005826:	f10e 0e01 	add.w	lr, lr, #1
 800582a:	3404      	adds	r4, #4
 800582c:	4601      	mov	r1, r0
 800582e:	e789      	b.n	8005744 <__kernel_rem_pio2f+0x154>
 8005830:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8005834:	6020      	str	r0, [r4, #0]
 8005836:	4608      	mov	r0, r1
 8005838:	e7f5      	b.n	8005826 <__kernel_rem_pio2f+0x236>
 800583a:	1e74      	subs	r4, r6, #1
 800583c:	ab08      	add	r3, sp, #32
 800583e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005842:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8005846:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800584a:	e783      	b.n	8005754 <__kernel_rem_pio2f+0x164>
 800584c:	1e74      	subs	r4, r6, #1
 800584e:	ab08      	add	r3, sp, #32
 8005850:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005854:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8005858:	e7f5      	b.n	8005846 <__kernel_rem_pio2f+0x256>
 800585a:	ab08      	add	r3, sp, #32
 800585c:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8005860:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005864:	4301      	orrs	r1, r0
 8005866:	e7ae      	b.n	80057c6 <__kernel_rem_pio2f+0x1d6>
 8005868:	3001      	adds	r0, #1
 800586a:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 800586e:	2f00      	cmp	r7, #0
 8005870:	d0fa      	beq.n	8005868 <__kernel_rem_pio2f+0x278>
 8005872:	9b06      	ldr	r3, [sp, #24]
 8005874:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8005878:	eb0d 0403 	add.w	r4, sp, r3
 800587c:	9b01      	ldr	r3, [sp, #4]
 800587e:	18f7      	adds	r7, r6, r3
 8005880:	ab1c      	add	r3, sp, #112	; 0x70
 8005882:	f106 0c01 	add.w	ip, r6, #1
 8005886:	3c4c      	subs	r4, #76	; 0x4c
 8005888:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800588c:	4430      	add	r0, r6
 800588e:	4560      	cmp	r0, ip
 8005890:	da04      	bge.n	800589c <__kernel_rem_pio2f+0x2ac>
 8005892:	4606      	mov	r6, r0
 8005894:	e711      	b.n	80056ba <__kernel_rem_pio2f+0xca>
 8005896:	9c05      	ldr	r4, [sp, #20]
 8005898:	2001      	movs	r0, #1
 800589a:	e7e6      	b.n	800586a <__kernel_rem_pio2f+0x27a>
 800589c:	9b04      	ldr	r3, [sp, #16]
 800589e:	f8dd e008 	ldr.w	lr, [sp, #8]
 80058a2:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80058a6:	9306      	str	r3, [sp, #24]
 80058a8:	ee07 3a90 	vmov	s15, r3
 80058ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058b0:	2600      	movs	r6, #0
 80058b2:	ece7 7a01 	vstmia	r7!, {s15}
 80058b6:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80058f0 <__kernel_rem_pio2f+0x300>
 80058ba:	46b9      	mov	r9, r7
 80058bc:	455e      	cmp	r6, fp
 80058be:	dd04      	ble.n	80058ca <__kernel_rem_pio2f+0x2da>
 80058c0:	ece4 7a01 	vstmia	r4!, {s15}
 80058c4:	f10c 0c01 	add.w	ip, ip, #1
 80058c8:	e7e1      	b.n	800588e <__kernel_rem_pio2f+0x29e>
 80058ca:	ecfe 6a01 	vldmia	lr!, {s13}
 80058ce:	ed39 7a01 	vldmdb	r9!, {s14}
 80058d2:	3601      	adds	r6, #1
 80058d4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80058d8:	e7f0      	b.n	80058bc <__kernel_rem_pio2f+0x2cc>
 80058da:	3c01      	subs	r4, #1
 80058dc:	e777      	b.n	80057ce <__kernel_rem_pio2f+0x1de>
 80058de:	bf00      	nop
 80058e0:	08006080 	.word	0x08006080
 80058e4:	08006054 	.word	0x08006054
 80058e8:	43800000 	.word	0x43800000
 80058ec:	3b800000 	.word	0x3b800000
 80058f0:	00000000 	.word	0x00000000
 80058f4:	9b03      	ldr	r3, [sp, #12]
 80058f6:	eeb0 0a48 	vmov.f32	s0, s16
 80058fa:	1a98      	subs	r0, r3, r2
 80058fc:	f000 f8ea 	bl	8005ad4 <scalbnf>
 8005900:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80058e8 <__kernel_rem_pio2f+0x2f8>
 8005904:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8005908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800590c:	db19      	blt.n	8005942 <__kernel_rem_pio2f+0x352>
 800590e:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80058ec <__kernel_rem_pio2f+0x2fc>
 8005912:	ee60 7a27 	vmul.f32	s15, s0, s15
 8005916:	aa08      	add	r2, sp, #32
 8005918:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800591c:	1c74      	adds	r4, r6, #1
 800591e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005922:	3508      	adds	r5, #8
 8005924:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8005928:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800592c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005930:	ee10 3a10 	vmov	r3, s0
 8005934:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8005938:	ee17 3a90 	vmov	r3, s15
 800593c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8005940:	e74b      	b.n	80057da <__kernel_rem_pio2f+0x1ea>
 8005942:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005946:	aa08      	add	r2, sp, #32
 8005948:	ee10 3a10 	vmov	r3, s0
 800594c:	4634      	mov	r4, r6
 800594e:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8005952:	e742      	b.n	80057da <__kernel_rem_pio2f+0x1ea>
 8005954:	a808      	add	r0, sp, #32
 8005956:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800595a:	9001      	str	r0, [sp, #4]
 800595c:	ee07 0a90 	vmov	s15, r0
 8005960:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005964:	3b01      	subs	r3, #1
 8005966:	ee67 7a80 	vmul.f32	s15, s15, s0
 800596a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800596e:	ed62 7a01 	vstmdb	r2!, {s15}
 8005972:	e73f      	b.n	80057f4 <__kernel_rem_pio2f+0x204>
 8005974:	ecf6 6a01 	vldmia	r6!, {s13}
 8005978:	ecb5 7a01 	vldmia	r5!, {s14}
 800597c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005980:	3001      	adds	r0, #1
 8005982:	4550      	cmp	r0, sl
 8005984:	dc01      	bgt.n	800598a <__kernel_rem_pio2f+0x39a>
 8005986:	4290      	cmp	r0, r2
 8005988:	ddf4      	ble.n	8005974 <__kernel_rem_pio2f+0x384>
 800598a:	a858      	add	r0, sp, #352	; 0x160
 800598c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005990:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 8005994:	3b01      	subs	r3, #1
 8005996:	e731      	b.n	80057fc <__kernel_rem_pio2f+0x20c>
 8005998:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800599a:	2b02      	cmp	r3, #2
 800599c:	dc09      	bgt.n	80059b2 <__kernel_rem_pio2f+0x3c2>
 800599e:	2b00      	cmp	r3, #0
 80059a0:	dc2b      	bgt.n	80059fa <__kernel_rem_pio2f+0x40a>
 80059a2:	d044      	beq.n	8005a2e <__kernel_rem_pio2f+0x43e>
 80059a4:	f009 0007 	and.w	r0, r9, #7
 80059a8:	b059      	add	sp, #356	; 0x164
 80059aa:	ecbd 8b04 	vpop	{d8-d9}
 80059ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059b2:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80059b4:	2b03      	cmp	r3, #3
 80059b6:	d1f5      	bne.n	80059a4 <__kernel_rem_pio2f+0x3b4>
 80059b8:	aa30      	add	r2, sp, #192	; 0xc0
 80059ba:	1f0b      	subs	r3, r1, #4
 80059bc:	4413      	add	r3, r2
 80059be:	461a      	mov	r2, r3
 80059c0:	4620      	mov	r0, r4
 80059c2:	2800      	cmp	r0, #0
 80059c4:	f1a2 0204 	sub.w	r2, r2, #4
 80059c8:	dc52      	bgt.n	8005a70 <__kernel_rem_pio2f+0x480>
 80059ca:	4622      	mov	r2, r4
 80059cc:	2a01      	cmp	r2, #1
 80059ce:	f1a3 0304 	sub.w	r3, r3, #4
 80059d2:	dc5d      	bgt.n	8005a90 <__kernel_rem_pio2f+0x4a0>
 80059d4:	ab30      	add	r3, sp, #192	; 0xc0
 80059d6:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 80058f0 <__kernel_rem_pio2f+0x300>
 80059da:	440b      	add	r3, r1
 80059dc:	2c01      	cmp	r4, #1
 80059de:	dc67      	bgt.n	8005ab0 <__kernel_rem_pio2f+0x4c0>
 80059e0:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80059e4:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 80059e8:	2f00      	cmp	r7, #0
 80059ea:	d167      	bne.n	8005abc <__kernel_rem_pio2f+0x4cc>
 80059ec:	edc8 6a00 	vstr	s13, [r8]
 80059f0:	ed88 7a01 	vstr	s14, [r8, #4]
 80059f4:	edc8 7a02 	vstr	s15, [r8, #8]
 80059f8:	e7d4      	b.n	80059a4 <__kernel_rem_pio2f+0x3b4>
 80059fa:	ab30      	add	r3, sp, #192	; 0xc0
 80059fc:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 80058f0 <__kernel_rem_pio2f+0x300>
 8005a00:	440b      	add	r3, r1
 8005a02:	4622      	mov	r2, r4
 8005a04:	2a00      	cmp	r2, #0
 8005a06:	da24      	bge.n	8005a52 <__kernel_rem_pio2f+0x462>
 8005a08:	b34f      	cbz	r7, 8005a5e <__kernel_rem_pio2f+0x46e>
 8005a0a:	eef1 7a47 	vneg.f32	s15, s14
 8005a0e:	edc8 7a00 	vstr	s15, [r8]
 8005a12:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8005a16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005a1a:	aa31      	add	r2, sp, #196	; 0xc4
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	429c      	cmp	r4, r3
 8005a20:	da20      	bge.n	8005a64 <__kernel_rem_pio2f+0x474>
 8005a22:	b10f      	cbz	r7, 8005a28 <__kernel_rem_pio2f+0x438>
 8005a24:	eef1 7a67 	vneg.f32	s15, s15
 8005a28:	edc8 7a01 	vstr	s15, [r8, #4]
 8005a2c:	e7ba      	b.n	80059a4 <__kernel_rem_pio2f+0x3b4>
 8005a2e:	ab30      	add	r3, sp, #192	; 0xc0
 8005a30:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 80058f0 <__kernel_rem_pio2f+0x300>
 8005a34:	440b      	add	r3, r1
 8005a36:	2c00      	cmp	r4, #0
 8005a38:	da05      	bge.n	8005a46 <__kernel_rem_pio2f+0x456>
 8005a3a:	b10f      	cbz	r7, 8005a40 <__kernel_rem_pio2f+0x450>
 8005a3c:	eef1 7a67 	vneg.f32	s15, s15
 8005a40:	edc8 7a00 	vstr	s15, [r8]
 8005a44:	e7ae      	b.n	80059a4 <__kernel_rem_pio2f+0x3b4>
 8005a46:	ed33 7a01 	vldmdb	r3!, {s14}
 8005a4a:	3c01      	subs	r4, #1
 8005a4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005a50:	e7f1      	b.n	8005a36 <__kernel_rem_pio2f+0x446>
 8005a52:	ed73 7a01 	vldmdb	r3!, {s15}
 8005a56:	3a01      	subs	r2, #1
 8005a58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a5c:	e7d2      	b.n	8005a04 <__kernel_rem_pio2f+0x414>
 8005a5e:	eef0 7a47 	vmov.f32	s15, s14
 8005a62:	e7d4      	b.n	8005a0e <__kernel_rem_pio2f+0x41e>
 8005a64:	ecb2 7a01 	vldmia	r2!, {s14}
 8005a68:	3301      	adds	r3, #1
 8005a6a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005a6e:	e7d6      	b.n	8005a1e <__kernel_rem_pio2f+0x42e>
 8005a70:	edd2 7a00 	vldr	s15, [r2]
 8005a74:	edd2 6a01 	vldr	s13, [r2, #4]
 8005a78:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005a7c:	3801      	subs	r0, #1
 8005a7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005a82:	ed82 7a00 	vstr	s14, [r2]
 8005a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a8a:	edc2 7a01 	vstr	s15, [r2, #4]
 8005a8e:	e798      	b.n	80059c2 <__kernel_rem_pio2f+0x3d2>
 8005a90:	edd3 7a00 	vldr	s15, [r3]
 8005a94:	edd3 6a01 	vldr	s13, [r3, #4]
 8005a98:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005a9c:	3a01      	subs	r2, #1
 8005a9e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005aa2:	ed83 7a00 	vstr	s14, [r3]
 8005aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005aaa:	edc3 7a01 	vstr	s15, [r3, #4]
 8005aae:	e78d      	b.n	80059cc <__kernel_rem_pio2f+0x3dc>
 8005ab0:	ed33 7a01 	vldmdb	r3!, {s14}
 8005ab4:	3c01      	subs	r4, #1
 8005ab6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005aba:	e78f      	b.n	80059dc <__kernel_rem_pio2f+0x3ec>
 8005abc:	eef1 6a66 	vneg.f32	s13, s13
 8005ac0:	eeb1 7a47 	vneg.f32	s14, s14
 8005ac4:	edc8 6a00 	vstr	s13, [r8]
 8005ac8:	ed88 7a01 	vstr	s14, [r8, #4]
 8005acc:	eef1 7a67 	vneg.f32	s15, s15
 8005ad0:	e790      	b.n	80059f4 <__kernel_rem_pio2f+0x404>
 8005ad2:	bf00      	nop

08005ad4 <scalbnf>:
 8005ad4:	ee10 3a10 	vmov	r3, s0
 8005ad8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8005adc:	d02b      	beq.n	8005b36 <scalbnf+0x62>
 8005ade:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8005ae2:	d302      	bcc.n	8005aea <scalbnf+0x16>
 8005ae4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005ae8:	4770      	bx	lr
 8005aea:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8005aee:	d123      	bne.n	8005b38 <scalbnf+0x64>
 8005af0:	4b24      	ldr	r3, [pc, #144]	; (8005b84 <scalbnf+0xb0>)
 8005af2:	eddf 7a25 	vldr	s15, [pc, #148]	; 8005b88 <scalbnf+0xb4>
 8005af6:	4298      	cmp	r0, r3
 8005af8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005afc:	db17      	blt.n	8005b2e <scalbnf+0x5a>
 8005afe:	ee10 3a10 	vmov	r3, s0
 8005b02:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005b06:	3a19      	subs	r2, #25
 8005b08:	f24c 3150 	movw	r1, #50000	; 0xc350
 8005b0c:	4288      	cmp	r0, r1
 8005b0e:	dd15      	ble.n	8005b3c <scalbnf+0x68>
 8005b10:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8005b8c <scalbnf+0xb8>
 8005b14:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8005b90 <scalbnf+0xbc>
 8005b18:	ee10 3a10 	vmov	r3, s0
 8005b1c:	eeb0 7a67 	vmov.f32	s14, s15
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	bfb8      	it	lt
 8005b24:	eef0 7a66 	vmovlt.f32	s15, s13
 8005b28:	ee27 0a87 	vmul.f32	s0, s15, s14
 8005b2c:	4770      	bx	lr
 8005b2e:	eddf 7a19 	vldr	s15, [pc, #100]	; 8005b94 <scalbnf+0xc0>
 8005b32:	ee27 0a80 	vmul.f32	s0, s15, s0
 8005b36:	4770      	bx	lr
 8005b38:	0dd2      	lsrs	r2, r2, #23
 8005b3a:	e7e5      	b.n	8005b08 <scalbnf+0x34>
 8005b3c:	4410      	add	r0, r2
 8005b3e:	28fe      	cmp	r0, #254	; 0xfe
 8005b40:	dce6      	bgt.n	8005b10 <scalbnf+0x3c>
 8005b42:	2800      	cmp	r0, #0
 8005b44:	dd06      	ble.n	8005b54 <scalbnf+0x80>
 8005b46:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005b4a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8005b4e:	ee00 3a10 	vmov	s0, r3
 8005b52:	4770      	bx	lr
 8005b54:	f110 0f16 	cmn.w	r0, #22
 8005b58:	da09      	bge.n	8005b6e <scalbnf+0x9a>
 8005b5a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8005b94 <scalbnf+0xc0>
 8005b5e:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8005b98 <scalbnf+0xc4>
 8005b62:	ee10 3a10 	vmov	r3, s0
 8005b66:	eeb0 7a67 	vmov.f32	s14, s15
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	e7d9      	b.n	8005b22 <scalbnf+0x4e>
 8005b6e:	3019      	adds	r0, #25
 8005b70:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005b74:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8005b78:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8005b9c <scalbnf+0xc8>
 8005b7c:	ee07 3a90 	vmov	s15, r3
 8005b80:	e7d7      	b.n	8005b32 <scalbnf+0x5e>
 8005b82:	bf00      	nop
 8005b84:	ffff3cb0 	.word	0xffff3cb0
 8005b88:	4c000000 	.word	0x4c000000
 8005b8c:	7149f2ca 	.word	0x7149f2ca
 8005b90:	f149f2ca 	.word	0xf149f2ca
 8005b94:	0da24260 	.word	0x0da24260
 8005b98:	8da24260 	.word	0x8da24260
 8005b9c:	33000000 	.word	0x33000000

08005ba0 <floorf>:
 8005ba0:	ee10 3a10 	vmov	r3, s0
 8005ba4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005ba8:	3a7f      	subs	r2, #127	; 0x7f
 8005baa:	2a16      	cmp	r2, #22
 8005bac:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005bb0:	dc2a      	bgt.n	8005c08 <floorf+0x68>
 8005bb2:	2a00      	cmp	r2, #0
 8005bb4:	da11      	bge.n	8005bda <floorf+0x3a>
 8005bb6:	eddf 7a18 	vldr	s15, [pc, #96]	; 8005c18 <floorf+0x78>
 8005bba:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005bbe:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bc6:	dd05      	ble.n	8005bd4 <floorf+0x34>
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	da23      	bge.n	8005c14 <floorf+0x74>
 8005bcc:	4a13      	ldr	r2, [pc, #76]	; (8005c1c <floorf+0x7c>)
 8005bce:	2900      	cmp	r1, #0
 8005bd0:	bf18      	it	ne
 8005bd2:	4613      	movne	r3, r2
 8005bd4:	ee00 3a10 	vmov	s0, r3
 8005bd8:	4770      	bx	lr
 8005bda:	4911      	ldr	r1, [pc, #68]	; (8005c20 <floorf+0x80>)
 8005bdc:	4111      	asrs	r1, r2
 8005bde:	420b      	tst	r3, r1
 8005be0:	d0fa      	beq.n	8005bd8 <floorf+0x38>
 8005be2:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8005c18 <floorf+0x78>
 8005be6:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005bea:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bf2:	ddef      	ble.n	8005bd4 <floorf+0x34>
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	bfbe      	ittt	lt
 8005bf8:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8005bfc:	fa40 f202 	asrlt.w	r2, r0, r2
 8005c00:	189b      	addlt	r3, r3, r2
 8005c02:	ea23 0301 	bic.w	r3, r3, r1
 8005c06:	e7e5      	b.n	8005bd4 <floorf+0x34>
 8005c08:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8005c0c:	d3e4      	bcc.n	8005bd8 <floorf+0x38>
 8005c0e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005c12:	4770      	bx	lr
 8005c14:	2300      	movs	r3, #0
 8005c16:	e7dd      	b.n	8005bd4 <floorf+0x34>
 8005c18:	7149f2ca 	.word	0x7149f2ca
 8005c1c:	bf800000 	.word	0xbf800000
 8005c20:	007fffff 	.word	0x007fffff

08005c24 <_init>:
 8005c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c26:	bf00      	nop
 8005c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c2a:	bc08      	pop	{r3}
 8005c2c:	469e      	mov	lr, r3
 8005c2e:	4770      	bx	lr

08005c30 <_fini>:
 8005c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c32:	bf00      	nop
 8005c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c36:	bc08      	pop	{r3}
 8005c38:	469e      	mov	lr, r3
 8005c3a:	4770      	bx	lr
