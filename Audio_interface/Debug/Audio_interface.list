
Audio_interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fec  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  08005184  08005184  00015184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005574  08005574  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005574  08005574  00015574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800557c  0800557c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800557c  0800557c  0001557c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005580  08005580  00015580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005584  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  2000000c  08005590  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  08005590  0002029c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc30  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000238b  00000000  00000000  0002fc6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee8  00000000  00000000  00031ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000df8  00000000  00000000  00032ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d85  00000000  00000000  00033cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000123d6  00000000  00000000  0004aa5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fafd  00000000  00000000  0005ce33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ec930  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000409c  00000000  00000000  000ec980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800516c 	.word	0x0800516c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	0800516c 	.word	0x0800516c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <write_register>:

//(1): Functions definitions
//-------------- Static Functions ---------------//
// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af02      	add	r7, sp, #8
 80004e2:	4603      	mov	r3, r0
 80004e4:	6039      	str	r1, [r7, #0]
 80004e6:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 80004e8:	4a09      	ldr	r2, [pc, #36]	; (8000510 <write_register+0x34>)
 80004ea:	79fb      	ldrb	r3, [r7, #7]
 80004ec:	7013      	strb	r3, [r2, #0]
	iData[1] = data[0];
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	781a      	ldrb	r2, [r3, #0]
 80004f2:	4b07      	ldr	r3, [pc, #28]	; (8000510 <write_register+0x34>)
 80004f4:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 80004f6:	2364      	movs	r3, #100	; 0x64
 80004f8:	9300      	str	r3, [sp, #0]
 80004fa:	2302      	movs	r3, #2
 80004fc:	4a04      	ldr	r2, [pc, #16]	; (8000510 <write_register+0x34>)
 80004fe:	2194      	movs	r1, #148	; 0x94
 8000500:	4804      	ldr	r0, [pc, #16]	; (8000514 <write_register+0x38>)
 8000502:	f001 fd83 	bl	800200c <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 8000506:	bf00      	nop
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	20000028 	.word	0x20000028
 8000514:	2000002c 	.word	0x2000002c

08000518 <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af02      	add	r7, sp, #8
 800051e:	4603      	mov	r3, r0
 8000520:	6039      	str	r1, [r7, #0]
 8000522:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 8000524:	4a0b      	ldr	r2, [pc, #44]	; (8000554 <read_register+0x3c>)
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 800052a:	2364      	movs	r3, #100	; 0x64
 800052c:	9300      	str	r3, [sp, #0]
 800052e:	2301      	movs	r3, #1
 8000530:	4a08      	ldr	r2, [pc, #32]	; (8000554 <read_register+0x3c>)
 8000532:	2194      	movs	r1, #148	; 0x94
 8000534:	4808      	ldr	r0, [pc, #32]	; (8000558 <read_register+0x40>)
 8000536:	f001 fd69 	bl	800200c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 800053a:	2364      	movs	r3, #100	; 0x64
 800053c:	9300      	str	r3, [sp, #0]
 800053e:	2301      	movs	r3, #1
 8000540:	683a      	ldr	r2, [r7, #0]
 8000542:	2194      	movs	r1, #148	; 0x94
 8000544:	4804      	ldr	r0, [pc, #16]	; (8000558 <read_register+0x40>)
 8000546:	f001 fe5f 	bl	8002208 <HAL_I2C_Master_Receive>
}
 800054a:	bf00      	nop
 800054c:	3708      	adds	r7, #8
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	20000028 	.word	0x20000028
 8000558:	2000002c 	.word	0x2000002c

0800055c <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 800055c:	b084      	sub	sp, #16
 800055e:	b580      	push	{r7, lr}
 8000560:	af00      	add	r7, sp, #0
 8000562:	f107 0c08 	add.w	ip, r7, #8
 8000566:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 800056a:	4b81      	ldr	r3, [pc, #516]	; (8000770 <CS43_Init+0x214>)
 800056c:	2200      	movs	r2, #0
 800056e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000572:	4b7f      	ldr	r3, [pc, #508]	; (8000770 <CS43_Init+0x214>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	69da      	ldr	r2, [r3, #28]
 8000578:	4b7d      	ldr	r3, [pc, #500]	; (8000770 <CS43_Init+0x214>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000580:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8000582:	2201      	movs	r2, #1
 8000584:	2110      	movs	r1, #16
 8000586:	487b      	ldr	r0, [pc, #492]	; (8000774 <CS43_Init+0x218>)
 8000588:	f001 fbe2 	bl	8001d50 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 800058c:	4b7a      	ldr	r3, [pc, #488]	; (8000778 <CS43_Init+0x21c>)
 800058e:	4618      	mov	r0, r3
 8000590:	f107 0308 	add.w	r3, r7, #8
 8000594:	2254      	movs	r2, #84	; 0x54
 8000596:	4619      	mov	r1, r3
 8000598:	f004 f876 	bl	8004688 <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 800059c:	4b77      	ldr	r3, [pc, #476]	; (800077c <CS43_Init+0x220>)
 800059e:	2201      	movs	r2, #1
 80005a0:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,iData);
 80005a2:	4976      	ldr	r1, [pc, #472]	; (800077c <CS43_Init+0x220>)
 80005a4:	2002      	movs	r0, #2
 80005a6:	f7ff ff99 	bl	80004dc <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80005aa:	4b74      	ldr	r3, [pc, #464]	; (800077c <CS43_Init+0x220>)
 80005ac:	2280      	movs	r2, #128	; 0x80
 80005ae:	705a      	strb	r2, [r3, #1]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80005b0:	4b72      	ldr	r3, [pc, #456]	; (800077c <CS43_Init+0x220>)
 80005b2:	785b      	ldrb	r3, [r3, #1]
 80005b4:	f043 0320 	orr.w	r3, r3, #32
 80005b8:	b2da      	uxtb	r2, r3
 80005ba:	4b70      	ldr	r3, [pc, #448]	; (800077c <CS43_Init+0x220>)
 80005bc:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80005be:	4b6f      	ldr	r3, [pc, #444]	; (800077c <CS43_Init+0x220>)
 80005c0:	785b      	ldrb	r3, [r3, #1]
 80005c2:	f043 030c 	orr.w	r3, r3, #12
 80005c6:	b2da      	uxtb	r2, r3
 80005c8:	4b6c      	ldr	r3, [pc, #432]	; (800077c <CS43_Init+0x220>)
 80005ca:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80005cc:	4b6b      	ldr	r3, [pc, #428]	; (800077c <CS43_Init+0x220>)
 80005ce:	785b      	ldrb	r3, [r3, #1]
 80005d0:	f043 0303 	orr.w	r3, r3, #3
 80005d4:	b2da      	uxtb	r2, r3
 80005d6:	4b69      	ldr	r3, [pc, #420]	; (800077c <CS43_Init+0x220>)
 80005d8:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 80005da:	4969      	ldr	r1, [pc, #420]	; (8000780 <CS43_Init+0x224>)
 80005dc:	2004      	movs	r0, #4
 80005de:	f7ff ff7d 	bl	80004dc <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 80005e2:	4b66      	ldr	r3, [pc, #408]	; (800077c <CS43_Init+0x220>)
 80005e4:	2280      	movs	r2, #128	; 0x80
 80005e6:	705a      	strb	r2, [r3, #1]
	write_register(CLOCKING_CONTROL,&iData[1]);
 80005e8:	4965      	ldr	r1, [pc, #404]	; (8000780 <CS43_Init+0x224>)
 80005ea:	2005      	movs	r0, #5
 80005ec:	f7ff ff76 	bl	80004dc <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 80005f0:	4962      	ldr	r1, [pc, #392]	; (800077c <CS43_Init+0x220>)
 80005f2:	2006      	movs	r0, #6
 80005f4:	f7ff ff90 	bl	8000518 <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 80005f8:	4b60      	ldr	r3, [pc, #384]	; (800077c <CS43_Init+0x220>)
 80005fa:	785b      	ldrb	r3, [r3, #1]
 80005fc:	f003 0320 	and.w	r3, r3, #32
 8000600:	b2da      	uxtb	r2, r3
 8000602:	4b5e      	ldr	r3, [pc, #376]	; (800077c <CS43_Init+0x220>)
 8000604:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 7);  // Slave
 8000606:	4b5d      	ldr	r3, [pc, #372]	; (800077c <CS43_Init+0x220>)
 8000608:	785b      	ldrb	r3, [r3, #1]
 800060a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800060e:	b2da      	uxtb	r2, r3
 8000610:	4b5a      	ldr	r3, [pc, #360]	; (800077c <CS43_Init+0x220>)
 8000612:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 8000614:	4b59      	ldr	r3, [pc, #356]	; (800077c <CS43_Init+0x220>)
 8000616:	785b      	ldrb	r3, [r3, #1]
 8000618:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800061c:	b2da      	uxtb	r2, r3
 800061e:	4b57      	ldr	r3, [pc, #348]	; (800077c <CS43_Init+0x220>)
 8000620:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 4);  // No DSP mode
 8000622:	4b56      	ldr	r3, [pc, #344]	; (800077c <CS43_Init+0x220>)
 8000624:	785b      	ldrb	r3, [r3, #1]
 8000626:	f023 0310 	bic.w	r3, r3, #16
 800062a:	b2da      	uxtb	r2, r3
 800062c:	4b53      	ldr	r3, [pc, #332]	; (800077c <CS43_Init+0x220>)
 800062e:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 8000630:	4b52      	ldr	r3, [pc, #328]	; (800077c <CS43_Init+0x220>)
 8000632:	785b      	ldrb	r3, [r3, #1]
 8000634:	f023 0304 	bic.w	r3, r3, #4
 8000638:	b2da      	uxtb	r2, r3
 800063a:	4b50      	ldr	r3, [pc, #320]	; (800077c <CS43_Init+0x220>)
 800063c:	705a      	strb	r2, [r3, #1]
	iData[1] |= (1 << 2);
 800063e:	4b4f      	ldr	r3, [pc, #316]	; (800077c <CS43_Init+0x220>)
 8000640:	785b      	ldrb	r3, [r3, #1]
 8000642:	f043 0304 	orr.w	r3, r3, #4
 8000646:	b2da      	uxtb	r2, r3
 8000648:	4b4c      	ldr	r3, [pc, #304]	; (800077c <CS43_Init+0x220>)
 800064a:	705a      	strb	r2, [r3, #1]
	
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 800064c:	4b4b      	ldr	r3, [pc, #300]	; (800077c <CS43_Init+0x220>)
 800064e:	785b      	ldrb	r3, [r3, #1]
 8000650:	f043 0303 	orr.w	r3, r3, #3
 8000654:	b2da      	uxtb	r2, r3
 8000656:	4b49      	ldr	r3, [pc, #292]	; (800077c <CS43_Init+0x220>)
 8000658:	705a      	strb	r2, [r3, #1]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 800065a:	4949      	ldr	r1, [pc, #292]	; (8000780 <CS43_Init+0x224>)
 800065c:	2006      	movs	r0, #6
 800065e:	f7ff ff3d 	bl	80004dc <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 8000662:	4947      	ldr	r1, [pc, #284]	; (8000780 <CS43_Init+0x224>)
 8000664:	2008      	movs	r0, #8
 8000666:	f7ff ff57 	bl	8000518 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 800066a:	4b44      	ldr	r3, [pc, #272]	; (800077c <CS43_Init+0x220>)
 800066c:	785b      	ldrb	r3, [r3, #1]
 800066e:	f023 030f 	bic.w	r3, r3, #15
 8000672:	b2da      	uxtb	r2, r3
 8000674:	4b41      	ldr	r3, [pc, #260]	; (800077c <CS43_Init+0x220>)
 8000676:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 8000678:	4b40      	ldr	r3, [pc, #256]	; (800077c <CS43_Init+0x220>)
 800067a:	785b      	ldrb	r3, [r3, #1]
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	b2da      	uxtb	r2, r3
 8000682:	4b3e      	ldr	r3, [pc, #248]	; (800077c <CS43_Init+0x220>)
 8000684:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_A,&iData[1]);
 8000686:	493e      	ldr	r1, [pc, #248]	; (8000780 <CS43_Init+0x224>)
 8000688:	2008      	movs	r0, #8
 800068a:	f7ff ff27 	bl	80004dc <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 800068e:	493c      	ldr	r1, [pc, #240]	; (8000780 <CS43_Init+0x224>)
 8000690:	2009      	movs	r0, #9
 8000692:	f7ff ff41 	bl	8000518 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8000696:	4b39      	ldr	r3, [pc, #228]	; (800077c <CS43_Init+0x220>)
 8000698:	785b      	ldrb	r3, [r3, #1]
 800069a:	f023 030f 	bic.w	r3, r3, #15
 800069e:	b2da      	uxtb	r2, r3
 80006a0:	4b36      	ldr	r3, [pc, #216]	; (800077c <CS43_Init+0x220>)
 80006a2:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 80006a4:	4b35      	ldr	r3, [pc, #212]	; (800077c <CS43_Init+0x220>)
 80006a6:	785b      	ldrb	r3, [r3, #1]
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	b2da      	uxtb	r2, r3
 80006ae:	4b33      	ldr	r3, [pc, #204]	; (800077c <CS43_Init+0x220>)
 80006b0:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_B,&iData[1]);
 80006b2:	4933      	ldr	r1, [pc, #204]	; (8000780 <CS43_Init+0x224>)
 80006b4:	2009      	movs	r0, #9
 80006b6:	f7ff ff11 	bl	80004dc <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 80006ba:	4931      	ldr	r1, [pc, #196]	; (8000780 <CS43_Init+0x224>)
 80006bc:	200e      	movs	r0, #14
 80006be:	f7ff ff2b 	bl	8000518 <read_register>
	if(outputMode == MODE_ANALOG)
 80006c2:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80006c6:	2b03      	cmp	r3, #3
 80006c8:	d123      	bne.n	8000712 <CS43_Init+0x1b6>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 80006ca:	4b2c      	ldr	r3, [pc, #176]	; (800077c <CS43_Init+0x220>)
 80006cc:	785b      	ldrb	r3, [r3, #1]
 80006ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006d2:	b2da      	uxtb	r2, r3
 80006d4:	4b29      	ldr	r3, [pc, #164]	; (800077c <CS43_Init+0x220>)
 80006d6:	705a      	strb	r2, [r3, #1]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 80006d8:	4b28      	ldr	r3, [pc, #160]	; (800077c <CS43_Init+0x220>)
 80006da:	785b      	ldrb	r3, [r3, #1]
 80006dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006e0:	b2da      	uxtb	r2, r3
 80006e2:	4b26      	ldr	r3, [pc, #152]	; (800077c <CS43_Init+0x220>)
 80006e4:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 80006e6:	4b25      	ldr	r3, [pc, #148]	; (800077c <CS43_Init+0x220>)
 80006e8:	785b      	ldrb	r3, [r3, #1]
 80006ea:	f023 0320 	bic.w	r3, r3, #32
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	4b22      	ldr	r3, [pc, #136]	; (800077c <CS43_Init+0x220>)
 80006f2:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 80006f4:	4b21      	ldr	r3, [pc, #132]	; (800077c <CS43_Init+0x220>)
 80006f6:	785b      	ldrb	r3, [r3, #1]
 80006f8:	f023 0310 	bic.w	r3, r3, #16
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	4b1f      	ldr	r3, [pc, #124]	; (800077c <CS43_Init+0x220>)
 8000700:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 8000702:	4b1e      	ldr	r3, [pc, #120]	; (800077c <CS43_Init+0x220>)
 8000704:	785b      	ldrb	r3, [r3, #1]
 8000706:	f023 0308 	bic.w	r3, r3, #8
 800070a:	b2da      	uxtb	r2, r3
 800070c:	4b1b      	ldr	r3, [pc, #108]	; (800077c <CS43_Init+0x220>)
 800070e:	705a      	strb	r2, [r3, #1]
 8000710:	e006      	b.n	8000720 <CS43_Init+0x1c4>
	}
	else if(outputMode == MODE_I2S)
 8000712:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8000716:	2b00      	cmp	r3, #0
 8000718:	d102      	bne.n	8000720 <CS43_Init+0x1c4>
	{
		iData[1] = 0x02;
 800071a:	4b18      	ldr	r3, [pc, #96]	; (800077c <CS43_Init+0x220>)
 800071c:	2202      	movs	r2, #2
 800071e:	705a      	strb	r2, [r3, #1]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 8000720:	4917      	ldr	r1, [pc, #92]	; (8000780 <CS43_Init+0x224>)
 8000722:	200e      	movs	r0, #14
 8000724:	f7ff feda 	bl	80004dc <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 8000728:	4915      	ldr	r1, [pc, #84]	; (8000780 <CS43_Init+0x224>)
 800072a:	200f      	movs	r0, #15
 800072c:	f7ff fef4 	bl	8000518 <read_register>
	iData[1] = 0x00;
 8000730:	4b12      	ldr	r3, [pc, #72]	; (800077c <CS43_Init+0x220>)
 8000732:	2200      	movs	r2, #0
 8000734:	705a      	strb	r2, [r3, #1]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 8000736:	4912      	ldr	r1, [pc, #72]	; (8000780 <CS43_Init+0x224>)
 8000738:	200f      	movs	r0, #15
 800073a:	f7ff fecf 	bl	80004dc <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0x00;
 800073e:	4b0f      	ldr	r3, [pc, #60]	; (800077c <CS43_Init+0x220>)
 8000740:	2200      	movs	r2, #0
 8000742:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8000744:	490e      	ldr	r1, [pc, #56]	; (8000780 <CS43_Init+0x224>)
 8000746:	2014      	movs	r0, #20
 8000748:	f7ff fec8 	bl	80004dc <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 800074c:	490c      	ldr	r1, [pc, #48]	; (8000780 <CS43_Init+0x224>)
 800074e:	2015      	movs	r0, #21
 8000750:	f7ff fec4 	bl	80004dc <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 8000754:	490a      	ldr	r1, [pc, #40]	; (8000780 <CS43_Init+0x224>)
 8000756:	201a      	movs	r0, #26
 8000758:	f7ff fec0 	bl	80004dc <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 800075c:	4908      	ldr	r1, [pc, #32]	; (8000780 <CS43_Init+0x224>)
 800075e:	201b      	movs	r0, #27
 8000760:	f7ff febc 	bl	80004dc <write_register>
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800076c:	b004      	add	sp, #16
 800076e:	4770      	bx	lr
 8000770:	200000d4 	.word	0x200000d4
 8000774:	40020c00 	.word	0x40020c00
 8000778:	2000002c 	.word	0x2000002c
 800077c:	20000028 	.word	0x20000028
 8000780:	20000029 	.word	0x20000029

08000784 <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	71fb      	strb	r3, [r7, #7]
	switch (side)
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	2b03      	cmp	r3, #3
 8000792:	d837      	bhi.n	8000804 <CS43_Enable_RightLeft+0x80>
 8000794:	a201      	add	r2, pc, #4	; (adr r2, 800079c <CS43_Enable_RightLeft+0x18>)
 8000796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800079a:	bf00      	nop
 800079c:	080007ad 	.word	0x080007ad
 80007a0:	080007c3 	.word	0x080007c3
 80007a4:	080007d9 	.word	0x080007d9
 80007a8:	080007ef 	.word	0x080007ef
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007ac:	4b21      	ldr	r3, [pc, #132]	; (8000834 <CS43_Enable_RightLeft+0xb0>)
 80007ae:	22c0      	movs	r2, #192	; 0xc0
 80007b0:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007b2:	4b20      	ldr	r3, [pc, #128]	; (8000834 <CS43_Enable_RightLeft+0xb0>)
 80007b4:	785b      	ldrb	r3, [r3, #1]
 80007b6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80007ba:	b2da      	uxtb	r2, r3
 80007bc:	4b1d      	ldr	r3, [pc, #116]	; (8000834 <CS43_Enable_RightLeft+0xb0>)
 80007be:	705a      	strb	r2, [r3, #1]
			break;
 80007c0:	e021      	b.n	8000806 <CS43_Enable_RightLeft+0x82>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007c2:	4b1c      	ldr	r3, [pc, #112]	; (8000834 <CS43_Enable_RightLeft+0xb0>)
 80007c4:	2280      	movs	r2, #128	; 0x80
 80007c6:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007c8:	4b1a      	ldr	r3, [pc, #104]	; (8000834 <CS43_Enable_RightLeft+0xb0>)
 80007ca:	785b      	ldrb	r3, [r3, #1]
 80007cc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	4b18      	ldr	r3, [pc, #96]	; (8000834 <CS43_Enable_RightLeft+0xb0>)
 80007d4:	705a      	strb	r2, [r3, #1]
			break;
 80007d6:	e016      	b.n	8000806 <CS43_Enable_RightLeft+0x82>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007d8:	4b16      	ldr	r3, [pc, #88]	; (8000834 <CS43_Enable_RightLeft+0xb0>)
 80007da:	22c0      	movs	r2, #192	; 0xc0
 80007dc:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007de:	4b15      	ldr	r3, [pc, #84]	; (8000834 <CS43_Enable_RightLeft+0xb0>)
 80007e0:	785b      	ldrb	r3, [r3, #1]
 80007e2:	f043 0320 	orr.w	r3, r3, #32
 80007e6:	b2da      	uxtb	r2, r3
 80007e8:	4b12      	ldr	r3, [pc, #72]	; (8000834 <CS43_Enable_RightLeft+0xb0>)
 80007ea:	705a      	strb	r2, [r3, #1]
			break;
 80007ec:	e00b      	b.n	8000806 <CS43_Enable_RightLeft+0x82>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007ee:	4b11      	ldr	r3, [pc, #68]	; (8000834 <CS43_Enable_RightLeft+0xb0>)
 80007f0:	2280      	movs	r2, #128	; 0x80
 80007f2:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007f4:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <CS43_Enable_RightLeft+0xb0>)
 80007f6:	785b      	ldrb	r3, [r3, #1]
 80007f8:	f043 0320 	orr.w	r3, r3, #32
 80007fc:	b2da      	uxtb	r2, r3
 80007fe:	4b0d      	ldr	r3, [pc, #52]	; (8000834 <CS43_Enable_RightLeft+0xb0>)
 8000800:	705a      	strb	r2, [r3, #1]
			break;
 8000802:	e000      	b.n	8000806 <CS43_Enable_RightLeft+0x82>
		default:
			break;
 8000804:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 8000806:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <CS43_Enable_RightLeft+0xb0>)
 8000808:	785b      	ldrb	r3, [r3, #1]
 800080a:	f043 030c 	orr.w	r3, r3, #12
 800080e:	b2da      	uxtb	r2, r3
 8000810:	4b08      	ldr	r3, [pc, #32]	; (8000834 <CS43_Enable_RightLeft+0xb0>)
 8000812:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 8000814:	4b07      	ldr	r3, [pc, #28]	; (8000834 <CS43_Enable_RightLeft+0xb0>)
 8000816:	785b      	ldrb	r3, [r3, #1]
 8000818:	f043 0303 	orr.w	r3, r3, #3
 800081c:	b2da      	uxtb	r2, r3
 800081e:	4b05      	ldr	r3, [pc, #20]	; (8000834 <CS43_Enable_RightLeft+0xb0>)
 8000820:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 8000822:	4905      	ldr	r1, [pc, #20]	; (8000838 <CS43_Enable_RightLeft+0xb4>)
 8000824:	2004      	movs	r0, #4
 8000826:	f7ff fe59 	bl	80004dc <write_register>
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000028 	.word	0x20000028
 8000838:	20000029 	.word	0x20000029

0800083c <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
	int8_t tempVol = volume - 50;
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	3b32      	subs	r3, #50	; 0x32
 800084a:	b2db      	uxtb	r3, r3
 800084c:	73fb      	strb	r3, [r7, #15]
	tempVol = tempVol*(127/50);
 800084e:	7bfb      	ldrb	r3, [r7, #15]
 8000850:	005b      	lsls	r3, r3, #1
 8000852:	b2db      	uxtb	r3, r3
 8000854:	73fb      	strb	r3, [r7, #15]
	uint8_t myVolume =  (uint8_t )tempVol;
 8000856:	7bfb      	ldrb	r3, [r7, #15]
 8000858:	73bb      	strb	r3, [r7, #14]
	iData[1] = myVolume;
 800085a:	4a16      	ldr	r2, [pc, #88]	; (80008b4 <CS43_SetVolume+0x78>)
 800085c:	7bbb      	ldrb	r3, [r7, #14]
 800085e:	7053      	strb	r3, [r2, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8000860:	4915      	ldr	r1, [pc, #84]	; (80008b8 <CS43_SetVolume+0x7c>)
 8000862:	2014      	movs	r0, #20
 8000864:	f7ff fe3a 	bl	80004dc <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8000868:	4913      	ldr	r1, [pc, #76]	; (80008b8 <CS43_SetVolume+0x7c>)
 800086a:	2015      	movs	r0, #21
 800086c:	f7ff fe36 	bl	80004dc <write_register>
	
	iData[1] = VOLUME_CONVERT_D(volume);
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	2b64      	cmp	r3, #100	; 0x64
 8000874:	d80e      	bhi.n	8000894 <CS43_SetVolume+0x58>
 8000876:	79fa      	ldrb	r2, [r7, #7]
 8000878:	4613      	mov	r3, r2
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	4413      	add	r3, r2
 800087e:	011b      	lsls	r3, r3, #4
 8000880:	4a0e      	ldr	r2, [pc, #56]	; (80008bc <CS43_SetVolume+0x80>)
 8000882:	fb82 1203 	smull	r1, r2, r2, r3
 8000886:	1152      	asrs	r2, r2, #5
 8000888:	17db      	asrs	r3, r3, #31
 800088a:	1ad3      	subs	r3, r2, r3
 800088c:	b2db      	uxtb	r3, r3
 800088e:	3b18      	subs	r3, #24
 8000890:	b2db      	uxtb	r3, r3
 8000892:	e000      	b.n	8000896 <CS43_SetVolume+0x5a>
 8000894:	2318      	movs	r3, #24
 8000896:	4a07      	ldr	r2, [pc, #28]	; (80008b4 <CS43_SetVolume+0x78>)
 8000898:	7053      	strb	r3, [r2, #1]
	
	/* Set the Master volume */ 
	write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 800089a:	4907      	ldr	r1, [pc, #28]	; (80008b8 <CS43_SetVolume+0x7c>)
 800089c:	2020      	movs	r0, #32
 800089e:	f7ff fe1d 	bl	80004dc <write_register>
	write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 80008a2:	4905      	ldr	r1, [pc, #20]	; (80008b8 <CS43_SetVolume+0x7c>)
 80008a4:	2021      	movs	r0, #33	; 0x21
 80008a6:	f7ff fe19 	bl	80004dc <write_register>
}
 80008aa:	bf00      	nop
 80008ac:	3710      	adds	r7, #16
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000028 	.word	0x20000028
 80008b8:	20000029 	.word	0x20000029
 80008bc:	51eb851f 	.word	0x51eb851f

080008c0 <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 80008c4:	4b1d      	ldr	r3, [pc, #116]	; (800093c <CS43_Start+0x7c>)
 80008c6:	2299      	movs	r2, #153	; 0x99
 80008c8:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 80008ca:	491d      	ldr	r1, [pc, #116]	; (8000940 <CS43_Start+0x80>)
 80008cc:	2000      	movs	r0, #0
 80008ce:	f7ff fe05 	bl	80004dc <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 80008d2:	4b1a      	ldr	r3, [pc, #104]	; (800093c <CS43_Start+0x7c>)
 80008d4:	2280      	movs	r2, #128	; 0x80
 80008d6:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_47,&iData[1]);
 80008d8:	4919      	ldr	r1, [pc, #100]	; (8000940 <CS43_Start+0x80>)
 80008da:	2047      	movs	r0, #71	; 0x47
 80008dc:	f7ff fdfe 	bl	80004dc <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008e0:	4917      	ldr	r1, [pc, #92]	; (8000940 <CS43_Start+0x80>)
 80008e2:	2032      	movs	r0, #50	; 0x32
 80008e4:	f7ff fe18 	bl	8000518 <read_register>
	iData[1] |= 0x80;
 80008e8:	4b14      	ldr	r3, [pc, #80]	; (800093c <CS43_Start+0x7c>)
 80008ea:	785b      	ldrb	r3, [r3, #1]
 80008ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008f0:	b2da      	uxtb	r2, r3
 80008f2:	4b12      	ldr	r3, [pc, #72]	; (800093c <CS43_Start+0x7c>)
 80008f4:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 80008f6:	4912      	ldr	r1, [pc, #72]	; (8000940 <CS43_Start+0x80>)
 80008f8:	2032      	movs	r0, #50	; 0x32
 80008fa:	f7ff fdef 	bl	80004dc <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008fe:	4910      	ldr	r1, [pc, #64]	; (8000940 <CS43_Start+0x80>)
 8000900:	2032      	movs	r0, #50	; 0x32
 8000902:	f7ff fe09 	bl	8000518 <read_register>
	iData[1] &= ~(0x80);
 8000906:	4b0d      	ldr	r3, [pc, #52]	; (800093c <CS43_Start+0x7c>)
 8000908:	785b      	ldrb	r3, [r3, #1]
 800090a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800090e:	b2da      	uxtb	r2, r3
 8000910:	4b0a      	ldr	r3, [pc, #40]	; (800093c <CS43_Start+0x7c>)
 8000912:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 8000914:	490a      	ldr	r1, [pc, #40]	; (8000940 <CS43_Start+0x80>)
 8000916:	2032      	movs	r0, #50	; 0x32
 8000918:	f7ff fde0 	bl	80004dc <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 800091c:	4b07      	ldr	r3, [pc, #28]	; (800093c <CS43_Start+0x7c>)
 800091e:	2200      	movs	r2, #0
 8000920:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 8000922:	4907      	ldr	r1, [pc, #28]	; (8000940 <CS43_Start+0x80>)
 8000924:	2000      	movs	r0, #0
 8000926:	f7ff fdd9 	bl	80004dc <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 800092a:	4b04      	ldr	r3, [pc, #16]	; (800093c <CS43_Start+0x7c>)
 800092c:	229e      	movs	r2, #158	; 0x9e
 800092e:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,&iData[1]);
 8000930:	4903      	ldr	r1, [pc, #12]	; (8000940 <CS43_Start+0x80>)
 8000932:	2002      	movs	r0, #2
 8000934:	f7ff fdd2 	bl	80004dc <write_register>
}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000028 	.word	0x20000028
 8000940:	20000029 	.word	0x20000029

08000944 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000944:	b590      	push	{r4, r7, lr}
 8000946:	b095      	sub	sp, #84	; 0x54
 8000948:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE BEGIN 1 */
	sample_dt = F_OUT/F_SAMPLE;
 800094a:	4b3c      	ldr	r3, [pc, #240]	; (8000a3c <main+0xf8>)
 800094c:	f04f 5274 	mov.w	r2, #1023410176	; 0x3d000000
 8000950:	601a      	str	r2, [r3, #0]
	sample_N = F_SAMPLE/F_OUT;
 8000952:	4b3b      	ldr	r3, [pc, #236]	; (8000a40 <main+0xfc>)
 8000954:	2220      	movs	r2, #32
 8000956:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000958:	f000 fb82 	bl	8001060 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800095c:	f000 f87e 	bl	8000a5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000960:	f000 f960 	bl	8000c24 <MX_GPIO_Init>
  MX_DMA_Init();
 8000964:	f000 f93e 	bl	8000be4 <MX_DMA_Init>
  MX_I2C1_Init();
 8000968:	f000 f8e0 	bl	8000b2c <MX_I2C1_Init>
  MX_I2S3_Init();
 800096c:	f000 f90c 	bl	8000b88 <MX_I2S3_Init>
 // MX_TIM2_Init();
  /* USER CODE BEGIN 2 */
	CS43_Init(hi2c1, MODE_I2S);
 8000970:	4c34      	ldr	r4, [pc, #208]	; (8000a44 <main+0x100>)
 8000972:	2300      	movs	r3, #0
 8000974:	9311      	str	r3, [sp, #68]	; 0x44
 8000976:	4668      	mov	r0, sp
 8000978:	f104 0310 	add.w	r3, r4, #16
 800097c:	2244      	movs	r2, #68	; 0x44
 800097e:	4619      	mov	r1, r3
 8000980:	f003 fe82 	bl	8004688 <memcpy>
 8000984:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000988:	f7ff fde8 	bl	800055c <CS43_Init>
  
	CS43_SetVolume(40); //0 - 100,, 40
 800098c:	2028      	movs	r0, #40	; 0x28
 800098e:	f7ff ff55 	bl	800083c <CS43_SetVolume>
	CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 8000992:	2003      	movs	r0, #3
 8000994:	f7ff fef6 	bl	8000784 <CS43_Enable_RightLeft>
	CS43_Start();
 8000998:	f7ff ff92 	bl	80008c0 <CS43_Start>

	//Build Sine wave
		for(uint16_t i=0; i<sample_N; i++)
 800099c:	2300      	movs	r3, #0
 800099e:	80fb      	strh	r3, [r7, #6]
 80009a0:	e03d      	b.n	8000a1e <main+0xda>
		{
			mySinVal = sinf(i*2*PI*sample_dt);
 80009a2:	88fb      	ldrh	r3, [r7, #6]
 80009a4:	005b      	lsls	r3, r3, #1
 80009a6:	ee07 3a90 	vmov	s15, r3
 80009aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009ae:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8000a48 <main+0x104>
 80009b2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80009b6:	4b21      	ldr	r3, [pc, #132]	; (8000a3c <main+0xf8>)
 80009b8:	edd3 7a00 	vldr	s15, [r3]
 80009bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009c0:	eeb0 0a67 	vmov.f32	s0, s15
 80009c4:	f003 fe76 	bl	80046b4 <sinf>
 80009c8:	eef0 7a40 	vmov.f32	s15, s0
 80009cc:	4b1f      	ldr	r3, [pc, #124]	; (8000a4c <main+0x108>)
 80009ce:	edc3 7a00 	vstr	s15, [r3]
			dataI2S[i*2] = (mySinVal )*8000;    //Right data (0 2 4 6 8 10 12)
 80009d2:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <main+0x108>)
 80009d4:	edd3 7a00 	vldr	s15, [r3]
 80009d8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8000a50 <main+0x10c>
 80009dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009e0:	88fb      	ldrh	r3, [r7, #6]
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009e8:	ee17 2a90 	vmov	r2, s15
 80009ec:	b211      	sxth	r1, r2
 80009ee:	4a19      	ldr	r2, [pc, #100]	; (8000a54 <main+0x110>)
 80009f0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			dataI2S[i*2 + 1] =(mySinVal )*8000; //Left data  (1 3 5 7 9 11 13)
 80009f4:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <main+0x108>)
 80009f6:	edd3 7a00 	vldr	s15, [r3]
 80009fa:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000a50 <main+0x10c>
 80009fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a02:	88fb      	ldrh	r3, [r7, #6]
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	3301      	adds	r3, #1
 8000a08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a0c:	ee17 2a90 	vmov	r2, s15
 8000a10:	b211      	sxth	r1, r2
 8000a12:	4a10      	ldr	r2, [pc, #64]	; (8000a54 <main+0x110>)
 8000a14:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(uint16_t i=0; i<sample_N; i++)
 8000a18:	88fb      	ldrh	r3, [r7, #6]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	80fb      	strh	r3, [r7, #6]
 8000a1e:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <main+0xfc>)
 8000a20:	881b      	ldrh	r3, [r3, #0]
 8000a22:	88fa      	ldrh	r2, [r7, #6]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d3bc      	bcc.n	80009a2 <main+0x5e>
		}

		HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)dataI2S, sample_N*2);
 8000a28:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <main+0xfc>)
 8000a2a:	881b      	ldrh	r3, [r3, #0]
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	b29b      	uxth	r3, r3
 8000a30:	461a      	mov	r2, r3
 8000a32:	4908      	ldr	r1, [pc, #32]	; (8000a54 <main+0x110>)
 8000a34:	4808      	ldr	r0, [pc, #32]	; (8000a58 <main+0x114>)
 8000a36:	f002 fa7b 	bl	8002f30 <HAL_I2S_Transmit_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a3a:	e7fe      	b.n	8000a3a <main+0xf6>
 8000a3c:	200001c8 	.word	0x200001c8
 8000a40:	200001cc 	.word	0x200001cc
 8000a44:	20000080 	.word	0x20000080
 8000a48:	40490fd0 	.word	0x40490fd0
 8000a4c:	200001c4 	.word	0x200001c4
 8000a50:	45fa0000 	.word	0x45fa0000
 8000a54:	200001d0 	.word	0x200001d0
 8000a58:	200000d4 	.word	0x200000d4

08000a5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b094      	sub	sp, #80	; 0x50
 8000a60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a62:	f107 0320 	add.w	r3, r7, #32
 8000a66:	2230      	movs	r2, #48	; 0x30
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f003 fe1a 	bl	80046a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a70:	f107 030c 	add.w	r3, r7, #12
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a80:	2300      	movs	r3, #0
 8000a82:	60bb      	str	r3, [r7, #8]
 8000a84:	4b27      	ldr	r3, [pc, #156]	; (8000b24 <SystemClock_Config+0xc8>)
 8000a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a88:	4a26      	ldr	r2, [pc, #152]	; (8000b24 <SystemClock_Config+0xc8>)
 8000a8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a90:	4b24      	ldr	r3, [pc, #144]	; (8000b24 <SystemClock_Config+0xc8>)
 8000a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a98:	60bb      	str	r3, [r7, #8]
 8000a9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	4b21      	ldr	r3, [pc, #132]	; (8000b28 <SystemClock_Config+0xcc>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a20      	ldr	r2, [pc, #128]	; (8000b28 <SystemClock_Config+0xcc>)
 8000aa6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000aaa:	6013      	str	r3, [r2, #0]
 8000aac:	4b1e      	ldr	r3, [pc, #120]	; (8000b28 <SystemClock_Config+0xcc>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ab4:	607b      	str	r3, [r7, #4]
 8000ab6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000abc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ac6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000aca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000acc:	2304      	movs	r3, #4
 8000ace:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000ad0:	2364      	movs	r3, #100	; 0x64
 8000ad2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000ad8:	2308      	movs	r3, #8
 8000ada:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000adc:	f107 0320 	add.w	r3, r7, #32
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f002 fe8b 	bl	80037fc <HAL_RCC_OscConfig>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000aec:	f000 f906 	bl	8000cfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af0:	230f      	movs	r3, #15
 8000af2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000af4:	2302      	movs	r3, #2
 8000af6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000afc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b00:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b06:	f107 030c 	add.w	r3, r7, #12
 8000b0a:	2103      	movs	r1, #3
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f003 f8ed 	bl	8003cec <HAL_RCC_ClockConfig>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b18:	f000 f8f0 	bl	8000cfc <Error_Handler>
  }
}
 8000b1c:	bf00      	nop
 8000b1e:	3750      	adds	r7, #80	; 0x50
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40007000 	.word	0x40007000

08000b2c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b30:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <MX_I2C1_Init+0x50>)
 8000b32:	4a13      	ldr	r2, [pc, #76]	; (8000b80 <MX_I2C1_Init+0x54>)
 8000b34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b36:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <MX_I2C1_Init+0x50>)
 8000b38:	4a12      	ldr	r2, [pc, #72]	; (8000b84 <MX_I2C1_Init+0x58>)
 8000b3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <MX_I2C1_Init+0x50>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <MX_I2C1_Init+0x50>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b48:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <MX_I2C1_Init+0x50>)
 8000b4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b4e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b50:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <MX_I2C1_Init+0x50>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b56:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <MX_I2C1_Init+0x50>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b5c:	4b07      	ldr	r3, [pc, #28]	; (8000b7c <MX_I2C1_Init+0x50>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <MX_I2C1_Init+0x50>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b68:	4804      	ldr	r0, [pc, #16]	; (8000b7c <MX_I2C1_Init+0x50>)
 8000b6a:	f001 f90b 	bl	8001d84 <HAL_I2C_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b74:	f000 f8c2 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20000080 	.word	0x20000080
 8000b80:	40005400 	.word	0x40005400
 8000b84:	000186a0 	.word	0x000186a0

08000b88 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000b8c:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <MX_I2S3_Init+0x54>)
 8000b8e:	4a14      	ldr	r2, [pc, #80]	; (8000be0 <MX_I2S3_Init+0x58>)
 8000b90:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_I2S3_Init+0x54>)
 8000b94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b98:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b9a:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <MX_I2S3_Init+0x54>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000ba0:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <MX_I2S3_Init+0x54>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000ba6:	4b0d      	ldr	r3, [pc, #52]	; (8000bdc <MX_I2S3_Init+0x54>)
 8000ba8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bac:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000bae:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <MX_I2S3_Init+0x54>)
 8000bb0:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000bb4:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000bb6:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <MX_I2S3_Init+0x54>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000bbc:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <MX_I2S3_Init+0x54>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000bc2:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <MX_I2S3_Init+0x54>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000bc8:	4804      	ldr	r0, [pc, #16]	; (8000bdc <MX_I2S3_Init+0x54>)
 8000bca:	f002 f871 	bl	8002cb0 <HAL_I2S_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8000bd4:	f000 f892 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	200000d4 	.word	0x200000d4
 8000be0:	40003c00 	.word	0x40003c00

08000be4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	607b      	str	r3, [r7, #4]
 8000bee:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <MX_DMA_Init+0x3c>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a0b      	ldr	r2, [pc, #44]	; (8000c20 <MX_DMA_Init+0x3c>)
 8000bf4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <MX_DMA_Init+0x3c>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2100      	movs	r1, #0
 8000c0a:	2010      	movs	r0, #16
 8000c0c:	f000 fb75 	bl	80012fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000c10:	2010      	movs	r0, #16
 8000c12:	f000 fb8e 	bl	8001332 <HAL_NVIC_EnableIRQ>

}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40023800 	.word	0x40023800

08000c24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	; 0x28
 8000c28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
 8000c36:	60da      	str	r2, [r3, #12]
 8000c38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	613b      	str	r3, [r7, #16]
 8000c3e:	4b2d      	ldr	r3, [pc, #180]	; (8000cf4 <MX_GPIO_Init+0xd0>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a2c      	ldr	r2, [pc, #176]	; (8000cf4 <MX_GPIO_Init+0xd0>)
 8000c44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b2a      	ldr	r3, [pc, #168]	; (8000cf4 <MX_GPIO_Init+0xd0>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c52:	613b      	str	r3, [r7, #16]
 8000c54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	4b26      	ldr	r3, [pc, #152]	; (8000cf4 <MX_GPIO_Init+0xd0>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a25      	ldr	r2, [pc, #148]	; (8000cf4 <MX_GPIO_Init+0xd0>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b23      	ldr	r3, [pc, #140]	; (8000cf4 <MX_GPIO_Init+0xd0>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	60bb      	str	r3, [r7, #8]
 8000c76:	4b1f      	ldr	r3, [pc, #124]	; (8000cf4 <MX_GPIO_Init+0xd0>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a1e      	ldr	r2, [pc, #120]	; (8000cf4 <MX_GPIO_Init+0xd0>)
 8000c7c:	f043 0304 	orr.w	r3, r3, #4
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b1c      	ldr	r3, [pc, #112]	; (8000cf4 <MX_GPIO_Init+0xd0>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0304 	and.w	r3, r3, #4
 8000c8a:	60bb      	str	r3, [r7, #8]
 8000c8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	607b      	str	r3, [r7, #4]
 8000c92:	4b18      	ldr	r3, [pc, #96]	; (8000cf4 <MX_GPIO_Init+0xd0>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	4a17      	ldr	r2, [pc, #92]	; (8000cf4 <MX_GPIO_Init+0xd0>)
 8000c98:	f043 0308 	orr.w	r3, r3, #8
 8000c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9e:	4b15      	ldr	r3, [pc, #84]	; (8000cf4 <MX_GPIO_Init+0xd0>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	f003 0308 	and.w	r3, r3, #8
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	603b      	str	r3, [r7, #0]
 8000cae:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <MX_GPIO_Init+0xd0>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	4a10      	ldr	r2, [pc, #64]	; (8000cf4 <MX_GPIO_Init+0xd0>)
 8000cb4:	f043 0302 	orr.w	r3, r3, #2
 8000cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <MX_GPIO_Init+0xd0>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	f003 0302 	and.w	r3, r3, #2
 8000cc2:	603b      	str	r3, [r7, #0]
 8000cc4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2110      	movs	r1, #16
 8000cca:	480b      	ldr	r0, [pc, #44]	; (8000cf8 <MX_GPIO_Init+0xd4>)
 8000ccc:	f001 f840 	bl	8001d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Audio_RST_Pin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 8000cd0:	2310      	movs	r3, #16
 8000cd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4804      	ldr	r0, [pc, #16]	; (8000cf8 <MX_GPIO_Init+0xd4>)
 8000ce8:	f000 feae 	bl	8001a48 <HAL_GPIO_Init>

}
 8000cec:	bf00      	nop
 8000cee:	3728      	adds	r7, #40	; 0x28
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40023800 	.word	0x40023800
 8000cf8:	40020c00 	.word	0x40020c00

08000cfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d00:	b672      	cpsid	i
}
 8000d02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <Error_Handler+0x8>
	...

08000d08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	607b      	str	r3, [r7, #4]
 8000d12:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d16:	4a0f      	ldr	r2, [pc, #60]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d1e:	4b0d      	ldr	r3, [pc, #52]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	603b      	str	r3, [r7, #0]
 8000d2e:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	4a08      	ldr	r2, [pc, #32]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d38:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d42:	603b      	str	r3, [r7, #0]
 8000d44:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d46:	2007      	movs	r0, #7
 8000d48:	f000 facc 	bl	80012e4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40023800 	.word	0x40023800

08000d58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08a      	sub	sp, #40	; 0x28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a19      	ldr	r2, [pc, #100]	; (8000ddc <HAL_I2C_MspInit+0x84>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d12c      	bne.n	8000dd4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	613b      	str	r3, [r7, #16]
 8000d7e:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <HAL_I2C_MspInit+0x88>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a17      	ldr	r2, [pc, #92]	; (8000de0 <HAL_I2C_MspInit+0x88>)
 8000d84:	f043 0302 	orr.w	r3, r3, #2
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <HAL_I2C_MspInit+0x88>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000d96:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d9c:	2312      	movs	r3, #18
 8000d9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000da0:	2301      	movs	r3, #1
 8000da2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da4:	2300      	movs	r3, #0
 8000da6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000da8:	2304      	movs	r3, #4
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	4619      	mov	r1, r3
 8000db2:	480c      	ldr	r0, [pc, #48]	; (8000de4 <HAL_I2C_MspInit+0x8c>)
 8000db4:	f000 fe48 	bl	8001a48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000db8:	2300      	movs	r3, #0
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <HAL_I2C_MspInit+0x88>)
 8000dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc0:	4a07      	ldr	r2, [pc, #28]	; (8000de0 <HAL_I2C_MspInit+0x88>)
 8000dc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dc6:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc8:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <HAL_I2C_MspInit+0x88>)
 8000dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000dd4:	bf00      	nop
 8000dd6:	3728      	adds	r7, #40	; 0x28
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40005400 	.word	0x40005400
 8000de0:	40023800 	.word	0x40023800
 8000de4:	40020400 	.word	0x40020400

08000de8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b090      	sub	sp, #64	; 0x40
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
 8000e10:	615a      	str	r2, [r3, #20]
  if(hi2s->Instance==SPI3)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a4f      	ldr	r2, [pc, #316]	; (8000f54 <HAL_I2S_MspInit+0x16c>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	f040 8096 	bne.w	8000f4a <HAL_I2S_MspInit+0x162>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8000e22:	2364      	movs	r3, #100	; 0x64
 8000e24:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 8000e26:	2308      	movs	r3, #8
 8000e28:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	4618      	mov	r0, r3
 8000e34:	f003 f966 	bl	8004104 <HAL_RCCEx_PeriphCLKConfig>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <HAL_I2S_MspInit+0x5a>
    {
      Error_Handler();
 8000e3e:	f7ff ff5d 	bl	8000cfc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
 8000e46:	4b44      	ldr	r3, [pc, #272]	; (8000f58 <HAL_I2S_MspInit+0x170>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4a:	4a43      	ldr	r2, [pc, #268]	; (8000f58 <HAL_I2S_MspInit+0x170>)
 8000e4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e50:	6413      	str	r3, [r2, #64]	; 0x40
 8000e52:	4b41      	ldr	r3, [pc, #260]	; (8000f58 <HAL_I2S_MspInit+0x170>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	4b3d      	ldr	r3, [pc, #244]	; (8000f58 <HAL_I2S_MspInit+0x170>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a3c      	ldr	r2, [pc, #240]	; (8000f58 <HAL_I2S_MspInit+0x170>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b3a      	ldr	r3, [pc, #232]	; (8000f58 <HAL_I2S_MspInit+0x170>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60bb      	str	r3, [r7, #8]
 8000e7e:	4b36      	ldr	r3, [pc, #216]	; (8000f58 <HAL_I2S_MspInit+0x170>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	4a35      	ldr	r2, [pc, #212]	; (8000f58 <HAL_I2S_MspInit+0x170>)
 8000e84:	f043 0304 	orr.w	r3, r3, #4
 8000e88:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8a:	4b33      	ldr	r3, [pc, #204]	; (8000f58 <HAL_I2S_MspInit+0x170>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	f003 0304 	and.w	r3, r3, #4
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000e96:	2310      	movs	r3, #16
 8000e98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ea6:	2306      	movs	r3, #6
 8000ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000eaa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eae:	4619      	mov	r1, r3
 8000eb0:	482a      	ldr	r0, [pc, #168]	; (8000f5c <HAL_I2S_MspInit+0x174>)
 8000eb2:	f000 fdc9 	bl	8001a48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000eb6:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000eba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ec8:	2306      	movs	r3, #6
 8000eca:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ecc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4823      	ldr	r0, [pc, #140]	; (8000f60 <HAL_I2S_MspInit+0x178>)
 8000ed4:	f000 fdb8 	bl	8001a48 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8000ed8:	4b22      	ldr	r3, [pc, #136]	; (8000f64 <HAL_I2S_MspInit+0x17c>)
 8000eda:	4a23      	ldr	r2, [pc, #140]	; (8000f68 <HAL_I2S_MspInit+0x180>)
 8000edc:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8000ede:	4b21      	ldr	r3, [pc, #132]	; (8000f64 <HAL_I2S_MspInit+0x17c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ee4:	4b1f      	ldr	r3, [pc, #124]	; (8000f64 <HAL_I2S_MspInit+0x17c>)
 8000ee6:	2240      	movs	r2, #64	; 0x40
 8000ee8:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eea:	4b1e      	ldr	r3, [pc, #120]	; (8000f64 <HAL_I2S_MspInit+0x17c>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ef0:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <HAL_I2S_MspInit+0x17c>)
 8000ef2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ef6:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ef8:	4b1a      	ldr	r3, [pc, #104]	; (8000f64 <HAL_I2S_MspInit+0x17c>)
 8000efa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000efe:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f00:	4b18      	ldr	r3, [pc, #96]	; (8000f64 <HAL_I2S_MspInit+0x17c>)
 8000f02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f06:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8000f08:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <HAL_I2S_MspInit+0x17c>)
 8000f0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f0e:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f10:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <HAL_I2S_MspInit+0x17c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000f16:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <HAL_I2S_MspInit+0x17c>)
 8000f18:	2204      	movs	r2, #4
 8000f1a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000f1c:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <HAL_I2S_MspInit+0x17c>)
 8000f1e:	2203      	movs	r2, #3
 8000f20:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000f22:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <HAL_I2S_MspInit+0x17c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000f28:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <HAL_I2S_MspInit+0x17c>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000f2e:	480d      	ldr	r0, [pc, #52]	; (8000f64 <HAL_I2S_MspInit+0x17c>)
 8000f30:	f000 fa1a 	bl	8001368 <HAL_DMA_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <HAL_I2S_MspInit+0x156>
    {
      Error_Handler();
 8000f3a:	f7ff fedf 	bl	8000cfc <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a08      	ldr	r2, [pc, #32]	; (8000f64 <HAL_I2S_MspInit+0x17c>)
 8000f42:	639a      	str	r2, [r3, #56]	; 0x38
 8000f44:	4a07      	ldr	r2, [pc, #28]	; (8000f64 <HAL_I2S_MspInit+0x17c>)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000f4a:	bf00      	nop
 8000f4c:	3740      	adds	r7, #64	; 0x40
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40003c00 	.word	0x40003c00
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40020000 	.word	0x40020000
 8000f60:	40020800 	.word	0x40020800
 8000f64:	2000011c 	.word	0x2000011c
 8000f68:	40026088 	.word	0x40026088

08000f6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f70:	e7fe      	b.n	8000f70 <NMI_Handler+0x4>

08000f72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f76:	e7fe      	b.n	8000f76 <HardFault_Handler+0x4>

08000f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <MemManage_Handler+0x4>

08000f7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f82:	e7fe      	b.n	8000f82 <BusFault_Handler+0x4>

08000f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <UsageFault_Handler+0x4>

08000f8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb8:	f000 f8a4 	bl	8001104 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8000fc4:	4802      	ldr	r0, [pc, #8]	; (8000fd0 <DMA1_Stream5_IRQHandler+0x10>)
 8000fc6:	f000 fad5 	bl	8001574 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	2000011c 	.word	0x2000011c

08000fd4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fd8:	4802      	ldr	r0, [pc, #8]	; (8000fe4 <TIM2_IRQHandler+0x10>)
 8000fda:	f003 f9e3 	bl	80043a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	2000017c 	.word	0x2000017c

08000fe8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <SystemInit+0x20>)
 8000fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ff2:	4a05      	ldr	r2, [pc, #20]	; (8001008 <SystemInit+0x20>)
 8000ff4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ff8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800100c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001044 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001010:	480d      	ldr	r0, [pc, #52]	; (8001048 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001012:	490e      	ldr	r1, [pc, #56]	; (800104c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001014:	4a0e      	ldr	r2, [pc, #56]	; (8001050 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001016:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001018:	e002      	b.n	8001020 <LoopCopyDataInit>

0800101a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800101a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800101c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800101e:	3304      	adds	r3, #4

08001020 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001020:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001022:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001024:	d3f9      	bcc.n	800101a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001026:	4a0b      	ldr	r2, [pc, #44]	; (8001054 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001028:	4c0b      	ldr	r4, [pc, #44]	; (8001058 <LoopFillZerobss+0x26>)
  movs r3, #0
 800102a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800102c:	e001      	b.n	8001032 <LoopFillZerobss>

0800102e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800102e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001030:	3204      	adds	r2, #4

08001032 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001032:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001034:	d3fb      	bcc.n	800102e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001036:	f7ff ffd7 	bl	8000fe8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800103a:	f003 fb01 	bl	8004640 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800103e:	f7ff fc81 	bl	8000944 <main>
  bx  lr    
 8001042:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001044:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001048:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800104c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001050:	08005584 	.word	0x08005584
  ldr r2, =_sbss
 8001054:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001058:	2000029c 	.word	0x2000029c

0800105c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800105c:	e7fe      	b.n	800105c <ADC_IRQHandler>
	...

08001060 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001064:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <HAL_Init+0x40>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a0d      	ldr	r2, [pc, #52]	; (80010a0 <HAL_Init+0x40>)
 800106a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800106e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001070:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <HAL_Init+0x40>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a0a      	ldr	r2, [pc, #40]	; (80010a0 <HAL_Init+0x40>)
 8001076:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800107a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800107c:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <HAL_Init+0x40>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a07      	ldr	r2, [pc, #28]	; (80010a0 <HAL_Init+0x40>)
 8001082:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001086:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001088:	2003      	movs	r0, #3
 800108a:	f000 f92b 	bl	80012e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800108e:	2000      	movs	r0, #0
 8001090:	f000 f808 	bl	80010a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001094:	f7ff fe38 	bl	8000d08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40023c00 	.word	0x40023c00

080010a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010ac:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <HAL_InitTick+0x54>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4b12      	ldr	r3, [pc, #72]	; (80010fc <HAL_InitTick+0x58>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	4619      	mov	r1, r3
 80010b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80010be:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c2:	4618      	mov	r0, r3
 80010c4:	f000 f943 	bl	800134e <HAL_SYSTICK_Config>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e00e      	b.n	80010f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2b0f      	cmp	r3, #15
 80010d6:	d80a      	bhi.n	80010ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d8:	2200      	movs	r2, #0
 80010da:	6879      	ldr	r1, [r7, #4]
 80010dc:	f04f 30ff 	mov.w	r0, #4294967295
 80010e0:	f000 f90b 	bl	80012fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010e4:	4a06      	ldr	r2, [pc, #24]	; (8001100 <HAL_InitTick+0x5c>)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ea:	2300      	movs	r3, #0
 80010ec:	e000      	b.n	80010f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000000 	.word	0x20000000
 80010fc:	20000008 	.word	0x20000008
 8001100:	20000004 	.word	0x20000004

08001104 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001108:	4b06      	ldr	r3, [pc, #24]	; (8001124 <HAL_IncTick+0x20>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	461a      	mov	r2, r3
 800110e:	4b06      	ldr	r3, [pc, #24]	; (8001128 <HAL_IncTick+0x24>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4413      	add	r3, r2
 8001114:	4a04      	ldr	r2, [pc, #16]	; (8001128 <HAL_IncTick+0x24>)
 8001116:	6013      	str	r3, [r2, #0]
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	20000008 	.word	0x20000008
 8001128:	20000298 	.word	0x20000298

0800112c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  return uwTick;
 8001130:	4b03      	ldr	r3, [pc, #12]	; (8001140 <HAL_GetTick+0x14>)
 8001132:	681b      	ldr	r3, [r3, #0]
}
 8001134:	4618      	mov	r0, r3
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	20000298 	.word	0x20000298

08001144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001154:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001160:	4013      	ands	r3, r2
 8001162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800116c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001176:	4a04      	ldr	r2, [pc, #16]	; (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	60d3      	str	r3, [r2, #12]
}
 800117c:	bf00      	nop
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001190:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	0a1b      	lsrs	r3, r3, #8
 8001196:	f003 0307 	and.w	r3, r3, #7
}
 800119a:	4618      	mov	r0, r3
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	db0b      	blt.n	80011d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	f003 021f 	and.w	r2, r3, #31
 80011c0:	4907      	ldr	r1, [pc, #28]	; (80011e0 <__NVIC_EnableIRQ+0x38>)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	095b      	lsrs	r3, r3, #5
 80011c8:	2001      	movs	r0, #1
 80011ca:	fa00 f202 	lsl.w	r2, r0, r2
 80011ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	e000e100 	.word	0xe000e100

080011e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	6039      	str	r1, [r7, #0]
 80011ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	db0a      	blt.n	800120e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	490c      	ldr	r1, [pc, #48]	; (8001230 <__NVIC_SetPriority+0x4c>)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	0112      	lsls	r2, r2, #4
 8001204:	b2d2      	uxtb	r2, r2
 8001206:	440b      	add	r3, r1
 8001208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800120c:	e00a      	b.n	8001224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4908      	ldr	r1, [pc, #32]	; (8001234 <__NVIC_SetPriority+0x50>)
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	f003 030f 	and.w	r3, r3, #15
 800121a:	3b04      	subs	r3, #4
 800121c:	0112      	lsls	r2, r2, #4
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	440b      	add	r3, r1
 8001222:	761a      	strb	r2, [r3, #24]
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000e100 	.word	0xe000e100
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001238:	b480      	push	{r7}
 800123a:	b089      	sub	sp, #36	; 0x24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f1c3 0307 	rsb	r3, r3, #7
 8001252:	2b04      	cmp	r3, #4
 8001254:	bf28      	it	cs
 8001256:	2304      	movcs	r3, #4
 8001258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3304      	adds	r3, #4
 800125e:	2b06      	cmp	r3, #6
 8001260:	d902      	bls.n	8001268 <NVIC_EncodePriority+0x30>
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3b03      	subs	r3, #3
 8001266:	e000      	b.n	800126a <NVIC_EncodePriority+0x32>
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	f04f 32ff 	mov.w	r2, #4294967295
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43da      	mvns	r2, r3
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	401a      	ands	r2, r3
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001280:	f04f 31ff 	mov.w	r1, #4294967295
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	fa01 f303 	lsl.w	r3, r1, r3
 800128a:	43d9      	mvns	r1, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	4313      	orrs	r3, r2
         );
}
 8001292:	4618      	mov	r0, r3
 8001294:	3724      	adds	r7, #36	; 0x24
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012b0:	d301      	bcc.n	80012b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012b2:	2301      	movs	r3, #1
 80012b4:	e00f      	b.n	80012d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012b6:	4a0a      	ldr	r2, [pc, #40]	; (80012e0 <SysTick_Config+0x40>)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012be:	210f      	movs	r1, #15
 80012c0:	f04f 30ff 	mov.w	r0, #4294967295
 80012c4:	f7ff ff8e 	bl	80011e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <SysTick_Config+0x40>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ce:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <SysTick_Config+0x40>)
 80012d0:	2207      	movs	r2, #7
 80012d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	e000e010 	.word	0xe000e010

080012e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff ff29 	bl	8001144 <__NVIC_SetPriorityGrouping>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b086      	sub	sp, #24
 80012fe:	af00      	add	r7, sp, #0
 8001300:	4603      	mov	r3, r0
 8001302:	60b9      	str	r1, [r7, #8]
 8001304:	607a      	str	r2, [r7, #4]
 8001306:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800130c:	f7ff ff3e 	bl	800118c <__NVIC_GetPriorityGrouping>
 8001310:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	68b9      	ldr	r1, [r7, #8]
 8001316:	6978      	ldr	r0, [r7, #20]
 8001318:	f7ff ff8e 	bl	8001238 <NVIC_EncodePriority>
 800131c:	4602      	mov	r2, r0
 800131e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001322:	4611      	mov	r1, r2
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff5d 	bl	80011e4 <__NVIC_SetPriority>
}
 800132a:	bf00      	nop
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	4603      	mov	r3, r0
 800133a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800133c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ff31 	bl	80011a8 <__NVIC_EnableIRQ>
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff ffa2 	bl	80012a0 <SysTick_Config>
 800135c:	4603      	mov	r3, r0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001374:	f7ff feda 	bl	800112c <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d101      	bne.n	8001384 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e099      	b.n	80014b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2202      	movs	r2, #2
 8001388:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f022 0201 	bic.w	r2, r2, #1
 80013a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013a4:	e00f      	b.n	80013c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013a6:	f7ff fec1 	bl	800112c <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b05      	cmp	r3, #5
 80013b2:	d908      	bls.n	80013c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2220      	movs	r2, #32
 80013b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2203      	movs	r2, #3
 80013be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e078      	b.n	80014b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0301 	and.w	r3, r3, #1
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1e8      	bne.n	80013a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80013dc:	697a      	ldr	r2, [r7, #20]
 80013de:	4b38      	ldr	r3, [pc, #224]	; (80014c0 <HAL_DMA_Init+0x158>)
 80013e0:	4013      	ands	r3, r2
 80013e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685a      	ldr	r2, [r3, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	691b      	ldr	r3, [r3, #16]
 80013f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800140a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a1b      	ldr	r3, [r3, #32]
 8001410:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001412:	697a      	ldr	r2, [r7, #20]
 8001414:	4313      	orrs	r3, r2
 8001416:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141c:	2b04      	cmp	r3, #4
 800141e:	d107      	bne.n	8001430 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001428:	4313      	orrs	r3, r2
 800142a:	697a      	ldr	r2, [r7, #20]
 800142c:	4313      	orrs	r3, r2
 800142e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	697a      	ldr	r2, [r7, #20]
 8001436:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	f023 0307 	bic.w	r3, r3, #7
 8001446:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144c:	697a      	ldr	r2, [r7, #20]
 800144e:	4313      	orrs	r3, r2
 8001450:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001456:	2b04      	cmp	r3, #4
 8001458:	d117      	bne.n	800148a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800145e:	697a      	ldr	r2, [r7, #20]
 8001460:	4313      	orrs	r3, r2
 8001462:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001468:	2b00      	cmp	r3, #0
 800146a:	d00e      	beq.n	800148a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f000 fa6f 	bl	8001950 <DMA_CheckFifoParam>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d008      	beq.n	800148a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2240      	movs	r2, #64	; 0x40
 800147c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2201      	movs	r2, #1
 8001482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001486:	2301      	movs	r3, #1
 8001488:	e016      	b.n	80014b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	697a      	ldr	r2, [r7, #20]
 8001490:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f000 fa26 	bl	80018e4 <DMA_CalcBaseAndBitshift>
 8001498:	4603      	mov	r3, r0
 800149a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014a0:	223f      	movs	r2, #63	; 0x3f
 80014a2:	409a      	lsls	r2, r3
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2201      	movs	r2, #1
 80014b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80014b6:	2300      	movs	r3, #0
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3718      	adds	r7, #24
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	f010803f 	.word	0xf010803f

080014c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
 80014d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014d2:	2300      	movs	r3, #0
 80014d4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014da:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d101      	bne.n	80014ea <HAL_DMA_Start_IT+0x26>
 80014e6:	2302      	movs	r3, #2
 80014e8:	e040      	b.n	800156c <HAL_DMA_Start_IT+0xa8>
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2201      	movs	r2, #1
 80014ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d12f      	bne.n	800155e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2202      	movs	r2, #2
 8001502:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2200      	movs	r2, #0
 800150a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	68b9      	ldr	r1, [r7, #8]
 8001512:	68f8      	ldr	r0, [r7, #12]
 8001514:	f000 f9b8 	bl	8001888 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800151c:	223f      	movs	r2, #63	; 0x3f
 800151e:	409a      	lsls	r2, r3
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f042 0216 	orr.w	r2, r2, #22
 8001532:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001538:	2b00      	cmp	r3, #0
 800153a:	d007      	beq.n	800154c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f042 0208 	orr.w	r2, r2, #8
 800154a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f042 0201 	orr.w	r2, r2, #1
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	e005      	b.n	800156a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001566:	2302      	movs	r3, #2
 8001568:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800156a:	7dfb      	ldrb	r3, [r7, #23]
}
 800156c:	4618      	mov	r0, r3
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800157c:	2300      	movs	r3, #0
 800157e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001580:	4b8e      	ldr	r3, [pc, #568]	; (80017bc <HAL_DMA_IRQHandler+0x248>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a8e      	ldr	r2, [pc, #568]	; (80017c0 <HAL_DMA_IRQHandler+0x24c>)
 8001586:	fba2 2303 	umull	r2, r3, r2, r3
 800158a:	0a9b      	lsrs	r3, r3, #10
 800158c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001592:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800159e:	2208      	movs	r2, #8
 80015a0:	409a      	lsls	r2, r3
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	4013      	ands	r3, r2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d01a      	beq.n	80015e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0304 	and.w	r3, r3, #4
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d013      	beq.n	80015e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f022 0204 	bic.w	r2, r2, #4
 80015c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015cc:	2208      	movs	r2, #8
 80015ce:	409a      	lsls	r2, r3
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015d8:	f043 0201 	orr.w	r2, r3, #1
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e4:	2201      	movs	r2, #1
 80015e6:	409a      	lsls	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	4013      	ands	r3, r2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d012      	beq.n	8001616 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	695b      	ldr	r3, [r3, #20]
 80015f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d00b      	beq.n	8001616 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001602:	2201      	movs	r2, #1
 8001604:	409a      	lsls	r2, r3
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800160e:	f043 0202 	orr.w	r2, r3, #2
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800161a:	2204      	movs	r2, #4
 800161c:	409a      	lsls	r2, r3
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	4013      	ands	r3, r2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d012      	beq.n	800164c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d00b      	beq.n	800164c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001638:	2204      	movs	r2, #4
 800163a:	409a      	lsls	r2, r3
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001644:	f043 0204 	orr.w	r2, r3, #4
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001650:	2210      	movs	r2, #16
 8001652:	409a      	lsls	r2, r3
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	4013      	ands	r3, r2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d043      	beq.n	80016e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0308 	and.w	r3, r3, #8
 8001666:	2b00      	cmp	r3, #0
 8001668:	d03c      	beq.n	80016e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800166e:	2210      	movs	r2, #16
 8001670:	409a      	lsls	r2, r3
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d018      	beq.n	80016b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d108      	bne.n	80016a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	2b00      	cmp	r3, #0
 8001698:	d024      	beq.n	80016e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	4798      	blx	r3
 80016a2:	e01f      	b.n	80016e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d01b      	beq.n	80016e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	4798      	blx	r3
 80016b4:	e016      	b.n	80016e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d107      	bne.n	80016d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f022 0208 	bic.w	r2, r2, #8
 80016d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d003      	beq.n	80016e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016e8:	2220      	movs	r2, #32
 80016ea:	409a      	lsls	r2, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	4013      	ands	r3, r2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f000 808f 	beq.w	8001814 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0310 	and.w	r3, r3, #16
 8001700:	2b00      	cmp	r3, #0
 8001702:	f000 8087 	beq.w	8001814 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800170a:	2220      	movs	r2, #32
 800170c:	409a      	lsls	r2, r3
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b05      	cmp	r3, #5
 800171c:	d136      	bne.n	800178c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f022 0216 	bic.w	r2, r2, #22
 800172c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	695a      	ldr	r2, [r3, #20]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800173c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	2b00      	cmp	r3, #0
 8001744:	d103      	bne.n	800174e <HAL_DMA_IRQHandler+0x1da>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800174a:	2b00      	cmp	r3, #0
 800174c:	d007      	beq.n	800175e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f022 0208 	bic.w	r2, r2, #8
 800175c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001762:	223f      	movs	r2, #63	; 0x3f
 8001764:	409a      	lsls	r2, r3
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2201      	movs	r2, #1
 800176e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800177e:	2b00      	cmp	r3, #0
 8001780:	d07e      	beq.n	8001880 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	4798      	blx	r3
        }
        return;
 800178a:	e079      	b.n	8001880 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d01d      	beq.n	80017d6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d10d      	bne.n	80017c4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d031      	beq.n	8001814 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	4798      	blx	r3
 80017b8:	e02c      	b.n	8001814 <HAL_DMA_IRQHandler+0x2a0>
 80017ba:	bf00      	nop
 80017bc:	20000000 	.word	0x20000000
 80017c0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d023      	beq.n	8001814 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	4798      	blx	r3
 80017d4:	e01e      	b.n	8001814 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d10f      	bne.n	8001804 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f022 0210 	bic.w	r2, r2, #16
 80017f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2201      	movs	r2, #1
 80017f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001808:	2b00      	cmp	r3, #0
 800180a:	d003      	beq.n	8001814 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001818:	2b00      	cmp	r3, #0
 800181a:	d032      	beq.n	8001882 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001820:	f003 0301 	and.w	r3, r3, #1
 8001824:	2b00      	cmp	r3, #0
 8001826:	d022      	beq.n	800186e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2205      	movs	r2, #5
 800182c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f022 0201 	bic.w	r2, r2, #1
 800183e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	3301      	adds	r3, #1
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	697a      	ldr	r2, [r7, #20]
 8001848:	429a      	cmp	r2, r3
 800184a:	d307      	bcc.n	800185c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	2b00      	cmp	r3, #0
 8001858:	d1f2      	bne.n	8001840 <HAL_DMA_IRQHandler+0x2cc>
 800185a:	e000      	b.n	800185e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800185c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2201      	movs	r2, #1
 8001862:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001872:	2b00      	cmp	r3, #0
 8001874:	d005      	beq.n	8001882 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	4798      	blx	r3
 800187e:	e000      	b.n	8001882 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001880:	bf00      	nop
    }
  }
}
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
 8001894:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	683a      	ldr	r2, [r7, #0]
 80018ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	2b40      	cmp	r3, #64	; 0x40
 80018b4:	d108      	bne.n	80018c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	68ba      	ldr	r2, [r7, #8]
 80018c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80018c6:	e007      	b.n	80018d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	68ba      	ldr	r2, [r7, #8]
 80018ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	60da      	str	r2, [r3, #12]
}
 80018d8:	bf00      	nop
 80018da:	3714      	adds	r7, #20
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	3b10      	subs	r3, #16
 80018f4:	4a14      	ldr	r2, [pc, #80]	; (8001948 <DMA_CalcBaseAndBitshift+0x64>)
 80018f6:	fba2 2303 	umull	r2, r3, r2, r3
 80018fa:	091b      	lsrs	r3, r3, #4
 80018fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80018fe:	4a13      	ldr	r2, [pc, #76]	; (800194c <DMA_CalcBaseAndBitshift+0x68>)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	4413      	add	r3, r2
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	461a      	mov	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2b03      	cmp	r3, #3
 8001910:	d909      	bls.n	8001926 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800191a:	f023 0303 	bic.w	r3, r3, #3
 800191e:	1d1a      	adds	r2, r3, #4
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	659a      	str	r2, [r3, #88]	; 0x58
 8001924:	e007      	b.n	8001936 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800192e:	f023 0303 	bic.w	r3, r3, #3
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800193a:	4618      	mov	r0, r3
 800193c:	3714      	adds	r7, #20
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	aaaaaaab 	.word	0xaaaaaaab
 800194c:	0800519c 	.word	0x0800519c

08001950 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001958:	2300      	movs	r3, #0
 800195a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001960:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d11f      	bne.n	80019aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	2b03      	cmp	r3, #3
 800196e:	d856      	bhi.n	8001a1e <DMA_CheckFifoParam+0xce>
 8001970:	a201      	add	r2, pc, #4	; (adr r2, 8001978 <DMA_CheckFifoParam+0x28>)
 8001972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001976:	bf00      	nop
 8001978:	08001989 	.word	0x08001989
 800197c:	0800199b 	.word	0x0800199b
 8001980:	08001989 	.word	0x08001989
 8001984:	08001a1f 	.word	0x08001a1f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d046      	beq.n	8001a22 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001998:	e043      	b.n	8001a22 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019a2:	d140      	bne.n	8001a26 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019a8:	e03d      	b.n	8001a26 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019b2:	d121      	bne.n	80019f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	2b03      	cmp	r3, #3
 80019b8:	d837      	bhi.n	8001a2a <DMA_CheckFifoParam+0xda>
 80019ba:	a201      	add	r2, pc, #4	; (adr r2, 80019c0 <DMA_CheckFifoParam+0x70>)
 80019bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c0:	080019d1 	.word	0x080019d1
 80019c4:	080019d7 	.word	0x080019d7
 80019c8:	080019d1 	.word	0x080019d1
 80019cc:	080019e9 	.word	0x080019e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	73fb      	strb	r3, [r7, #15]
      break;
 80019d4:	e030      	b.n	8001a38 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d025      	beq.n	8001a2e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019e6:	e022      	b.n	8001a2e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019f0:	d11f      	bne.n	8001a32 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80019f6:	e01c      	b.n	8001a32 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d903      	bls.n	8001a06 <DMA_CheckFifoParam+0xb6>
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	2b03      	cmp	r3, #3
 8001a02:	d003      	beq.n	8001a0c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a04:	e018      	b.n	8001a38 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	73fb      	strb	r3, [r7, #15]
      break;
 8001a0a:	e015      	b.n	8001a38 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d00e      	beq.n	8001a36 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	73fb      	strb	r3, [r7, #15]
      break;
 8001a1c:	e00b      	b.n	8001a36 <DMA_CheckFifoParam+0xe6>
      break;
 8001a1e:	bf00      	nop
 8001a20:	e00a      	b.n	8001a38 <DMA_CheckFifoParam+0xe8>
      break;
 8001a22:	bf00      	nop
 8001a24:	e008      	b.n	8001a38 <DMA_CheckFifoParam+0xe8>
      break;
 8001a26:	bf00      	nop
 8001a28:	e006      	b.n	8001a38 <DMA_CheckFifoParam+0xe8>
      break;
 8001a2a:	bf00      	nop
 8001a2c:	e004      	b.n	8001a38 <DMA_CheckFifoParam+0xe8>
      break;
 8001a2e:	bf00      	nop
 8001a30:	e002      	b.n	8001a38 <DMA_CheckFifoParam+0xe8>
      break;   
 8001a32:	bf00      	nop
 8001a34:	e000      	b.n	8001a38 <DMA_CheckFifoParam+0xe8>
      break;
 8001a36:	bf00      	nop
    }
  } 
  
  return status; 
 8001a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3714      	adds	r7, #20
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop

08001a48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b089      	sub	sp, #36	; 0x24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a52:	2300      	movs	r3, #0
 8001a54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a56:	2300      	movs	r3, #0
 8001a58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61fb      	str	r3, [r7, #28]
 8001a62:	e159      	b.n	8001d18 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a64:	2201      	movs	r2, #1
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	697a      	ldr	r2, [r7, #20]
 8001a74:	4013      	ands	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	f040 8148 	bne.w	8001d12 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f003 0303 	and.w	r3, r3, #3
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d005      	beq.n	8001a9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d130      	bne.n	8001afc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	2203      	movs	r2, #3
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	68da      	ldr	r2, [r3, #12]
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4013      	ands	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	091b      	lsrs	r3, r3, #4
 8001ae6:	f003 0201 	and.w	r2, r3, #1
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f003 0303 	and.w	r3, r3, #3
 8001b04:	2b03      	cmp	r3, #3
 8001b06:	d017      	beq.n	8001b38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	2203      	movs	r2, #3
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f003 0303 	and.w	r3, r3, #3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d123      	bne.n	8001b8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	08da      	lsrs	r2, r3, #3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3208      	adds	r2, #8
 8001b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	220f      	movs	r2, #15
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	43db      	mvns	r3, r3
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4013      	ands	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	691a      	ldr	r2, [r3, #16]
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	08da      	lsrs	r2, r3, #3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	3208      	adds	r2, #8
 8001b86:	69b9      	ldr	r1, [r7, #24]
 8001b88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	2203      	movs	r2, #3
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f003 0203 	and.w	r2, r3, #3
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f000 80a2 	beq.w	8001d12 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	4b57      	ldr	r3, [pc, #348]	; (8001d30 <HAL_GPIO_Init+0x2e8>)
 8001bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd6:	4a56      	ldr	r2, [pc, #344]	; (8001d30 <HAL_GPIO_Init+0x2e8>)
 8001bd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bdc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bde:	4b54      	ldr	r3, [pc, #336]	; (8001d30 <HAL_GPIO_Init+0x2e8>)
 8001be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bea:	4a52      	ldr	r2, [pc, #328]	; (8001d34 <HAL_GPIO_Init+0x2ec>)
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	089b      	lsrs	r3, r3, #2
 8001bf0:	3302      	adds	r3, #2
 8001bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	f003 0303 	and.w	r3, r3, #3
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	220f      	movs	r2, #15
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43db      	mvns	r3, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a49      	ldr	r2, [pc, #292]	; (8001d38 <HAL_GPIO_Init+0x2f0>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d019      	beq.n	8001c4a <HAL_GPIO_Init+0x202>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a48      	ldr	r2, [pc, #288]	; (8001d3c <HAL_GPIO_Init+0x2f4>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d013      	beq.n	8001c46 <HAL_GPIO_Init+0x1fe>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a47      	ldr	r2, [pc, #284]	; (8001d40 <HAL_GPIO_Init+0x2f8>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d00d      	beq.n	8001c42 <HAL_GPIO_Init+0x1fa>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a46      	ldr	r2, [pc, #280]	; (8001d44 <HAL_GPIO_Init+0x2fc>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d007      	beq.n	8001c3e <HAL_GPIO_Init+0x1f6>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a45      	ldr	r2, [pc, #276]	; (8001d48 <HAL_GPIO_Init+0x300>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d101      	bne.n	8001c3a <HAL_GPIO_Init+0x1f2>
 8001c36:	2304      	movs	r3, #4
 8001c38:	e008      	b.n	8001c4c <HAL_GPIO_Init+0x204>
 8001c3a:	2307      	movs	r3, #7
 8001c3c:	e006      	b.n	8001c4c <HAL_GPIO_Init+0x204>
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e004      	b.n	8001c4c <HAL_GPIO_Init+0x204>
 8001c42:	2302      	movs	r3, #2
 8001c44:	e002      	b.n	8001c4c <HAL_GPIO_Init+0x204>
 8001c46:	2301      	movs	r3, #1
 8001c48:	e000      	b.n	8001c4c <HAL_GPIO_Init+0x204>
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	69fa      	ldr	r2, [r7, #28]
 8001c4e:	f002 0203 	and.w	r2, r2, #3
 8001c52:	0092      	lsls	r2, r2, #2
 8001c54:	4093      	lsls	r3, r2
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c5c:	4935      	ldr	r1, [pc, #212]	; (8001d34 <HAL_GPIO_Init+0x2ec>)
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	089b      	lsrs	r3, r3, #2
 8001c62:	3302      	adds	r3, #2
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c6a:	4b38      	ldr	r3, [pc, #224]	; (8001d4c <HAL_GPIO_Init+0x304>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	43db      	mvns	r3, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4013      	ands	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c8e:	4a2f      	ldr	r2, [pc, #188]	; (8001d4c <HAL_GPIO_Init+0x304>)
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c94:	4b2d      	ldr	r3, [pc, #180]	; (8001d4c <HAL_GPIO_Init+0x304>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d003      	beq.n	8001cb8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cb8:	4a24      	ldr	r2, [pc, #144]	; (8001d4c <HAL_GPIO_Init+0x304>)
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cbe:	4b23      	ldr	r3, [pc, #140]	; (8001d4c <HAL_GPIO_Init+0x304>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ce2:	4a1a      	ldr	r2, [pc, #104]	; (8001d4c <HAL_GPIO_Init+0x304>)
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ce8:	4b18      	ldr	r3, [pc, #96]	; (8001d4c <HAL_GPIO_Init+0x304>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d003      	beq.n	8001d0c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d0c:	4a0f      	ldr	r2, [pc, #60]	; (8001d4c <HAL_GPIO_Init+0x304>)
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	3301      	adds	r3, #1
 8001d16:	61fb      	str	r3, [r7, #28]
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	2b0f      	cmp	r3, #15
 8001d1c:	f67f aea2 	bls.w	8001a64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d20:	bf00      	nop
 8001d22:	bf00      	nop
 8001d24:	3724      	adds	r7, #36	; 0x24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	40023800 	.word	0x40023800
 8001d34:	40013800 	.word	0x40013800
 8001d38:	40020000 	.word	0x40020000
 8001d3c:	40020400 	.word	0x40020400
 8001d40:	40020800 	.word	0x40020800
 8001d44:	40020c00 	.word	0x40020c00
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	40013c00 	.word	0x40013c00

08001d50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	807b      	strh	r3, [r7, #2]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d60:	787b      	ldrb	r3, [r7, #1]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d66:	887a      	ldrh	r2, [r7, #2]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d6c:	e003      	b.n	8001d76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d6e:	887b      	ldrh	r3, [r7, #2]
 8001d70:	041a      	lsls	r2, r3, #16
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	619a      	str	r2, [r3, #24]
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
	...

08001d84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e12b      	b.n	8001fee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d106      	bne.n	8001db0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7fe ffd4 	bl	8000d58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2224      	movs	r2, #36	; 0x24
 8001db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f022 0201 	bic.w	r2, r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dd6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001de6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001de8:	f002 f978 	bl	80040dc <HAL_RCC_GetPCLK1Freq>
 8001dec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	4a81      	ldr	r2, [pc, #516]	; (8001ff8 <HAL_I2C_Init+0x274>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d807      	bhi.n	8001e08 <HAL_I2C_Init+0x84>
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	4a80      	ldr	r2, [pc, #512]	; (8001ffc <HAL_I2C_Init+0x278>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	bf94      	ite	ls
 8001e00:	2301      	movls	r3, #1
 8001e02:	2300      	movhi	r3, #0
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	e006      	b.n	8001e16 <HAL_I2C_Init+0x92>
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4a7d      	ldr	r2, [pc, #500]	; (8002000 <HAL_I2C_Init+0x27c>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	bf94      	ite	ls
 8001e10:	2301      	movls	r3, #1
 8001e12:	2300      	movhi	r3, #0
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e0e7      	b.n	8001fee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	4a78      	ldr	r2, [pc, #480]	; (8002004 <HAL_I2C_Init+0x280>)
 8001e22:	fba2 2303 	umull	r2, r3, r2, r3
 8001e26:	0c9b      	lsrs	r3, r3, #18
 8001e28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68ba      	ldr	r2, [r7, #8]
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	4a6a      	ldr	r2, [pc, #424]	; (8001ff8 <HAL_I2C_Init+0x274>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d802      	bhi.n	8001e58 <HAL_I2C_Init+0xd4>
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	3301      	adds	r3, #1
 8001e56:	e009      	b.n	8001e6c <HAL_I2C_Init+0xe8>
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e5e:	fb02 f303 	mul.w	r3, r2, r3
 8001e62:	4a69      	ldr	r2, [pc, #420]	; (8002008 <HAL_I2C_Init+0x284>)
 8001e64:	fba2 2303 	umull	r2, r3, r2, r3
 8001e68:	099b      	lsrs	r3, r3, #6
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	6812      	ldr	r2, [r2, #0]
 8001e70:	430b      	orrs	r3, r1
 8001e72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e7e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	495c      	ldr	r1, [pc, #368]	; (8001ff8 <HAL_I2C_Init+0x274>)
 8001e88:	428b      	cmp	r3, r1
 8001e8a:	d819      	bhi.n	8001ec0 <HAL_I2C_Init+0x13c>
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	1e59      	subs	r1, r3, #1
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e9a:	1c59      	adds	r1, r3, #1
 8001e9c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ea0:	400b      	ands	r3, r1
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00a      	beq.n	8001ebc <HAL_I2C_Init+0x138>
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	1e59      	subs	r1, r3, #1
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eba:	e051      	b.n	8001f60 <HAL_I2C_Init+0x1dc>
 8001ebc:	2304      	movs	r3, #4
 8001ebe:	e04f      	b.n	8001f60 <HAL_I2C_Init+0x1dc>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d111      	bne.n	8001eec <HAL_I2C_Init+0x168>
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	1e58      	subs	r0, r3, #1
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6859      	ldr	r1, [r3, #4]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	440b      	add	r3, r1
 8001ed6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eda:	3301      	adds	r3, #1
 8001edc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	bf0c      	ite	eq
 8001ee4:	2301      	moveq	r3, #1
 8001ee6:	2300      	movne	r3, #0
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	e012      	b.n	8001f12 <HAL_I2C_Init+0x18e>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	1e58      	subs	r0, r3, #1
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6859      	ldr	r1, [r3, #4]
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	440b      	add	r3, r1
 8001efa:	0099      	lsls	r1, r3, #2
 8001efc:	440b      	add	r3, r1
 8001efe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f02:	3301      	adds	r3, #1
 8001f04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	bf0c      	ite	eq
 8001f0c:	2301      	moveq	r3, #1
 8001f0e:	2300      	movne	r3, #0
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <HAL_I2C_Init+0x196>
 8001f16:	2301      	movs	r3, #1
 8001f18:	e022      	b.n	8001f60 <HAL_I2C_Init+0x1dc>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d10e      	bne.n	8001f40 <HAL_I2C_Init+0x1bc>
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	1e58      	subs	r0, r3, #1
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6859      	ldr	r1, [r3, #4]
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	440b      	add	r3, r1
 8001f30:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f34:	3301      	adds	r3, #1
 8001f36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f3e:	e00f      	b.n	8001f60 <HAL_I2C_Init+0x1dc>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	1e58      	subs	r0, r3, #1
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6859      	ldr	r1, [r3, #4]
 8001f48:	460b      	mov	r3, r1
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	0099      	lsls	r1, r3, #2
 8001f50:	440b      	add	r3, r1
 8001f52:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f56:	3301      	adds	r3, #1
 8001f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f60:	6879      	ldr	r1, [r7, #4]
 8001f62:	6809      	ldr	r1, [r1, #0]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	69da      	ldr	r2, [r3, #28]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a1b      	ldr	r3, [r3, #32]
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	430a      	orrs	r2, r1
 8001f82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	6911      	ldr	r1, [r2, #16]
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	68d2      	ldr	r2, [r2, #12]
 8001f9a:	4311      	orrs	r1, r2
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	6812      	ldr	r2, [r2, #0]
 8001fa0:	430b      	orrs	r3, r1
 8001fa2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	695a      	ldr	r2, [r3, #20]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f042 0201 	orr.w	r2, r2, #1
 8001fce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2220      	movs	r2, #32
 8001fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	000186a0 	.word	0x000186a0
 8001ffc:	001e847f 	.word	0x001e847f
 8002000:	003d08ff 	.word	0x003d08ff
 8002004:	431bde83 	.word	0x431bde83
 8002008:	10624dd3 	.word	0x10624dd3

0800200c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b088      	sub	sp, #32
 8002010:	af02      	add	r7, sp, #8
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	607a      	str	r2, [r7, #4]
 8002016:	461a      	mov	r2, r3
 8002018:	460b      	mov	r3, r1
 800201a:	817b      	strh	r3, [r7, #10]
 800201c:	4613      	mov	r3, r2
 800201e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002020:	f7ff f884 	bl	800112c <HAL_GetTick>
 8002024:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b20      	cmp	r3, #32
 8002030:	f040 80e0 	bne.w	80021f4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	9300      	str	r3, [sp, #0]
 8002038:	2319      	movs	r3, #25
 800203a:	2201      	movs	r2, #1
 800203c:	4970      	ldr	r1, [pc, #448]	; (8002200 <HAL_I2C_Master_Transmit+0x1f4>)
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	f000 fc58 	bl	80028f4 <I2C_WaitOnFlagUntilTimeout>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800204a:	2302      	movs	r3, #2
 800204c:	e0d3      	b.n	80021f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002054:	2b01      	cmp	r3, #1
 8002056:	d101      	bne.n	800205c <HAL_I2C_Master_Transmit+0x50>
 8002058:	2302      	movs	r3, #2
 800205a:	e0cc      	b.n	80021f6 <HAL_I2C_Master_Transmit+0x1ea>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b01      	cmp	r3, #1
 8002070:	d007      	beq.n	8002082 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f042 0201 	orr.w	r2, r2, #1
 8002080:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002090:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2221      	movs	r2, #33	; 0x21
 8002096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2210      	movs	r2, #16
 800209e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2200      	movs	r2, #0
 80020a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	893a      	ldrh	r2, [r7, #8]
 80020b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	4a50      	ldr	r2, [pc, #320]	; (8002204 <HAL_I2C_Master_Transmit+0x1f8>)
 80020c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80020c4:	8979      	ldrh	r1, [r7, #10]
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	6a3a      	ldr	r2, [r7, #32]
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f000 fac2 	bl	8002654 <I2C_MasterRequestWrite>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e08d      	b.n	80021f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020da:	2300      	movs	r3, #0
 80020dc:	613b      	str	r3, [r7, #16]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	695b      	ldr	r3, [r3, #20]
 80020e4:	613b      	str	r3, [r7, #16]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80020f0:	e066      	b.n	80021c0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	6a39      	ldr	r1, [r7, #32]
 80020f6:	68f8      	ldr	r0, [r7, #12]
 80020f8:	f000 fcd2 	bl	8002aa0 <I2C_WaitOnTXEFlagUntilTimeout>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00d      	beq.n	800211e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	2b04      	cmp	r3, #4
 8002108:	d107      	bne.n	800211a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002118:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e06b      	b.n	80021f6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002122:	781a      	ldrb	r2, [r3, #0]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212e:	1c5a      	adds	r2, r3, #1
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002138:	b29b      	uxth	r3, r3
 800213a:	3b01      	subs	r3, #1
 800213c:	b29a      	uxth	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002146:	3b01      	subs	r3, #1
 8002148:	b29a      	uxth	r2, r3
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	695b      	ldr	r3, [r3, #20]
 8002154:	f003 0304 	and.w	r3, r3, #4
 8002158:	2b04      	cmp	r3, #4
 800215a:	d11b      	bne.n	8002194 <HAL_I2C_Master_Transmit+0x188>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002160:	2b00      	cmp	r3, #0
 8002162:	d017      	beq.n	8002194 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002168:	781a      	ldrb	r2, [r3, #0]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002174:	1c5a      	adds	r2, r3, #1
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800217e:	b29b      	uxth	r3, r3
 8002180:	3b01      	subs	r3, #1
 8002182:	b29a      	uxth	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800218c:	3b01      	subs	r3, #1
 800218e:	b29a      	uxth	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002194:	697a      	ldr	r2, [r7, #20]
 8002196:	6a39      	ldr	r1, [r7, #32]
 8002198:	68f8      	ldr	r0, [r7, #12]
 800219a:	f000 fcc2 	bl	8002b22 <I2C_WaitOnBTFFlagUntilTimeout>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d00d      	beq.n	80021c0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a8:	2b04      	cmp	r3, #4
 80021aa:	d107      	bne.n	80021bc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021ba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e01a      	b.n	80021f6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d194      	bne.n	80020f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2220      	movs	r2, #32
 80021dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021f0:	2300      	movs	r3, #0
 80021f2:	e000      	b.n	80021f6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80021f4:	2302      	movs	r3, #2
  }
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3718      	adds	r7, #24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	00100002 	.word	0x00100002
 8002204:	ffff0000 	.word	0xffff0000

08002208 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b08c      	sub	sp, #48	; 0x30
 800220c:	af02      	add	r7, sp, #8
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	607a      	str	r2, [r7, #4]
 8002212:	461a      	mov	r2, r3
 8002214:	460b      	mov	r3, r1
 8002216:	817b      	strh	r3, [r7, #10]
 8002218:	4613      	mov	r3, r2
 800221a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800221c:	f7fe ff86 	bl	800112c <HAL_GetTick>
 8002220:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b20      	cmp	r3, #32
 800222c:	f040 820b 	bne.w	8002646 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	2319      	movs	r3, #25
 8002236:	2201      	movs	r2, #1
 8002238:	497c      	ldr	r1, [pc, #496]	; (800242c <HAL_I2C_Master_Receive+0x224>)
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f000 fb5a 	bl	80028f4 <I2C_WaitOnFlagUntilTimeout>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002246:	2302      	movs	r3, #2
 8002248:	e1fe      	b.n	8002648 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002250:	2b01      	cmp	r3, #1
 8002252:	d101      	bne.n	8002258 <HAL_I2C_Master_Receive+0x50>
 8002254:	2302      	movs	r3, #2
 8002256:	e1f7      	b.n	8002648 <HAL_I2C_Master_Receive+0x440>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	2b01      	cmp	r3, #1
 800226c:	d007      	beq.n	800227e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f042 0201 	orr.w	r2, r2, #1
 800227c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800228c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2222      	movs	r2, #34	; 0x22
 8002292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2210      	movs	r2, #16
 800229a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2200      	movs	r2, #0
 80022a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	893a      	ldrh	r2, [r7, #8]
 80022ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	4a5c      	ldr	r2, [pc, #368]	; (8002430 <HAL_I2C_Master_Receive+0x228>)
 80022be:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80022c0:	8979      	ldrh	r1, [r7, #10]
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f000 fa46 	bl	8002758 <I2C_MasterRequestRead>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e1b8      	b.n	8002648 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d113      	bne.n	8002306 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022de:	2300      	movs	r3, #0
 80022e0:	623b      	str	r3, [r7, #32]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	695b      	ldr	r3, [r3, #20]
 80022e8:	623b      	str	r3, [r7, #32]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	623b      	str	r3, [r7, #32]
 80022f2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	e18c      	b.n	8002620 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800230a:	2b01      	cmp	r3, #1
 800230c:	d11b      	bne.n	8002346 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800231c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800231e:	2300      	movs	r3, #0
 8002320:	61fb      	str	r3, [r7, #28]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	695b      	ldr	r3, [r3, #20]
 8002328:	61fb      	str	r3, [r7, #28]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	61fb      	str	r3, [r7, #28]
 8002332:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	e16c      	b.n	8002620 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800234a:	2b02      	cmp	r3, #2
 800234c:	d11b      	bne.n	8002386 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800235c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800236c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800236e:	2300      	movs	r3, #0
 8002370:	61bb      	str	r3, [r7, #24]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	695b      	ldr	r3, [r3, #20]
 8002378:	61bb      	str	r3, [r7, #24]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	61bb      	str	r3, [r7, #24]
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	e14c      	b.n	8002620 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002394:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002396:	2300      	movs	r3, #0
 8002398:	617b      	str	r3, [r7, #20]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	617b      	str	r3, [r7, #20]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	617b      	str	r3, [r7, #20]
 80023aa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80023ac:	e138      	b.n	8002620 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b2:	2b03      	cmp	r3, #3
 80023b4:	f200 80f1 	bhi.w	800259a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d123      	bne.n	8002408 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	f000 fbed 	bl	8002ba4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e139      	b.n	8002648 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	691a      	ldr	r2, [r3, #16]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e6:	1c5a      	adds	r2, r3, #1
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f0:	3b01      	subs	r3, #1
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	3b01      	subs	r3, #1
 8002400:	b29a      	uxth	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002406:	e10b      	b.n	8002620 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800240c:	2b02      	cmp	r3, #2
 800240e:	d14e      	bne.n	80024ae <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002416:	2200      	movs	r2, #0
 8002418:	4906      	ldr	r1, [pc, #24]	; (8002434 <HAL_I2C_Master_Receive+0x22c>)
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 fa6a 	bl	80028f4 <I2C_WaitOnFlagUntilTimeout>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d008      	beq.n	8002438 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e10e      	b.n	8002648 <HAL_I2C_Master_Receive+0x440>
 800242a:	bf00      	nop
 800242c:	00100002 	.word	0x00100002
 8002430:	ffff0000 	.word	0xffff0000
 8002434:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002446:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	691a      	ldr	r2, [r3, #16]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002452:	b2d2      	uxtb	r2, r2
 8002454:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245a:	1c5a      	adds	r2, r3, #1
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002464:	3b01      	subs	r3, #1
 8002466:	b29a      	uxth	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002470:	b29b      	uxth	r3, r3
 8002472:	3b01      	subs	r3, #1
 8002474:	b29a      	uxth	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	691a      	ldr	r2, [r3, #16]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002484:	b2d2      	uxtb	r2, r2
 8002486:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248c:	1c5a      	adds	r2, r3, #1
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002496:	3b01      	subs	r3, #1
 8002498:	b29a      	uxth	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	3b01      	subs	r3, #1
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024ac:	e0b8      	b.n	8002620 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b4:	2200      	movs	r2, #0
 80024b6:	4966      	ldr	r1, [pc, #408]	; (8002650 <HAL_I2C_Master_Receive+0x448>)
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	f000 fa1b 	bl	80028f4 <I2C_WaitOnFlagUntilTimeout>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e0bf      	b.n	8002648 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	691a      	ldr	r2, [r3, #16]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e2:	b2d2      	uxtb	r2, r2
 80024e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ea:	1c5a      	adds	r2, r3, #1
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f4:	3b01      	subs	r3, #1
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002500:	b29b      	uxth	r3, r3
 8002502:	3b01      	subs	r3, #1
 8002504:	b29a      	uxth	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250c:	9300      	str	r3, [sp, #0]
 800250e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002510:	2200      	movs	r2, #0
 8002512:	494f      	ldr	r1, [pc, #316]	; (8002650 <HAL_I2C_Master_Receive+0x448>)
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	f000 f9ed 	bl	80028f4 <I2C_WaitOnFlagUntilTimeout>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e091      	b.n	8002648 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002532:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	691a      	ldr	r2, [r3, #16]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253e:	b2d2      	uxtb	r2, r2
 8002540:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002546:	1c5a      	adds	r2, r3, #1
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002550:	3b01      	subs	r3, #1
 8002552:	b29a      	uxth	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800255c:	b29b      	uxth	r3, r3
 800255e:	3b01      	subs	r3, #1
 8002560:	b29a      	uxth	r2, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	691a      	ldr	r2, [r3, #16]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	b2d2      	uxtb	r2, r2
 8002572:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002578:	1c5a      	adds	r2, r3, #1
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002582:	3b01      	subs	r3, #1
 8002584:	b29a      	uxth	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800258e:	b29b      	uxth	r3, r3
 8002590:	3b01      	subs	r3, #1
 8002592:	b29a      	uxth	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002598:	e042      	b.n	8002620 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800259a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800259c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f000 fb00 	bl	8002ba4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e04c      	b.n	8002648 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	691a      	ldr	r2, [r3, #16]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b8:	b2d2      	uxtb	r2, r2
 80025ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c0:	1c5a      	adds	r2, r3, #1
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ca:	3b01      	subs	r3, #1
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	3b01      	subs	r3, #1
 80025da:	b29a      	uxth	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	f003 0304 	and.w	r3, r3, #4
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	d118      	bne.n	8002620 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	691a      	ldr	r2, [r3, #16]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f8:	b2d2      	uxtb	r2, r2
 80025fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002600:	1c5a      	adds	r2, r3, #1
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800260a:	3b01      	subs	r3, #1
 800260c:	b29a      	uxth	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002616:	b29b      	uxth	r3, r3
 8002618:	3b01      	subs	r3, #1
 800261a:	b29a      	uxth	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002624:	2b00      	cmp	r3, #0
 8002626:	f47f aec2 	bne.w	80023ae <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2220      	movs	r2, #32
 800262e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002642:	2300      	movs	r3, #0
 8002644:	e000      	b.n	8002648 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002646:	2302      	movs	r3, #2
  }
}
 8002648:	4618      	mov	r0, r3
 800264a:	3728      	adds	r7, #40	; 0x28
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	00010004 	.word	0x00010004

08002654 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b088      	sub	sp, #32
 8002658:	af02      	add	r7, sp, #8
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	607a      	str	r2, [r7, #4]
 800265e:	603b      	str	r3, [r7, #0]
 8002660:	460b      	mov	r3, r1
 8002662:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002668:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	2b08      	cmp	r3, #8
 800266e:	d006      	beq.n	800267e <I2C_MasterRequestWrite+0x2a>
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d003      	beq.n	800267e <I2C_MasterRequestWrite+0x2a>
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800267c:	d108      	bne.n	8002690 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	e00b      	b.n	80026a8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002694:	2b12      	cmp	r3, #18
 8002696:	d107      	bne.n	80026a8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	9300      	str	r3, [sp, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026b4:	68f8      	ldr	r0, [r7, #12]
 80026b6:	f000 f91d 	bl	80028f4 <I2C_WaitOnFlagUntilTimeout>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00d      	beq.n	80026dc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026ce:	d103      	bne.n	80026d8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e035      	b.n	8002748 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026e4:	d108      	bne.n	80026f8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026e6:	897b      	ldrh	r3, [r7, #10]
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	461a      	mov	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80026f4:	611a      	str	r2, [r3, #16]
 80026f6:	e01b      	b.n	8002730 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80026f8:	897b      	ldrh	r3, [r7, #10]
 80026fa:	11db      	asrs	r3, r3, #7
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	f003 0306 	and.w	r3, r3, #6
 8002702:	b2db      	uxtb	r3, r3
 8002704:	f063 030f 	orn	r3, r3, #15
 8002708:	b2da      	uxtb	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	490e      	ldr	r1, [pc, #56]	; (8002750 <I2C_MasterRequestWrite+0xfc>)
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f000 f943 	bl	80029a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e010      	b.n	8002748 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002726:	897b      	ldrh	r3, [r7, #10]
 8002728:	b2da      	uxtb	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	4907      	ldr	r1, [pc, #28]	; (8002754 <I2C_MasterRequestWrite+0x100>)
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f000 f933 	bl	80029a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e000      	b.n	8002748 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3718      	adds	r7, #24
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	00010008 	.word	0x00010008
 8002754:	00010002 	.word	0x00010002

08002758 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b088      	sub	sp, #32
 800275c:	af02      	add	r7, sp, #8
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	607a      	str	r2, [r7, #4]
 8002762:	603b      	str	r3, [r7, #0]
 8002764:	460b      	mov	r3, r1
 8002766:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800277c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	2b08      	cmp	r3, #8
 8002782:	d006      	beq.n	8002792 <I2C_MasterRequestRead+0x3a>
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d003      	beq.n	8002792 <I2C_MasterRequestRead+0x3a>
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002790:	d108      	bne.n	80027a4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	e00b      	b.n	80027bc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a8:	2b11      	cmp	r3, #17
 80027aa:	d107      	bne.n	80027bc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	9300      	str	r3, [sp, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f000 f893 	bl	80028f4 <I2C_WaitOnFlagUntilTimeout>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00d      	beq.n	80027f0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027e2:	d103      	bne.n	80027ec <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e079      	b.n	80028e4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027f8:	d108      	bne.n	800280c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80027fa:	897b      	ldrh	r3, [r7, #10]
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	f043 0301 	orr.w	r3, r3, #1
 8002802:	b2da      	uxtb	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	611a      	str	r2, [r3, #16]
 800280a:	e05f      	b.n	80028cc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800280c:	897b      	ldrh	r3, [r7, #10]
 800280e:	11db      	asrs	r3, r3, #7
 8002810:	b2db      	uxtb	r3, r3
 8002812:	f003 0306 	and.w	r3, r3, #6
 8002816:	b2db      	uxtb	r3, r3
 8002818:	f063 030f 	orn	r3, r3, #15
 800281c:	b2da      	uxtb	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	4930      	ldr	r1, [pc, #192]	; (80028ec <I2C_MasterRequestRead+0x194>)
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f000 f8b9 	bl	80029a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e054      	b.n	80028e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800283a:	897b      	ldrh	r3, [r7, #10]
 800283c:	b2da      	uxtb	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	4929      	ldr	r1, [pc, #164]	; (80028f0 <I2C_MasterRequestRead+0x198>)
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f000 f8a9 	bl	80029a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e044      	b.n	80028e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800285a:	2300      	movs	r3, #0
 800285c:	613b      	str	r3, [r7, #16]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	613b      	str	r3, [r7, #16]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	613b      	str	r3, [r7, #16]
 800286e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800287e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	9300      	str	r3, [sp, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f000 f831 	bl	80028f4 <I2C_WaitOnFlagUntilTimeout>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00d      	beq.n	80028b4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028a6:	d103      	bne.n	80028b0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028ae:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e017      	b.n	80028e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80028b4:	897b      	ldrh	r3, [r7, #10]
 80028b6:	11db      	asrs	r3, r3, #7
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	f003 0306 	and.w	r3, r3, #6
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	f063 030e 	orn	r3, r3, #14
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	4907      	ldr	r1, [pc, #28]	; (80028f0 <I2C_MasterRequestRead+0x198>)
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f000 f865 	bl	80029a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e000      	b.n	80028e4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3718      	adds	r7, #24
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	00010008 	.word	0x00010008
 80028f0:	00010002 	.word	0x00010002

080028f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	603b      	str	r3, [r7, #0]
 8002900:	4613      	mov	r3, r2
 8002902:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002904:	e025      	b.n	8002952 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800290c:	d021      	beq.n	8002952 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800290e:	f7fe fc0d 	bl	800112c <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	429a      	cmp	r2, r3
 800291c:	d302      	bcc.n	8002924 <I2C_WaitOnFlagUntilTimeout+0x30>
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d116      	bne.n	8002952 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2220      	movs	r2, #32
 800292e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	f043 0220 	orr.w	r2, r3, #32
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e023      	b.n	800299a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	0c1b      	lsrs	r3, r3, #16
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2b01      	cmp	r3, #1
 800295a:	d10d      	bne.n	8002978 <I2C_WaitOnFlagUntilTimeout+0x84>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	43da      	mvns	r2, r3
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	4013      	ands	r3, r2
 8002968:	b29b      	uxth	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	bf0c      	ite	eq
 800296e:	2301      	moveq	r3, #1
 8002970:	2300      	movne	r3, #0
 8002972:	b2db      	uxtb	r3, r3
 8002974:	461a      	mov	r2, r3
 8002976:	e00c      	b.n	8002992 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	43da      	mvns	r2, r3
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	4013      	ands	r3, r2
 8002984:	b29b      	uxth	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	bf0c      	ite	eq
 800298a:	2301      	moveq	r3, #1
 800298c:	2300      	movne	r3, #0
 800298e:	b2db      	uxtb	r3, r3
 8002990:	461a      	mov	r2, r3
 8002992:	79fb      	ldrb	r3, [r7, #7]
 8002994:	429a      	cmp	r2, r3
 8002996:	d0b6      	beq.n	8002906 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b084      	sub	sp, #16
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	60f8      	str	r0, [r7, #12]
 80029aa:	60b9      	str	r1, [r7, #8]
 80029ac:	607a      	str	r2, [r7, #4]
 80029ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029b0:	e051      	b.n	8002a56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029c0:	d123      	bne.n	8002a0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2220      	movs	r2, #32
 80029e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	f043 0204 	orr.w	r2, r3, #4
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e046      	b.n	8002a98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a10:	d021      	beq.n	8002a56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a12:	f7fe fb8b 	bl	800112c <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d302      	bcc.n	8002a28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d116      	bne.n	8002a56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2220      	movs	r2, #32
 8002a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	f043 0220 	orr.w	r2, r3, #32
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e020      	b.n	8002a98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	0c1b      	lsrs	r3, r3, #16
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d10c      	bne.n	8002a7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	43da      	mvns	r2, r3
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	bf14      	ite	ne
 8002a72:	2301      	movne	r3, #1
 8002a74:	2300      	moveq	r3, #0
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	e00b      	b.n	8002a92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	43da      	mvns	r2, r3
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	4013      	ands	r3, r2
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	bf14      	ite	ne
 8002a8c:	2301      	movne	r3, #1
 8002a8e:	2300      	moveq	r3, #0
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d18d      	bne.n	80029b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002aac:	e02d      	b.n	8002b0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f000 f8ce 	bl	8002c50 <I2C_IsAcknowledgeFailed>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e02d      	b.n	8002b1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac4:	d021      	beq.n	8002b0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ac6:	f7fe fb31 	bl	800112c <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	68ba      	ldr	r2, [r7, #8]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d302      	bcc.n	8002adc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d116      	bne.n	8002b0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2220      	movs	r2, #32
 8002ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	f043 0220 	orr.w	r2, r3, #32
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e007      	b.n	8002b1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b14:	2b80      	cmp	r3, #128	; 0x80
 8002b16:	d1ca      	bne.n	8002aae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b084      	sub	sp, #16
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	60f8      	str	r0, [r7, #12]
 8002b2a:	60b9      	str	r1, [r7, #8]
 8002b2c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b2e:	e02d      	b.n	8002b8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f000 f88d 	bl	8002c50 <I2C_IsAcknowledgeFailed>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e02d      	b.n	8002b9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b46:	d021      	beq.n	8002b8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b48:	f7fe faf0 	bl	800112c <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	68ba      	ldr	r2, [r7, #8]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d302      	bcc.n	8002b5e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d116      	bne.n	8002b8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2220      	movs	r2, #32
 8002b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b78:	f043 0220 	orr.w	r2, r3, #32
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e007      	b.n	8002b9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	f003 0304 	and.w	r3, r3, #4
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	d1ca      	bne.n	8002b30 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3710      	adds	r7, #16
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002bb0:	e042      	b.n	8002c38 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	f003 0310 	and.w	r3, r3, #16
 8002bbc:	2b10      	cmp	r3, #16
 8002bbe:	d119      	bne.n	8002bf4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f06f 0210 	mvn.w	r2, #16
 8002bc8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e029      	b.n	8002c48 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bf4:	f7fe fa9a 	bl	800112c <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	68ba      	ldr	r2, [r7, #8]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d302      	bcc.n	8002c0a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d116      	bne.n	8002c38 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2220      	movs	r2, #32
 8002c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c24:	f043 0220 	orr.w	r2, r3, #32
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e007      	b.n	8002c48 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c42:	2b40      	cmp	r3, #64	; 0x40
 8002c44:	d1b5      	bne.n	8002bb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c66:	d11b      	bne.n	8002ca0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c70:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8c:	f043 0204 	orr.w	r2, r3, #4
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e000      	b.n	8002ca2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
	...

08002cb0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b088      	sub	sp, #32
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e128      	b.n	8002f14 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d109      	bne.n	8002ce2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a90      	ldr	r2, [pc, #576]	; (8002f1c <HAL_I2S_Init+0x26c>)
 8002cda:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f7fe f883 	bl	8000de8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2202      	movs	r2, #2
 8002ce6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	69db      	ldr	r3, [r3, #28]
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	6812      	ldr	r2, [r2, #0]
 8002cf4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002cf8:	f023 030f 	bic.w	r3, r3, #15
 8002cfc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2202      	movs	r2, #2
 8002d04:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d060      	beq.n	8002dd0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d102      	bne.n	8002d1c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002d16:	2310      	movs	r3, #16
 8002d18:	617b      	str	r3, [r7, #20]
 8002d1a:	e001      	b.n	8002d20 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002d1c:	2320      	movs	r3, #32
 8002d1e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	2b20      	cmp	r3, #32
 8002d26:	d802      	bhi.n	8002d2e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002d2e:	2001      	movs	r0, #1
 8002d30:	f001 fad8 	bl	80042e4 <HAL_RCCEx_GetPeriphCLKFreq>
 8002d34:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d3e:	d125      	bne.n	8002d8c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d010      	beq.n	8002d6a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d52:	4613      	mov	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4413      	add	r3, r2
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d64:	3305      	adds	r3, #5
 8002d66:	613b      	str	r3, [r7, #16]
 8002d68:	e01f      	b.n	8002daa <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d74:	4613      	mov	r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4413      	add	r3, r2
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d86:	3305      	adds	r3, #5
 8002d88:	613b      	str	r3, [r7, #16]
 8002d8a:	e00e      	b.n	8002daa <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d94:	4613      	mov	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4413      	add	r3, r2
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da6:	3305      	adds	r3, #5
 8002da8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	4a5c      	ldr	r2, [pc, #368]	; (8002f20 <HAL_I2S_Init+0x270>)
 8002dae:	fba2 2303 	umull	r2, r3, r2, r3
 8002db2:	08db      	lsrs	r3, r3, #3
 8002db4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	085b      	lsrs	r3, r3, #1
 8002dc6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	021b      	lsls	r3, r3, #8
 8002dcc:	61bb      	str	r3, [r7, #24]
 8002dce:	e003      	b.n	8002dd8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d902      	bls.n	8002de4 <HAL_I2S_Init+0x134>
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	2bff      	cmp	r3, #255	; 0xff
 8002de2:	d907      	bls.n	8002df4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de8:	f043 0210 	orr.w	r2, r3, #16
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e08f      	b.n	8002f14 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	691a      	ldr	r2, [r3, #16]
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	ea42 0103 	orr.w	r1, r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	69fa      	ldr	r2, [r7, #28]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002e12:	f023 030f 	bic.w	r3, r3, #15
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	6851      	ldr	r1, [r2, #4]
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	6892      	ldr	r2, [r2, #8]
 8002e1e:	4311      	orrs	r1, r2
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	68d2      	ldr	r2, [r2, #12]
 8002e24:	4311      	orrs	r1, r2
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	6992      	ldr	r2, [r2, #24]
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e36:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d161      	bne.n	8002f04 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a38      	ldr	r2, [pc, #224]	; (8002f24 <HAL_I2S_Init+0x274>)
 8002e44:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a37      	ldr	r2, [pc, #220]	; (8002f28 <HAL_I2S_Init+0x278>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d101      	bne.n	8002e54 <HAL_I2S_Init+0x1a4>
 8002e50:	4b36      	ldr	r3, [pc, #216]	; (8002f2c <HAL_I2S_Init+0x27c>)
 8002e52:	e001      	b.n	8002e58 <HAL_I2S_Init+0x1a8>
 8002e54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	6812      	ldr	r2, [r2, #0]
 8002e5e:	4932      	ldr	r1, [pc, #200]	; (8002f28 <HAL_I2S_Init+0x278>)
 8002e60:	428a      	cmp	r2, r1
 8002e62:	d101      	bne.n	8002e68 <HAL_I2S_Init+0x1b8>
 8002e64:	4a31      	ldr	r2, [pc, #196]	; (8002f2c <HAL_I2S_Init+0x27c>)
 8002e66:	e001      	b.n	8002e6c <HAL_I2S_Init+0x1bc>
 8002e68:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002e6c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002e70:	f023 030f 	bic.w	r3, r3, #15
 8002e74:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a2b      	ldr	r2, [pc, #172]	; (8002f28 <HAL_I2S_Init+0x278>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d101      	bne.n	8002e84 <HAL_I2S_Init+0x1d4>
 8002e80:	4b2a      	ldr	r3, [pc, #168]	; (8002f2c <HAL_I2S_Init+0x27c>)
 8002e82:	e001      	b.n	8002e88 <HAL_I2S_Init+0x1d8>
 8002e84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e88:	2202      	movs	r2, #2
 8002e8a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a25      	ldr	r2, [pc, #148]	; (8002f28 <HAL_I2S_Init+0x278>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d101      	bne.n	8002e9a <HAL_I2S_Init+0x1ea>
 8002e96:	4b25      	ldr	r3, [pc, #148]	; (8002f2c <HAL_I2S_Init+0x27c>)
 8002e98:	e001      	b.n	8002e9e <HAL_I2S_Init+0x1ee>
 8002e9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e9e:	69db      	ldr	r3, [r3, #28]
 8002ea0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eaa:	d003      	beq.n	8002eb4 <HAL_I2S_Init+0x204>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d103      	bne.n	8002ebc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002eb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002eb8:	613b      	str	r3, [r7, #16]
 8002eba:	e001      	b.n	8002ec0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	897b      	ldrh	r3, [r7, #10]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002eec:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a0d      	ldr	r2, [pc, #52]	; (8002f28 <HAL_I2S_Init+0x278>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d101      	bne.n	8002efc <HAL_I2S_Init+0x24c>
 8002ef8:	4b0c      	ldr	r3, [pc, #48]	; (8002f2c <HAL_I2S_Init+0x27c>)
 8002efa:	e001      	b.n	8002f00 <HAL_I2S_Init+0x250>
 8002efc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f00:	897a      	ldrh	r2, [r7, #10]
 8002f02:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3720      	adds	r7, #32
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	08003235 	.word	0x08003235
 8002f20:	cccccccd 	.word	0xcccccccd
 8002f24:	08003349 	.word	0x08003349
 8002f28:	40003800 	.word	0x40003800
 8002f2c:	40003400 	.word	0x40003400

08002f30 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d002      	beq.n	8002f4a <HAL_I2S_Transmit_DMA+0x1a>
 8002f44:	88fb      	ldrh	r3, [r7, #6]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e08e      	b.n	800306c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d101      	bne.n	8002f5e <HAL_I2S_Transmit_DMA+0x2e>
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	e086      	b.n	800306c <HAL_I2S_Transmit_DMA+0x13c>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d005      	beq.n	8002f7e <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	e076      	b.n	800306c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2203      	movs	r2, #3
 8002f82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	68ba      	ldr	r2, [r7, #8]
 8002f90:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	69db      	ldr	r3, [r3, #28]
 8002f98:	f003 0307 	and.w	r3, r3, #7
 8002f9c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	2b03      	cmp	r3, #3
 8002fa2:	d002      	beq.n	8002faa <HAL_I2S_Transmit_DMA+0x7a>
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	2b05      	cmp	r3, #5
 8002fa8:	d10a      	bne.n	8002fc0 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8002faa:	88fb      	ldrh	r3, [r7, #6]
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8002fb4:	88fb      	ldrh	r3, [r7, #6]
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fbe:	e005      	b.n	8002fcc <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	88fa      	ldrh	r2, [r7, #6]
 8002fc4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	88fa      	ldrh	r2, [r7, #6]
 8002fca:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd0:	4a28      	ldr	r2, [pc, #160]	; (8003074 <HAL_I2S_Transmit_DMA+0x144>)
 8002fd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd8:	4a27      	ldr	r2, [pc, #156]	; (8003078 <HAL_I2S_Transmit_DMA+0x148>)
 8002fda:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe0:	4a26      	ldr	r2, [pc, #152]	; (800307c <HAL_I2S_Transmit_DMA+0x14c>)
 8002fe2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002fec:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002ff4:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ffa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002ffc:	f7fe fa62 	bl	80014c4 <HAL_DMA_Start_IT>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00f      	beq.n	8003026 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300a:	f043 0208 	orr.w	r2, r3, #8
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e022      	b.n	800306c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	69db      	ldr	r3, [r3, #28]
 800302c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003030:	2b00      	cmp	r3, #0
 8003032:	d107      	bne.n	8003044 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	69da      	ldr	r2, [r3, #28]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003042:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d107      	bne.n	8003062 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	685a      	ldr	r2, [r3, #4]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f042 0202 	orr.w	r2, r2, #2
 8003060:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3718      	adds	r7, #24
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	08003113 	.word	0x08003113
 8003078:	080030d1 	.word	0x080030d1
 800307c:	0800312f 	.word	0x0800312f

08003080 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030dc:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10e      	bne.n	8003104 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	685a      	ldr	r2, [r3, #4]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 0202 	bic.w	r2, r2, #2
 80030f4:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f7ff ffc5 	bl	8003094 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800310a:	bf00      	nop
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b084      	sub	sp, #16
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f7ff ffad 	bl	8003080 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003126:	bf00      	nop
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b084      	sub	sp, #16
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800313a:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 0203 	bic.w	r2, r2, #3
 800314a:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003164:	f043 0208 	orr.w	r2, r3, #8
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f7ff ffa5 	bl	80030bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003172:	bf00      	nop
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b082      	sub	sp, #8
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003186:	881a      	ldrh	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003192:	1c9a      	adds	r2, r3, #2
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800319c:	b29b      	uxth	r3, r3
 800319e:	3b01      	subs	r3, #1
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d10e      	bne.n	80031ce <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80031be:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f7ff ff63 	bl	8003094 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80031ce:	bf00      	nop
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b082      	sub	sp, #8
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68da      	ldr	r2, [r3, #12]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e8:	b292      	uxth	r2, r2
 80031ea:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f0:	1c9a      	adds	r2, r3, #2
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	3b01      	subs	r3, #1
 80031fe:	b29a      	uxth	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003208:	b29b      	uxth	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d10e      	bne.n	800322c <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800321c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f7ff ff3e 	bl	80030a8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800322c:	bf00      	nop
 800322e:	3708      	adds	r7, #8
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b04      	cmp	r3, #4
 800324e:	d13a      	bne.n	80032c6 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b01      	cmp	r3, #1
 8003258:	d109      	bne.n	800326e <I2S_IRQHandler+0x3a>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003264:	2b40      	cmp	r3, #64	; 0x40
 8003266:	d102      	bne.n	800326e <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f7ff ffb4 	bl	80031d6 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003274:	2b40      	cmp	r3, #64	; 0x40
 8003276:	d126      	bne.n	80032c6 <I2S_IRQHandler+0x92>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f003 0320 	and.w	r3, r3, #32
 8003282:	2b20      	cmp	r3, #32
 8003284:	d11f      	bne.n	80032c6 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	685a      	ldr	r2, [r3, #4]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003294:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003296:	2300      	movs	r3, #0
 8003298:	613b      	str	r3, [r7, #16]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	613b      	str	r3, [r7, #16]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	613b      	str	r3, [r7, #16]
 80032aa:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b8:	f043 0202 	orr.w	r2, r3, #2
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f7ff fefb 	bl	80030bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b03      	cmp	r3, #3
 80032d0:	d136      	bne.n	8003340 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d109      	bne.n	80032f0 <I2S_IRQHandler+0xbc>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e6:	2b80      	cmp	r3, #128	; 0x80
 80032e8:	d102      	bne.n	80032f0 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f7ff ff45 	bl	800317a <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	f003 0308 	and.w	r3, r3, #8
 80032f6:	2b08      	cmp	r3, #8
 80032f8:	d122      	bne.n	8003340 <I2S_IRQHandler+0x10c>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f003 0320 	and.w	r3, r3, #32
 8003304:	2b20      	cmp	r3, #32
 8003306:	d11b      	bne.n	8003340 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	685a      	ldr	r2, [r3, #4]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003316:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003318:	2300      	movs	r3, #0
 800331a:	60fb      	str	r3, [r7, #12]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	60fb      	str	r3, [r7, #12]
 8003324:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2201      	movs	r2, #1
 800332a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003332:	f043 0204 	orr.w	r2, r3, #4
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f7ff febe 	bl	80030bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003340:	bf00      	nop
 8003342:	3718      	adds	r7, #24
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b088      	sub	sp, #32
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a92      	ldr	r2, [pc, #584]	; (80035a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d101      	bne.n	8003366 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003362:	4b92      	ldr	r3, [pc, #584]	; (80035ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003364:	e001      	b.n	800336a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003366:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a8b      	ldr	r2, [pc, #556]	; (80035a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d101      	bne.n	8003384 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003380:	4b8a      	ldr	r3, [pc, #552]	; (80035ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003382:	e001      	b.n	8003388 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003384:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003394:	d004      	beq.n	80033a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	f040 8099 	bne.w	80034d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d107      	bne.n	80033ba <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d002      	beq.n	80033ba <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 f925 	bl	8003604 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d107      	bne.n	80033d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d002      	beq.n	80033d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 f9c8 	bl	8003764 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033da:	2b40      	cmp	r3, #64	; 0x40
 80033dc:	d13a      	bne.n	8003454 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	f003 0320 	and.w	r3, r3, #32
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d035      	beq.n	8003454 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a6e      	ldr	r2, [pc, #440]	; (80035a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d101      	bne.n	80033f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80033f2:	4b6e      	ldr	r3, [pc, #440]	; (80035ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80033f4:	e001      	b.n	80033fa <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80033f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4969      	ldr	r1, [pc, #420]	; (80035a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003402:	428b      	cmp	r3, r1
 8003404:	d101      	bne.n	800340a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003406:	4b69      	ldr	r3, [pc, #420]	; (80035ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003408:	e001      	b.n	800340e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800340a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800340e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003412:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	685a      	ldr	r2, [r3, #4]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003422:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003424:	2300      	movs	r3, #0
 8003426:	60fb      	str	r3, [r7, #12]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	60fb      	str	r3, [r7, #12]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	60fb      	str	r3, [r7, #12]
 8003438:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003446:	f043 0202 	orr.w	r2, r3, #2
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f7ff fe34 	bl	80030bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	f003 0308 	and.w	r3, r3, #8
 800345a:	2b08      	cmp	r3, #8
 800345c:	f040 80c3 	bne.w	80035e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	f003 0320 	and.w	r3, r3, #32
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 80bd 	beq.w	80035e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800347a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a49      	ldr	r2, [pc, #292]	; (80035a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d101      	bne.n	800348a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003486:	4b49      	ldr	r3, [pc, #292]	; (80035ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003488:	e001      	b.n	800348e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800348a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4944      	ldr	r1, [pc, #272]	; (80035a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003496:	428b      	cmp	r3, r1
 8003498:	d101      	bne.n	800349e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800349a:	4b44      	ldr	r3, [pc, #272]	; (80035ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800349c:	e001      	b.n	80034a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800349e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034a6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80034a8:	2300      	movs	r3, #0
 80034aa:	60bb      	str	r3, [r7, #8]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	60bb      	str	r3, [r7, #8]
 80034b4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c2:	f043 0204 	orr.w	r2, r3, #4
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7ff fdf6 	bl	80030bc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80034d0:	e089      	b.n	80035e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d107      	bne.n	80034ec <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d002      	beq.n	80034ec <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 f8be 	bl	8003668 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d107      	bne.n	8003506 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d002      	beq.n	8003506 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 f8fd 	bl	8003700 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800350c:	2b40      	cmp	r3, #64	; 0x40
 800350e:	d12f      	bne.n	8003570 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	f003 0320 	and.w	r3, r3, #32
 8003516:	2b00      	cmp	r3, #0
 8003518:	d02a      	beq.n	8003570 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003528:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a1e      	ldr	r2, [pc, #120]	; (80035a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d101      	bne.n	8003538 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003534:	4b1d      	ldr	r3, [pc, #116]	; (80035ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003536:	e001      	b.n	800353c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003538:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800353c:	685a      	ldr	r2, [r3, #4]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4919      	ldr	r1, [pc, #100]	; (80035a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003544:	428b      	cmp	r3, r1
 8003546:	d101      	bne.n	800354c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003548:	4b18      	ldr	r3, [pc, #96]	; (80035ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800354a:	e001      	b.n	8003550 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800354c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003550:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003554:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003562:	f043 0202 	orr.w	r2, r3, #2
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f7ff fda6 	bl	80030bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	f003 0308 	and.w	r3, r3, #8
 8003576:	2b08      	cmp	r3, #8
 8003578:	d136      	bne.n	80035e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	f003 0320 	and.w	r3, r3, #32
 8003580:	2b00      	cmp	r3, #0
 8003582:	d031      	beq.n	80035e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a07      	ldr	r2, [pc, #28]	; (80035a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d101      	bne.n	8003592 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800358e:	4b07      	ldr	r3, [pc, #28]	; (80035ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003590:	e001      	b.n	8003596 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003592:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4902      	ldr	r1, [pc, #8]	; (80035a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800359e:	428b      	cmp	r3, r1
 80035a0:	d106      	bne.n	80035b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80035a2:	4b02      	ldr	r3, [pc, #8]	; (80035ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035a4:	e006      	b.n	80035b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80035a6:	bf00      	nop
 80035a8:	40003800 	.word	0x40003800
 80035ac:	40003400 	.word	0x40003400
 80035b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035b8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035c8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d6:	f043 0204 	orr.w	r2, r3, #4
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7ff fd6c 	bl	80030bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80035e4:	e000      	b.n	80035e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035e6:	bf00      	nop
}
 80035e8:	bf00      	nop
 80035ea:	3720      	adds	r7, #32
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003610:	1c99      	adds	r1, r3, #2
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	6251      	str	r1, [r2, #36]	; 0x24
 8003616:	881a      	ldrh	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003622:	b29b      	uxth	r3, r3
 8003624:	3b01      	subs	r3, #1
 8003626:	b29a      	uxth	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003630:	b29b      	uxth	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d113      	bne.n	800365e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003644:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800364a:	b29b      	uxth	r3, r3
 800364c:	2b00      	cmp	r3, #0
 800364e:	d106      	bne.n	800365e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f7ff ffc9 	bl	80035f0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800365e:	bf00      	nop
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
	...

08003668 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003674:	1c99      	adds	r1, r3, #2
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	6251      	str	r1, [r2, #36]	; 0x24
 800367a:	8819      	ldrh	r1, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a1d      	ldr	r2, [pc, #116]	; (80036f8 <I2SEx_TxISR_I2SExt+0x90>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d101      	bne.n	800368a <I2SEx_TxISR_I2SExt+0x22>
 8003686:	4b1d      	ldr	r3, [pc, #116]	; (80036fc <I2SEx_TxISR_I2SExt+0x94>)
 8003688:	e001      	b.n	800368e <I2SEx_TxISR_I2SExt+0x26>
 800368a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800368e:	460a      	mov	r2, r1
 8003690:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003696:	b29b      	uxth	r3, r3
 8003698:	3b01      	subs	r3, #1
 800369a:	b29a      	uxth	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d121      	bne.n	80036ee <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a12      	ldr	r2, [pc, #72]	; (80036f8 <I2SEx_TxISR_I2SExt+0x90>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d101      	bne.n	80036b8 <I2SEx_TxISR_I2SExt+0x50>
 80036b4:	4b11      	ldr	r3, [pc, #68]	; (80036fc <I2SEx_TxISR_I2SExt+0x94>)
 80036b6:	e001      	b.n	80036bc <I2SEx_TxISR_I2SExt+0x54>
 80036b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036bc:	685a      	ldr	r2, [r3, #4]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	490d      	ldr	r1, [pc, #52]	; (80036f8 <I2SEx_TxISR_I2SExt+0x90>)
 80036c4:	428b      	cmp	r3, r1
 80036c6:	d101      	bne.n	80036cc <I2SEx_TxISR_I2SExt+0x64>
 80036c8:	4b0c      	ldr	r3, [pc, #48]	; (80036fc <I2SEx_TxISR_I2SExt+0x94>)
 80036ca:	e001      	b.n	80036d0 <I2SEx_TxISR_I2SExt+0x68>
 80036cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036d4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036da:	b29b      	uxth	r3, r3
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d106      	bne.n	80036ee <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f7ff ff81 	bl	80035f0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036ee:	bf00      	nop
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	40003800 	.word	0x40003800
 80036fc:	40003400 	.word	0x40003400

08003700 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68d8      	ldr	r0, [r3, #12]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003712:	1c99      	adds	r1, r3, #2
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003718:	b282      	uxth	r2, r0
 800371a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003720:	b29b      	uxth	r3, r3
 8003722:	3b01      	subs	r3, #1
 8003724:	b29a      	uxth	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800372e:	b29b      	uxth	r3, r3
 8003730:	2b00      	cmp	r3, #0
 8003732:	d113      	bne.n	800375c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	685a      	ldr	r2, [r3, #4]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003742:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003748:	b29b      	uxth	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d106      	bne.n	800375c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7ff ff4a 	bl	80035f0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800375c:	bf00      	nop
 800375e:	3708      	adds	r7, #8
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a20      	ldr	r2, [pc, #128]	; (80037f4 <I2SEx_RxISR_I2SExt+0x90>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d101      	bne.n	800377a <I2SEx_RxISR_I2SExt+0x16>
 8003776:	4b20      	ldr	r3, [pc, #128]	; (80037f8 <I2SEx_RxISR_I2SExt+0x94>)
 8003778:	e001      	b.n	800377e <I2SEx_RxISR_I2SExt+0x1a>
 800377a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800377e:	68d8      	ldr	r0, [r3, #12]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003784:	1c99      	adds	r1, r3, #2
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	62d1      	str	r1, [r2, #44]	; 0x2c
 800378a:	b282      	uxth	r2, r0
 800378c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003792:	b29b      	uxth	r3, r3
 8003794:	3b01      	subs	r3, #1
 8003796:	b29a      	uxth	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d121      	bne.n	80037ea <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a12      	ldr	r2, [pc, #72]	; (80037f4 <I2SEx_RxISR_I2SExt+0x90>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d101      	bne.n	80037b4 <I2SEx_RxISR_I2SExt+0x50>
 80037b0:	4b11      	ldr	r3, [pc, #68]	; (80037f8 <I2SEx_RxISR_I2SExt+0x94>)
 80037b2:	e001      	b.n	80037b8 <I2SEx_RxISR_I2SExt+0x54>
 80037b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037b8:	685a      	ldr	r2, [r3, #4]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	490d      	ldr	r1, [pc, #52]	; (80037f4 <I2SEx_RxISR_I2SExt+0x90>)
 80037c0:	428b      	cmp	r3, r1
 80037c2:	d101      	bne.n	80037c8 <I2SEx_RxISR_I2SExt+0x64>
 80037c4:	4b0c      	ldr	r3, [pc, #48]	; (80037f8 <I2SEx_RxISR_I2SExt+0x94>)
 80037c6:	e001      	b.n	80037cc <I2SEx_RxISR_I2SExt+0x68>
 80037c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037cc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037d0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d106      	bne.n	80037ea <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f7ff ff03 	bl	80035f0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037ea:	bf00      	nop
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	40003800 	.word	0x40003800
 80037f8:	40003400 	.word	0x40003400

080037fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e267      	b.n	8003cde <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b00      	cmp	r3, #0
 8003818:	d075      	beq.n	8003906 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800381a:	4b88      	ldr	r3, [pc, #544]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f003 030c 	and.w	r3, r3, #12
 8003822:	2b04      	cmp	r3, #4
 8003824:	d00c      	beq.n	8003840 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003826:	4b85      	ldr	r3, [pc, #532]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800382e:	2b08      	cmp	r3, #8
 8003830:	d112      	bne.n	8003858 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003832:	4b82      	ldr	r3, [pc, #520]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800383a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800383e:	d10b      	bne.n	8003858 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003840:	4b7e      	ldr	r3, [pc, #504]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d05b      	beq.n	8003904 <HAL_RCC_OscConfig+0x108>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d157      	bne.n	8003904 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e242      	b.n	8003cde <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003860:	d106      	bne.n	8003870 <HAL_RCC_OscConfig+0x74>
 8003862:	4b76      	ldr	r3, [pc, #472]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a75      	ldr	r2, [pc, #468]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 8003868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800386c:	6013      	str	r3, [r2, #0]
 800386e:	e01d      	b.n	80038ac <HAL_RCC_OscConfig+0xb0>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003878:	d10c      	bne.n	8003894 <HAL_RCC_OscConfig+0x98>
 800387a:	4b70      	ldr	r3, [pc, #448]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a6f      	ldr	r2, [pc, #444]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 8003880:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003884:	6013      	str	r3, [r2, #0]
 8003886:	4b6d      	ldr	r3, [pc, #436]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a6c      	ldr	r2, [pc, #432]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 800388c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003890:	6013      	str	r3, [r2, #0]
 8003892:	e00b      	b.n	80038ac <HAL_RCC_OscConfig+0xb0>
 8003894:	4b69      	ldr	r3, [pc, #420]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a68      	ldr	r2, [pc, #416]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 800389a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800389e:	6013      	str	r3, [r2, #0]
 80038a0:	4b66      	ldr	r3, [pc, #408]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a65      	ldr	r2, [pc, #404]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 80038a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d013      	beq.n	80038dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b4:	f7fd fc3a 	bl	800112c <HAL_GetTick>
 80038b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ba:	e008      	b.n	80038ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038bc:	f7fd fc36 	bl	800112c <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b64      	cmp	r3, #100	; 0x64
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e207      	b.n	8003cde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ce:	4b5b      	ldr	r3, [pc, #364]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d0f0      	beq.n	80038bc <HAL_RCC_OscConfig+0xc0>
 80038da:	e014      	b.n	8003906 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038dc:	f7fd fc26 	bl	800112c <HAL_GetTick>
 80038e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038e2:	e008      	b.n	80038f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038e4:	f7fd fc22 	bl	800112c <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b64      	cmp	r3, #100	; 0x64
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e1f3      	b.n	8003cde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038f6:	4b51      	ldr	r3, [pc, #324]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1f0      	bne.n	80038e4 <HAL_RCC_OscConfig+0xe8>
 8003902:	e000      	b.n	8003906 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003904:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d063      	beq.n	80039da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003912:	4b4a      	ldr	r3, [pc, #296]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f003 030c 	and.w	r3, r3, #12
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00b      	beq.n	8003936 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800391e:	4b47      	ldr	r3, [pc, #284]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003926:	2b08      	cmp	r3, #8
 8003928:	d11c      	bne.n	8003964 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800392a:	4b44      	ldr	r3, [pc, #272]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d116      	bne.n	8003964 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003936:	4b41      	ldr	r3, [pc, #260]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d005      	beq.n	800394e <HAL_RCC_OscConfig+0x152>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d001      	beq.n	800394e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e1c7      	b.n	8003cde <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800394e:	4b3b      	ldr	r3, [pc, #236]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	00db      	lsls	r3, r3, #3
 800395c:	4937      	ldr	r1, [pc, #220]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 800395e:	4313      	orrs	r3, r2
 8003960:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003962:	e03a      	b.n	80039da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d020      	beq.n	80039ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800396c:	4b34      	ldr	r3, [pc, #208]	; (8003a40 <HAL_RCC_OscConfig+0x244>)
 800396e:	2201      	movs	r2, #1
 8003970:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003972:	f7fd fbdb 	bl	800112c <HAL_GetTick>
 8003976:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003978:	e008      	b.n	800398c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800397a:	f7fd fbd7 	bl	800112c <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	2b02      	cmp	r3, #2
 8003986:	d901      	bls.n	800398c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e1a8      	b.n	8003cde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800398c:	4b2b      	ldr	r3, [pc, #172]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0302 	and.w	r3, r3, #2
 8003994:	2b00      	cmp	r3, #0
 8003996:	d0f0      	beq.n	800397a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003998:	4b28      	ldr	r3, [pc, #160]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	00db      	lsls	r3, r3, #3
 80039a6:	4925      	ldr	r1, [pc, #148]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	600b      	str	r3, [r1, #0]
 80039ac:	e015      	b.n	80039da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039ae:	4b24      	ldr	r3, [pc, #144]	; (8003a40 <HAL_RCC_OscConfig+0x244>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b4:	f7fd fbba 	bl	800112c <HAL_GetTick>
 80039b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ba:	e008      	b.n	80039ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039bc:	f7fd fbb6 	bl	800112c <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e187      	b.n	8003cde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ce:	4b1b      	ldr	r3, [pc, #108]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1f0      	bne.n	80039bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0308 	and.w	r3, r3, #8
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d036      	beq.n	8003a54 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d016      	beq.n	8003a1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039ee:	4b15      	ldr	r3, [pc, #84]	; (8003a44 <HAL_RCC_OscConfig+0x248>)
 80039f0:	2201      	movs	r2, #1
 80039f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f4:	f7fd fb9a 	bl	800112c <HAL_GetTick>
 80039f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039fa:	e008      	b.n	8003a0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039fc:	f7fd fb96 	bl	800112c <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e167      	b.n	8003cde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a0e:	4b0b      	ldr	r3, [pc, #44]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 8003a10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d0f0      	beq.n	80039fc <HAL_RCC_OscConfig+0x200>
 8003a1a:	e01b      	b.n	8003a54 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a1c:	4b09      	ldr	r3, [pc, #36]	; (8003a44 <HAL_RCC_OscConfig+0x248>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a22:	f7fd fb83 	bl	800112c <HAL_GetTick>
 8003a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a28:	e00e      	b.n	8003a48 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a2a:	f7fd fb7f 	bl	800112c <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d907      	bls.n	8003a48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e150      	b.n	8003cde <HAL_RCC_OscConfig+0x4e2>
 8003a3c:	40023800 	.word	0x40023800
 8003a40:	42470000 	.word	0x42470000
 8003a44:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a48:	4b88      	ldr	r3, [pc, #544]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003a4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a4c:	f003 0302 	and.w	r3, r3, #2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1ea      	bne.n	8003a2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0304 	and.w	r3, r3, #4
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f000 8097 	beq.w	8003b90 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a62:	2300      	movs	r3, #0
 8003a64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a66:	4b81      	ldr	r3, [pc, #516]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10f      	bne.n	8003a92 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a72:	2300      	movs	r3, #0
 8003a74:	60bb      	str	r3, [r7, #8]
 8003a76:	4b7d      	ldr	r3, [pc, #500]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7a:	4a7c      	ldr	r2, [pc, #496]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a80:	6413      	str	r3, [r2, #64]	; 0x40
 8003a82:	4b7a      	ldr	r3, [pc, #488]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a8a:	60bb      	str	r3, [r7, #8]
 8003a8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a92:	4b77      	ldr	r3, [pc, #476]	; (8003c70 <HAL_RCC_OscConfig+0x474>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d118      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a9e:	4b74      	ldr	r3, [pc, #464]	; (8003c70 <HAL_RCC_OscConfig+0x474>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a73      	ldr	r2, [pc, #460]	; (8003c70 <HAL_RCC_OscConfig+0x474>)
 8003aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aaa:	f7fd fb3f 	bl	800112c <HAL_GetTick>
 8003aae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ab0:	e008      	b.n	8003ac4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ab2:	f7fd fb3b 	bl	800112c <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d901      	bls.n	8003ac4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e10c      	b.n	8003cde <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac4:	4b6a      	ldr	r3, [pc, #424]	; (8003c70 <HAL_RCC_OscConfig+0x474>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d0f0      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d106      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x2ea>
 8003ad8:	4b64      	ldr	r3, [pc, #400]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003adc:	4a63      	ldr	r2, [pc, #396]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003ade:	f043 0301 	orr.w	r3, r3, #1
 8003ae2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ae4:	e01c      	b.n	8003b20 <HAL_RCC_OscConfig+0x324>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	2b05      	cmp	r3, #5
 8003aec:	d10c      	bne.n	8003b08 <HAL_RCC_OscConfig+0x30c>
 8003aee:	4b5f      	ldr	r3, [pc, #380]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af2:	4a5e      	ldr	r2, [pc, #376]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003af4:	f043 0304 	orr.w	r3, r3, #4
 8003af8:	6713      	str	r3, [r2, #112]	; 0x70
 8003afa:	4b5c      	ldr	r3, [pc, #368]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003afe:	4a5b      	ldr	r2, [pc, #364]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003b00:	f043 0301 	orr.w	r3, r3, #1
 8003b04:	6713      	str	r3, [r2, #112]	; 0x70
 8003b06:	e00b      	b.n	8003b20 <HAL_RCC_OscConfig+0x324>
 8003b08:	4b58      	ldr	r3, [pc, #352]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0c:	4a57      	ldr	r2, [pc, #348]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003b0e:	f023 0301 	bic.w	r3, r3, #1
 8003b12:	6713      	str	r3, [r2, #112]	; 0x70
 8003b14:	4b55      	ldr	r3, [pc, #340]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b18:	4a54      	ldr	r2, [pc, #336]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003b1a:	f023 0304 	bic.w	r3, r3, #4
 8003b1e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d015      	beq.n	8003b54 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b28:	f7fd fb00 	bl	800112c <HAL_GetTick>
 8003b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b2e:	e00a      	b.n	8003b46 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b30:	f7fd fafc 	bl	800112c <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e0cb      	b.n	8003cde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b46:	4b49      	ldr	r3, [pc, #292]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d0ee      	beq.n	8003b30 <HAL_RCC_OscConfig+0x334>
 8003b52:	e014      	b.n	8003b7e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b54:	f7fd faea 	bl	800112c <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b5a:	e00a      	b.n	8003b72 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b5c:	f7fd fae6 	bl	800112c <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e0b5      	b.n	8003cde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b72:	4b3e      	ldr	r3, [pc, #248]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1ee      	bne.n	8003b5c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b7e:	7dfb      	ldrb	r3, [r7, #23]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d105      	bne.n	8003b90 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b84:	4b39      	ldr	r3, [pc, #228]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b88:	4a38      	ldr	r2, [pc, #224]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003b8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b8e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f000 80a1 	beq.w	8003cdc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b9a:	4b34      	ldr	r3, [pc, #208]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f003 030c 	and.w	r3, r3, #12
 8003ba2:	2b08      	cmp	r3, #8
 8003ba4:	d05c      	beq.n	8003c60 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d141      	bne.n	8003c32 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bae:	4b31      	ldr	r3, [pc, #196]	; (8003c74 <HAL_RCC_OscConfig+0x478>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb4:	f7fd faba 	bl	800112c <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bbc:	f7fd fab6 	bl	800112c <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e087      	b.n	8003cde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bce:	4b27      	ldr	r3, [pc, #156]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1f0      	bne.n	8003bbc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	69da      	ldr	r2, [r3, #28]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	431a      	orrs	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be8:	019b      	lsls	r3, r3, #6
 8003bea:	431a      	orrs	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf0:	085b      	lsrs	r3, r3, #1
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	041b      	lsls	r3, r3, #16
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfc:	061b      	lsls	r3, r3, #24
 8003bfe:	491b      	ldr	r1, [pc, #108]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c04:	4b1b      	ldr	r3, [pc, #108]	; (8003c74 <HAL_RCC_OscConfig+0x478>)
 8003c06:	2201      	movs	r2, #1
 8003c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c0a:	f7fd fa8f 	bl	800112c <HAL_GetTick>
 8003c0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c10:	e008      	b.n	8003c24 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c12:	f7fd fa8b 	bl	800112c <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d901      	bls.n	8003c24 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e05c      	b.n	8003cde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c24:	4b11      	ldr	r3, [pc, #68]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d0f0      	beq.n	8003c12 <HAL_RCC_OscConfig+0x416>
 8003c30:	e054      	b.n	8003cdc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c32:	4b10      	ldr	r3, [pc, #64]	; (8003c74 <HAL_RCC_OscConfig+0x478>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c38:	f7fd fa78 	bl	800112c <HAL_GetTick>
 8003c3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c3e:	e008      	b.n	8003c52 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c40:	f7fd fa74 	bl	800112c <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e045      	b.n	8003cde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c52:	4b06      	ldr	r3, [pc, #24]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1f0      	bne.n	8003c40 <HAL_RCC_OscConfig+0x444>
 8003c5e:	e03d      	b.n	8003cdc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d107      	bne.n	8003c78 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e038      	b.n	8003cde <HAL_RCC_OscConfig+0x4e2>
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	40007000 	.word	0x40007000
 8003c74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c78:	4b1b      	ldr	r3, [pc, #108]	; (8003ce8 <HAL_RCC_OscConfig+0x4ec>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d028      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d121      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d11a      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ca8:	4013      	ands	r3, r2
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d111      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbe:	085b      	lsrs	r3, r3, #1
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d107      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d001      	beq.n	8003cdc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e000      	b.n	8003cde <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3718      	adds	r7, #24
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	40023800 	.word	0x40023800

08003cec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d101      	bne.n	8003d00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e0cc      	b.n	8003e9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d00:	4b68      	ldr	r3, [pc, #416]	; (8003ea4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0307 	and.w	r3, r3, #7
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d90c      	bls.n	8003d28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d0e:	4b65      	ldr	r3, [pc, #404]	; (8003ea4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d10:	683a      	ldr	r2, [r7, #0]
 8003d12:	b2d2      	uxtb	r2, r2
 8003d14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d16:	4b63      	ldr	r3, [pc, #396]	; (8003ea4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0307 	and.w	r3, r3, #7
 8003d1e:	683a      	ldr	r2, [r7, #0]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d001      	beq.n	8003d28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e0b8      	b.n	8003e9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d020      	beq.n	8003d76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0304 	and.w	r3, r3, #4
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d005      	beq.n	8003d4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d40:	4b59      	ldr	r3, [pc, #356]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	4a58      	ldr	r2, [pc, #352]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0308 	and.w	r3, r3, #8
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d005      	beq.n	8003d64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d58:	4b53      	ldr	r3, [pc, #332]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	4a52      	ldr	r2, [pc, #328]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d64:	4b50      	ldr	r3, [pc, #320]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	494d      	ldr	r1, [pc, #308]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d044      	beq.n	8003e0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d107      	bne.n	8003d9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d8a:	4b47      	ldr	r3, [pc, #284]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d119      	bne.n	8003dca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e07f      	b.n	8003e9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d003      	beq.n	8003daa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003da6:	2b03      	cmp	r3, #3
 8003da8:	d107      	bne.n	8003dba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003daa:	4b3f      	ldr	r3, [pc, #252]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d109      	bne.n	8003dca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e06f      	b.n	8003e9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dba:	4b3b      	ldr	r3, [pc, #236]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e067      	b.n	8003e9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dca:	4b37      	ldr	r3, [pc, #220]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f023 0203 	bic.w	r2, r3, #3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	4934      	ldr	r1, [pc, #208]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ddc:	f7fd f9a6 	bl	800112c <HAL_GetTick>
 8003de0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003de2:	e00a      	b.n	8003dfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003de4:	f7fd f9a2 	bl	800112c <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e04f      	b.n	8003e9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dfa:	4b2b      	ldr	r3, [pc, #172]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f003 020c 	and.w	r2, r3, #12
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d1eb      	bne.n	8003de4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e0c:	4b25      	ldr	r3, [pc, #148]	; (8003ea4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0307 	and.w	r3, r3, #7
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d20c      	bcs.n	8003e34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e1a:	4b22      	ldr	r3, [pc, #136]	; (8003ea4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e1c:	683a      	ldr	r2, [r7, #0]
 8003e1e:	b2d2      	uxtb	r2, r2
 8003e20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e22:	4b20      	ldr	r3, [pc, #128]	; (8003ea4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0307 	and.w	r3, r3, #7
 8003e2a:	683a      	ldr	r2, [r7, #0]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d001      	beq.n	8003e34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e032      	b.n	8003e9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0304 	and.w	r3, r3, #4
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d008      	beq.n	8003e52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e40:	4b19      	ldr	r3, [pc, #100]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	4916      	ldr	r1, [pc, #88]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0308 	and.w	r3, r3, #8
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d009      	beq.n	8003e72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e5e:	4b12      	ldr	r3, [pc, #72]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	490e      	ldr	r1, [pc, #56]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e72:	f000 f821 	bl	8003eb8 <HAL_RCC_GetSysClockFreq>
 8003e76:	4602      	mov	r2, r0
 8003e78:	4b0b      	ldr	r3, [pc, #44]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	091b      	lsrs	r3, r3, #4
 8003e7e:	f003 030f 	and.w	r3, r3, #15
 8003e82:	490a      	ldr	r1, [pc, #40]	; (8003eac <HAL_RCC_ClockConfig+0x1c0>)
 8003e84:	5ccb      	ldrb	r3, [r1, r3]
 8003e86:	fa22 f303 	lsr.w	r3, r2, r3
 8003e8a:	4a09      	ldr	r2, [pc, #36]	; (8003eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e8e:	4b09      	ldr	r3, [pc, #36]	; (8003eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7fd f906 	bl	80010a4 <HAL_InitTick>

  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3710      	adds	r7, #16
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	40023c00 	.word	0x40023c00
 8003ea8:	40023800 	.word	0x40023800
 8003eac:	08005184 	.word	0x08005184
 8003eb0:	20000000 	.word	0x20000000
 8003eb4:	20000004 	.word	0x20000004

08003eb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003eb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ebc:	b094      	sub	sp, #80	; 0x50
 8003ebe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	647b      	str	r3, [r7, #68]	; 0x44
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ec8:	2300      	movs	r3, #0
 8003eca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ed0:	4b79      	ldr	r3, [pc, #484]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f003 030c 	and.w	r3, r3, #12
 8003ed8:	2b08      	cmp	r3, #8
 8003eda:	d00d      	beq.n	8003ef8 <HAL_RCC_GetSysClockFreq+0x40>
 8003edc:	2b08      	cmp	r3, #8
 8003ede:	f200 80e1 	bhi.w	80040a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d002      	beq.n	8003eec <HAL_RCC_GetSysClockFreq+0x34>
 8003ee6:	2b04      	cmp	r3, #4
 8003ee8:	d003      	beq.n	8003ef2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003eea:	e0db      	b.n	80040a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003eec:	4b73      	ldr	r3, [pc, #460]	; (80040bc <HAL_RCC_GetSysClockFreq+0x204>)
 8003eee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003ef0:	e0db      	b.n	80040aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ef2:	4b73      	ldr	r3, [pc, #460]	; (80040c0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003ef4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ef6:	e0d8      	b.n	80040aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ef8:	4b6f      	ldr	r3, [pc, #444]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f00:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f02:	4b6d      	ldr	r3, [pc, #436]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d063      	beq.n	8003fd6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f0e:	4b6a      	ldr	r3, [pc, #424]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	099b      	lsrs	r3, r3, #6
 8003f14:	2200      	movs	r2, #0
 8003f16:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f18:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f20:	633b      	str	r3, [r7, #48]	; 0x30
 8003f22:	2300      	movs	r3, #0
 8003f24:	637b      	str	r3, [r7, #52]	; 0x34
 8003f26:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003f2a:	4622      	mov	r2, r4
 8003f2c:	462b      	mov	r3, r5
 8003f2e:	f04f 0000 	mov.w	r0, #0
 8003f32:	f04f 0100 	mov.w	r1, #0
 8003f36:	0159      	lsls	r1, r3, #5
 8003f38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f3c:	0150      	lsls	r0, r2, #5
 8003f3e:	4602      	mov	r2, r0
 8003f40:	460b      	mov	r3, r1
 8003f42:	4621      	mov	r1, r4
 8003f44:	1a51      	subs	r1, r2, r1
 8003f46:	6139      	str	r1, [r7, #16]
 8003f48:	4629      	mov	r1, r5
 8003f4a:	eb63 0301 	sbc.w	r3, r3, r1
 8003f4e:	617b      	str	r3, [r7, #20]
 8003f50:	f04f 0200 	mov.w	r2, #0
 8003f54:	f04f 0300 	mov.w	r3, #0
 8003f58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f5c:	4659      	mov	r1, fp
 8003f5e:	018b      	lsls	r3, r1, #6
 8003f60:	4651      	mov	r1, sl
 8003f62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f66:	4651      	mov	r1, sl
 8003f68:	018a      	lsls	r2, r1, #6
 8003f6a:	4651      	mov	r1, sl
 8003f6c:	ebb2 0801 	subs.w	r8, r2, r1
 8003f70:	4659      	mov	r1, fp
 8003f72:	eb63 0901 	sbc.w	r9, r3, r1
 8003f76:	f04f 0200 	mov.w	r2, #0
 8003f7a:	f04f 0300 	mov.w	r3, #0
 8003f7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f8a:	4690      	mov	r8, r2
 8003f8c:	4699      	mov	r9, r3
 8003f8e:	4623      	mov	r3, r4
 8003f90:	eb18 0303 	adds.w	r3, r8, r3
 8003f94:	60bb      	str	r3, [r7, #8]
 8003f96:	462b      	mov	r3, r5
 8003f98:	eb49 0303 	adc.w	r3, r9, r3
 8003f9c:	60fb      	str	r3, [r7, #12]
 8003f9e:	f04f 0200 	mov.w	r2, #0
 8003fa2:	f04f 0300 	mov.w	r3, #0
 8003fa6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003faa:	4629      	mov	r1, r5
 8003fac:	024b      	lsls	r3, r1, #9
 8003fae:	4621      	mov	r1, r4
 8003fb0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003fb4:	4621      	mov	r1, r4
 8003fb6:	024a      	lsls	r2, r1, #9
 8003fb8:	4610      	mov	r0, r2
 8003fba:	4619      	mov	r1, r3
 8003fbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fc2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fc4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003fc8:	f7fc f906 	bl	80001d8 <__aeabi_uldivmod>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	460b      	mov	r3, r1
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fd4:	e058      	b.n	8004088 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fd6:	4b38      	ldr	r3, [pc, #224]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	099b      	lsrs	r3, r3, #6
 8003fdc:	2200      	movs	r2, #0
 8003fde:	4618      	mov	r0, r3
 8003fe0:	4611      	mov	r1, r2
 8003fe2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003fe6:	623b      	str	r3, [r7, #32]
 8003fe8:	2300      	movs	r3, #0
 8003fea:	627b      	str	r3, [r7, #36]	; 0x24
 8003fec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ff0:	4642      	mov	r2, r8
 8003ff2:	464b      	mov	r3, r9
 8003ff4:	f04f 0000 	mov.w	r0, #0
 8003ff8:	f04f 0100 	mov.w	r1, #0
 8003ffc:	0159      	lsls	r1, r3, #5
 8003ffe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004002:	0150      	lsls	r0, r2, #5
 8004004:	4602      	mov	r2, r0
 8004006:	460b      	mov	r3, r1
 8004008:	4641      	mov	r1, r8
 800400a:	ebb2 0a01 	subs.w	sl, r2, r1
 800400e:	4649      	mov	r1, r9
 8004010:	eb63 0b01 	sbc.w	fp, r3, r1
 8004014:	f04f 0200 	mov.w	r2, #0
 8004018:	f04f 0300 	mov.w	r3, #0
 800401c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004020:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004024:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004028:	ebb2 040a 	subs.w	r4, r2, sl
 800402c:	eb63 050b 	sbc.w	r5, r3, fp
 8004030:	f04f 0200 	mov.w	r2, #0
 8004034:	f04f 0300 	mov.w	r3, #0
 8004038:	00eb      	lsls	r3, r5, #3
 800403a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800403e:	00e2      	lsls	r2, r4, #3
 8004040:	4614      	mov	r4, r2
 8004042:	461d      	mov	r5, r3
 8004044:	4643      	mov	r3, r8
 8004046:	18e3      	adds	r3, r4, r3
 8004048:	603b      	str	r3, [r7, #0]
 800404a:	464b      	mov	r3, r9
 800404c:	eb45 0303 	adc.w	r3, r5, r3
 8004050:	607b      	str	r3, [r7, #4]
 8004052:	f04f 0200 	mov.w	r2, #0
 8004056:	f04f 0300 	mov.w	r3, #0
 800405a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800405e:	4629      	mov	r1, r5
 8004060:	028b      	lsls	r3, r1, #10
 8004062:	4621      	mov	r1, r4
 8004064:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004068:	4621      	mov	r1, r4
 800406a:	028a      	lsls	r2, r1, #10
 800406c:	4610      	mov	r0, r2
 800406e:	4619      	mov	r1, r3
 8004070:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004072:	2200      	movs	r2, #0
 8004074:	61bb      	str	r3, [r7, #24]
 8004076:	61fa      	str	r2, [r7, #28]
 8004078:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800407c:	f7fc f8ac 	bl	80001d8 <__aeabi_uldivmod>
 8004080:	4602      	mov	r2, r0
 8004082:	460b      	mov	r3, r1
 8004084:	4613      	mov	r3, r2
 8004086:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004088:	4b0b      	ldr	r3, [pc, #44]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	0c1b      	lsrs	r3, r3, #16
 800408e:	f003 0303 	and.w	r3, r3, #3
 8004092:	3301      	adds	r3, #1
 8004094:	005b      	lsls	r3, r3, #1
 8004096:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004098:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800409a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800409c:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040a2:	e002      	b.n	80040aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040a4:	4b05      	ldr	r3, [pc, #20]	; (80040bc <HAL_RCC_GetSysClockFreq+0x204>)
 80040a6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3750      	adds	r7, #80	; 0x50
 80040b0:	46bd      	mov	sp, r7
 80040b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040b6:	bf00      	nop
 80040b8:	40023800 	.word	0x40023800
 80040bc:	00f42400 	.word	0x00f42400
 80040c0:	007a1200 	.word	0x007a1200

080040c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040c4:	b480      	push	{r7}
 80040c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040c8:	4b03      	ldr	r3, [pc, #12]	; (80040d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80040ca:	681b      	ldr	r3, [r3, #0]
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	20000000 	.word	0x20000000

080040dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80040e0:	f7ff fff0 	bl	80040c4 <HAL_RCC_GetHCLKFreq>
 80040e4:	4602      	mov	r2, r0
 80040e6:	4b05      	ldr	r3, [pc, #20]	; (80040fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	0a9b      	lsrs	r3, r3, #10
 80040ec:	f003 0307 	and.w	r3, r3, #7
 80040f0:	4903      	ldr	r1, [pc, #12]	; (8004100 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040f2:	5ccb      	ldrb	r3, [r1, r3]
 80040f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	40023800 	.word	0x40023800
 8004100:	08005194 	.word	0x08005194

08004104 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b086      	sub	sp, #24
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800410c:	2300      	movs	r3, #0
 800410e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004110:	2300      	movs	r3, #0
 8004112:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0301 	and.w	r3, r3, #1
 800411c:	2b00      	cmp	r3, #0
 800411e:	d105      	bne.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004128:	2b00      	cmp	r3, #0
 800412a:	d038      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800412c:	4b68      	ldr	r3, [pc, #416]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800412e:	2200      	movs	r2, #0
 8004130:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004132:	f7fc fffb 	bl	800112c <HAL_GetTick>
 8004136:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004138:	e008      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800413a:	f7fc fff7 	bl	800112c <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	2b02      	cmp	r3, #2
 8004146:	d901      	bls.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e0bd      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800414c:	4b61      	ldr	r3, [pc, #388]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1f0      	bne.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685a      	ldr	r2, [r3, #4]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	019b      	lsls	r3, r3, #6
 8004162:	431a      	orrs	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	071b      	lsls	r3, r3, #28
 800416a:	495a      	ldr	r1, [pc, #360]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800416c:	4313      	orrs	r3, r2
 800416e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004172:	4b57      	ldr	r3, [pc, #348]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004174:	2201      	movs	r2, #1
 8004176:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004178:	f7fc ffd8 	bl	800112c <HAL_GetTick>
 800417c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800417e:	e008      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004180:	f7fc ffd4 	bl	800112c <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d901      	bls.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e09a      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004192:	4b50      	ldr	r3, [pc, #320]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d0f0      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f000 8083 	beq.w	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80041ac:	2300      	movs	r3, #0
 80041ae:	60fb      	str	r3, [r7, #12]
 80041b0:	4b48      	ldr	r3, [pc, #288]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b4:	4a47      	ldr	r2, [pc, #284]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ba:	6413      	str	r3, [r2, #64]	; 0x40
 80041bc:	4b45      	ldr	r3, [pc, #276]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c4:	60fb      	str	r3, [r7, #12]
 80041c6:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80041c8:	4b43      	ldr	r3, [pc, #268]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a42      	ldr	r2, [pc, #264]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041d2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80041d4:	f7fc ffaa 	bl	800112c <HAL_GetTick>
 80041d8:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80041da:	e008      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80041dc:	f7fc ffa6 	bl	800112c <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d901      	bls.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e06c      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80041ee:	4b3a      	ldr	r3, [pc, #232]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d0f0      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041fa:	4b36      	ldr	r3, [pc, #216]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004202:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d02f      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x166>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	429a      	cmp	r2, r3
 8004216:	d028      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004218:	4b2e      	ldr	r3, [pc, #184]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800421a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004220:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004222:	4b2e      	ldr	r3, [pc, #184]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004224:	2201      	movs	r2, #1
 8004226:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004228:	4b2c      	ldr	r3, [pc, #176]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800422a:	2200      	movs	r2, #0
 800422c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800422e:	4a29      	ldr	r2, [pc, #164]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004234:	4b27      	ldr	r3, [pc, #156]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004238:	f003 0301 	and.w	r3, r3, #1
 800423c:	2b01      	cmp	r3, #1
 800423e:	d114      	bne.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004240:	f7fc ff74 	bl	800112c <HAL_GetTick>
 8004244:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004246:	e00a      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004248:	f7fc ff70 	bl	800112c <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	f241 3288 	movw	r2, #5000	; 0x1388
 8004256:	4293      	cmp	r3, r2
 8004258:	d901      	bls.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e034      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800425e:	4b1d      	ldr	r3, [pc, #116]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b00      	cmp	r3, #0
 8004268:	d0ee      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004272:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004276:	d10d      	bne.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004278:	4b16      	ldr	r3, [pc, #88]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004288:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800428c:	4911      	ldr	r1, [pc, #68]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800428e:	4313      	orrs	r3, r2
 8004290:	608b      	str	r3, [r1, #8]
 8004292:	e005      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004294:	4b0f      	ldr	r3, [pc, #60]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	4a0e      	ldr	r2, [pc, #56]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800429a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800429e:	6093      	str	r3, [r2, #8]
 80042a0:	4b0c      	ldr	r3, [pc, #48]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042ac:	4909      	ldr	r1, [pc, #36]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0308 	and.w	r3, r3, #8
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d003      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	7d1a      	ldrb	r2, [r3, #20]
 80042c2:	4b07      	ldr	r3, [pc, #28]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80042c4:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3718      	adds	r7, #24
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	42470068 	.word	0x42470068
 80042d4:	40023800 	.word	0x40023800
 80042d8:	40007000 	.word	0x40007000
 80042dc:	42470e40 	.word	0x42470e40
 80042e0:	424711e0 	.word	0x424711e0

080042e4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b087      	sub	sp, #28
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80042ec:	2300      	movs	r3, #0
 80042ee:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80042f0:	2300      	movs	r3, #0
 80042f2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80042f4:	2300      	movs	r3, #0
 80042f6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80042f8:	2300      	movs	r3, #0
 80042fa:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d140      	bne.n	8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004302:	4b24      	ldr	r3, [pc, #144]	; (8004394 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800430a:	60fb      	str	r3, [r7, #12]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d005      	beq.n	800431e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d131      	bne.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004318:	4b1f      	ldr	r3, [pc, #124]	; (8004398 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800431a:	617b      	str	r3, [r7, #20]
          break;
 800431c:	e031      	b.n	8004382 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800431e:	4b1d      	ldr	r3, [pc, #116]	; (8004394 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004326:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800432a:	d109      	bne.n	8004340 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800432c:	4b19      	ldr	r3, [pc, #100]	; (8004394 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800432e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004332:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004336:	4a19      	ldr	r2, [pc, #100]	; (800439c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004338:	fbb2 f3f3 	udiv	r3, r2, r3
 800433c:	613b      	str	r3, [r7, #16]
 800433e:	e008      	b.n	8004352 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004340:	4b14      	ldr	r3, [pc, #80]	; (8004394 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004342:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004346:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800434a:	4a15      	ldr	r2, [pc, #84]	; (80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800434c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004350:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004352:	4b10      	ldr	r3, [pc, #64]	; (8004394 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004354:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004358:	099b      	lsrs	r3, r3, #6
 800435a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	fb02 f303 	mul.w	r3, r2, r3
 8004364:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004366:	4b0b      	ldr	r3, [pc, #44]	; (8004394 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004368:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800436c:	0f1b      	lsrs	r3, r3, #28
 800436e:	f003 0307 	and.w	r3, r3, #7
 8004372:	68ba      	ldr	r2, [r7, #8]
 8004374:	fbb2 f3f3 	udiv	r3, r2, r3
 8004378:	617b      	str	r3, [r7, #20]
          break;
 800437a:	e002      	b.n	8004382 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800437c:	2300      	movs	r3, #0
 800437e:	617b      	str	r3, [r7, #20]
          break;
 8004380:	bf00      	nop
        }
      }
      break;
 8004382:	bf00      	nop
    }
  }
  return frequency;
 8004384:	697b      	ldr	r3, [r7, #20]
}
 8004386:	4618      	mov	r0, r3
 8004388:	371c      	adds	r7, #28
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	40023800 	.word	0x40023800
 8004398:	00bb8000 	.word	0x00bb8000
 800439c:	007a1200 	.word	0x007a1200
 80043a0:	00f42400 	.word	0x00f42400

080043a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d122      	bne.n	8004400 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	f003 0302 	and.w	r3, r3, #2
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d11b      	bne.n	8004400 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f06f 0202 	mvn.w	r2, #2
 80043d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2201      	movs	r2, #1
 80043d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	f003 0303 	and.w	r3, r3, #3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d003      	beq.n	80043ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 f8f8 	bl	80045dc <HAL_TIM_IC_CaptureCallback>
 80043ec:	e005      	b.n	80043fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f8ea 	bl	80045c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 f8fb 	bl	80045f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	f003 0304 	and.w	r3, r3, #4
 800440a:	2b04      	cmp	r3, #4
 800440c:	d122      	bne.n	8004454 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	f003 0304 	and.w	r3, r3, #4
 8004418:	2b04      	cmp	r3, #4
 800441a:	d11b      	bne.n	8004454 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f06f 0204 	mvn.w	r2, #4
 8004424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2202      	movs	r2, #2
 800442a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 f8ce 	bl	80045dc <HAL_TIM_IC_CaptureCallback>
 8004440:	e005      	b.n	800444e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 f8c0 	bl	80045c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 f8d1 	bl	80045f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	f003 0308 	and.w	r3, r3, #8
 800445e:	2b08      	cmp	r3, #8
 8004460:	d122      	bne.n	80044a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	f003 0308 	and.w	r3, r3, #8
 800446c:	2b08      	cmp	r3, #8
 800446e:	d11b      	bne.n	80044a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f06f 0208 	mvn.w	r2, #8
 8004478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2204      	movs	r2, #4
 800447e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	f003 0303 	and.w	r3, r3, #3
 800448a:	2b00      	cmp	r3, #0
 800448c:	d003      	beq.n	8004496 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 f8a4 	bl	80045dc <HAL_TIM_IC_CaptureCallback>
 8004494:	e005      	b.n	80044a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f896 	bl	80045c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 f8a7 	bl	80045f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	f003 0310 	and.w	r3, r3, #16
 80044b2:	2b10      	cmp	r3, #16
 80044b4:	d122      	bne.n	80044fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	f003 0310 	and.w	r3, r3, #16
 80044c0:	2b10      	cmp	r3, #16
 80044c2:	d11b      	bne.n	80044fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f06f 0210 	mvn.w	r2, #16
 80044cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2208      	movs	r2, #8
 80044d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d003      	beq.n	80044ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f87a 	bl	80045dc <HAL_TIM_IC_CaptureCallback>
 80044e8:	e005      	b.n	80044f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 f86c 	bl	80045c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 f87d 	bl	80045f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	2b01      	cmp	r3, #1
 8004508:	d10e      	bne.n	8004528 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	f003 0301 	and.w	r3, r3, #1
 8004514:	2b01      	cmp	r3, #1
 8004516:	d107      	bne.n	8004528 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f06f 0201 	mvn.w	r2, #1
 8004520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 f846 	bl	80045b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004532:	2b80      	cmp	r3, #128	; 0x80
 8004534:	d10e      	bne.n	8004554 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004540:	2b80      	cmp	r3, #128	; 0x80
 8004542:	d107      	bne.n	8004554 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800454c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 f86c 	bl	800462c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800455e:	2b40      	cmp	r3, #64	; 0x40
 8004560:	d10e      	bne.n	8004580 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800456c:	2b40      	cmp	r3, #64	; 0x40
 800456e:	d107      	bne.n	8004580 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 f842 	bl	8004604 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	f003 0320 	and.w	r3, r3, #32
 800458a:	2b20      	cmp	r3, #32
 800458c:	d10e      	bne.n	80045ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	f003 0320 	and.w	r3, r3, #32
 8004598:	2b20      	cmp	r3, #32
 800459a:	d107      	bne.n	80045ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f06f 0220 	mvn.w	r2, #32
 80045a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f836 	bl	8004618 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045ac:	bf00      	nop
 80045ae:	3708      	adds	r7, #8
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80045bc:	bf00      	nop
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <__libc_init_array>:
 8004640:	b570      	push	{r4, r5, r6, lr}
 8004642:	4d0d      	ldr	r5, [pc, #52]	; (8004678 <__libc_init_array+0x38>)
 8004644:	4c0d      	ldr	r4, [pc, #52]	; (800467c <__libc_init_array+0x3c>)
 8004646:	1b64      	subs	r4, r4, r5
 8004648:	10a4      	asrs	r4, r4, #2
 800464a:	2600      	movs	r6, #0
 800464c:	42a6      	cmp	r6, r4
 800464e:	d109      	bne.n	8004664 <__libc_init_array+0x24>
 8004650:	4d0b      	ldr	r5, [pc, #44]	; (8004680 <__libc_init_array+0x40>)
 8004652:	4c0c      	ldr	r4, [pc, #48]	; (8004684 <__libc_init_array+0x44>)
 8004654:	f000 fd8a 	bl	800516c <_init>
 8004658:	1b64      	subs	r4, r4, r5
 800465a:	10a4      	asrs	r4, r4, #2
 800465c:	2600      	movs	r6, #0
 800465e:	42a6      	cmp	r6, r4
 8004660:	d105      	bne.n	800466e <__libc_init_array+0x2e>
 8004662:	bd70      	pop	{r4, r5, r6, pc}
 8004664:	f855 3b04 	ldr.w	r3, [r5], #4
 8004668:	4798      	blx	r3
 800466a:	3601      	adds	r6, #1
 800466c:	e7ee      	b.n	800464c <__libc_init_array+0xc>
 800466e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004672:	4798      	blx	r3
 8004674:	3601      	adds	r6, #1
 8004676:	e7f2      	b.n	800465e <__libc_init_array+0x1e>
 8004678:	0800557c 	.word	0x0800557c
 800467c:	0800557c 	.word	0x0800557c
 8004680:	0800557c 	.word	0x0800557c
 8004684:	08005580 	.word	0x08005580

08004688 <memcpy>:
 8004688:	440a      	add	r2, r1
 800468a:	4291      	cmp	r1, r2
 800468c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004690:	d100      	bne.n	8004694 <memcpy+0xc>
 8004692:	4770      	bx	lr
 8004694:	b510      	push	{r4, lr}
 8004696:	f811 4b01 	ldrb.w	r4, [r1], #1
 800469a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800469e:	4291      	cmp	r1, r2
 80046a0:	d1f9      	bne.n	8004696 <memcpy+0xe>
 80046a2:	bd10      	pop	{r4, pc}

080046a4 <memset>:
 80046a4:	4402      	add	r2, r0
 80046a6:	4603      	mov	r3, r0
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d100      	bne.n	80046ae <memset+0xa>
 80046ac:	4770      	bx	lr
 80046ae:	f803 1b01 	strb.w	r1, [r3], #1
 80046b2:	e7f9      	b.n	80046a8 <memset+0x4>

080046b4 <sinf>:
 80046b4:	ee10 3a10 	vmov	r3, s0
 80046b8:	b507      	push	{r0, r1, r2, lr}
 80046ba:	4a1f      	ldr	r2, [pc, #124]	; (8004738 <sinf+0x84>)
 80046bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80046c0:	4293      	cmp	r3, r2
 80046c2:	dc07      	bgt.n	80046d4 <sinf+0x20>
 80046c4:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800473c <sinf+0x88>
 80046c8:	2000      	movs	r0, #0
 80046ca:	b003      	add	sp, #12
 80046cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80046d0:	f000 bc48 	b.w	8004f64 <__kernel_sinf>
 80046d4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80046d8:	db04      	blt.n	80046e4 <sinf+0x30>
 80046da:	ee30 0a40 	vsub.f32	s0, s0, s0
 80046de:	b003      	add	sp, #12
 80046e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80046e4:	4668      	mov	r0, sp
 80046e6:	f000 f82b 	bl	8004740 <__ieee754_rem_pio2f>
 80046ea:	f000 0003 	and.w	r0, r0, #3
 80046ee:	2801      	cmp	r0, #1
 80046f0:	d00a      	beq.n	8004708 <sinf+0x54>
 80046f2:	2802      	cmp	r0, #2
 80046f4:	d00f      	beq.n	8004716 <sinf+0x62>
 80046f6:	b9c0      	cbnz	r0, 800472a <sinf+0x76>
 80046f8:	eddd 0a01 	vldr	s1, [sp, #4]
 80046fc:	ed9d 0a00 	vldr	s0, [sp]
 8004700:	2001      	movs	r0, #1
 8004702:	f000 fc2f 	bl	8004f64 <__kernel_sinf>
 8004706:	e7ea      	b.n	80046de <sinf+0x2a>
 8004708:	eddd 0a01 	vldr	s1, [sp, #4]
 800470c:	ed9d 0a00 	vldr	s0, [sp]
 8004710:	f000 f952 	bl	80049b8 <__kernel_cosf>
 8004714:	e7e3      	b.n	80046de <sinf+0x2a>
 8004716:	eddd 0a01 	vldr	s1, [sp, #4]
 800471a:	ed9d 0a00 	vldr	s0, [sp]
 800471e:	2001      	movs	r0, #1
 8004720:	f000 fc20 	bl	8004f64 <__kernel_sinf>
 8004724:	eeb1 0a40 	vneg.f32	s0, s0
 8004728:	e7d9      	b.n	80046de <sinf+0x2a>
 800472a:	eddd 0a01 	vldr	s1, [sp, #4]
 800472e:	ed9d 0a00 	vldr	s0, [sp]
 8004732:	f000 f941 	bl	80049b8 <__kernel_cosf>
 8004736:	e7f5      	b.n	8004724 <sinf+0x70>
 8004738:	3f490fd8 	.word	0x3f490fd8
 800473c:	00000000 	.word	0x00000000

08004740 <__ieee754_rem_pio2f>:
 8004740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004742:	ee10 6a10 	vmov	r6, s0
 8004746:	4b8e      	ldr	r3, [pc, #568]	; (8004980 <__ieee754_rem_pio2f+0x240>)
 8004748:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800474c:	429d      	cmp	r5, r3
 800474e:	b087      	sub	sp, #28
 8004750:	eef0 7a40 	vmov.f32	s15, s0
 8004754:	4604      	mov	r4, r0
 8004756:	dc05      	bgt.n	8004764 <__ieee754_rem_pio2f+0x24>
 8004758:	2300      	movs	r3, #0
 800475a:	ed80 0a00 	vstr	s0, [r0]
 800475e:	6043      	str	r3, [r0, #4]
 8004760:	2000      	movs	r0, #0
 8004762:	e01a      	b.n	800479a <__ieee754_rem_pio2f+0x5a>
 8004764:	4b87      	ldr	r3, [pc, #540]	; (8004984 <__ieee754_rem_pio2f+0x244>)
 8004766:	429d      	cmp	r5, r3
 8004768:	dc46      	bgt.n	80047f8 <__ieee754_rem_pio2f+0xb8>
 800476a:	2e00      	cmp	r6, #0
 800476c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8004988 <__ieee754_rem_pio2f+0x248>
 8004770:	4b86      	ldr	r3, [pc, #536]	; (800498c <__ieee754_rem_pio2f+0x24c>)
 8004772:	f025 050f 	bic.w	r5, r5, #15
 8004776:	dd1f      	ble.n	80047b8 <__ieee754_rem_pio2f+0x78>
 8004778:	429d      	cmp	r5, r3
 800477a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800477e:	d00e      	beq.n	800479e <__ieee754_rem_pio2f+0x5e>
 8004780:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8004990 <__ieee754_rem_pio2f+0x250>
 8004784:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8004788:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800478c:	ed80 0a00 	vstr	s0, [r0]
 8004790:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004794:	2001      	movs	r0, #1
 8004796:	edc4 7a01 	vstr	s15, [r4, #4]
 800479a:	b007      	add	sp, #28
 800479c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800479e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8004994 <__ieee754_rem_pio2f+0x254>
 80047a2:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8004998 <__ieee754_rem_pio2f+0x258>
 80047a6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80047aa:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80047ae:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80047b2:	edc0 6a00 	vstr	s13, [r0]
 80047b6:	e7eb      	b.n	8004790 <__ieee754_rem_pio2f+0x50>
 80047b8:	429d      	cmp	r5, r3
 80047ba:	ee77 7a80 	vadd.f32	s15, s15, s0
 80047be:	d00e      	beq.n	80047de <__ieee754_rem_pio2f+0x9e>
 80047c0:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8004990 <__ieee754_rem_pio2f+0x250>
 80047c4:	ee37 0a87 	vadd.f32	s0, s15, s14
 80047c8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80047cc:	ed80 0a00 	vstr	s0, [r0]
 80047d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80047d4:	f04f 30ff 	mov.w	r0, #4294967295
 80047d8:	edc4 7a01 	vstr	s15, [r4, #4]
 80047dc:	e7dd      	b.n	800479a <__ieee754_rem_pio2f+0x5a>
 80047de:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8004994 <__ieee754_rem_pio2f+0x254>
 80047e2:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8004998 <__ieee754_rem_pio2f+0x258>
 80047e6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80047ea:	ee77 6a87 	vadd.f32	s13, s15, s14
 80047ee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80047f2:	edc0 6a00 	vstr	s13, [r0]
 80047f6:	e7eb      	b.n	80047d0 <__ieee754_rem_pio2f+0x90>
 80047f8:	4b68      	ldr	r3, [pc, #416]	; (800499c <__ieee754_rem_pio2f+0x25c>)
 80047fa:	429d      	cmp	r5, r3
 80047fc:	dc72      	bgt.n	80048e4 <__ieee754_rem_pio2f+0x1a4>
 80047fe:	f000 fbf9 	bl	8004ff4 <fabsf>
 8004802:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80049a0 <__ieee754_rem_pio2f+0x260>
 8004806:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800480a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800480e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004812:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004816:	ee17 0a90 	vmov	r0, s15
 800481a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8004988 <__ieee754_rem_pio2f+0x248>
 800481e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8004822:	281f      	cmp	r0, #31
 8004824:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8004990 <__ieee754_rem_pio2f+0x250>
 8004828:	ee67 7a27 	vmul.f32	s15, s14, s15
 800482c:	eeb1 6a47 	vneg.f32	s12, s14
 8004830:	ee70 6a67 	vsub.f32	s13, s0, s15
 8004834:	ee16 2a90 	vmov	r2, s13
 8004838:	dc1c      	bgt.n	8004874 <__ieee754_rem_pio2f+0x134>
 800483a:	495a      	ldr	r1, [pc, #360]	; (80049a4 <__ieee754_rem_pio2f+0x264>)
 800483c:	1e47      	subs	r7, r0, #1
 800483e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8004842:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8004846:	428b      	cmp	r3, r1
 8004848:	d014      	beq.n	8004874 <__ieee754_rem_pio2f+0x134>
 800484a:	6022      	str	r2, [r4, #0]
 800484c:	ed94 7a00 	vldr	s14, [r4]
 8004850:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004854:	2e00      	cmp	r6, #0
 8004856:	ee30 0a67 	vsub.f32	s0, s0, s15
 800485a:	ed84 0a01 	vstr	s0, [r4, #4]
 800485e:	da9c      	bge.n	800479a <__ieee754_rem_pio2f+0x5a>
 8004860:	eeb1 7a47 	vneg.f32	s14, s14
 8004864:	eeb1 0a40 	vneg.f32	s0, s0
 8004868:	ed84 7a00 	vstr	s14, [r4]
 800486c:	ed84 0a01 	vstr	s0, [r4, #4]
 8004870:	4240      	negs	r0, r0
 8004872:	e792      	b.n	800479a <__ieee754_rem_pio2f+0x5a>
 8004874:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8004878:	15eb      	asrs	r3, r5, #23
 800487a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800487e:	2d08      	cmp	r5, #8
 8004880:	dde3      	ble.n	800484a <__ieee754_rem_pio2f+0x10a>
 8004882:	eddf 7a44 	vldr	s15, [pc, #272]	; 8004994 <__ieee754_rem_pio2f+0x254>
 8004886:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004998 <__ieee754_rem_pio2f+0x258>
 800488a:	eef0 6a40 	vmov.f32	s13, s0
 800488e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8004892:	ee30 0a66 	vsub.f32	s0, s0, s13
 8004896:	eea6 0a27 	vfma.f32	s0, s12, s15
 800489a:	eef0 7a40 	vmov.f32	s15, s0
 800489e:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80048a2:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80048a6:	ee15 2a90 	vmov	r2, s11
 80048aa:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80048ae:	1a5b      	subs	r3, r3, r1
 80048b0:	2b19      	cmp	r3, #25
 80048b2:	dc04      	bgt.n	80048be <__ieee754_rem_pio2f+0x17e>
 80048b4:	edc4 5a00 	vstr	s11, [r4]
 80048b8:	eeb0 0a66 	vmov.f32	s0, s13
 80048bc:	e7c6      	b.n	800484c <__ieee754_rem_pio2f+0x10c>
 80048be:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80049a8 <__ieee754_rem_pio2f+0x268>
 80048c2:	eeb0 0a66 	vmov.f32	s0, s13
 80048c6:	eea6 0a25 	vfma.f32	s0, s12, s11
 80048ca:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80048ce:	eddf 6a37 	vldr	s13, [pc, #220]	; 80049ac <__ieee754_rem_pio2f+0x26c>
 80048d2:	eee6 7a25 	vfma.f32	s15, s12, s11
 80048d6:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80048da:	ee30 7a67 	vsub.f32	s14, s0, s15
 80048de:	ed84 7a00 	vstr	s14, [r4]
 80048e2:	e7b3      	b.n	800484c <__ieee754_rem_pio2f+0x10c>
 80048e4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80048e8:	db06      	blt.n	80048f8 <__ieee754_rem_pio2f+0x1b8>
 80048ea:	ee70 7a40 	vsub.f32	s15, s0, s0
 80048ee:	edc0 7a01 	vstr	s15, [r0, #4]
 80048f2:	edc0 7a00 	vstr	s15, [r0]
 80048f6:	e733      	b.n	8004760 <__ieee754_rem_pio2f+0x20>
 80048f8:	15ea      	asrs	r2, r5, #23
 80048fa:	3a86      	subs	r2, #134	; 0x86
 80048fc:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8004900:	ee07 3a90 	vmov	s15, r3
 8004904:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8004908:	eddf 6a29 	vldr	s13, [pc, #164]	; 80049b0 <__ieee754_rem_pio2f+0x270>
 800490c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004910:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004914:	ed8d 7a03 	vstr	s14, [sp, #12]
 8004918:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800491c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8004920:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004924:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004928:	ed8d 7a04 	vstr	s14, [sp, #16]
 800492c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004930:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004938:	edcd 7a05 	vstr	s15, [sp, #20]
 800493c:	d11e      	bne.n	800497c <__ieee754_rem_pio2f+0x23c>
 800493e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8004942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004946:	bf14      	ite	ne
 8004948:	2302      	movne	r3, #2
 800494a:	2301      	moveq	r3, #1
 800494c:	4919      	ldr	r1, [pc, #100]	; (80049b4 <__ieee754_rem_pio2f+0x274>)
 800494e:	9101      	str	r1, [sp, #4]
 8004950:	2102      	movs	r1, #2
 8004952:	9100      	str	r1, [sp, #0]
 8004954:	a803      	add	r0, sp, #12
 8004956:	4621      	mov	r1, r4
 8004958:	f000 f88e 	bl	8004a78 <__kernel_rem_pio2f>
 800495c:	2e00      	cmp	r6, #0
 800495e:	f6bf af1c 	bge.w	800479a <__ieee754_rem_pio2f+0x5a>
 8004962:	edd4 7a00 	vldr	s15, [r4]
 8004966:	eef1 7a67 	vneg.f32	s15, s15
 800496a:	edc4 7a00 	vstr	s15, [r4]
 800496e:	edd4 7a01 	vldr	s15, [r4, #4]
 8004972:	eef1 7a67 	vneg.f32	s15, s15
 8004976:	edc4 7a01 	vstr	s15, [r4, #4]
 800497a:	e779      	b.n	8004870 <__ieee754_rem_pio2f+0x130>
 800497c:	2303      	movs	r3, #3
 800497e:	e7e5      	b.n	800494c <__ieee754_rem_pio2f+0x20c>
 8004980:	3f490fd8 	.word	0x3f490fd8
 8004984:	4016cbe3 	.word	0x4016cbe3
 8004988:	3fc90f80 	.word	0x3fc90f80
 800498c:	3fc90fd0 	.word	0x3fc90fd0
 8004990:	37354443 	.word	0x37354443
 8004994:	37354400 	.word	0x37354400
 8004998:	2e85a308 	.word	0x2e85a308
 800499c:	43490f80 	.word	0x43490f80
 80049a0:	3f22f984 	.word	0x3f22f984
 80049a4:	080051a4 	.word	0x080051a4
 80049a8:	2e85a300 	.word	0x2e85a300
 80049ac:	248d3132 	.word	0x248d3132
 80049b0:	43800000 	.word	0x43800000
 80049b4:	08005224 	.word	0x08005224

080049b8 <__kernel_cosf>:
 80049b8:	ee10 3a10 	vmov	r3, s0
 80049bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80049c0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80049c4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80049c8:	da05      	bge.n	80049d6 <__kernel_cosf+0x1e>
 80049ca:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80049ce:	ee17 2a90 	vmov	r2, s15
 80049d2:	2a00      	cmp	r2, #0
 80049d4:	d03d      	beq.n	8004a52 <__kernel_cosf+0x9a>
 80049d6:	ee60 5a00 	vmul.f32	s11, s0, s0
 80049da:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8004a58 <__kernel_cosf+0xa0>
 80049de:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8004a5c <__kernel_cosf+0xa4>
 80049e2:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8004a60 <__kernel_cosf+0xa8>
 80049e6:	4a1f      	ldr	r2, [pc, #124]	; (8004a64 <__kernel_cosf+0xac>)
 80049e8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80049ec:	4293      	cmp	r3, r2
 80049ee:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8004a68 <__kernel_cosf+0xb0>
 80049f2:	eee7 7a25 	vfma.f32	s15, s14, s11
 80049f6:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004a6c <__kernel_cosf+0xb4>
 80049fa:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80049fe:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8004a70 <__kernel_cosf+0xb8>
 8004a02:	eee7 7a25 	vfma.f32	s15, s14, s11
 8004a06:	eeb0 7a66 	vmov.f32	s14, s13
 8004a0a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8004a0e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8004a12:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8004a16:	ee67 6a25 	vmul.f32	s13, s14, s11
 8004a1a:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8004a1e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8004a22:	dc04      	bgt.n	8004a2e <__kernel_cosf+0x76>
 8004a24:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004a28:	ee36 0a47 	vsub.f32	s0, s12, s14
 8004a2c:	4770      	bx	lr
 8004a2e:	4a11      	ldr	r2, [pc, #68]	; (8004a74 <__kernel_cosf+0xbc>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	bfda      	itte	le
 8004a34:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8004a38:	ee06 3a90 	vmovle	s13, r3
 8004a3c:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8004a40:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004a44:	ee36 0a66 	vsub.f32	s0, s12, s13
 8004a48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004a4c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004a50:	4770      	bx	lr
 8004a52:	eeb0 0a46 	vmov.f32	s0, s12
 8004a56:	4770      	bx	lr
 8004a58:	ad47d74e 	.word	0xad47d74e
 8004a5c:	310f74f6 	.word	0x310f74f6
 8004a60:	3d2aaaab 	.word	0x3d2aaaab
 8004a64:	3e999999 	.word	0x3e999999
 8004a68:	b493f27c 	.word	0xb493f27c
 8004a6c:	37d00d01 	.word	0x37d00d01
 8004a70:	bab60b61 	.word	0xbab60b61
 8004a74:	3f480000 	.word	0x3f480000

08004a78 <__kernel_rem_pio2f>:
 8004a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a7c:	ed2d 8b04 	vpush	{d8-d9}
 8004a80:	b0d9      	sub	sp, #356	; 0x164
 8004a82:	4688      	mov	r8, r1
 8004a84:	9002      	str	r0, [sp, #8]
 8004a86:	49bb      	ldr	r1, [pc, #748]	; (8004d74 <__kernel_rem_pio2f+0x2fc>)
 8004a88:	9866      	ldr	r0, [sp, #408]	; 0x198
 8004a8a:	9301      	str	r3, [sp, #4]
 8004a8c:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8004a90:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8004a94:	1e59      	subs	r1, r3, #1
 8004a96:	1d13      	adds	r3, r2, #4
 8004a98:	db27      	blt.n	8004aea <__kernel_rem_pio2f+0x72>
 8004a9a:	f1b2 0b03 	subs.w	fp, r2, #3
 8004a9e:	bf48      	it	mi
 8004aa0:	f102 0b04 	addmi.w	fp, r2, #4
 8004aa4:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8004aa8:	1c45      	adds	r5, r0, #1
 8004aaa:	00ec      	lsls	r4, r5, #3
 8004aac:	1a47      	subs	r7, r0, r1
 8004aae:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8004d84 <__kernel_rem_pio2f+0x30c>
 8004ab2:	9403      	str	r4, [sp, #12]
 8004ab4:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8004ab8:	eb0a 0c01 	add.w	ip, sl, r1
 8004abc:	ae1c      	add	r6, sp, #112	; 0x70
 8004abe:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8004ac2:	2400      	movs	r4, #0
 8004ac4:	4564      	cmp	r4, ip
 8004ac6:	dd12      	ble.n	8004aee <__kernel_rem_pio2f+0x76>
 8004ac8:	9b01      	ldr	r3, [sp, #4]
 8004aca:	ac1c      	add	r4, sp, #112	; 0x70
 8004acc:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8004ad0:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8004ad4:	f04f 0c00 	mov.w	ip, #0
 8004ad8:	45d4      	cmp	ip, sl
 8004ada:	dc27      	bgt.n	8004b2c <__kernel_rem_pio2f+0xb4>
 8004adc:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8004ae0:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8004d84 <__kernel_rem_pio2f+0x30c>
 8004ae4:	4627      	mov	r7, r4
 8004ae6:	2600      	movs	r6, #0
 8004ae8:	e016      	b.n	8004b18 <__kernel_rem_pio2f+0xa0>
 8004aea:	2000      	movs	r0, #0
 8004aec:	e7dc      	b.n	8004aa8 <__kernel_rem_pio2f+0x30>
 8004aee:	42e7      	cmn	r7, r4
 8004af0:	bf5d      	ittte	pl
 8004af2:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 8004af6:	ee07 3a90 	vmovpl	s15, r3
 8004afa:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8004afe:	eef0 7a47 	vmovmi.f32	s15, s14
 8004b02:	ece6 7a01 	vstmia	r6!, {s15}
 8004b06:	3401      	adds	r4, #1
 8004b08:	e7dc      	b.n	8004ac4 <__kernel_rem_pio2f+0x4c>
 8004b0a:	ecf9 6a01 	vldmia	r9!, {s13}
 8004b0e:	ed97 7a00 	vldr	s14, [r7]
 8004b12:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004b16:	3601      	adds	r6, #1
 8004b18:	428e      	cmp	r6, r1
 8004b1a:	f1a7 0704 	sub.w	r7, r7, #4
 8004b1e:	ddf4      	ble.n	8004b0a <__kernel_rem_pio2f+0x92>
 8004b20:	eceb 7a01 	vstmia	fp!, {s15}
 8004b24:	f10c 0c01 	add.w	ip, ip, #1
 8004b28:	3404      	adds	r4, #4
 8004b2a:	e7d5      	b.n	8004ad8 <__kernel_rem_pio2f+0x60>
 8004b2c:	ab08      	add	r3, sp, #32
 8004b2e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8004b32:	eddf 8a93 	vldr	s17, [pc, #588]	; 8004d80 <__kernel_rem_pio2f+0x308>
 8004b36:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8004d7c <__kernel_rem_pio2f+0x304>
 8004b3a:	9304      	str	r3, [sp, #16]
 8004b3c:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8004b40:	4656      	mov	r6, sl
 8004b42:	00b3      	lsls	r3, r6, #2
 8004b44:	9305      	str	r3, [sp, #20]
 8004b46:	ab58      	add	r3, sp, #352	; 0x160
 8004b48:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8004b4c:	ac08      	add	r4, sp, #32
 8004b4e:	ab44      	add	r3, sp, #272	; 0x110
 8004b50:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8004b54:	46a4      	mov	ip, r4
 8004b56:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8004b5a:	4637      	mov	r7, r6
 8004b5c:	2f00      	cmp	r7, #0
 8004b5e:	f1a0 0004 	sub.w	r0, r0, #4
 8004b62:	dc4f      	bgt.n	8004c04 <__kernel_rem_pio2f+0x18c>
 8004b64:	4628      	mov	r0, r5
 8004b66:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8004b6a:	f000 fa8d 	bl	8005088 <scalbnf>
 8004b6e:	eeb0 8a40 	vmov.f32	s16, s0
 8004b72:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8004b76:	ee28 0a00 	vmul.f32	s0, s16, s0
 8004b7a:	f000 fa43 	bl	8005004 <floorf>
 8004b7e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8004b82:	eea0 8a67 	vfms.f32	s16, s0, s15
 8004b86:	2d00      	cmp	r5, #0
 8004b88:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8004b8c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8004b90:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8004b94:	ee17 9a90 	vmov	r9, s15
 8004b98:	ee38 8a40 	vsub.f32	s16, s16, s0
 8004b9c:	dd44      	ble.n	8004c28 <__kernel_rem_pio2f+0x1b0>
 8004b9e:	f106 3cff 	add.w	ip, r6, #4294967295
 8004ba2:	ab08      	add	r3, sp, #32
 8004ba4:	f1c5 0e08 	rsb	lr, r5, #8
 8004ba8:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8004bac:	fa47 f00e 	asr.w	r0, r7, lr
 8004bb0:	4481      	add	r9, r0
 8004bb2:	fa00 f00e 	lsl.w	r0, r0, lr
 8004bb6:	1a3f      	subs	r7, r7, r0
 8004bb8:	f1c5 0007 	rsb	r0, r5, #7
 8004bbc:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8004bc0:	4107      	asrs	r7, r0
 8004bc2:	2f00      	cmp	r7, #0
 8004bc4:	dd3f      	ble.n	8004c46 <__kernel_rem_pio2f+0x1ce>
 8004bc6:	f04f 0e00 	mov.w	lr, #0
 8004bca:	f109 0901 	add.w	r9, r9, #1
 8004bce:	4673      	mov	r3, lr
 8004bd0:	4576      	cmp	r6, lr
 8004bd2:	dc6b      	bgt.n	8004cac <__kernel_rem_pio2f+0x234>
 8004bd4:	2d00      	cmp	r5, #0
 8004bd6:	dd04      	ble.n	8004be2 <__kernel_rem_pio2f+0x16a>
 8004bd8:	2d01      	cmp	r5, #1
 8004bda:	d078      	beq.n	8004cce <__kernel_rem_pio2f+0x256>
 8004bdc:	2d02      	cmp	r5, #2
 8004bde:	f000 8081 	beq.w	8004ce4 <__kernel_rem_pio2f+0x26c>
 8004be2:	2f02      	cmp	r7, #2
 8004be4:	d12f      	bne.n	8004c46 <__kernel_rem_pio2f+0x1ce>
 8004be6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004bea:	ee30 8a48 	vsub.f32	s16, s0, s16
 8004bee:	b353      	cbz	r3, 8004c46 <__kernel_rem_pio2f+0x1ce>
 8004bf0:	4628      	mov	r0, r5
 8004bf2:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8004bf6:	f000 fa47 	bl	8005088 <scalbnf>
 8004bfa:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8004bfe:	ee38 8a40 	vsub.f32	s16, s16, s0
 8004c02:	e020      	b.n	8004c46 <__kernel_rem_pio2f+0x1ce>
 8004c04:	ee60 7a28 	vmul.f32	s15, s0, s17
 8004c08:	3f01      	subs	r7, #1
 8004c0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c12:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8004c16:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004c1a:	ecac 0a01 	vstmia	ip!, {s0}
 8004c1e:	ed90 0a00 	vldr	s0, [r0]
 8004c22:	ee37 0a80 	vadd.f32	s0, s15, s0
 8004c26:	e799      	b.n	8004b5c <__kernel_rem_pio2f+0xe4>
 8004c28:	d105      	bne.n	8004c36 <__kernel_rem_pio2f+0x1be>
 8004c2a:	1e70      	subs	r0, r6, #1
 8004c2c:	ab08      	add	r3, sp, #32
 8004c2e:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8004c32:	11ff      	asrs	r7, r7, #7
 8004c34:	e7c5      	b.n	8004bc2 <__kernel_rem_pio2f+0x14a>
 8004c36:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004c3a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c42:	da31      	bge.n	8004ca8 <__kernel_rem_pio2f+0x230>
 8004c44:	2700      	movs	r7, #0
 8004c46:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8004c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c4e:	f040 809b 	bne.w	8004d88 <__kernel_rem_pio2f+0x310>
 8004c52:	1e74      	subs	r4, r6, #1
 8004c54:	46a4      	mov	ip, r4
 8004c56:	2000      	movs	r0, #0
 8004c58:	45d4      	cmp	ip, sl
 8004c5a:	da4a      	bge.n	8004cf2 <__kernel_rem_pio2f+0x27a>
 8004c5c:	2800      	cmp	r0, #0
 8004c5e:	d07a      	beq.n	8004d56 <__kernel_rem_pio2f+0x2de>
 8004c60:	ab08      	add	r3, sp, #32
 8004c62:	3d08      	subs	r5, #8
 8004c64:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	f000 8081 	beq.w	8004d70 <__kernel_rem_pio2f+0x2f8>
 8004c6e:	4628      	mov	r0, r5
 8004c70:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004c74:	00a5      	lsls	r5, r4, #2
 8004c76:	f000 fa07 	bl	8005088 <scalbnf>
 8004c7a:	aa44      	add	r2, sp, #272	; 0x110
 8004c7c:	1d2b      	adds	r3, r5, #4
 8004c7e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8004d80 <__kernel_rem_pio2f+0x308>
 8004c82:	18d1      	adds	r1, r2, r3
 8004c84:	4622      	mov	r2, r4
 8004c86:	2a00      	cmp	r2, #0
 8004c88:	f280 80ae 	bge.w	8004de8 <__kernel_rem_pio2f+0x370>
 8004c8c:	4622      	mov	r2, r4
 8004c8e:	2a00      	cmp	r2, #0
 8004c90:	f2c0 80cc 	blt.w	8004e2c <__kernel_rem_pio2f+0x3b4>
 8004c94:	a944      	add	r1, sp, #272	; 0x110
 8004c96:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8004c9a:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8004d78 <__kernel_rem_pio2f+0x300>
 8004c9e:	eddf 7a39 	vldr	s15, [pc, #228]	; 8004d84 <__kernel_rem_pio2f+0x30c>
 8004ca2:	2000      	movs	r0, #0
 8004ca4:	1aa1      	subs	r1, r4, r2
 8004ca6:	e0b6      	b.n	8004e16 <__kernel_rem_pio2f+0x39e>
 8004ca8:	2702      	movs	r7, #2
 8004caa:	e78c      	b.n	8004bc6 <__kernel_rem_pio2f+0x14e>
 8004cac:	6820      	ldr	r0, [r4, #0]
 8004cae:	b94b      	cbnz	r3, 8004cc4 <__kernel_rem_pio2f+0x24c>
 8004cb0:	b118      	cbz	r0, 8004cba <__kernel_rem_pio2f+0x242>
 8004cb2:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8004cb6:	6020      	str	r0, [r4, #0]
 8004cb8:	2001      	movs	r0, #1
 8004cba:	f10e 0e01 	add.w	lr, lr, #1
 8004cbe:	3404      	adds	r4, #4
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	e785      	b.n	8004bd0 <__kernel_rem_pio2f+0x158>
 8004cc4:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8004cc8:	6020      	str	r0, [r4, #0]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	e7f5      	b.n	8004cba <__kernel_rem_pio2f+0x242>
 8004cce:	1e74      	subs	r4, r6, #1
 8004cd0:	a808      	add	r0, sp, #32
 8004cd2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8004cd6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8004cda:	f10d 0c20 	add.w	ip, sp, #32
 8004cde:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8004ce2:	e77e      	b.n	8004be2 <__kernel_rem_pio2f+0x16a>
 8004ce4:	1e74      	subs	r4, r6, #1
 8004ce6:	a808      	add	r0, sp, #32
 8004ce8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8004cec:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8004cf0:	e7f3      	b.n	8004cda <__kernel_rem_pio2f+0x262>
 8004cf2:	ab08      	add	r3, sp, #32
 8004cf4:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8004cf8:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004cfc:	4318      	orrs	r0, r3
 8004cfe:	e7ab      	b.n	8004c58 <__kernel_rem_pio2f+0x1e0>
 8004d00:	f10c 0c01 	add.w	ip, ip, #1
 8004d04:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8004d08:	2c00      	cmp	r4, #0
 8004d0a:	d0f9      	beq.n	8004d00 <__kernel_rem_pio2f+0x288>
 8004d0c:	9b05      	ldr	r3, [sp, #20]
 8004d0e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8004d12:	eb0d 0003 	add.w	r0, sp, r3
 8004d16:	9b01      	ldr	r3, [sp, #4]
 8004d18:	18f4      	adds	r4, r6, r3
 8004d1a:	ab1c      	add	r3, sp, #112	; 0x70
 8004d1c:	1c77      	adds	r7, r6, #1
 8004d1e:	384c      	subs	r0, #76	; 0x4c
 8004d20:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8004d24:	4466      	add	r6, ip
 8004d26:	42be      	cmp	r6, r7
 8004d28:	f6ff af0b 	blt.w	8004b42 <__kernel_rem_pio2f+0xca>
 8004d2c:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8004d30:	f8dd e008 	ldr.w	lr, [sp, #8]
 8004d34:	ee07 3a90 	vmov	s15, r3
 8004d38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d3c:	f04f 0c00 	mov.w	ip, #0
 8004d40:	ece4 7a01 	vstmia	r4!, {s15}
 8004d44:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8004d84 <__kernel_rem_pio2f+0x30c>
 8004d48:	46a1      	mov	r9, r4
 8004d4a:	458c      	cmp	ip, r1
 8004d4c:	dd07      	ble.n	8004d5e <__kernel_rem_pio2f+0x2e6>
 8004d4e:	ece0 7a01 	vstmia	r0!, {s15}
 8004d52:	3701      	adds	r7, #1
 8004d54:	e7e7      	b.n	8004d26 <__kernel_rem_pio2f+0x2ae>
 8004d56:	9804      	ldr	r0, [sp, #16]
 8004d58:	f04f 0c01 	mov.w	ip, #1
 8004d5c:	e7d2      	b.n	8004d04 <__kernel_rem_pio2f+0x28c>
 8004d5e:	ecfe 6a01 	vldmia	lr!, {s13}
 8004d62:	ed39 7a01 	vldmdb	r9!, {s14}
 8004d66:	f10c 0c01 	add.w	ip, ip, #1
 8004d6a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004d6e:	e7ec      	b.n	8004d4a <__kernel_rem_pio2f+0x2d2>
 8004d70:	3c01      	subs	r4, #1
 8004d72:	e775      	b.n	8004c60 <__kernel_rem_pio2f+0x1e8>
 8004d74:	08005568 	.word	0x08005568
 8004d78:	0800553c 	.word	0x0800553c
 8004d7c:	43800000 	.word	0x43800000
 8004d80:	3b800000 	.word	0x3b800000
 8004d84:	00000000 	.word	0x00000000
 8004d88:	9b03      	ldr	r3, [sp, #12]
 8004d8a:	eeb0 0a48 	vmov.f32	s0, s16
 8004d8e:	1a98      	subs	r0, r3, r2
 8004d90:	f000 f97a 	bl	8005088 <scalbnf>
 8004d94:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8004d7c <__kernel_rem_pio2f+0x304>
 8004d98:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8004d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004da0:	db19      	blt.n	8004dd6 <__kernel_rem_pio2f+0x35e>
 8004da2:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8004d80 <__kernel_rem_pio2f+0x308>
 8004da6:	ee60 7a27 	vmul.f32	s15, s0, s15
 8004daa:	aa08      	add	r2, sp, #32
 8004dac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004db0:	1c74      	adds	r4, r6, #1
 8004db2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004db6:	3508      	adds	r5, #8
 8004db8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8004dbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004dc0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004dc4:	ee10 3a10 	vmov	r3, s0
 8004dc8:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8004dcc:	ee17 3a90 	vmov	r3, s15
 8004dd0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8004dd4:	e74b      	b.n	8004c6e <__kernel_rem_pio2f+0x1f6>
 8004dd6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004dda:	aa08      	add	r2, sp, #32
 8004ddc:	ee10 3a10 	vmov	r3, s0
 8004de0:	4634      	mov	r4, r6
 8004de2:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8004de6:	e742      	b.n	8004c6e <__kernel_rem_pio2f+0x1f6>
 8004de8:	a808      	add	r0, sp, #32
 8004dea:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8004dee:	9001      	str	r0, [sp, #4]
 8004df0:	ee07 0a90 	vmov	s15, r0
 8004df4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004df8:	3a01      	subs	r2, #1
 8004dfa:	ee67 7a80 	vmul.f32	s15, s15, s0
 8004dfe:	ee20 0a07 	vmul.f32	s0, s0, s14
 8004e02:	ed61 7a01 	vstmdb	r1!, {s15}
 8004e06:	e73e      	b.n	8004c86 <__kernel_rem_pio2f+0x20e>
 8004e08:	ecfc 6a01 	vldmia	ip!, {s13}
 8004e0c:	ecb6 7a01 	vldmia	r6!, {s14}
 8004e10:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004e14:	3001      	adds	r0, #1
 8004e16:	4550      	cmp	r0, sl
 8004e18:	dc01      	bgt.n	8004e1e <__kernel_rem_pio2f+0x3a6>
 8004e1a:	4288      	cmp	r0, r1
 8004e1c:	ddf4      	ble.n	8004e08 <__kernel_rem_pio2f+0x390>
 8004e1e:	a858      	add	r0, sp, #352	; 0x160
 8004e20:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004e24:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8004e28:	3a01      	subs	r2, #1
 8004e2a:	e730      	b.n	8004c8e <__kernel_rem_pio2f+0x216>
 8004e2c:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8004e2e:	2a02      	cmp	r2, #2
 8004e30:	dc09      	bgt.n	8004e46 <__kernel_rem_pio2f+0x3ce>
 8004e32:	2a00      	cmp	r2, #0
 8004e34:	dc2a      	bgt.n	8004e8c <__kernel_rem_pio2f+0x414>
 8004e36:	d043      	beq.n	8004ec0 <__kernel_rem_pio2f+0x448>
 8004e38:	f009 0007 	and.w	r0, r9, #7
 8004e3c:	b059      	add	sp, #356	; 0x164
 8004e3e:	ecbd 8b04 	vpop	{d8-d9}
 8004e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e46:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8004e48:	2b03      	cmp	r3, #3
 8004e4a:	d1f5      	bne.n	8004e38 <__kernel_rem_pio2f+0x3c0>
 8004e4c:	ab30      	add	r3, sp, #192	; 0xc0
 8004e4e:	442b      	add	r3, r5
 8004e50:	461a      	mov	r2, r3
 8004e52:	4619      	mov	r1, r3
 8004e54:	4620      	mov	r0, r4
 8004e56:	2800      	cmp	r0, #0
 8004e58:	f1a1 0104 	sub.w	r1, r1, #4
 8004e5c:	dc51      	bgt.n	8004f02 <__kernel_rem_pio2f+0x48a>
 8004e5e:	4621      	mov	r1, r4
 8004e60:	2901      	cmp	r1, #1
 8004e62:	f1a2 0204 	sub.w	r2, r2, #4
 8004e66:	dc5c      	bgt.n	8004f22 <__kernel_rem_pio2f+0x4aa>
 8004e68:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8004d84 <__kernel_rem_pio2f+0x30c>
 8004e6c:	3304      	adds	r3, #4
 8004e6e:	2c01      	cmp	r4, #1
 8004e70:	dc67      	bgt.n	8004f42 <__kernel_rem_pio2f+0x4ca>
 8004e72:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8004e76:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8004e7a:	2f00      	cmp	r7, #0
 8004e7c:	d167      	bne.n	8004f4e <__kernel_rem_pio2f+0x4d6>
 8004e7e:	edc8 6a00 	vstr	s13, [r8]
 8004e82:	ed88 7a01 	vstr	s14, [r8, #4]
 8004e86:	edc8 7a02 	vstr	s15, [r8, #8]
 8004e8a:	e7d5      	b.n	8004e38 <__kernel_rem_pio2f+0x3c0>
 8004e8c:	aa30      	add	r2, sp, #192	; 0xc0
 8004e8e:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8004d84 <__kernel_rem_pio2f+0x30c>
 8004e92:	4413      	add	r3, r2
 8004e94:	4622      	mov	r2, r4
 8004e96:	2a00      	cmp	r2, #0
 8004e98:	da24      	bge.n	8004ee4 <__kernel_rem_pio2f+0x46c>
 8004e9a:	b34f      	cbz	r7, 8004ef0 <__kernel_rem_pio2f+0x478>
 8004e9c:	eef1 7a47 	vneg.f32	s15, s14
 8004ea0:	edc8 7a00 	vstr	s15, [r8]
 8004ea4:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8004ea8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004eac:	aa31      	add	r2, sp, #196	; 0xc4
 8004eae:	2301      	movs	r3, #1
 8004eb0:	429c      	cmp	r4, r3
 8004eb2:	da20      	bge.n	8004ef6 <__kernel_rem_pio2f+0x47e>
 8004eb4:	b10f      	cbz	r7, 8004eba <__kernel_rem_pio2f+0x442>
 8004eb6:	eef1 7a67 	vneg.f32	s15, s15
 8004eba:	edc8 7a01 	vstr	s15, [r8, #4]
 8004ebe:	e7bb      	b.n	8004e38 <__kernel_rem_pio2f+0x3c0>
 8004ec0:	aa30      	add	r2, sp, #192	; 0xc0
 8004ec2:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8004d84 <__kernel_rem_pio2f+0x30c>
 8004ec6:	4413      	add	r3, r2
 8004ec8:	2c00      	cmp	r4, #0
 8004eca:	da05      	bge.n	8004ed8 <__kernel_rem_pio2f+0x460>
 8004ecc:	b10f      	cbz	r7, 8004ed2 <__kernel_rem_pio2f+0x45a>
 8004ece:	eef1 7a67 	vneg.f32	s15, s15
 8004ed2:	edc8 7a00 	vstr	s15, [r8]
 8004ed6:	e7af      	b.n	8004e38 <__kernel_rem_pio2f+0x3c0>
 8004ed8:	ed33 7a01 	vldmdb	r3!, {s14}
 8004edc:	3c01      	subs	r4, #1
 8004ede:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ee2:	e7f1      	b.n	8004ec8 <__kernel_rem_pio2f+0x450>
 8004ee4:	ed73 7a01 	vldmdb	r3!, {s15}
 8004ee8:	3a01      	subs	r2, #1
 8004eea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004eee:	e7d2      	b.n	8004e96 <__kernel_rem_pio2f+0x41e>
 8004ef0:	eef0 7a47 	vmov.f32	s15, s14
 8004ef4:	e7d4      	b.n	8004ea0 <__kernel_rem_pio2f+0x428>
 8004ef6:	ecb2 7a01 	vldmia	r2!, {s14}
 8004efa:	3301      	adds	r3, #1
 8004efc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004f00:	e7d6      	b.n	8004eb0 <__kernel_rem_pio2f+0x438>
 8004f02:	edd1 7a00 	vldr	s15, [r1]
 8004f06:	edd1 6a01 	vldr	s13, [r1, #4]
 8004f0a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004f0e:	3801      	subs	r0, #1
 8004f10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004f14:	ed81 7a00 	vstr	s14, [r1]
 8004f18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f1c:	edc1 7a01 	vstr	s15, [r1, #4]
 8004f20:	e799      	b.n	8004e56 <__kernel_rem_pio2f+0x3de>
 8004f22:	edd2 7a00 	vldr	s15, [r2]
 8004f26:	edd2 6a01 	vldr	s13, [r2, #4]
 8004f2a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004f2e:	3901      	subs	r1, #1
 8004f30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004f34:	ed82 7a00 	vstr	s14, [r2]
 8004f38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f3c:	edc2 7a01 	vstr	s15, [r2, #4]
 8004f40:	e78e      	b.n	8004e60 <__kernel_rem_pio2f+0x3e8>
 8004f42:	ed33 7a01 	vldmdb	r3!, {s14}
 8004f46:	3c01      	subs	r4, #1
 8004f48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004f4c:	e78f      	b.n	8004e6e <__kernel_rem_pio2f+0x3f6>
 8004f4e:	eef1 6a66 	vneg.f32	s13, s13
 8004f52:	eeb1 7a47 	vneg.f32	s14, s14
 8004f56:	edc8 6a00 	vstr	s13, [r8]
 8004f5a:	ed88 7a01 	vstr	s14, [r8, #4]
 8004f5e:	eef1 7a67 	vneg.f32	s15, s15
 8004f62:	e790      	b.n	8004e86 <__kernel_rem_pio2f+0x40e>

08004f64 <__kernel_sinf>:
 8004f64:	ee10 3a10 	vmov	r3, s0
 8004f68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f6c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8004f70:	da04      	bge.n	8004f7c <__kernel_sinf+0x18>
 8004f72:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004f76:	ee17 3a90 	vmov	r3, s15
 8004f7a:	b35b      	cbz	r3, 8004fd4 <__kernel_sinf+0x70>
 8004f7c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8004f80:	eddf 7a15 	vldr	s15, [pc, #84]	; 8004fd8 <__kernel_sinf+0x74>
 8004f84:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8004fdc <__kernel_sinf+0x78>
 8004f88:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004f8c:	eddf 7a14 	vldr	s15, [pc, #80]	; 8004fe0 <__kernel_sinf+0x7c>
 8004f90:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004f94:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8004fe4 <__kernel_sinf+0x80>
 8004f98:	eea7 6a87 	vfma.f32	s12, s15, s14
 8004f9c:	eddf 7a12 	vldr	s15, [pc, #72]	; 8004fe8 <__kernel_sinf+0x84>
 8004fa0:	ee60 6a07 	vmul.f32	s13, s0, s14
 8004fa4:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004fa8:	b930      	cbnz	r0, 8004fb8 <__kernel_sinf+0x54>
 8004faa:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8004fec <__kernel_sinf+0x88>
 8004fae:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004fb2:	eea6 0a26 	vfma.f32	s0, s12, s13
 8004fb6:	4770      	bx	lr
 8004fb8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8004fbc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8004fc0:	eee0 7a86 	vfma.f32	s15, s1, s12
 8004fc4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8004fc8:	eddf 7a09 	vldr	s15, [pc, #36]	; 8004ff0 <__kernel_sinf+0x8c>
 8004fcc:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8004fd0:	ee30 0a60 	vsub.f32	s0, s0, s1
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	2f2ec9d3 	.word	0x2f2ec9d3
 8004fdc:	b2d72f34 	.word	0xb2d72f34
 8004fe0:	3638ef1b 	.word	0x3638ef1b
 8004fe4:	b9500d01 	.word	0xb9500d01
 8004fe8:	3c088889 	.word	0x3c088889
 8004fec:	be2aaaab 	.word	0xbe2aaaab
 8004ff0:	3e2aaaab 	.word	0x3e2aaaab

08004ff4 <fabsf>:
 8004ff4:	ee10 3a10 	vmov	r3, s0
 8004ff8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ffc:	ee00 3a10 	vmov	s0, r3
 8005000:	4770      	bx	lr
	...

08005004 <floorf>:
 8005004:	ee10 3a10 	vmov	r3, s0
 8005008:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800500c:	3a7f      	subs	r2, #127	; 0x7f
 800500e:	2a16      	cmp	r2, #22
 8005010:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005014:	dc2a      	bgt.n	800506c <floorf+0x68>
 8005016:	2a00      	cmp	r2, #0
 8005018:	da11      	bge.n	800503e <floorf+0x3a>
 800501a:	eddf 7a18 	vldr	s15, [pc, #96]	; 800507c <floorf+0x78>
 800501e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005022:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800502a:	dd05      	ble.n	8005038 <floorf+0x34>
 800502c:	2b00      	cmp	r3, #0
 800502e:	da23      	bge.n	8005078 <floorf+0x74>
 8005030:	4a13      	ldr	r2, [pc, #76]	; (8005080 <floorf+0x7c>)
 8005032:	2900      	cmp	r1, #0
 8005034:	bf18      	it	ne
 8005036:	4613      	movne	r3, r2
 8005038:	ee00 3a10 	vmov	s0, r3
 800503c:	4770      	bx	lr
 800503e:	4911      	ldr	r1, [pc, #68]	; (8005084 <floorf+0x80>)
 8005040:	4111      	asrs	r1, r2
 8005042:	420b      	tst	r3, r1
 8005044:	d0fa      	beq.n	800503c <floorf+0x38>
 8005046:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800507c <floorf+0x78>
 800504a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800504e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005056:	ddef      	ble.n	8005038 <floorf+0x34>
 8005058:	2b00      	cmp	r3, #0
 800505a:	bfbe      	ittt	lt
 800505c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8005060:	fa40 f202 	asrlt.w	r2, r0, r2
 8005064:	189b      	addlt	r3, r3, r2
 8005066:	ea23 0301 	bic.w	r3, r3, r1
 800506a:	e7e5      	b.n	8005038 <floorf+0x34>
 800506c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8005070:	d3e4      	bcc.n	800503c <floorf+0x38>
 8005072:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005076:	4770      	bx	lr
 8005078:	2300      	movs	r3, #0
 800507a:	e7dd      	b.n	8005038 <floorf+0x34>
 800507c:	7149f2ca 	.word	0x7149f2ca
 8005080:	bf800000 	.word	0xbf800000
 8005084:	007fffff 	.word	0x007fffff

08005088 <scalbnf>:
 8005088:	ee10 3a10 	vmov	r3, s0
 800508c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8005090:	d025      	beq.n	80050de <scalbnf+0x56>
 8005092:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8005096:	d302      	bcc.n	800509e <scalbnf+0x16>
 8005098:	ee30 0a00 	vadd.f32	s0, s0, s0
 800509c:	4770      	bx	lr
 800509e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80050a2:	d122      	bne.n	80050ea <scalbnf+0x62>
 80050a4:	4b2a      	ldr	r3, [pc, #168]	; (8005150 <scalbnf+0xc8>)
 80050a6:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8005154 <scalbnf+0xcc>
 80050aa:	4298      	cmp	r0, r3
 80050ac:	ee20 0a27 	vmul.f32	s0, s0, s15
 80050b0:	db16      	blt.n	80050e0 <scalbnf+0x58>
 80050b2:	ee10 3a10 	vmov	r3, s0
 80050b6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80050ba:	3a19      	subs	r2, #25
 80050bc:	4402      	add	r2, r0
 80050be:	2afe      	cmp	r2, #254	; 0xfe
 80050c0:	dd15      	ble.n	80050ee <scalbnf+0x66>
 80050c2:	ee10 3a10 	vmov	r3, s0
 80050c6:	eddf 7a24 	vldr	s15, [pc, #144]	; 8005158 <scalbnf+0xd0>
 80050ca:	eddf 6a24 	vldr	s13, [pc, #144]	; 800515c <scalbnf+0xd4>
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	eeb0 7a67 	vmov.f32	s14, s15
 80050d4:	bfb8      	it	lt
 80050d6:	eef0 7a66 	vmovlt.f32	s15, s13
 80050da:	ee27 0a27 	vmul.f32	s0, s14, s15
 80050de:	4770      	bx	lr
 80050e0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8005160 <scalbnf+0xd8>
 80050e4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80050e8:	4770      	bx	lr
 80050ea:	0dd2      	lsrs	r2, r2, #23
 80050ec:	e7e6      	b.n	80050bc <scalbnf+0x34>
 80050ee:	2a00      	cmp	r2, #0
 80050f0:	dd06      	ble.n	8005100 <scalbnf+0x78>
 80050f2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80050f6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80050fa:	ee00 3a10 	vmov	s0, r3
 80050fe:	4770      	bx	lr
 8005100:	f112 0f16 	cmn.w	r2, #22
 8005104:	da1a      	bge.n	800513c <scalbnf+0xb4>
 8005106:	f24c 3350 	movw	r3, #50000	; 0xc350
 800510a:	4298      	cmp	r0, r3
 800510c:	ee10 3a10 	vmov	r3, s0
 8005110:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005114:	dd0a      	ble.n	800512c <scalbnf+0xa4>
 8005116:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8005158 <scalbnf+0xd0>
 800511a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800515c <scalbnf+0xd4>
 800511e:	eef0 7a40 	vmov.f32	s15, s0
 8005122:	2b00      	cmp	r3, #0
 8005124:	bf18      	it	ne
 8005126:	eeb0 0a47 	vmovne.f32	s0, s14
 800512a:	e7db      	b.n	80050e4 <scalbnf+0x5c>
 800512c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8005160 <scalbnf+0xd8>
 8005130:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8005164 <scalbnf+0xdc>
 8005134:	eef0 7a40 	vmov.f32	s15, s0
 8005138:	2b00      	cmp	r3, #0
 800513a:	e7f3      	b.n	8005124 <scalbnf+0x9c>
 800513c:	3219      	adds	r2, #25
 800513e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005142:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8005146:	eddf 7a08 	vldr	s15, [pc, #32]	; 8005168 <scalbnf+0xe0>
 800514a:	ee07 3a10 	vmov	s14, r3
 800514e:	e7c4      	b.n	80050da <scalbnf+0x52>
 8005150:	ffff3cb0 	.word	0xffff3cb0
 8005154:	4c000000 	.word	0x4c000000
 8005158:	7149f2ca 	.word	0x7149f2ca
 800515c:	f149f2ca 	.word	0xf149f2ca
 8005160:	0da24260 	.word	0x0da24260
 8005164:	8da24260 	.word	0x8da24260
 8005168:	33000000 	.word	0x33000000

0800516c <_init>:
 800516c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800516e:	bf00      	nop
 8005170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005172:	bc08      	pop	{r3}
 8005174:	469e      	mov	lr, r3
 8005176:	4770      	bx	lr

08005178 <_fini>:
 8005178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800517a:	bf00      	nop
 800517c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800517e:	bc08      	pop	{r3}
 8005180:	469e      	mov	lr, r3
 8005182:	4770      	bx	lr
